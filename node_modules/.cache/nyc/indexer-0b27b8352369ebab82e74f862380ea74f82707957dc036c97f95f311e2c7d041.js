/*!
 * indexer.js - abstract interface for bcoin indexers
 * Copyright (c) 2018, the bcoin developers (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_64hgyybtl(){var path="E:\\Projects\\Test\\bcoin\\lib\\indexer\\indexer.js";var hash="4540b9b53a1e60790f3395a24ed6b8ee494653cf";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\indexer\\indexer.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:32}},"1":{start:{line:10,column:13},end:{line:10,column:28}},"2":{start:{line:11,column:11},end:{line:11,column:27}},"3":{start:{line:12,column:12},end:{line:12,column:28}},"4":{start:{line:13,column:21},end:{line:13,column:38}},"5":{start:{line:14,column:15},end:{line:14,column:30}},"6":{start:{line:15,column:16},end:{line:15,column:46}},"7":{start:{line:16,column:13},end:{line:16,column:37}},"8":{start:{line:17,column:15},end:{line:17,column:34}},"9":{start:{line:18,column:17},end:{line:18,column:45}},"10":{start:{line:19,column:14},end:{line:19,column:44}},"11":{start:{line:20,column:20},end:{line:20,column:52}},"12":{start:{line:41,column:4},end:{line:41,column:12}},"13":{start:{line:43,column:4},end:{line:43,column:39}},"14":{start:{line:44,column:4},end:{line:44,column:30}},"15":{start:{line:46,column:4},end:{line:46,column:53}},"16":{start:{line:48,column:4},end:{line:48,column:40}},"17":{start:{line:49,column:4},end:{line:49,column:66}},"18":{start:{line:50,column:4},end:{line:50,column:38}},"19":{start:{line:51,column:4},end:{line:51,column:36}},"20":{start:{line:53,column:4},end:{line:53,column:25}},"21":{start:{line:54,column:4},end:{line:54,column:19}},"22":{start:{line:55,column:4},end:{line:55,column:22}},"23":{start:{line:56,column:4},end:{line:56,column:20}},"24":{start:{line:57,column:4},end:{line:57,column:25}},"25":{start:{line:58,column:4},end:{line:58,column:20}},"26":{start:{line:67,column:4},end:{line:67,column:52}},"27":{start:{line:68,column:4},end:{line:68,column:33}},"28":{start:{line:69,column:4},end:{line:69,column:22}},"29":{start:{line:79,column:4},end:{line:79,column:31}},"30":{start:{line:88,column:4},end:{line:88,column:24}},"31":{start:{line:97,column:4},end:{line:97,column:29}},"32":{start:{line:98,column:4},end:{line:98,column:22}},"33":{start:{line:108,column:4},end:{line:108,column:44}},"34":{start:{line:110,column:4},end:{line:110,column:25}},"35":{start:{line:111,column:4},end:{line:111,column:24}},"36":{start:{line:112,column:4},end:{line:112,column:25}},"37":{start:{line:113,column:4},end:{line:113,column:56}},"38":{start:{line:114,column:4},end:{line:114,column:31}},"39":{start:{line:117,column:17},end:{line:117,column:53}},"40":{start:{line:118,column:4},end:{line:121,column:31}},"41":{start:{line:119,column:6},end:{line:119,column:41}},"42":{start:{line:121,column:6},end:{line:121,column:31}},"43":{start:{line:124,column:4},end:{line:124,column:16}},"44":{start:{line:134,column:4},end:{line:134,column:24}},"45":{start:{line:135,column:4},end:{line:135,column:26}},"46":{start:{line:136,column:4},end:{line:137,column:49}},"47":{start:{line:137,column:6},end:{line:137,column:49}},"48":{start:{line:139,column:4},end:{line:139,column:26}},"49":{start:{line:140,column:4},end:{line:140,column:25}},"50":{start:{line:149,column:4},end:{line:150,column:13}},"51":{start:{line:150,column:6},end:{line:150,column:13}},"52":{start:{line:152,column:4},end:{line:153,column:13}},"53":{start:{line:153,column:6},end:{line:153,column:13}},"54":{start:{line:155,column:4},end:{line:155,column:41}},"55":{start:{line:164,column:14},end:{line:164,column:50}},"56":{start:{line:166,column:4},end:{line:170,column:5}},"57":{start:{line:167,column:6},end:{line:167,column:63}},"58":{start:{line:168,column:6},end:{line:168,column:48}},"59":{start:{line:169,column:6},end:{line:169,column:13}},"60":{start:{line:172,column:18},end:{line:172,column:37}},"61":{start:{line:174,column:4},end:{line:175,column:52}},"62":{start:{line:175,column:6},end:{line:175,column:52}},"63":{start:{line:187,column:4},end:{line:187,column:17}},"64":{start:{line:189,column:18},end:{line:189,column:78}},"65":{start:{line:190,column:17},end:{line:190,column:47}},"66":{start:{line:192,column:4},end:{line:192,column:55}},"67":{start:{line:193,column:4},end:{line:193,column:29}},"68":{start:{line:194,column:4},end:{line:194,column:24}},"69":{start:{line:196,column:4},end:{line:196,column:20}},"70":{start:{line:205,column:21},end:{line:213,column:5}},"71":{start:{line:206,column:19},end:{line:206,column:58}},"72":{start:{line:208,column:6},end:{line:212,column:7}},"73":{start:{line:209,column:8},end:{line:209,column:43}},"74":{start:{line:211,column:8},end:{line:211,column:30}},"75":{start:{line:215,column:4},end:{line:218,column:5}},"76":{start:{line:216,column:6},end:{line:216,column:41}},"77":{start:{line:217,column:6},end:{line:217,column:37}},"78":{start:{line:228,column:18},end:{line:228,column:49}},"79":{start:{line:230,column:4},end:{line:231,column:18}},"80":{start:{line:231,column:6},end:{line:231,column:18}},"81":{start:{line:233,column:4},end:{line:234,column:18}},"82":{start:{line:234,column:6},end:{line:234,column:18}},"83":{start:{line:236,column:4},end:{line:236,column:17}},"84":{start:{line:246,column:17},end:{line:246,column:59}},"85":{start:{line:248,column:4},end:{line:249,column:18}},"86":{start:{line:249,column:6},end:{line:249,column:18}},"87":{start:{line:251,column:4},end:{line:251,column:39}},"88":{start:{line:263,column:4},end:{line:264,column:13}},"89":{start:{line:264,column:6},end:{line:264,column:13}},"90":{start:{line:266,column:4},end:{line:266,column:24}},"91":{start:{line:268,column:22},end:{line:268,column:62}},"92":{start:{line:270,column:4},end:{line:282,column:5}},"93":{start:{line:271,column:6},end:{line:271,column:27}},"94":{start:{line:273,column:6},end:{line:281,column:11}},"95":{start:{line:274,column:8},end:{line:280,column:9}},"96":{start:{line:275,column:10},end:{line:275,column:34}},"97":{start:{line:277,column:10},end:{line:277,column:32}},"98":{start:{line:279,column:10},end:{line:279,column:31}},"99":{start:{line:299,column:4},end:{line:318,column:5}},"100":{start:{line:300,column:6},end:{line:317,column:7}},"101":{start:{line:303,column:21},end:{line:303,column:57}},"102":{start:{line:304,column:8},end:{line:305,column:23}},"103":{start:{line:305,column:10},end:{line:305,column:23}},"104":{start:{line:307,column:8},end:{line:307,column:48}},"105":{start:{line:308,column:8},end:{line:308,column:20}},"106":{start:{line:309,column:13},end:{line:317,column:7}},"107":{start:{line:311,column:24},end:{line:311,column:60}},"108":{start:{line:312,column:8},end:{line:313,column:23}},"109":{start:{line:313,column:10},end:{line:313,column:23}},"110":{start:{line:315,column:8},end:{line:315,column:51}},"111":{start:{line:316,column:8},end:{line:316,column:20}},"112":{start:{line:319,column:4},end:{line:319,column:17}},"113":{start:{line:329,column:17},end:{line:329,column:28}},"114":{start:{line:333,column:4},end:{line:336,column:5}},"115":{start:{line:334,column:6},end:{line:334,column:32}},"116":{start:{line:335,column:6},end:{line:335,column:13}},"117":{start:{line:342,column:4},end:{line:350,column:5}},"118":{start:{line:343,column:19},end:{line:343,column:50}},"119":{start:{line:344,column:6},end:{line:344,column:19}},"120":{start:{line:346,column:6},end:{line:347,column:14}},"121":{start:{line:347,column:8},end:{line:347,column:14}},"122":{start:{line:349,column:6},end:{line:349,column:18}},"123":{start:{line:352,column:4},end:{line:357,column:5}},"124":{start:{line:353,column:6},end:{line:353,column:35}},"125":{start:{line:354,column:6},end:{line:354,column:32}},"126":{start:{line:356,column:6},end:{line:356,column:32}},"127":{start:{line:367,column:4},end:{line:367,column:79}},"128":{start:{line:369,column:4},end:{line:386,column:5}},"129":{start:{line:369,column:22},end:{line:369,column:37}},"130":{start:{line:370,column:20},end:{line:370,column:47}},"131":{start:{line:371,column:6},end:{line:372,column:14}},"132":{start:{line:372,column:8},end:{line:372,column:14}},"133":{start:{line:374,column:19},end:{line:374,column:52}},"134":{start:{line:376,column:20},end:{line:376,column:57}},"135":{start:{line:377,column:6},end:{line:377,column:20}},"136":{start:{line:379,column:19},end:{line:379,column:55}},"137":{start:{line:380,column:6},end:{line:380,column:19}},"138":{start:{line:382,column:6},end:{line:383,column:15}},"139":{start:{line:383,column:8},end:{line:383,column:15}},"140":{start:{line:385,column:6},end:{line:385,column:46}},"141":{start:{line:396,column:4},end:{line:401,column:5}},"142":{start:{line:397,column:6},end:{line:399,column:16}},"143":{start:{line:400,column:6},end:{line:400,column:13}},"144":{start:{line:403,column:4},end:{line:403,column:59}},"145":{start:{line:405,column:4},end:{line:416,column:5}},"146":{start:{line:406,column:19},end:{line:406,column:55}},"147":{start:{line:407,column:6},end:{line:407,column:19}},"148":{start:{line:409,column:20},end:{line:409,column:56}},"149":{start:{line:410,column:6},end:{line:410,column:20}},"150":{start:{line:412,column:19},end:{line:412,column:55}},"151":{start:{line:413,column:6},end:{line:413,column:19}},"152":{start:{line:415,column:6},end:{line:415,column:49}},"153":{start:{line:429,column:18},end:{line:429,column:30}},"154":{start:{line:431,column:4},end:{line:432,column:53}},"155":{start:{line:432,column:6},end:{line:432,column:53}},"156":{start:{line:435,column:4},end:{line:435,column:17}},"157":{start:{line:439,column:4},end:{line:439,column:45}},"158":{start:{line:442,column:19},end:{line:442,column:43}},"159":{start:{line:445,column:4},end:{line:445,column:24}},"160":{start:{line:448,column:4},end:{line:448,column:25}},"161":{start:{line:451,column:4},end:{line:451,column:39}},"162":{start:{line:503,column:18},end:{line:503,column:30}},"163":{start:{line:505,column:4},end:{line:506,column:56}},"164":{start:{line:506,column:6},end:{line:506,column:56}},"165":{start:{line:509,column:4},end:{line:509,column:17}},"166":{start:{line:513,column:4},end:{line:513,column:47}},"167":{start:{line:515,column:17},end:{line:515,column:57}},"168":{start:{line:516,column:4},end:{line:516,column:17}},"169":{start:{line:519,column:19},end:{line:519,column:43}},"170":{start:{line:522,column:4},end:{line:522,column:24}},"171":{start:{line:525,column:4},end:{line:525,column:32}},"172":{start:{line:528,column:4},end:{line:528,column:25}},"173":{start:{line:531,column:4},end:{line:531,column:45}},"174":{start:{line:541,column:4},end:{line:546,column:5}},"175":{start:{line:542,column:6},end:{line:542,column:46}},"176":{start:{line:543,column:6},end:{line:543,column:45}},"177":{start:{line:544,column:11},end:{line:546,column:5}},"178":{start:{line:545,column:6},end:{line:545,column:46}},"179":{start:{line:549,column:4},end:{line:549,column:54}},"180":{start:{line:551,column:16},end:{line:551,column:59}},"181":{start:{line:552,column:4},end:{line:552,column:37}},"182":{start:{line:554,column:4},end:{line:554,column:23}},"183":{start:{line:564,column:4},end:{line:565,column:18}},"184":{start:{line:565,column:6},end:{line:565,column:18}},"185":{start:{line:567,column:4},end:{line:568,column:18}},"186":{start:{line:568,column:6},end:{line:568,column:18}},"187":{start:{line:570,column:4},end:{line:570,column:17}},"188":{start:{line:583,column:4},end:{line:584,column:13}},"189":{start:{line:584,column:6},end:{line:584,column:13}},"190":{start:{line:586,column:20},end:{line:586,column:37}},"191":{start:{line:588,column:16},end:{line:588,column:53}},"192":{start:{line:590,column:4},end:{line:595,column:15}},"193":{start:{line:605,column:4},end:{line:605,column:34}},"194":{start:{line:606,column:4},end:{line:606,column:31}},"195":{start:{line:608,column:4},end:{line:608,column:66}},"196":{start:{line:609,column:4},end:{line:609,column:42}},"197":{start:{line:626,column:4},end:{line:626,column:25}},"198":{start:{line:627,column:4},end:{line:627,column:35}},"199":{start:{line:628,column:4},end:{line:628,column:32}},"200":{start:{line:629,column:4},end:{line:629,column:23}},"201":{start:{line:630,column:4},end:{line:630,column:22}},"202":{start:{line:632,column:4},end:{line:632,column:23}},"203":{start:{line:633,column:4},end:{line:633,column:25}},"204":{start:{line:634,column:4},end:{line:634,column:23}},"205":{start:{line:635,column:4},end:{line:635,column:23}},"206":{start:{line:636,column:4},end:{line:636,column:30}},"207":{start:{line:637,column:4},end:{line:637,column:28}},"208":{start:{line:639,column:4},end:{line:640,column:32}},"209":{start:{line:640,column:6},end:{line:640,column:32}},"210":{start:{line:651,column:4},end:{line:652,column:45}},"211":{start:{line:653,column:4},end:{line:654,column:38}},"212":{start:{line:655,column:4},end:{line:655,column:58}},"213":{start:{line:657,column:4},end:{line:657,column:33}},"214":{start:{line:658,column:4},end:{line:658,column:31}},"215":{start:{line:660,column:4},end:{line:661,column:50}},"216":{start:{line:661,column:6},end:{line:661,column:50}},"217":{start:{line:663,column:4},end:{line:666,column:5}},"218":{start:{line:664,column:6},end:{line:664,column:49}},"219":{start:{line:665,column:6},end:{line:665,column:35}},"220":{start:{line:668,column:4},end:{line:673,column:5}},"221":{start:{line:669,column:6},end:{line:669,column:49}},"222":{start:{line:670,column:6},end:{line:670,column:35}},"223":{start:{line:671,column:6},end:{line:671,column:52}},"224":{start:{line:672,column:6},end:{line:672,column:58}},"225":{start:{line:675,column:4},end:{line:678,column:5}},"226":{start:{line:676,column:6},end:{line:676,column:51}},"227":{start:{line:677,column:6},end:{line:677,column:39}},"228":{start:{line:680,column:4},end:{line:683,column:5}},"229":{start:{line:681,column:6},end:{line:681,column:50}},"230":{start:{line:682,column:6},end:{line:682,column:35}},"231":{start:{line:685,column:4},end:{line:688,column:5}},"232":{start:{line:686,column:6},end:{line:686,column:60}},"233":{start:{line:687,column:6},end:{line:687,column:39}},"234":{start:{line:690,column:4},end:{line:693,column:5}},"235":{start:{line:691,column:6},end:{line:691,column:80}},"236":{start:{line:692,column:6},end:{line:692,column:41}},"237":{start:{line:695,column:4},end:{line:698,column:5}},"238":{start:{line:696,column:6},end:{line:696,column:55}},"239":{start:{line:697,column:6},end:{line:697,column:45}},"240":{start:{line:700,column:4},end:{line:700,column:16}},"241":{start:{line:710,column:4},end:{line:710,column:43}},"242":{start:{line:718,column:0},end:{line:718,column:25}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:40,column:2},end:{line:40,column:3}},loc:{start:{line:40,column:31},end:{line:59,column:3}},line:40},"1":{name:"(anonymous_1)",decl:{start:{line:66,column:2},end:{line:66,column:3}},loc:{start:{line:66,column:10},end:{line:70,column:3}},line:66},"2":{name:"(anonymous_2)",decl:{start:{line:78,column:2},end:{line:78,column:3}},loc:{start:{line:78,column:18},end:{line:80,column:3}},line:78},"3":{name:"(anonymous_3)",decl:{start:{line:87,column:2},end:{line:87,column:3}},loc:{start:{line:87,column:11},end:{line:89,column:3}},line:87},"4":{name:"(anonymous_4)",decl:{start:{line:96,column:2},end:{line:96,column:3}},loc:{start:{line:96,column:17},end:{line:99,column:3}},line:96},"5":{name:"(anonymous_5)",decl:{start:{line:107,column:2},end:{line:107,column:3}},loc:{start:{line:107,column:15},end:{line:125,column:3}},line:107},"6":{name:"(anonymous_6)",decl:{start:{line:133,column:2},end:{line:133,column:3}},loc:{start:{line:133,column:16},end:{line:141,column:3}},line:133},"7":{name:"(anonymous_7)",decl:{start:{line:148,column:2},end:{line:148,column:3}},loc:{start:{line:148,column:17},end:{line:156,column:3}},line:148},"8":{name:"(anonymous_8)",decl:{start:{line:163,column:2},end:{line:163,column:3}},loc:{start:{line:163,column:24},end:{line:176,column:3}},line:163},"9":{name:"(anonymous_9)",decl:{start:{line:186,column:2},end:{line:186,column:3}},loc:{start:{line:186,column:22},end:{line:197,column:3}},line:186},"10":{name:"(anonymous_10)",decl:{start:{line:204,column:2},end:{line:204,column:3}},loc:{start:{line:204,column:9},end:{line:219,column:3}},line:204},"11":{name:"(anonymous_11)",decl:{start:{line:205,column:21},end:{line:205,column:22}},loc:{start:{line:205,column:51},end:{line:213,column:5}},line:205},"12":{name:"(anonymous_12)",decl:{start:{line:227,column:2},end:{line:227,column:3}},loc:{start:{line:227,column:23},end:{line:237,column:3}},line:227},"13":{name:"(anonymous_13)",decl:{start:{line:245,column:2},end:{line:245,column:3}},loc:{start:{line:245,column:29},end:{line:252,column:3}},line:245},"14":{name:"(anonymous_14)",decl:{start:{line:262,column:2},end:{line:262,column:3}},loc:{start:{line:262,column:32},end:{line:283,column:3}},line:262},"15":{name:"(anonymous_15)",decl:{start:{line:273,column:7},end:{line:273,column:8}},loc:{start:{line:273,column:19},end:{line:281,column:7}},line:273},"16":{name:"(anonymous_16)",decl:{start:{line:294,column:2},end:{line:294,column:3}},loc:{start:{line:294,column:38},end:{line:320,column:3}},line:294},"17":{name:"(anonymous_17)",decl:{start:{line:328,column:2},end:{line:328,column:3}},loc:{start:{line:328,column:21},end:{line:358,column:3}},line:328},"18":{name:"(anonymous_18)",decl:{start:{line:366,column:2},end:{line:366,column:3}},loc:{start:{line:366,column:23},end:{line:387,column:3}},line:366},"19":{name:"(anonymous_19)",decl:{start:{line:395,column:2},end:{line:395,column:3}},loc:{start:{line:395,column:26},end:{line:417,column:3}},line:395},"20":{name:"(anonymous_20)",decl:{start:{line:428,column:2},end:{line:428,column:3}},loc:{start:{line:428,column:37},end:{line:452,column:3}},line:428},"21":{name:"(anonymous_21)",decl:{start:{line:463,column:2},end:{line:463,column:3}},loc:{start:{line:463,column:38},end:{line:465,column:3}},line:463},"22":{name:"(anonymous_22)",decl:{start:{line:476,column:2},end:{line:476,column:3}},loc:{start:{line:476,column:40},end:{line:478,column:3}},line:476},"23":{name:"(anonymous_23)",decl:{start:{line:489,column:2},end:{line:489,column:3}},loc:{start:{line:489,column:38},end:{line:491,column:3}},line:489},"24":{name:"(anonymous_24)",decl:{start:{line:502,column:2},end:{line:502,column:3}},loc:{start:{line:502,column:40},end:{line:532,column:3}},line:502},"25":{name:"(anonymous_25)",decl:{start:{line:540,column:2},end:{line:540,column:3}},loc:{start:{line:540,column:22},end:{line:555,column:3}},line:540},"26":{name:"(anonymous_26)",decl:{start:{line:563,column:2},end:{line:563,column:3}},loc:{start:{line:563,column:11},end:{line:571,column:3}},line:563},"27":{name:"(anonymous_27)",decl:{start:{line:582,column:2},end:{line:582,column:3}},loc:{start:{line:582,column:41},end:{line:596,column:3}},line:582},"28":{name:"(anonymous_28)",decl:{start:{line:604,column:2},end:{line:604,column:3}},loc:{start:{line:604,column:28},end:{line:610,column:3}},line:604},"29":{name:"(anonymous_29)",decl:{start:{line:625,column:2},end:{line:625,column:3}},loc:{start:{line:625,column:31},end:{line:641,column:3}},line:625},"30":{name:"(anonymous_30)",decl:{start:{line:650,column:2},end:{line:650,column:3}},loc:{start:{line:650,column:23},end:{line:701,column:3}},line:650},"31":{name:"(anonymous_31)",decl:{start:{line:709,column:2},end:{line:709,column:3}},loc:{start:{line:709,column:30},end:{line:711,column:3}},line:709}},branchMap:{"0":{loc:{start:{line:118,column:4},end:{line:121,column:31}},type:"if",locations:[{start:{line:118,column:4},end:{line:121,column:31}},{start:{line:118,column:4},end:{line:121,column:31}}],line:118},"1":{loc:{start:{line:149,column:4},end:{line:150,column:13}},type:"if",locations:[{start:{line:149,column:4},end:{line:150,column:13}},{start:{line:149,column:4},end:{line:150,column:13}}],line:149},"2":{loc:{start:{line:152,column:4},end:{line:153,column:13}},type:"if",locations:[{start:{line:152,column:4},end:{line:153,column:13}},{start:{line:152,column:4},end:{line:153,column:13}}],line:152},"3":{loc:{start:{line:166,column:4},end:{line:170,column:5}},type:"if",locations:[{start:{line:166,column:4},end:{line:170,column:5}},{start:{line:166,column:4},end:{line:170,column:5}}],line:166},"4":{loc:{start:{line:174,column:4},end:{line:175,column:52}},type:"if",locations:[{start:{line:174,column:4},end:{line:175,column:52}},{start:{line:174,column:4},end:{line:175,column:52}}],line:174},"5":{loc:{start:{line:230,column:4},end:{line:231,column:18}},type:"if",locations:[{start:{line:230,column:4},end:{line:231,column:18}},{start:{line:230,column:4},end:{line:231,column:18}}],line:230},"6":{loc:{start:{line:233,column:4},end:{line:234,column:18}},type:"if",locations:[{start:{line:233,column:4},end:{line:234,column:18}},{start:{line:233,column:4},end:{line:234,column:18}}],line:233},"7":{loc:{start:{line:248,column:4},end:{line:249,column:18}},type:"if",locations:[{start:{line:248,column:4},end:{line:249,column:18}},{start:{line:248,column:4},end:{line:249,column:18}}],line:248},"8":{loc:{start:{line:263,column:4},end:{line:264,column:13}},type:"if",locations:[{start:{line:263,column:4},end:{line:264,column:13}},{start:{line:263,column:4},end:{line:264,column:13}}],line:263},"9":{loc:{start:{line:270,column:4},end:{line:282,column:5}},type:"if",locations:[{start:{line:270,column:4},end:{line:282,column:5}},{start:{line:270,column:4},end:{line:282,column:5}}],line:270},"10":{loc:{start:{line:299,column:4},end:{line:318,column:5}},type:"if",locations:[{start:{line:299,column:4},end:{line:318,column:5}},{start:{line:299,column:4},end:{line:318,column:5}}],line:299},"11":{loc:{start:{line:299,column:8},end:{line:299,column:29}},type:"binary-expr",locations:[{start:{line:299,column:8},end:{line:299,column:12}},{start:{line:299,column:16},end:{line:299,column:21}},{start:{line:299,column:25},end:{line:299,column:29}}],line:299},"12":{loc:{start:{line:300,column:6},end:{line:317,column:7}},type:"if",locations:[{start:{line:300,column:6},end:{line:317,column:7}},{start:{line:300,column:6},end:{line:317,column:7}}],line:300},"13":{loc:{start:{line:304,column:8},end:{line:305,column:23}},type:"if",locations:[{start:{line:304,column:8},end:{line:305,column:23}},{start:{line:304,column:8},end:{line:305,column:23}}],line:304},"14":{loc:{start:{line:309,column:13},end:{line:317,column:7}},type:"if",locations:[{start:{line:309,column:13},end:{line:317,column:7}},{start:{line:309,column:13},end:{line:317,column:7}}],line:309},"15":{loc:{start:{line:312,column:8},end:{line:313,column:23}},type:"if",locations:[{start:{line:312,column:8},end:{line:313,column:23}},{start:{line:312,column:8},end:{line:313,column:23}}],line:312},"16":{loc:{start:{line:333,column:4},end:{line:336,column:5}},type:"if",locations:[{start:{line:333,column:4},end:{line:336,column:5}},{start:{line:333,column:4},end:{line:336,column:5}}],line:333},"17":{loc:{start:{line:346,column:6},end:{line:347,column:14}},type:"if",locations:[{start:{line:346,column:6},end:{line:347,column:14}},{start:{line:346,column:6},end:{line:347,column:14}}],line:346},"18":{loc:{start:{line:352,column:4},end:{line:357,column:5}},type:"if",locations:[{start:{line:352,column:4},end:{line:357,column:5}},{start:{line:352,column:4},end:{line:357,column:5}}],line:352},"19":{loc:{start:{line:371,column:6},end:{line:372,column:14}},type:"if",locations:[{start:{line:371,column:6},end:{line:372,column:14}},{start:{line:371,column:6},end:{line:372,column:14}}],line:371},"20":{loc:{start:{line:382,column:6},end:{line:383,column:15}},type:"if",locations:[{start:{line:382,column:6},end:{line:383,column:15}},{start:{line:382,column:6},end:{line:383,column:15}}],line:382},"21":{loc:{start:{line:396,column:4},end:{line:401,column:5}},type:"if",locations:[{start:{line:396,column:4},end:{line:401,column:5}},{start:{line:396,column:4},end:{line:401,column:5}}],line:396},"22":{loc:{start:{line:405,column:11},end:{line:405,column:50}},type:"binary-expr",locations:[{start:{line:405,column:11},end:{line:405,column:31}},{start:{line:405,column:35},end:{line:405,column:50}}],line:405},"23":{loc:{start:{line:431,column:4},end:{line:432,column:53}},type:"if",locations:[{start:{line:431,column:4},end:{line:432,column:53}},{start:{line:431,column:4},end:{line:432,column:53}}],line:431},"24":{loc:{start:{line:505,column:4},end:{line:506,column:56}},type:"if",locations:[{start:{line:505,column:4},end:{line:506,column:56}},{start:{line:505,column:4},end:{line:506,column:56}}],line:505},"25":{loc:{start:{line:541,column:4},end:{line:546,column:5}},type:"if",locations:[{start:{line:541,column:4},end:{line:546,column:5}},{start:{line:541,column:4},end:{line:546,column:5}}],line:541},"26":{loc:{start:{line:544,column:11},end:{line:546,column:5}},type:"if",locations:[{start:{line:544,column:11},end:{line:546,column:5}},{start:{line:544,column:11},end:{line:546,column:5}}],line:544},"27":{loc:{start:{line:564,column:4},end:{line:565,column:18}},type:"if",locations:[{start:{line:564,column:4},end:{line:565,column:18}},{start:{line:564,column:4},end:{line:565,column:18}}],line:564},"28":{loc:{start:{line:564,column:8},end:{line:564,column:51}},type:"binary-expr",locations:[{start:{line:564,column:8},end:{line:564,column:25}},{start:{line:564,column:29},end:{line:564,column:51}}],line:564},"29":{loc:{start:{line:567,column:4},end:{line:568,column:18}},type:"if",locations:[{start:{line:567,column:4},end:{line:568,column:18}},{start:{line:567,column:4},end:{line:568,column:18}}],line:567},"30":{loc:{start:{line:583,column:4},end:{line:584,column:13}},type:"if",locations:[{start:{line:583,column:4},end:{line:584,column:13}},{start:{line:583,column:4},end:{line:584,column:13}}],line:583},"31":{loc:{start:{line:588,column:16},end:{line:588,column:53}},type:"cond-expr",locations:[{start:{line:588,column:26},end:{line:588,column:40}},{start:{line:588,column:43},end:{line:588,column:53}}],line:588},"32":{loc:{start:{line:605,column:16},end:{line:605,column:33}},type:"binary-expr",locations:[{start:{line:605,column:16},end:{line:605,column:20}},{start:{line:605,column:24},end:{line:605,column:33}}],line:605},"33":{loc:{start:{line:606,column:19},end:{line:606,column:30}},type:"binary-expr",locations:[{start:{line:606,column:19},end:{line:606,column:25}},{start:{line:606,column:29},end:{line:606,column:30}}],line:606},"34":{loc:{start:{line:608,column:11},end:{line:608,column:64}},type:"binary-expr",locations:[{start:{line:608,column:11},end:{line:608,column:37}},{start:{line:608,column:41},end:{line:608,column:64}}],line:608},"35":{loc:{start:{line:639,column:4},end:{line:640,column:32}},type:"if",locations:[{start:{line:639,column:4},end:{line:640,column:32}},{start:{line:639,column:4},end:{line:640,column:32}}],line:639},"36":{loc:{start:{line:651,column:11},end:{line:651,column:63}},type:"binary-expr",locations:[{start:{line:651,column:11},end:{line:651,column:25}},{start:{line:651,column:29},end:{line:651,column:63}}],line:651},"37":{loc:{start:{line:653,column:11},end:{line:653,column:61}},type:"binary-expr",locations:[{start:{line:653,column:11},end:{line:653,column:24}},{start:{line:653,column:28},end:{line:653,column:61}}],line:653},"38":{loc:{start:{line:660,column:4},end:{line:661,column:50}},type:"if",locations:[{start:{line:660,column:4},end:{line:661,column:50}},{start:{line:660,column:4},end:{line:661,column:50}}],line:660},"39":{loc:{start:{line:663,column:4},end:{line:666,column:5}},type:"if",locations:[{start:{line:663,column:4},end:{line:666,column:5}},{start:{line:663,column:4},end:{line:666,column:5}}],line:663},"40":{loc:{start:{line:668,column:4},end:{line:673,column:5}},type:"if",locations:[{start:{line:668,column:4},end:{line:673,column:5}},{start:{line:668,column:4},end:{line:673,column:5}}],line:668},"41":{loc:{start:{line:675,column:4},end:{line:678,column:5}},type:"if",locations:[{start:{line:675,column:4},end:{line:678,column:5}},{start:{line:675,column:4},end:{line:678,column:5}}],line:675},"42":{loc:{start:{line:680,column:4},end:{line:683,column:5}},type:"if",locations:[{start:{line:680,column:4},end:{line:683,column:5}},{start:{line:680,column:4},end:{line:683,column:5}}],line:680},"43":{loc:{start:{line:685,column:4},end:{line:688,column:5}},type:"if",locations:[{start:{line:685,column:4},end:{line:688,column:5}},{start:{line:685,column:4},end:{line:688,column:5}}],line:685},"44":{loc:{start:{line:690,column:4},end:{line:693,column:5}},type:"if",locations:[{start:{line:690,column:4},end:{line:693,column:5}},{start:{line:690,column:4},end:{line:693,column:5}}],line:690},"45":{loc:{start:{line:691,column:13},end:{line:691,column:78}},type:"binary-expr",locations:[{start:{line:691,column:13},end:{line:691,column:52}},{start:{line:691,column:56},end:{line:691,column:78}}],line:691},"46":{loc:{start:{line:695,column:4},end:{line:698,column:5}},type:"if",locations:[{start:{line:695,column:4},end:{line:698,column:5}},{start:{line:695,column:4},end:{line:698,column:5}}],line:695}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4540b9b53a1e60790f3395a24ed6b8ee494653cf"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_64hgyybtl=function(){return actualCoverage;};}return actualCoverage;}cov_64hgyybtl();const assert=(cov_64hgyybtl().s[0]++,require('assert'));const path=(cov_64hgyybtl().s[1]++,require('path'));const fs=(cov_64hgyybtl().s[2]++,require('bfile'));const bio=(cov_64hgyybtl().s[3]++,require('bufio'));const EventEmitter=(cov_64hgyybtl().s[4]++,require('events'));const Logger=(cov_64hgyybtl().s[5]++,require('blgr'));const Network=(cov_64hgyybtl().s[6]++,require('../protocol/network'));const util=(cov_64hgyybtl().s[7]++,require('../utils/util'));const layout=(cov_64hgyybtl().s[8]++,require('./layout'));const CoinView=(cov_64hgyybtl().s[9]++,require('../coins/coinview'));const Block=(cov_64hgyybtl().s[10]++,require('../primitives/block'));const{ZERO_HASH}=(cov_64hgyybtl().s[11]++,require('../protocol/consensus'));/**
 * Indexer
 * The class which indexers inherit from and implement the
 * `indexBlock` and `unindexBlock` methods and database
 * and storage initialization for indexing blocks.
 * @alias module:indexer.Indexer
 * @extends EventEmitter
 * @abstract
 */class Indexer extends EventEmitter{/**
   * Create an indexer.
   * @constructor
   * @param {String} module
   * @param {Object} options
   */constructor(module,options){cov_64hgyybtl().f[0]++;cov_64hgyybtl().s[12]++;super();cov_64hgyybtl().s[13]++;assert(typeof module==='string');cov_64hgyybtl().s[14]++;assert(module.length>0);cov_64hgyybtl().s[15]++;this.options=new IndexOptions(module,options);cov_64hgyybtl().s[16]++;this.network=this.options.network;cov_64hgyybtl().s[17]++;this.logger=this.options.logger.context(`${module}indexer`);cov_64hgyybtl().s[18]++;this.blocks=this.options.blocks;cov_64hgyybtl().s[19]++;this.chain=this.options.chain;cov_64hgyybtl().s[20]++;this.closing=false;cov_64hgyybtl().s[21]++;this.db=null;cov_64hgyybtl().s[22]++;this.batch=null;cov_64hgyybtl().s[23]++;this.bound=[];cov_64hgyybtl().s[24]++;this.syncing=false;cov_64hgyybtl().s[25]++;this.height=0;}/**
   * Start a new batch write.
   * @returns {Batch}
   */start(){cov_64hgyybtl().f[1]++;cov_64hgyybtl().s[26]++;assert(this.batch===null,'Already started.');cov_64hgyybtl().s[27]++;this.batch=this.db.batch();cov_64hgyybtl().s[28]++;return this.batch;}/**
   * Put key and value to the current batch.
   * @param {String} key
   * @param {Buffer} value
   */put(key,value){cov_64hgyybtl().f[2]++;cov_64hgyybtl().s[29]++;this.batch.put(key,value);}/**
   * Delete key from the current batch.
   * @param {String} key
   */del(key){cov_64hgyybtl().f[3]++;cov_64hgyybtl().s[30]++;this.batch.del(key);}/**
   * Commit the current batch.
   * @returns {Promise}
   */async commit(){cov_64hgyybtl().f[4]++;cov_64hgyybtl().s[31]++;await this.batch.write();cov_64hgyybtl().s[32]++;this.batch=null;}/**
   * Open the indexer, open the database,
   * initialize height, and bind to events.
   * @returns {Promise}
   */async open(){cov_64hgyybtl().f[5]++;cov_64hgyybtl().s[33]++;this.logger.info('Indexer is loading.');cov_64hgyybtl().s[34]++;this.closing=false;cov_64hgyybtl().s[35]++;await this.ensure();cov_64hgyybtl().s[36]++;await this.db.open();cov_64hgyybtl().s[37]++;await this.db.verify(layout.V.encode(),'index',0);cov_64hgyybtl().s[38]++;await this.verifyNetwork();// Initialize the indexed height.
const data=(cov_64hgyybtl().s[39]++,await this.db.get(layout.R.encode()));cov_64hgyybtl().s[40]++;if(data){cov_64hgyybtl().b[0][0]++;cov_64hgyybtl().s[41]++;this.height=bio.readU32(data,0);}else{cov_64hgyybtl().b[0][1]++;cov_64hgyybtl().s[42]++;await this.saveGenesis();}// Bind to chain events.
cov_64hgyybtl().s[43]++;this.bind();}/**
   * Close the indexer, wait for the database to close,
   * unbind all events.
   * @returns {Promise}
   */async close(){cov_64hgyybtl().f[6]++;cov_64hgyybtl().s[44]++;this.closing=true;cov_64hgyybtl().s[45]++;await this.db.close();cov_64hgyybtl().s[46]++;for(const[event,listener]of this.bound){cov_64hgyybtl().s[47]++;this.chain.removeListener(event,listener);}cov_64hgyybtl().s[48]++;this.bound.length=0;cov_64hgyybtl().s[49]++;this.closing=false;}/**
   * Ensure prefix directory (prefix/index).
   * @returns {Promise}
   */async ensure(){cov_64hgyybtl().f[7]++;cov_64hgyybtl().s[50]++;if(fs.unsupported){cov_64hgyybtl().b[1][0]++;cov_64hgyybtl().s[51]++;return;}else{cov_64hgyybtl().b[1][1]++;}cov_64hgyybtl().s[52]++;if(this.options.memory){cov_64hgyybtl().b[2][0]++;cov_64hgyybtl().s[53]++;return;}else{cov_64hgyybtl().b[2][1]++;}cov_64hgyybtl().s[54]++;await fs.mkdirp(this.options.prefix);}/**
   * Verify network of index.
   * @returns {Promise}
   */async verifyNetwork(){cov_64hgyybtl().f[8]++;let raw=(cov_64hgyybtl().s[55]++,await this.db.get(layout.O.encode()));cov_64hgyybtl().s[56]++;if(!raw){cov_64hgyybtl().b[3][0]++;cov_64hgyybtl().s[57]++;raw=bio.write(4).writeU32(this.network.magic).render();cov_64hgyybtl().s[58]++;await this.db.put(layout.O.encode(),raw);cov_64hgyybtl().s[59]++;return;}else{cov_64hgyybtl().b[3][1]++;}const magic=(cov_64hgyybtl().s[60]++,bio.readU32(raw,0));cov_64hgyybtl().s[61]++;if(magic!==this.network.magic){cov_64hgyybtl().b[4][0]++;cov_64hgyybtl().s[62]++;throw new Error('Indexer: Network mismatch.');}else{cov_64hgyybtl().b[4][1]++;}}/**
   * A special case for indexing the genesis block. The genesis
   * block coins are not spendable, however indexers can still index
   * the block for historical and informational purposes.
   * @private
   * @returns {Promise}
   */async saveGenesis(){cov_64hgyybtl().f[9]++;cov_64hgyybtl().s[63]++;this.start();const block=(cov_64hgyybtl().s[64]++,Block.fromRaw(Buffer.from(this.network.genesisBlock,'hex')));const meta=(cov_64hgyybtl().s[65]++,new BlockMeta(block.hash(),0));cov_64hgyybtl().s[66]++;await this.indexBlock(meta,block,new CoinView());cov_64hgyybtl().s[67]++;await this._setTip(meta);cov_64hgyybtl().s[68]++;await this.commit();cov_64hgyybtl().s[69]++;this.height=0;}/**
   * Bind to chain events and save listeners for removal on close
   * @private
   */bind(){cov_64hgyybtl().f[10]++;cov_64hgyybtl().s[70]++;const listener=async(entry,block,view)=>{cov_64hgyybtl().f[11]++;const meta=(cov_64hgyybtl().s[71]++,new BlockMeta(entry.hash,entry.height));cov_64hgyybtl().s[72]++;try{cov_64hgyybtl().s[73]++;await this.sync(meta,block,view);}catch(e){cov_64hgyybtl().s[74]++;this.emit('error',e);}};cov_64hgyybtl().s[75]++;for(const event of['connect','disconnect','reset']){cov_64hgyybtl().s[76]++;this.bound.push([event,listener]);cov_64hgyybtl().s[77]++;this.chain.on(event,listener);}}/**
   * Get a chain entry for the main chain only.
   * @private
   * @returns {Promise}
   */async getEntry(hash){cov_64hgyybtl().f[12]++;const entry=(cov_64hgyybtl().s[78]++,await this.chain.getEntry(hash));cov_64hgyybtl().s[79]++;if(!entry){cov_64hgyybtl().b[5][0]++;cov_64hgyybtl().s[80]++;return null;}else{cov_64hgyybtl().b[5][1]++;}cov_64hgyybtl().s[81]++;if(!(await this.chain.isMainChain(entry))){cov_64hgyybtl().b[6][0]++;cov_64hgyybtl().s[82]++;return null;}else{cov_64hgyybtl().b[6][1]++;}cov_64hgyybtl().s[83]++;return entry;}/**
   * Get a index block meta.
   * @param {Hash} hash
   * @returns {Promise}
   */async getBlockMeta(height){cov_64hgyybtl().f[13]++;const data=(cov_64hgyybtl().s[84]++,await this.db.get(layout.h.encode(height)));cov_64hgyybtl().s[85]++;if(!data){cov_64hgyybtl().b[7][0]++;cov_64hgyybtl().s[86]++;return null;}else{cov_64hgyybtl().b[7][1]++;}cov_64hgyybtl().s[87]++;return new BlockMeta(data,height);}/**
   * Sync with the chain.
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   * @returns {Promise}
   */async sync(meta,block,view){cov_64hgyybtl().f[14]++;cov_64hgyybtl().s[88]++;if(this.syncing){cov_64hgyybtl().b[8][0]++;cov_64hgyybtl().s[89]++;return;}else{cov_64hgyybtl().b[8][1]++;}cov_64hgyybtl().s[90]++;this.syncing=true;const connected=(cov_64hgyybtl().s[91]++,await this._syncBlock(meta,block,view));cov_64hgyybtl().s[92]++;if(connected){cov_64hgyybtl().b[9][0]++;cov_64hgyybtl().s[93]++;this.syncing=false;}else{cov_64hgyybtl().b[9][1]++;cov_64hgyybtl().s[94]++;(async()=>{cov_64hgyybtl().f[15]++;cov_64hgyybtl().s[95]++;try{cov_64hgyybtl().s[96]++;await this._syncChain();}catch(e){cov_64hgyybtl().s[97]++;this.emit('error',e);}finally{cov_64hgyybtl().s[98]++;this.syncing=false;}})();}}/**
   * Sync with the chain with a block.
   * @private
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   * @returns {Promise}
   */async _syncBlock(meta,block,view){cov_64hgyybtl().f[16]++;cov_64hgyybtl().s[99]++;// In the case that the next block is being
// connected or the current block disconnected
// use the block and view being passed directly,
// instead of reading that information again.
if((cov_64hgyybtl().b[11][0]++,meta)&&(cov_64hgyybtl().b[11][1]++,block)&&(cov_64hgyybtl().b[11][2]++,view)){cov_64hgyybtl().b[10][0]++;cov_64hgyybtl().s[100]++;if(meta.height===this.height+1){cov_64hgyybtl().b[12][0]++;// Make sure that the block is connected to
// the indexer chain.
const prev=(cov_64hgyybtl().s[101]++,await this.getBlockMeta(this.height));cov_64hgyybtl().s[102]++;if(prev.hash.compare(block.prevBlock)!==0){cov_64hgyybtl().b[13][0]++;cov_64hgyybtl().s[103]++;return false;}else{cov_64hgyybtl().b[13][1]++;}cov_64hgyybtl().s[104]++;await this._addBlock(meta,block,view);cov_64hgyybtl().s[105]++;return true;}else{cov_64hgyybtl().b[12][1]++;cov_64hgyybtl().s[106]++;if(meta.height===this.height){cov_64hgyybtl().b[14][0]++;// Make sure that this is the current block.
const current=(cov_64hgyybtl().s[107]++,await this.getBlockMeta(this.height));cov_64hgyybtl().s[108]++;if(current.hash.compare(block.hash())!==0){cov_64hgyybtl().b[15][0]++;cov_64hgyybtl().s[109]++;return false;}else{cov_64hgyybtl().b[15][1]++;}cov_64hgyybtl().s[110]++;await this._removeBlock(meta,block,view);cov_64hgyybtl().s[111]++;return true;}else{cov_64hgyybtl().b[14][1]++;}}}else{cov_64hgyybtl().b[10][1]++;}cov_64hgyybtl().s[112]++;return false;}/**
   * Sync with the chain.
   * @private
   * @returns {Promise}
   */async _syncChain(){cov_64hgyybtl().f[17]++;let height=(cov_64hgyybtl().s[113]++,this.height);// In the case that the indexer has never
// started, sync to the best height.
cov_64hgyybtl().s[114]++;if(!height){cov_64hgyybtl().b[16][0]++;cov_64hgyybtl().s[115]++;await this._rollforward();cov_64hgyybtl().s[116]++;return;}else{cov_64hgyybtl().b[16][1]++;}// Check for a re-org that might
// leave chain in a different state.
// Scan chain backwards until we
// find a common height.
cov_64hgyybtl().s[117]++;while(height>0){const meta=(cov_64hgyybtl().s[118]++,await this.getBlockMeta(height));cov_64hgyybtl().s[119]++;assert(meta);cov_64hgyybtl().s[120]++;if(await this.getEntry(meta.hash)){cov_64hgyybtl().b[17][0]++;cov_64hgyybtl().s[121]++;break;}else{cov_64hgyybtl().b[17][1]++;}cov_64hgyybtl().s[122]++;height-=1;}cov_64hgyybtl().s[123]++;if(height<this.height){cov_64hgyybtl().b[18][0]++;cov_64hgyybtl().s[124]++;await this._rollback(height);cov_64hgyybtl().s[125]++;await this._rollforward();}else{cov_64hgyybtl().b[18][1]++;cov_64hgyybtl().s[126]++;await this._rollforward();}}/**
   * Scan blockchain to the best chain height.
   * @private
   * @returns {Promise}
   */async _rollforward(){cov_64hgyybtl().f[18]++;cov_64hgyybtl().s[127]++;this.logger.info('Indexing to best height from height (%d).',this.height);cov_64hgyybtl().s[128]++;for(let height=(cov_64hgyybtl().s[129]++,this.height+1);;height++){const entry=(cov_64hgyybtl().s[130]++,await this.getEntry(height));cov_64hgyybtl().s[131]++;if(!entry){cov_64hgyybtl().b[19][0]++;cov_64hgyybtl().s[132]++;break;}else{cov_64hgyybtl().b[19][1]++;}const meta=(cov_64hgyybtl().s[133]++,new BlockMeta(entry.hash,height));const block=(cov_64hgyybtl().s[134]++,await this.chain.getBlock(entry.hash));cov_64hgyybtl().s[135]++;assert(block);const view=(cov_64hgyybtl().s[136]++,await this.chain.getBlockView(block));cov_64hgyybtl().s[137]++;assert(view);cov_64hgyybtl().s[138]++;if(this.closing){cov_64hgyybtl().b[20][0]++;cov_64hgyybtl().s[139]++;return;}else{cov_64hgyybtl().b[20][1]++;}cov_64hgyybtl().s[140]++;await this._addBlock(meta,block,view);}}/**
   * Rollback to a given chain height.
   * @param {Number} height
   * @returns {Promise}
   */async _rollback(height){cov_64hgyybtl().f[19]++;cov_64hgyybtl().s[141]++;if(height>this.height){cov_64hgyybtl().b[21][0]++;cov_64hgyybtl().s[142]++;this.logger.warning('Ignoring rollback to future height (%d).',height);cov_64hgyybtl().s[143]++;return;}else{cov_64hgyybtl().b[21][1]++;}cov_64hgyybtl().s[144]++;this.logger.info('Rolling back to height %d.',height);cov_64hgyybtl().s[145]++;while((cov_64hgyybtl().b[22][0]++,this.height>height)&&(cov_64hgyybtl().b[22][1]++,this.height>1)){const meta=(cov_64hgyybtl().s[146]++,await this.getBlockMeta(this.height));cov_64hgyybtl().s[147]++;assert(meta);const block=(cov_64hgyybtl().s[148]++,await this.chain.getBlock(meta.hash));cov_64hgyybtl().s[149]++;assert(block);const view=(cov_64hgyybtl().s[150]++,await this.chain.getBlockView(block));cov_64hgyybtl().s[151]++;assert(view);cov_64hgyybtl().s[152]++;await this._removeBlock(meta,block,view);}}/**
   * Add a block's transactions without a lock.
   * @private
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   * @returns {Promise}
   */async _addBlock(meta,block,view){cov_64hgyybtl().f[20]++;const start=(cov_64hgyybtl().s[153]++,util.bench());cov_64hgyybtl().s[154]++;if(meta.height!==this.height+1){cov_64hgyybtl().b[23][0]++;cov_64hgyybtl().s[155]++;throw new Error('Indexer: Can not add block.');}else{cov_64hgyybtl().b[23][1]++;}// Start the batch write.
cov_64hgyybtl().s[156]++;this.start();// Call the implemented indexer to add to
// the batch write.
cov_64hgyybtl().s[157]++;await this.indexBlock(meta,block,view);// Sync the height to the new tip.
const height=(cov_64hgyybtl().s[158]++,await this._setTip(meta));// Commit the write batch to disk.
cov_64hgyybtl().s[159]++;await this.commit();// Update height _after_ successful commit.
cov_64hgyybtl().s[160]++;this.height=height;// Log the current indexer status.
cov_64hgyybtl().s[161]++;this.logStatus(start,block,meta);}/**
   * Process block indexing
   * Indexers will implement this method to process the block for indexing
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   * @returns {Promise}
   */async indexBlock(meta,block,view){cov_64hgyybtl().f[21]++;;}/**
   * Undo block indexing
   * Indexers will implement this method to undo indexing for the block
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   * @returns {Promise}
   */async unindexBlock(meta,block,view){cov_64hgyybtl().f[22]++;;}/**
   * Prune block indexing
   * Indexers will implement this method to prune indexing for the block
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   * @returns {Promise}
   */async pruneBlock(meta,block,view){cov_64hgyybtl().f[23]++;;}/**
   * Unconfirm a block's transactions.
   * @private
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   * @returns {Promise}
   */async _removeBlock(meta,block,view){cov_64hgyybtl().f[24]++;const start=(cov_64hgyybtl().s[162]++,util.bench());cov_64hgyybtl().s[163]++;if(meta.height!==this.height){cov_64hgyybtl().b[24][0]++;cov_64hgyybtl().s[164]++;throw new Error('Indexer: Can not remove block.');}else{cov_64hgyybtl().b[24][1]++;}// Start the batch write.
cov_64hgyybtl().s[165]++;this.start();// Call the implemented indexer to add to
// the batch write.
cov_64hgyybtl().s[166]++;await this.unindexBlock(meta,block,view);const prev=(cov_64hgyybtl().s[167]++,await this.getBlockMeta(meta.height-1));cov_64hgyybtl().s[168]++;assert(prev);// Sync the height to the previous tip.
const height=(cov_64hgyybtl().s[169]++,await this._setTip(prev));// Commit the write batch to disk.
cov_64hgyybtl().s[170]++;await this.commit();// Prune block data _after_ successful commit.
cov_64hgyybtl().s[171]++;await this.pruneBlock(meta);// Update height _after_ successful commit.
cov_64hgyybtl().s[172]++;this.height=height;// Log the current indexer status.
cov_64hgyybtl().s[173]++;this.logStatus(start,block,meta,true);}/**
   * Update the current height to tip.
   * @param {BlockMeta} tip
   * @returns {Promise}
   */async _setTip(meta){cov_64hgyybtl().f[25]++;cov_64hgyybtl().s[174]++;if(meta.height<this.height){cov_64hgyybtl().b[25][0]++;cov_64hgyybtl().s[175]++;assert(meta.height===this.height-1);cov_64hgyybtl().s[176]++;this.del(layout.h.encode(this.height));}else{cov_64hgyybtl().b[25][1]++;cov_64hgyybtl().s[177]++;if(meta.height>this.height){cov_64hgyybtl().b[26][0]++;cov_64hgyybtl().s[178]++;assert(meta.height===this.height+1);}else{cov_64hgyybtl().b[26][1]++;}}// Add to batch write to save tip and height.
cov_64hgyybtl().s[179]++;this.put(layout.h.encode(meta.height),meta.hash);const raw=(cov_64hgyybtl().s[180]++,bio.write(4).writeU32(meta.height).render());cov_64hgyybtl().s[181]++;this.put(layout.R.encode(),raw);cov_64hgyybtl().s[182]++;return meta.height;}/**
   * Test whether the indexer has reached its slow height.
   * @private
   * @returns {Boolean}
   */isSlow(){cov_64hgyybtl().f[26]++;cov_64hgyybtl().s[183]++;if((cov_64hgyybtl().b[28][0]++,this.height===1)||(cov_64hgyybtl().b[28][1]++,this.height%20===0)){cov_64hgyybtl().b[27][0]++;cov_64hgyybtl().s[184]++;return true;}else{cov_64hgyybtl().b[27][1]++;}cov_64hgyybtl().s[185]++;if(this.height>=this.network.block.slowHeight){cov_64hgyybtl().b[29][0]++;cov_64hgyybtl().s[186]++;return true;}else{cov_64hgyybtl().b[29][1]++;}cov_64hgyybtl().s[187]++;return false;}/**
   * Log the current indexer status.
   * @private
   * @param {Array} start
   * @param {Block} block
   * @param {BlockMeta} meta
   * @param {Boolean} reverse
   */logStatus(start,block,meta,reverse){cov_64hgyybtl().f[27]++;cov_64hgyybtl().s[188]++;if(!this.isSlow()){cov_64hgyybtl().b[30][0]++;cov_64hgyybtl().s[189]++;return;}else{cov_64hgyybtl().b[30][1]++;}const elapsed=(cov_64hgyybtl().s[190]++,util.bench(start));const msg=(cov_64hgyybtl().s[191]++,reverse?(cov_64hgyybtl().b[31][0]++,'removed from'):(cov_64hgyybtl().b[31][1]++,'added to'));cov_64hgyybtl().s[192]++;this.logger.info('Block (%d) %s indexer (txs=%d time=%d).',meta.height,msg,block.txs.length,elapsed);}}/**
 * Block Meta
 */class BlockMeta{constructor(hash,height){cov_64hgyybtl().f[28]++;cov_64hgyybtl().s[193]++;this.hash=(cov_64hgyybtl().b[32][0]++,hash)||(cov_64hgyybtl().b[32][1]++,ZERO_HASH);cov_64hgyybtl().s[194]++;this.height=(cov_64hgyybtl().b[33][0]++,height)||(cov_64hgyybtl().b[33][1]++,0);cov_64hgyybtl().s[195]++;assert((cov_64hgyybtl().b[34][0]++,Buffer.isBuffer(this.hash))&&(cov_64hgyybtl().b[34][1]++,this.hash.length===32));cov_64hgyybtl().s[196]++;assert(Number.isInteger(this.height));}}/**
 * Index Options
 */class IndexOptions{/**
   * Create index options.
   * @constructor
   * @param {String} module
   * @param {Object} options
   */constructor(module,options){cov_64hgyybtl().f[29]++;cov_64hgyybtl().s[197]++;this.module=module;cov_64hgyybtl().s[198]++;this.network=Network.primary;cov_64hgyybtl().s[199]++;this.logger=Logger.global;cov_64hgyybtl().s[200]++;this.blocks=null;cov_64hgyybtl().s[201]++;this.chain=null;cov_64hgyybtl().s[202]++;this.prefix=null;cov_64hgyybtl().s[203]++;this.location=null;cov_64hgyybtl().s[204]++;this.memory=true;cov_64hgyybtl().s[205]++;this.maxFiles=64;cov_64hgyybtl().s[206]++;this.cacheSize=16<<20;cov_64hgyybtl().s[207]++;this.compression=true;cov_64hgyybtl().s[208]++;if(options){cov_64hgyybtl().b[35][0]++;cov_64hgyybtl().s[209]++;this.fromOptions(options);}else{cov_64hgyybtl().b[35][1]++;}}/**
   * Inject properties from object.
   * @private
   * @param {Object} options
   * @returns {IndexOptions}
   */fromOptions(options){cov_64hgyybtl().f[30]++;cov_64hgyybtl().s[210]++;assert((cov_64hgyybtl().b[36][0]++,options.blocks)&&(cov_64hgyybtl().b[36][1]++,typeof options.blocks==='object'),'Indexer requires a blockstore.');cov_64hgyybtl().s[211]++;assert((cov_64hgyybtl().b[37][0]++,options.chain)&&(cov_64hgyybtl().b[37][1]++,typeof options.chain==='object'),'Indexer requires chain.');cov_64hgyybtl().s[212]++;assert(!options.prune,'Can not index while pruned.');cov_64hgyybtl().s[213]++;this.blocks=options.blocks;cov_64hgyybtl().s[214]++;this.chain=options.chain;cov_64hgyybtl().s[215]++;if(options.network!=null){cov_64hgyybtl().b[38][0]++;cov_64hgyybtl().s[216]++;this.network=Network.get(options.network);}else{cov_64hgyybtl().b[38][1]++;}cov_64hgyybtl().s[217]++;if(options.logger!=null){cov_64hgyybtl().b[39][0]++;cov_64hgyybtl().s[218]++;assert(typeof options.logger==='object');cov_64hgyybtl().s[219]++;this.logger=options.logger;}else{cov_64hgyybtl().b[39][1]++;}cov_64hgyybtl().s[220]++;if(options.prefix!=null){cov_64hgyybtl().b[40][0]++;cov_64hgyybtl().s[221]++;assert(typeof options.prefix==='string');cov_64hgyybtl().s[222]++;this.prefix=options.prefix;cov_64hgyybtl().s[223]++;this.prefix=path.join(this.prefix,'index');cov_64hgyybtl().s[224]++;this.location=path.join(this.prefix,this.module);}else{cov_64hgyybtl().b[40][1]++;}cov_64hgyybtl().s[225]++;if(options.location!=null){cov_64hgyybtl().b[41][0]++;cov_64hgyybtl().s[226]++;assert(typeof options.location==='string');cov_64hgyybtl().s[227]++;this.location=options.location;}else{cov_64hgyybtl().b[41][1]++;}cov_64hgyybtl().s[228]++;if(options.memory!=null){cov_64hgyybtl().b[42][0]++;cov_64hgyybtl().s[229]++;assert(typeof options.memory==='boolean');cov_64hgyybtl().s[230]++;this.memory=options.memory;}else{cov_64hgyybtl().b[42][1]++;}cov_64hgyybtl().s[231]++;if(options.maxFiles!=null){cov_64hgyybtl().b[43][0]++;cov_64hgyybtl().s[232]++;assert(options.maxFiles>>>0===options.maxFiles);cov_64hgyybtl().s[233]++;this.maxFiles=options.maxFiles;}else{cov_64hgyybtl().b[43][1]++;}cov_64hgyybtl().s[234]++;if(options.cacheSize!=null){cov_64hgyybtl().b[44][0]++;cov_64hgyybtl().s[235]++;assert((cov_64hgyybtl().b[45][0]++,Number.isSafeInteger(options.cacheSize))&&(cov_64hgyybtl().b[45][1]++,options.cacheSize>=0));cov_64hgyybtl().s[236]++;this.cacheSize=options.cacheSize;}else{cov_64hgyybtl().b[44][1]++;}cov_64hgyybtl().s[237]++;if(options.compression!=null){cov_64hgyybtl().b[46][0]++;cov_64hgyybtl().s[238]++;assert(typeof options.compression==='boolean');cov_64hgyybtl().s[239]++;this.compression=options.compression;}else{cov_64hgyybtl().b[46][1]++;}cov_64hgyybtl().s[240]++;return this;}/**
   * Instantiate indexer options from object.
   * @param {Object} options
   * @returns {IndexOptions}
   */static fromOptions(options){cov_64hgyybtl().f[31]++;cov_64hgyybtl().s[241]++;return new this().fromOptions(options);}}/*
 * Expose
 */cov_64hgyybtl().s[242]++;module.exports=Indexer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4ZXIuanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsInBhdGgiLCJmcyIsImJpbyIsIkV2ZW50RW1pdHRlciIsIkxvZ2dlciIsIk5ldHdvcmsiLCJ1dGlsIiwibGF5b3V0IiwiQ29pblZpZXciLCJCbG9jayIsIlpFUk9fSEFTSCIsIkluZGV4ZXIiLCJjb25zdHJ1Y3RvciIsIm1vZHVsZSIsIm9wdGlvbnMiLCJsZW5ndGgiLCJJbmRleE9wdGlvbnMiLCJuZXR3b3JrIiwibG9nZ2VyIiwiY29udGV4dCIsImJsb2NrcyIsImNoYWluIiwiY2xvc2luZyIsImRiIiwiYmF0Y2giLCJib3VuZCIsInN5bmNpbmciLCJoZWlnaHQiLCJzdGFydCIsInB1dCIsImtleSIsInZhbHVlIiwiZGVsIiwiY29tbWl0Iiwid3JpdGUiLCJvcGVuIiwiaW5mbyIsImVuc3VyZSIsInZlcmlmeSIsIlYiLCJlbmNvZGUiLCJ2ZXJpZnlOZXR3b3JrIiwiZGF0YSIsImdldCIsIlIiLCJyZWFkVTMyIiwic2F2ZUdlbmVzaXMiLCJiaW5kIiwiY2xvc2UiLCJldmVudCIsImxpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJ1bnN1cHBvcnRlZCIsIm1lbW9yeSIsIm1rZGlycCIsInByZWZpeCIsInJhdyIsIk8iLCJ3cml0ZVUzMiIsIm1hZ2ljIiwicmVuZGVyIiwiRXJyb3IiLCJibG9jayIsImZyb21SYXciLCJCdWZmZXIiLCJmcm9tIiwiZ2VuZXNpc0Jsb2NrIiwibWV0YSIsIkJsb2NrTWV0YSIsImhhc2giLCJpbmRleEJsb2NrIiwiX3NldFRpcCIsImVudHJ5IiwidmlldyIsInN5bmMiLCJlIiwiZW1pdCIsInB1c2giLCJvbiIsImdldEVudHJ5IiwiaXNNYWluQ2hhaW4iLCJnZXRCbG9ja01ldGEiLCJoIiwiY29ubmVjdGVkIiwiX3N5bmNCbG9jayIsIl9zeW5jQ2hhaW4iLCJwcmV2IiwiY29tcGFyZSIsInByZXZCbG9jayIsIl9hZGRCbG9jayIsImN1cnJlbnQiLCJfcmVtb3ZlQmxvY2siLCJfcm9sbGZvcndhcmQiLCJfcm9sbGJhY2siLCJnZXRCbG9jayIsImdldEJsb2NrVmlldyIsIndhcm5pbmciLCJiZW5jaCIsImxvZ1N0YXR1cyIsInVuaW5kZXhCbG9jayIsInBydW5lQmxvY2siLCJpc1Nsb3ciLCJzbG93SGVpZ2h0IiwicmV2ZXJzZSIsImVsYXBzZWQiLCJtc2ciLCJ0eHMiLCJpc0J1ZmZlciIsIk51bWJlciIsImlzSW50ZWdlciIsInByaW1hcnkiLCJnbG9iYWwiLCJsb2NhdGlvbiIsIm1heEZpbGVzIiwiY2FjaGVTaXplIiwiY29tcHJlc3Npb24iLCJmcm9tT3B0aW9ucyIsInBydW5lIiwiam9pbiIsImlzU2FmZUludGVnZXIiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBRUEsYSxnKzlCQVNZO3lGQVBaLEtBQU1BLENBQUFBLE1BQU0seUJBQUdDLE9BQU8sQ0FBQyxRQUFELENBQVYsQ0FBWixDQUNBLEtBQU1DLENBQUFBLElBQUkseUJBQUdELE9BQU8sQ0FBQyxNQUFELENBQVYsQ0FBVixDQUNBLEtBQU1FLENBQUFBLEVBQUUseUJBQUdGLE9BQU8sQ0FBQyxPQUFELENBQVYsQ0FBUixDQUNBLEtBQU1HLENBQUFBLEdBQUcseUJBQUdILE9BQU8sQ0FBQyxPQUFELENBQVYsQ0FBVCxDQUNBLEtBQU1JLENBQUFBLFlBQVkseUJBQUdKLE9BQU8sQ0FBQyxRQUFELENBQVYsQ0FBbEIsQ0FDQSxLQUFNSyxDQUFBQSxNQUFNLHlCQUFHTCxPQUFPLENBQUMsTUFBRCxDQUFWLENBQVosQ0FDQSxLQUFNTSxDQUFBQSxPQUFPLHlCQUFHTixPQUFPLENBQUMscUJBQUQsQ0FBVixDQUFiLENBQ0EsS0FBTU8sQ0FBQUEsSUFBSSx5QkFBR1AsT0FBTyxDQUFDLGVBQUQsQ0FBVixDQUFWLENBQ0EsS0FBTVEsQ0FBQUEsTUFBTSx5QkFBR1IsT0FBTyxDQUFDLFVBQUQsQ0FBVixDQUFaLENBQ0EsS0FBTVMsQ0FBQUEsUUFBUSx5QkFBR1Qs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QUFXc0csV0FBWCxDQUF1QnRHLE9BQXZCLENBQVAsQ0FDRCxDQTlGZ0IsQ0FpR25CO0FBQ0E7QUFDQSxHLHlCQUVBRCxNQUFNLENBQUMyRyxPQUFQLENBQWlCN0csT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogaW5kZXhlci5qcyAtIGFic3RyYWN0IGludGVyZmFjZSBmb3IgYmNvaW4gaW5kZXhlcnNcclxuICogQ29weXJpZ2h0IChjKSAyMDE4LCB0aGUgYmNvaW4gZGV2ZWxvcGVycyAoTUlUIExpY2Vuc2UpLlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmNvaW4tb3JnL2Jjb2luXHJcbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnYmZpbGUnKTtcclxuY29uc3QgYmlvID0gcmVxdWlyZSgnYnVmaW8nKTtcclxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XHJcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJ2JsZ3InKTtcclxuY29uc3QgTmV0d29yayA9IHJlcXVpcmUoJy4uL3Byb3RvY29sL25ldHdvcmsnKTtcclxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWwnKTtcclxuY29uc3QgbGF5b3V0ID0gcmVxdWlyZSgnLi9sYXlvdXQnKTtcclxuY29uc3QgQ29pblZpZXcgPSByZXF1aXJlKCcuLi9jb2lucy9jb2ludmlldycpO1xyXG5jb25zdCBCbG9jayA9IHJlcXVpcmUoJy4uL3ByaW1pdGl2ZXMvYmxvY2snKTtcclxuY29uc3Qge1pFUk9fSEFTSH0gPSByZXF1aXJlKCcuLi9wcm90b2NvbC9jb25zZW5zdXMnKTtcclxuXHJcbi8qKlxyXG4gKiBJbmRleGVyXHJcbiAqIFRoZSBjbGFzcyB3aGljaCBpbmRleGVycyBpbmhlcml0IGZyb20gYW5kIGltcGxlbWVudCB0aGVcclxuICogYGluZGV4QmxvY2tgIGFuZCBgdW5pbmRleEJsb2NrYCBtZXRob2RzIGFuZCBkYXRhYmFzZVxyXG4gKiBhbmQgc3RvcmFnZSBpbml0aWFsaXphdGlvbiBmb3IgaW5kZXhpbmcgYmxvY2tzLlxyXG4gKiBAYWxpYXMgbW9kdWxlOmluZGV4ZXIuSW5kZXhlclxyXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcclxuICogQGFic3RyYWN0XHJcbiAqL1xyXG5cclxuY2xhc3MgSW5kZXhlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGFuIGluZGV4ZXIuXHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1vZHVsZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAgICovXHJcblxyXG4gIGNvbnN0cnVjdG9yKG1vZHVsZSwgb3B0aW9ucykge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBhc3NlcnQodHlwZW9mIG1vZHVsZSA9PT0gJ3N0cmluZycpO1xyXG4gICAgYXNzZXJ0KG1vZHVsZS5sZW5ndGggPiAwKTtcclxuXHJcbiAgICB0aGlzLm9wdGlvbnMgPSBuZXcgSW5kZXhPcHRpb25zKG1vZHVsZSwgb3B0aW9ucyk7XHJcblxyXG4gICAgdGhpcy5uZXR3b3JrID0gdGhpcy5vcHRpb25zLm5ldHdvcms7XHJcbiAgICB0aGlzLmxvZ2dlciA9IHRoaXMub3B0aW9ucy5sb2dnZXIuY29udGV4dChgJHttb2R1bGV9aW5kZXhlcmApO1xyXG4gICAgdGhpcy5ibG9ja3MgPSB0aGlzLm9wdGlvbnMuYmxvY2tzO1xyXG4gICAgdGhpcy5jaGFpbiA9IHRoaXMub3B0aW9ucy5jaGFpbjtcclxuXHJcbiAgICB0aGlzLmNsb3NpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuZGIgPSBudWxsO1xyXG4gICAgdGhpcy5iYXRjaCA9IG51bGw7XHJcbiAgICB0aGlzLmJvdW5kID0gW107XHJcbiAgICB0aGlzLnN5bmNpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuaGVpZ2h0ID0gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IGEgbmV3IGJhdGNoIHdyaXRlLlxyXG4gICAqIEByZXR1cm5zIHtCYXRjaH1cclxuICAgKi9cclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICBhc3NlcnQodGhpcy5iYXRjaCA9PT0gbnVsbCwgJ0FscmVhZHkgc3RhcnRlZC4nKTtcclxuICAgIHRoaXMuYmF0Y2ggPSB0aGlzLmRiLmJhdGNoKCk7XHJcbiAgICByZXR1cm4gdGhpcy5iYXRjaDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFB1dCBrZXkgYW5kIHZhbHVlIHRvIHRoZSBjdXJyZW50IGJhdGNoLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcclxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gdmFsdWVcclxuICAgKi9cclxuXHJcbiAgcHV0KGtleSwgdmFsdWUpIHtcclxuICAgIHRoaXMuYmF0Y2gucHV0KGtleSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVsZXRlIGtleSBmcm9tIHRoZSBjdXJyZW50IGJhdGNoLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcclxuICAgKi9cclxuXHJcbiAgZGVsKGtleSkge1xyXG4gICAgdGhpcy5iYXRjaC5kZWwoa2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbW1pdCB0aGUgY3VycmVudCBiYXRjaC5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgY29tbWl0KCkge1xyXG4gICAgYXdhaXQgdGhpcy5iYXRjaC53cml0ZSgpO1xyXG4gICAgdGhpcy5iYXRjaCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcGVuIHRoZSBpbmRleGVyLCBvcGVuIHRoZSBkYXRhYmFzZSxcclxuICAgKiBpbml0aWFsaXplIGhlaWdodCwgYW5kIGJpbmQgdG8gZXZlbnRzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gICAqL1xyXG5cclxuICBhc3luYyBvcGVuKCkge1xyXG4gICAgdGhpcy5sb2dnZXIuaW5mbygnSW5kZXhlciBpcyBsb2FkaW5nLicpO1xyXG5cclxuICAgIHRoaXMuY2xvc2luZyA9IGZhbHNlO1xyXG4gICAgYXdhaXQgdGhpcy5lbnN1cmUoKTtcclxuICAgIGF3YWl0IHRoaXMuZGIub3BlbigpO1xyXG4gICAgYXdhaXQgdGhpcy5kYi52ZXJpZnkobGF5b3V0LlYuZW5jb2RlKCksICdpbmRleCcsIDApO1xyXG4gICAgYXdhaXQgdGhpcy52ZXJpZnlOZXR3b3JrKCk7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgaW5kZXhlZCBoZWlnaHQuXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5kYi5nZXQobGF5b3V0LlIuZW5jb2RlKCkpO1xyXG4gICAgaWYgKGRhdGEpXHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gYmlvLnJlYWRVMzIoZGF0YSwgMCk7XHJcbiAgICBlbHNlXHJcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZUdlbmVzaXMoKTtcclxuXHJcbiAgICAvLyBCaW5kIHRvIGNoYWluIGV2ZW50cy5cclxuICAgIHRoaXMuYmluZCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xvc2UgdGhlIGluZGV4ZXIsIHdhaXQgZm9yIHRoZSBkYXRhYmFzZSB0byBjbG9zZSxcclxuICAgKiB1bmJpbmQgYWxsIGV2ZW50cy5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgY2xvc2UoKSB7XHJcbiAgICB0aGlzLmNsb3NpbmcgPSB0cnVlO1xyXG4gICAgYXdhaXQgdGhpcy5kYi5jbG9zZSgpO1xyXG4gICAgZm9yIChjb25zdCBbZXZlbnQsIGxpc3RlbmVyXSBvZiB0aGlzLmJvdW5kKVxyXG4gICAgICB0aGlzLmNoYWluLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XHJcblxyXG4gICAgdGhpcy5ib3VuZC5sZW5ndGggPSAwO1xyXG4gICAgdGhpcy5jbG9zaW5nID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbnN1cmUgcHJlZml4IGRpcmVjdG9yeSAocHJlZml4L2luZGV4KS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgZW5zdXJlKCkge1xyXG4gICAgaWYgKGZzLnVuc3VwcG9ydGVkKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tZW1vcnkpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBhd2FpdCBmcy5ta2RpcnAodGhpcy5vcHRpb25zLnByZWZpeCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZnkgbmV0d29yayBvZiBpbmRleC5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgdmVyaWZ5TmV0d29yaygpIHtcclxuICAgIGxldCByYXcgPSBhd2FpdCB0aGlzLmRiLmdldChsYXlvdXQuTy5lbmNvZGUoKSk7XHJcblxyXG4gICAgaWYgKCFyYXcpIHtcclxuICAgICAgcmF3ID0gYmlvLndyaXRlKDQpLndyaXRlVTMyKHRoaXMubmV0d29yay5tYWdpYykucmVuZGVyKCk7XHJcbiAgICAgIGF3YWl0IHRoaXMuZGIucHV0KGxheW91dC5PLmVuY29kZSgpLCByYXcpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWFnaWMgPSBiaW8ucmVhZFUzMihyYXcsIDApO1xyXG5cclxuICAgIGlmIChtYWdpYyAhPT0gdGhpcy5uZXR3b3JrLm1hZ2ljKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZGV4ZXI6IE5ldHdvcmsgbWlzbWF0Y2guJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBIHNwZWNpYWwgY2FzZSBmb3IgaW5kZXhpbmcgdGhlIGdlbmVzaXMgYmxvY2suIFRoZSBnZW5lc2lzXHJcbiAgICogYmxvY2sgY29pbnMgYXJlIG5vdCBzcGVuZGFibGUsIGhvd2V2ZXIgaW5kZXhlcnMgY2FuIHN0aWxsIGluZGV4XHJcbiAgICogdGhlIGJsb2NrIGZvciBoaXN0b3JpY2FsIGFuZCBpbmZvcm1hdGlvbmFsIHB1cnBvc2VzLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHJldHVybnMge1Byb21pc2V9XHJcbiAgICovXHJcblxyXG4gIGFzeW5jIHNhdmVHZW5lc2lzKCkge1xyXG4gICAgdGhpcy5zdGFydCgpO1xyXG5cclxuICAgIGNvbnN0IGJsb2NrID0gQmxvY2suZnJvbVJhdyhCdWZmZXIuZnJvbSh0aGlzLm5ldHdvcmsuZ2VuZXNpc0Jsb2NrLCAnaGV4JykpO1xyXG4gICAgY29uc3QgbWV0YSA9IG5ldyBCbG9ja01ldGEoYmxvY2suaGFzaCgpLCAwKTtcclxuXHJcbiAgICBhd2FpdCB0aGlzLmluZGV4QmxvY2sobWV0YSwgYmxvY2ssIG5ldyBDb2luVmlldygpKTtcclxuICAgIGF3YWl0IHRoaXMuX3NldFRpcChtZXRhKTtcclxuICAgIGF3YWl0IHRoaXMuY29tbWl0KCk7XHJcblxyXG4gICAgdGhpcy5oZWlnaHQgPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQmluZCB0byBjaGFpbiBldmVudHMgYW5kIHNhdmUgbGlzdGVuZXJzIGZvciByZW1vdmFsIG9uIGNsb3NlXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgYmluZCgpIHtcclxuICAgIGNvbnN0IGxpc3RlbmVyID0gYXN5bmMgKGVudHJ5LCBibG9jaywgdmlldykgPT4ge1xyXG4gICAgICBjb25zdCBtZXRhID0gbmV3IEJsb2NrTWV0YShlbnRyeS5oYXNoLCBlbnRyeS5oZWlnaHQpO1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCB0aGlzLnN5bmMobWV0YSwgYmxvY2ssIHZpZXcpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgWydjb25uZWN0JywgJ2Rpc2Nvbm5lY3QnLCAncmVzZXQnXSkge1xyXG4gICAgICB0aGlzLmJvdW5kLnB1c2goW2V2ZW50LCBsaXN0ZW5lcl0pO1xyXG4gICAgICB0aGlzLmNoYWluLm9uKGV2ZW50LCBsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYSBjaGFpbiBlbnRyeSBmb3IgdGhlIG1haW4gY2hhaW4gb25seS5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gICAqL1xyXG5cclxuICBhc3luYyBnZXRFbnRyeShoYXNoKSB7XHJcbiAgICBjb25zdCBlbnRyeSA9IGF3YWl0IHRoaXMuY2hhaW4uZ2V0RW50cnkoaGFzaCk7XHJcblxyXG4gICAgaWYgKCFlbnRyeSlcclxuICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgaWYgKCFhd2FpdCB0aGlzLmNoYWluLmlzTWFpbkNoYWluKGVudHJ5KSlcclxuICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGEgaW5kZXggYmxvY2sgbWV0YS5cclxuICAgKiBAcGFyYW0ge0hhc2h9IGhhc2hcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgZ2V0QmxvY2tNZXRhKGhlaWdodCkge1xyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZGIuZ2V0KGxheW91dC5oLmVuY29kZShoZWlnaHQpKTtcclxuXHJcbiAgICBpZiAoIWRhdGEpXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgIHJldHVybiBuZXcgQmxvY2tNZXRhKGRhdGEsIGhlaWdodCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTeW5jIHdpdGggdGhlIGNoYWluLlxyXG4gICAqIEBwYXJhbSB7QmxvY2tNZXRhfSBtZXRhXHJcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2tcclxuICAgKiBAcGFyYW0ge0NvaW5WaWV3fSB2aWV3XHJcbiAgICogQHJldHVybnMge1Byb21pc2V9XHJcbiAgICovXHJcblxyXG4gIGFzeW5jIHN5bmMobWV0YSwgYmxvY2ssIHZpZXcpIHtcclxuICAgIGlmICh0aGlzLnN5bmNpbmcpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0aGlzLnN5bmNpbmcgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0IGNvbm5lY3RlZCA9IGF3YWl0IHRoaXMuX3N5bmNCbG9jayhtZXRhLCBibG9jaywgdmlldyk7XHJcblxyXG4gICAgaWYgKGNvbm5lY3RlZCkge1xyXG4gICAgICB0aGlzLnN5bmNpbmcgPSBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuX3N5bmNDaGFpbigpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgdGhpcy5zeW5jaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3luYyB3aXRoIHRoZSBjaGFpbiB3aXRoIGEgYmxvY2suXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge0Jsb2NrTWV0YX0gbWV0YVxyXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrXHJcbiAgICogQHBhcmFtIHtDb2luVmlld30gdmlld1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gICAqL1xyXG5cclxuICBhc3luYyBfc3luY0Jsb2NrKG1ldGEsIGJsb2NrLCB2aWV3KSB7XHJcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGF0IHRoZSBuZXh0IGJsb2NrIGlzIGJlaW5nXHJcbiAgICAvLyBjb25uZWN0ZWQgb3IgdGhlIGN1cnJlbnQgYmxvY2sgZGlzY29ubmVjdGVkXHJcbiAgICAvLyB1c2UgdGhlIGJsb2NrIGFuZCB2aWV3IGJlaW5nIHBhc3NlZCBkaXJlY3RseSxcclxuICAgIC8vIGluc3RlYWQgb2YgcmVhZGluZyB0aGF0IGluZm9ybWF0aW9uIGFnYWluLlxyXG4gICAgaWYgKG1ldGEgJiYgYmxvY2sgJiYgdmlldykge1xyXG4gICAgICBpZiAobWV0YS5oZWlnaHQgPT09IHRoaXMuaGVpZ2h0ICsgMSkge1xyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBibG9jayBpcyBjb25uZWN0ZWQgdG9cclxuICAgICAgICAvLyB0aGUgaW5kZXhlciBjaGFpbi5cclxuICAgICAgICBjb25zdCBwcmV2ID0gYXdhaXQgdGhpcy5nZXRCbG9ja01ldGEodGhpcy5oZWlnaHQpO1xyXG4gICAgICAgIGlmIChwcmV2Lmhhc2guY29tcGFyZShibG9jay5wcmV2QmxvY2spICE9PSAwKVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLl9hZGRCbG9jayhtZXRhLCBibG9jaywgdmlldyk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0gZWxzZSBpZiAobWV0YS5oZWlnaHQgPT09IHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhpcyBpcyB0aGUgY3VycmVudCBibG9jay5cclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gYXdhaXQgdGhpcy5nZXRCbG9ja01ldGEodGhpcy5oZWlnaHQpO1xyXG4gICAgICAgIGlmIChjdXJyZW50Lmhhc2guY29tcGFyZShibG9jay5oYXNoKCkpICE9PSAwKVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLl9yZW1vdmVCbG9jayhtZXRhLCBibG9jaywgdmlldyk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN5bmMgd2l0aCB0aGUgY2hhaW4uXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgX3N5bmNDaGFpbigpIHtcclxuICAgIGxldCBoZWlnaHQgPSB0aGlzLmhlaWdodDtcclxuXHJcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGF0IHRoZSBpbmRleGVyIGhhcyBuZXZlclxyXG4gICAgLy8gc3RhcnRlZCwgc3luYyB0byB0aGUgYmVzdCBoZWlnaHQuXHJcbiAgICBpZiAoIWhlaWdodCkge1xyXG4gICAgICBhd2FpdCB0aGlzLl9yb2xsZm9yd2FyZCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgZm9yIGEgcmUtb3JnIHRoYXQgbWlnaHRcclxuICAgIC8vIGxlYXZlIGNoYWluIGluIGEgZGlmZmVyZW50IHN0YXRlLlxyXG4gICAgLy8gU2NhbiBjaGFpbiBiYWNrd2FyZHMgdW50aWwgd2VcclxuICAgIC8vIGZpbmQgYSBjb21tb24gaGVpZ2h0LlxyXG4gICAgd2hpbGUgKGhlaWdodCA+IDApIHtcclxuICAgICAgY29uc3QgbWV0YSA9IGF3YWl0IHRoaXMuZ2V0QmxvY2tNZXRhKGhlaWdodCk7XHJcbiAgICAgIGFzc2VydChtZXRhKTtcclxuXHJcbiAgICAgIGlmIChhd2FpdCB0aGlzLmdldEVudHJ5KG1ldGEuaGFzaCkpXHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBoZWlnaHQgLT0gMTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaGVpZ2h0IDwgdGhpcy5oZWlnaHQpIHtcclxuICAgICAgYXdhaXQgdGhpcy5fcm9sbGJhY2soaGVpZ2h0KTtcclxuICAgICAgYXdhaXQgdGhpcy5fcm9sbGZvcndhcmQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGF3YWl0IHRoaXMuX3JvbGxmb3J3YXJkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTY2FuIGJsb2NrY2hhaW4gdG8gdGhlIGJlc3QgY2hhaW4gaGVpZ2h0LlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHJldHVybnMge1Byb21pc2V9XHJcbiAgICovXHJcblxyXG4gIGFzeW5jIF9yb2xsZm9yd2FyZCgpIHtcclxuICAgIHRoaXMubG9nZ2VyLmluZm8oJ0luZGV4aW5nIHRvIGJlc3QgaGVpZ2h0IGZyb20gaGVpZ2h0ICglZCkuJywgdGhpcy5oZWlnaHQpO1xyXG5cclxuICAgIGZvciAobGV0IGhlaWdodCA9IHRoaXMuaGVpZ2h0ICsgMTsgOyBoZWlnaHQrKykge1xyXG4gICAgICBjb25zdCBlbnRyeSA9IGF3YWl0IHRoaXMuZ2V0RW50cnkoaGVpZ2h0KTtcclxuICAgICAgaWYgKCFlbnRyeSlcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNvbnN0IG1ldGEgPSBuZXcgQmxvY2tNZXRhKGVudHJ5Lmhhc2gsIGhlaWdodCk7XHJcblxyXG4gICAgICBjb25zdCBibG9jayA9IGF3YWl0IHRoaXMuY2hhaW4uZ2V0QmxvY2soZW50cnkuaGFzaCk7XHJcbiAgICAgIGFzc2VydChibG9jayk7XHJcblxyXG4gICAgICBjb25zdCB2aWV3ID0gYXdhaXQgdGhpcy5jaGFpbi5nZXRCbG9ja1ZpZXcoYmxvY2spO1xyXG4gICAgICBhc3NlcnQodmlldyk7XHJcblxyXG4gICAgICBpZiAodGhpcy5jbG9zaW5nKVxyXG4gICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgIGF3YWl0IHRoaXMuX2FkZEJsb2NrKG1ldGEsIGJsb2NrLCB2aWV3KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJvbGxiYWNrIHRvIGEgZ2l2ZW4gY2hhaW4gaGVpZ2h0LlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgX3JvbGxiYWNrKGhlaWdodCkge1xyXG4gICAgaWYgKGhlaWdodCA+IHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyLndhcm5pbmcoXHJcbiAgICAgICAgJ0lnbm9yaW5nIHJvbGxiYWNrIHRvIGZ1dHVyZSBoZWlnaHQgKCVkKS4nLFxyXG4gICAgICAgIGhlaWdodCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmxvZ2dlci5pbmZvKCdSb2xsaW5nIGJhY2sgdG8gaGVpZ2h0ICVkLicsIGhlaWdodCk7XHJcblxyXG4gICAgd2hpbGUgKHRoaXMuaGVpZ2h0ID4gaGVpZ2h0ICYmIHRoaXMuaGVpZ2h0ID4gMSkge1xyXG4gICAgICBjb25zdCBtZXRhID0gYXdhaXQgdGhpcy5nZXRCbG9ja01ldGEodGhpcy5oZWlnaHQpO1xyXG4gICAgICBhc3NlcnQobWV0YSk7XHJcblxyXG4gICAgICBjb25zdCBibG9jayA9IGF3YWl0IHRoaXMuY2hhaW4uZ2V0QmxvY2sobWV0YS5oYXNoKTtcclxuICAgICAgYXNzZXJ0KGJsb2NrKTtcclxuXHJcbiAgICAgIGNvbnN0IHZpZXcgPSBhd2FpdCB0aGlzLmNoYWluLmdldEJsb2NrVmlldyhibG9jayk7XHJcbiAgICAgIGFzc2VydCh2aWV3KTtcclxuXHJcbiAgICAgIGF3YWl0IHRoaXMuX3JlbW92ZUJsb2NrKG1ldGEsIGJsb2NrLCB2aWV3KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBhIGJsb2NrJ3MgdHJhbnNhY3Rpb25zIHdpdGhvdXQgYSBsb2NrLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtCbG9ja01ldGF9IG1ldGFcclxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9ja1xyXG4gICAqIEBwYXJhbSB7Q29pblZpZXd9IHZpZXdcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgX2FkZEJsb2NrKG1ldGEsIGJsb2NrLCB2aWV3KSB7XHJcbiAgICBjb25zdCBzdGFydCA9IHV0aWwuYmVuY2goKTtcclxuXHJcbiAgICBpZiAobWV0YS5oZWlnaHQgIT09IHRoaXMuaGVpZ2h0ICsgMSlcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmRleGVyOiBDYW4gbm90IGFkZCBibG9jay4nKTtcclxuXHJcbiAgICAvLyBTdGFydCB0aGUgYmF0Y2ggd3JpdGUuXHJcbiAgICB0aGlzLnN0YXJ0KCk7XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgaW1wbGVtZW50ZWQgaW5kZXhlciB0byBhZGQgdG9cclxuICAgIC8vIHRoZSBiYXRjaCB3cml0ZS5cclxuICAgIGF3YWl0IHRoaXMuaW5kZXhCbG9jayhtZXRhLCBibG9jaywgdmlldyk7XHJcblxyXG4gICAgLy8gU3luYyB0aGUgaGVpZ2h0IHRvIHRoZSBuZXcgdGlwLlxyXG4gICAgY29uc3QgaGVpZ2h0ID0gYXdhaXQgdGhpcy5fc2V0VGlwKG1ldGEpO1xyXG5cclxuICAgIC8vIENvbW1pdCB0aGUgd3JpdGUgYmF0Y2ggdG8gZGlzay5cclxuICAgIGF3YWl0IHRoaXMuY29tbWl0KCk7XHJcblxyXG4gICAgLy8gVXBkYXRlIGhlaWdodCBfYWZ0ZXJfIHN1Y2Nlc3NmdWwgY29tbWl0LlxyXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgLy8gTG9nIHRoZSBjdXJyZW50IGluZGV4ZXIgc3RhdHVzLlxyXG4gICAgdGhpcy5sb2dTdGF0dXMoc3RhcnQsIGJsb2NrLCBtZXRhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb2Nlc3MgYmxvY2sgaW5kZXhpbmdcclxuICAgKiBJbmRleGVycyB3aWxsIGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byBwcm9jZXNzIHRoZSBibG9jayBmb3IgaW5kZXhpbmdcclxuICAgKiBAcGFyYW0ge0Jsb2NrTWV0YX0gbWV0YVxyXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrXHJcbiAgICogQHBhcmFtIHtDb2luVmlld30gdmlld1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gICAqL1xyXG5cclxuICBhc3luYyBpbmRleEJsb2NrKG1ldGEsIGJsb2NrLCB2aWV3KSB7XHJcbiAgICA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVbmRvIGJsb2NrIGluZGV4aW5nXHJcbiAgICogSW5kZXhlcnMgd2lsbCBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gdW5kbyBpbmRleGluZyBmb3IgdGhlIGJsb2NrXHJcbiAgICogQHBhcmFtIHtCbG9ja01ldGF9IG1ldGFcclxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9ja1xyXG4gICAqIEBwYXJhbSB7Q29pblZpZXd9IHZpZXdcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cclxuICAgKi9cclxuXHJcbiAgYXN5bmMgdW5pbmRleEJsb2NrKG1ldGEsIGJsb2NrLCB2aWV3KSB7XHJcbiAgICA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcnVuZSBibG9jayBpbmRleGluZ1xyXG4gICAqIEluZGV4ZXJzIHdpbGwgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHBydW5lIGluZGV4aW5nIGZvciB0aGUgYmxvY2tcclxuICAgKiBAcGFyYW0ge0Jsb2NrTWV0YX0gbWV0YVxyXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrXHJcbiAgICogQHBhcmFtIHtDb2luVmlld30gdmlld1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gICAqL1xyXG5cclxuICBhc3luYyBwcnVuZUJsb2NrKG1ldGEsIGJsb2NrLCB2aWV3KSB7XHJcbiAgICA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVbmNvbmZpcm0gYSBibG9jaydzIHRyYW5zYWN0aW9ucy5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7QmxvY2tNZXRhfSBtZXRhXHJcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2tcclxuICAgKiBAcGFyYW0ge0NvaW5WaWV3fSB2aWV3XHJcbiAgICogQHJldHVybnMge1Byb21pc2V9XHJcbiAgICovXHJcblxyXG4gIGFzeW5jIF9yZW1vdmVCbG9jayhtZXRhLCBibG9jaywgdmlldykge1xyXG4gICAgY29uc3Qgc3RhcnQgPSB1dGlsLmJlbmNoKCk7XHJcblxyXG4gICAgaWYgKG1ldGEuaGVpZ2h0ICE9PSB0aGlzLmhlaWdodClcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmRleGVyOiBDYW4gbm90IHJlbW92ZSBibG9jay4nKTtcclxuXHJcbiAgICAvLyBTdGFydCB0aGUgYmF0Y2ggd3JpdGUuXHJcbiAgICB0aGlzLnN0YXJ0KCk7XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgaW1wbGVtZW50ZWQgaW5kZXhlciB0byBhZGQgdG9cclxuICAgIC8vIHRoZSBiYXRjaCB3cml0ZS5cclxuICAgIGF3YWl0IHRoaXMudW5pbmRleEJsb2NrKG1ldGEsIGJsb2NrLCB2aWV3KTtcclxuXHJcbiAgICBjb25zdCBwcmV2ID0gYXdhaXQgdGhpcy5nZXRCbG9ja01ldGEobWV0YS5oZWlnaHQgLSAxKTtcclxuICAgIGFzc2VydChwcmV2KTtcclxuXHJcbiAgICAvLyBTeW5jIHRoZSBoZWlnaHQgdG8gdGhlIHByZXZpb3VzIHRpcC5cclxuICAgIGNvbnN0IGhlaWdodCA9IGF3YWl0IHRoaXMuX3NldFRpcChwcmV2KTtcclxuXHJcbiAgICAvLyBDb21taXQgdGhlIHdyaXRlIGJhdGNoIHRvIGRpc2suXHJcbiAgICBhd2FpdCB0aGlzLmNvbW1pdCgpO1xyXG5cclxuICAgIC8vIFBydW5lIGJsb2NrIGRhdGEgX2FmdGVyXyBzdWNjZXNzZnVsIGNvbW1pdC5cclxuICAgIGF3YWl0IHRoaXMucHJ1bmVCbG9jayhtZXRhKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgaGVpZ2h0IF9hZnRlcl8gc3VjY2Vzc2Z1bCBjb21taXQuXHJcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICAvLyBMb2cgdGhlIGN1cnJlbnQgaW5kZXhlciBzdGF0dXMuXHJcbiAgICB0aGlzLmxvZ1N0YXR1cyhzdGFydCwgYmxvY2ssIG1ldGEsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIHRoZSBjdXJyZW50IGhlaWdodCB0byB0aXAuXHJcbiAgICogQHBhcmFtIHtCbG9ja01ldGF9IHRpcFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gICAqL1xyXG5cclxuICBhc3luYyBfc2V0VGlwKG1ldGEpIHtcclxuICAgIGlmIChtZXRhLmhlaWdodCA8IHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgIGFzc2VydChtZXRhLmhlaWdodCA9PT0gdGhpcy5oZWlnaHQgLSAxKTtcclxuICAgICAgdGhpcy5kZWwobGF5b3V0LmguZW5jb2RlKHRoaXMuaGVpZ2h0KSk7XHJcbiAgICB9IGVsc2UgaWYgKG1ldGEuaGVpZ2h0ID4gdGhpcy5oZWlnaHQpIHtcclxuICAgICAgYXNzZXJ0KG1ldGEuaGVpZ2h0ID09PSB0aGlzLmhlaWdodCArIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCB0byBiYXRjaCB3cml0ZSB0byBzYXZlIHRpcCBhbmQgaGVpZ2h0LlxyXG4gICAgdGhpcy5wdXQobGF5b3V0LmguZW5jb2RlKG1ldGEuaGVpZ2h0KSwgbWV0YS5oYXNoKTtcclxuXHJcbiAgICBjb25zdCByYXcgPSBiaW8ud3JpdGUoNCkud3JpdGVVMzIobWV0YS5oZWlnaHQpLnJlbmRlcigpO1xyXG4gICAgdGhpcy5wdXQobGF5b3V0LlIuZW5jb2RlKCksIHJhdyk7XHJcblxyXG4gICAgcmV0dXJuIG1ldGEuaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCB3aGV0aGVyIHRoZSBpbmRleGVyIGhhcyByZWFjaGVkIGl0cyBzbG93IGhlaWdodC5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAqL1xyXG5cclxuICBpc1Nsb3coKSB7XHJcbiAgICBpZiAodGhpcy5oZWlnaHQgPT09IDEgfHwgdGhpcy5oZWlnaHQgJSAyMCA9PT0gMClcclxuICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgaWYgKHRoaXMuaGVpZ2h0ID49IHRoaXMubmV0d29yay5ibG9jay5zbG93SGVpZ2h0KVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2cgdGhlIGN1cnJlbnQgaW5kZXhlciBzdGF0dXMuXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge0FycmF5fSBzdGFydFxyXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrXHJcbiAgICogQHBhcmFtIHtCbG9ja01ldGF9IG1ldGFcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJldmVyc2VcclxuICAgKi9cclxuXHJcbiAgbG9nU3RhdHVzKHN0YXJ0LCBibG9jaywgbWV0YSwgcmV2ZXJzZSkge1xyXG4gICAgaWYgKCF0aGlzLmlzU2xvdygpKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgZWxhcHNlZCA9IHV0aWwuYmVuY2goc3RhcnQpO1xyXG5cclxuICAgIGNvbnN0IG1zZyA9IHJldmVyc2UgPyAncmVtb3ZlZCBmcm9tJyA6ICdhZGRlZCB0byc7XHJcblxyXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcclxuICAgICAgJ0Jsb2NrICglZCkgJXMgaW5kZXhlciAodHhzPSVkIHRpbWU9JWQpLicsXHJcbiAgICAgIG1ldGEuaGVpZ2h0LFxyXG4gICAgICBtc2csXHJcbiAgICAgIGJsb2NrLnR4cy5sZW5ndGgsXHJcbiAgICAgIGVsYXBzZWQpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEJsb2NrIE1ldGFcclxuICovXHJcblxyXG5jbGFzcyBCbG9ja01ldGEge1xyXG4gIGNvbnN0cnVjdG9yKGhhc2gsIGhlaWdodCkge1xyXG4gICAgdGhpcy5oYXNoID0gaGFzaCB8fCBaRVJPX0hBU0g7XHJcbiAgICB0aGlzLmhlaWdodCA9ICBoZWlnaHQgfHwgMDtcclxuXHJcbiAgICBhc3NlcnQoQnVmZmVyLmlzQnVmZmVyKHRoaXMuaGFzaCkgJiYgdGhpcy5oYXNoLmxlbmd0aCA9PT0gMzIpO1xyXG4gICAgYXNzZXJ0KE51bWJlci5pc0ludGVnZXIodGhpcy5oZWlnaHQpKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmRleCBPcHRpb25zXHJcbiAqL1xyXG5cclxuY2xhc3MgSW5kZXhPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBDcmVhdGUgaW5kZXggb3B0aW9ucy5cclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbW9kdWxlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAgKi9cclxuXHJcbiAgY29uc3RydWN0b3IobW9kdWxlLCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLm1vZHVsZSA9IG1vZHVsZTtcclxuICAgIHRoaXMubmV0d29yayA9IE5ldHdvcmsucHJpbWFyeTtcclxuICAgIHRoaXMubG9nZ2VyID0gTG9nZ2VyLmdsb2JhbDtcclxuICAgIHRoaXMuYmxvY2tzID0gbnVsbDtcclxuICAgIHRoaXMuY2hhaW4gPSBudWxsO1xyXG5cclxuICAgIHRoaXMucHJlZml4ID0gbnVsbDtcclxuICAgIHRoaXMubG9jYXRpb24gPSBudWxsO1xyXG4gICAgdGhpcy5tZW1vcnkgPSB0cnVlO1xyXG4gICAgdGhpcy5tYXhGaWxlcyA9IDY0O1xyXG4gICAgdGhpcy5jYWNoZVNpemUgPSAxNiA8PCAyMDtcclxuICAgIHRoaXMuY29tcHJlc3Npb24gPSB0cnVlO1xyXG5cclxuICAgIGlmIChvcHRpb25zKVxyXG4gICAgICB0aGlzLmZyb21PcHRpb25zKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5qZWN0IHByb3BlcnRpZXMgZnJvbSBvYmplY3QuXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAqIEByZXR1cm5zIHtJbmRleE9wdGlvbnN9XHJcbiAgICovXHJcblxyXG4gIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIGFzc2VydChvcHRpb25zLmJsb2NrcyAmJiB0eXBlb2Ygb3B0aW9ucy5ibG9ja3MgPT09ICdvYmplY3QnLFxyXG4gICAgICAgICAgICdJbmRleGVyIHJlcXVpcmVzIGEgYmxvY2tzdG9yZS4nKTtcclxuICAgIGFzc2VydChvcHRpb25zLmNoYWluICYmIHR5cGVvZiBvcHRpb25zLmNoYWluID09PSAnb2JqZWN0JyxcclxuICAgICAgICAgICAnSW5kZXhlciByZXF1aXJlcyBjaGFpbi4nKTtcclxuICAgIGFzc2VydCghb3B0aW9ucy5wcnVuZSwgJ0NhbiBub3QgaW5kZXggd2hpbGUgcHJ1bmVkLicpO1xyXG5cclxuICAgIHRoaXMuYmxvY2tzID0gb3B0aW9ucy5ibG9ja3M7XHJcbiAgICB0aGlzLmNoYWluID0gb3B0aW9ucy5jaGFpbjtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5uZXR3b3JrICE9IG51bGwpXHJcbiAgICAgIHRoaXMubmV0d29yayA9IE5ldHdvcmsuZ2V0KG9wdGlvbnMubmV0d29yayk7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMubG9nZ2VyICE9IG51bGwpIHtcclxuICAgICAgYXNzZXJ0KHR5cGVvZiBvcHRpb25zLmxvZ2dlciA9PT0gJ29iamVjdCcpO1xyXG4gICAgICB0aGlzLmxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLnByZWZpeCAhPSBudWxsKSB7XHJcbiAgICAgIGFzc2VydCh0eXBlb2Ygb3B0aW9ucy5wcmVmaXggPT09ICdzdHJpbmcnKTtcclxuICAgICAgdGhpcy5wcmVmaXggPSBvcHRpb25zLnByZWZpeDtcclxuICAgICAgdGhpcy5wcmVmaXggPSBwYXRoLmpvaW4odGhpcy5wcmVmaXgsICdpbmRleCcpO1xyXG4gICAgICB0aGlzLmxvY2F0aW9uID0gcGF0aC5qb2luKHRoaXMucHJlZml4LCB0aGlzLm1vZHVsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMubG9jYXRpb24gIT0gbnVsbCkge1xyXG4gICAgICBhc3NlcnQodHlwZW9mIG9wdGlvbnMubG9jYXRpb24gPT09ICdzdHJpbmcnKTtcclxuICAgICAgdGhpcy5sb2NhdGlvbiA9IG9wdGlvbnMubG9jYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdGlvbnMubWVtb3J5ICE9IG51bGwpIHtcclxuICAgICAgYXNzZXJ0KHR5cGVvZiBvcHRpb25zLm1lbW9yeSA9PT0gJ2Jvb2xlYW4nKTtcclxuICAgICAgdGhpcy5tZW1vcnkgPSBvcHRpb25zLm1lbW9yeTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5tYXhGaWxlcyAhPSBudWxsKSB7XHJcbiAgICAgIGFzc2VydCgob3B0aW9ucy5tYXhGaWxlcyA+Pj4gMCkgPT09IG9wdGlvbnMubWF4RmlsZXMpO1xyXG4gICAgICB0aGlzLm1heEZpbGVzID0gb3B0aW9ucy5tYXhGaWxlcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy5jYWNoZVNpemUgIT0gbnVsbCkge1xyXG4gICAgICBhc3NlcnQoTnVtYmVyLmlzU2FmZUludGVnZXIob3B0aW9ucy5jYWNoZVNpemUpICYmIG9wdGlvbnMuY2FjaGVTaXplID49IDApO1xyXG4gICAgICB0aGlzLmNhY2hlU2l6ZSA9IG9wdGlvbnMuY2FjaGVTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRpb25zLmNvbXByZXNzaW9uICE9IG51bGwpIHtcclxuICAgICAgYXNzZXJ0KHR5cGVvZiBvcHRpb25zLmNvbXByZXNzaW9uID09PSAnYm9vbGVhbicpO1xyXG4gICAgICB0aGlzLmNvbXByZXNzaW9uID0gb3B0aW9ucy5jb21wcmVzc2lvbjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc3RhbnRpYXRlIGluZGV4ZXIgb3B0aW9ucyBmcm9tIG9iamVjdC5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAqIEByZXR1cm5zIHtJbmRleE9wdGlvbnN9XHJcbiAgICovXHJcblxyXG4gIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tT3B0aW9ucyhvcHRpb25zKTtcclxuICB9XHJcbn1cclxuXHJcbi8qXHJcbiAqIEV4cG9zZVxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSW5kZXhlcjtcclxuIl19
/*!
 * outpoint.js - outpoint object for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_wqnf3fumx(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\outpoint.js";var hash="af6a40d23dfbe53d11713dc5dd19ae0bd3187789";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\outpoint.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:12},end:{line:10,column:28}},"2":{start:{line:11,column:13},end:{line:11,column:37}},"3":{start:{line:12,column:18},end:{line:12,column:50}},"4":{start:{line:13,column:24},end:{line:13,column:43}},"5":{start:{line:32,column:4},end:{line:32,column:36}},"6":{start:{line:33,column:4},end:{line:33,column:28}},"7":{start:{line:35,column:4},end:{line:40,column:5}},"8":{start:{line:36,column:6},end:{line:36,column:36}},"9":{start:{line:37,column:6},end:{line:37,column:65}},"10":{start:{line:38,column:6},end:{line:38,column:23}},"11":{start:{line:39,column:6},end:{line:39,column:25}},"12":{start:{line:50,column:4},end:{line:50,column:50}},"13":{start:{line:51,column:4},end:{line:51,column:42}},"14":{start:{line:52,column:4},end:{line:52,column:79}},"15":{start:{line:53,column:4},end:{line:53,column:29}},"16":{start:{line:54,column:4},end:{line:54,column:31}},"17":{start:{line:55,column:4},end:{line:55,column:16}},"18":{start:{line:65,column:4},end:{line:65,column:43}},"19":{start:{line:74,column:21},end:{line:74,column:43}},"20":{start:{line:75,column:4},end:{line:75,column:30}},"21":{start:{line:76,column:4},end:{line:76,column:32}},"22":{start:{line:77,column:4},end:{line:77,column:20}},"23":{start:{line:87,column:4},end:{line:87,column:41}},"24":{start:{line:88,column:4},end:{line:89,column:38}},"25":{start:{line:99,column:4},end:{line:99,column:41}},"26":{start:{line:101,column:16},end:{line:101,column:51}},"27":{start:{line:103,column:4},end:{line:104,column:17}},"28":{start:{line:104,column:6},end:{line:104,column:17}},"29":{start:{line:106,column:4},end:{line:106,column:38}},"30":{start:{line:116,column:4},end:{line:116,column:78}},"31":{start:{line:125,column:4},end:{line:125,column:34}},"32":{start:{line:134,column:4},end:{line:134,column:24}},"33":{start:{line:144,column:4},end:{line:144,column:24}},"34":{start:{line:155,column:4},end:{line:155,column:33}},"35":{start:{line:156,column:4},end:{line:156,column:38}},"36":{start:{line:157,column:4},end:{line:157,column:16}},"37":{start:{line:167,column:4},end:{line:167,column:35}},"38":{start:{line:176,column:4},end:{line:176,column:28}},"39":{start:{line:177,column:4},end:{line:177,column:28}},"40":{start:{line:178,column:4},end:{line:178,column:14}},"41":{start:{line:187,column:4},end:{line:187,column:14}},"42":{start:{line:196,column:4},end:{line:196,column:49}},"43":{start:{line:206,column:4},end:{line:206,column:30}},"44":{start:{line:207,column:4},end:{line:207,column:30}},"45":{start:{line:208,column:4},end:{line:208,column:16}},"46":{start:{line:218,column:4},end:{line:218,column:43}},"47":{start:{line:228,column:4},end:{line:228,column:37}},"48":{start:{line:238,column:4},end:{line:238,column:36}},"49":{start:{line:248,column:4},end:{line:248,column:47}},"50":{start:{line:249,column:4},end:{line:249,column:68}},"51":{start:{line:250,column:4},end:{line:250,column:73}},"52":{start:{line:251,column:4},end:{line:251,column:40}},"53":{start:{line:252,column:4},end:{line:252,column:28}},"54":{start:{line:253,column:4},end:{line:253,column:16}},"55":{start:{line:265,column:4},end:{line:268,column:6}},"56":{start:{line:278,column:4},end:{line:278,column:37}},"57":{start:{line:289,column:4},end:{line:289,column:15}},"58":{start:{line:290,column:4},end:{line:290,column:38}},"59":{start:{line:291,column:4},end:{line:291,column:23}},"60":{start:{line:292,column:4},end:{line:292,column:26}},"61":{start:{line:293,column:4},end:{line:293,column:23}},"62":{start:{line:294,column:4},end:{line:294,column:16}},"63":{start:{line:305,column:4},end:{line:305,column:40}},"64":{start:{line:317,column:4},end:{line:317,column:45}},"65":{start:{line:326,column:4},end:{line:326,column:55}},"66":{start:{line:336,column:4},end:{line:336,column:35}},"67":{start:{line:345,column:14},end:{line:345,column:42}},"68":{start:{line:347,column:2},end:{line:352,column:3}},"69":{start:{line:347,column:15},end:{line:347,column:16}},"70":{start:{line:348,column:4},end:{line:349,column:16}},"71":{start:{line:349,column:6},end:{line:349,column:16}},"72":{start:{line:350,column:4},end:{line:351,column:15}},"73":{start:{line:351,column:6},end:{line:351,column:15}},"74":{start:{line:354,column:2},end:{line:355,column:14}},"75":{start:{line:355,column:4},end:{line:355,column:14}},"76":{start:{line:357,column:2},end:{line:358,column:13}},"77":{start:{line:358,column:4},end:{line:358,column:13}},"78":{start:{line:360,column:2},end:{line:360,column:11}},"79":{start:{line:367,column:0},end:{line:367,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:31,column:2},end:{line:31,column:3}},loc:{start:{line:31,column:27},end:{line:41,column:3}},line:31},"1":{name:"(anonymous_1)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:23},end:{line:56,column:3}},line:49},"2":{name:"(anonymous_2)",decl:{start:{line:64,column:2},end:{line:64,column:3}},loc:{start:{line:64,column:30},end:{line:66,column:3}},line:64},"3":{name:"(anonymous_3)",decl:{start:{line:73,column:2},end:{line:73,column:3}},loc:{start:{line:73,column:10},end:{line:78,column:3}},line:73},"4":{name:"(anonymous_4)",decl:{start:{line:86,column:2},end:{line:86,column:3}},loc:{start:{line:86,column:18},end:{line:90,column:3}},line:86},"5":{name:"(anonymous_5)",decl:{start:{line:98,column:2},end:{line:98,column:3}},loc:{start:{line:98,column:19},end:{line:107,column:3}},line:98},"6":{name:"(anonymous_6)",decl:{start:{line:115,column:2},end:{line:115,column:3}},loc:{start:{line:115,column:11},end:{line:117,column:3}},line:115},"7":{name:"(anonymous_7)",decl:{start:{line:124,column:2},end:{line:124,column:3}},loc:{start:{line:124,column:10},end:{line:126,column:3}},line:124},"8":{name:"(anonymous_8)",decl:{start:{line:133,column:2},end:{line:133,column:3}},loc:{start:{line:133,column:9},end:{line:135,column:3}},line:133},"9":{name:"(anonymous_9)",decl:{start:{line:143,column:2},end:{line:143,column:3}},loc:{start:{line:143,column:10},end:{line:145,column:3}},line:143},"10":{name:"(anonymous_10)",decl:{start:{line:154,column:2},end:{line:154,column:3}},loc:{start:{line:154,column:15},end:{line:158,column:3}},line:154},"11":{name:"(anonymous_11)",decl:{start:{line:166,column:2},end:{line:166,column:3}},loc:{start:{line:166,column:22},end:{line:168,column:3}},line:166},"12":{name:"(anonymous_12)",decl:{start:{line:175,column:2},end:{line:175,column:3}},loc:{start:{line:175,column:15},end:{line:179,column:3}},line:175},"13":{name:"(anonymous_13)",decl:{start:{line:186,column:2},end:{line:186,column:3}},loc:{start:{line:186,column:12},end:{line:188,column:3}},line:186},"14":{name:"(anonymous_14)",decl:{start:{line:195,column:2},end:{line:195,column:3}},loc:{start:{line:195,column:10},end:{line:197,column:3}},line:195},"15":{name:"(anonymous_15)",decl:{start:{line:205,column:2},end:{line:205,column:3}},loc:{start:{line:205,column:17},end:{line:209,column:3}},line:205},"16":{name:"(anonymous_16)",decl:{start:{line:217,column:2},end:{line:217,column:3}},loc:{start:{line:217,column:16},end:{line:219,column:3}},line:217},"17":{name:"(anonymous_17)",decl:{start:{line:227,column:2},end:{line:227,column:3}},loc:{start:{line:227,column:24},end:{line:229,column:3}},line:227},"18":{name:"(anonymous_18)",decl:{start:{line:237,column:2},end:{line:237,column:3}},loc:{start:{line:237,column:23},end:{line:239,column:3}},line:237},"19":{name:"(anonymous_19)",decl:{start:{line:247,column:2},end:{line:247,column:3}},loc:{start:{line:247,column:17},end:{line:254,column:3}},line:247},"20":{name:"(anonymous_20)",decl:{start:{line:264,column:2},end:{line:264,column:3}},loc:{start:{line:264,column:11},end:{line:269,column:3}},line:264},"21":{name:"(anonymous_21)",decl:{start:{line:277,column:2},end:{line:277,column:3}},loc:{start:{line:277,column:24},end:{line:279,column:3}},line:277},"22":{name:"(anonymous_22)",decl:{start:{line:288,column:2},end:{line:288,column:3}},loc:{start:{line:288,column:20},end:{line:295,column:3}},line:288},"23":{name:"(anonymous_23)",decl:{start:{line:304,column:2},end:{line:304,column:3}},loc:{start:{line:304,column:27},end:{line:306,column:3}},line:304},"24":{name:"(anonymous_24)",decl:{start:{line:316,column:2},end:{line:316,column:3}},loc:{start:{line:316,column:28},end:{line:318,column:3}},line:316},"25":{name:"(anonymous_25)",decl:{start:{line:325,column:2},end:{line:325,column:3}},loc:{start:{line:325,column:20},end:{line:327,column:3}},line:325},"26":{name:"(anonymous_26)",decl:{start:{line:335,column:2},end:{line:335,column:3}},loc:{start:{line:335,column:25},end:{line:337,column:3}},line:335},"27":{name:"strcmp",decl:{start:{line:344,column:9},end:{line:344,column:15}},loc:{start:{line:344,column:22},end:{line:361,column:1}},line:344}},branchMap:{"0":{loc:{start:{line:35,column:4},end:{line:40,column:5}},type:"if",locations:[{start:{line:35,column:4},end:{line:40,column:5}},{start:{line:35,column:4},end:{line:40,column:5}}],line:35},"1":{loc:{start:{line:88,column:11},end:{line:89,column:37}},type:"binary-expr",locations:[{start:{line:88,column:11},end:{line:88,column:41}},{start:{line:89,column:9},end:{line:89,column:37}}],line:88},"2":{loc:{start:{line:103,column:4},end:{line:104,column:17}},type:"if",locations:[{start:{line:103,column:4},end:{line:104,column:17}},{start:{line:103,column:4},end:{line:104,column:17}}],line:103},"3":{loc:{start:{line:116,column:11},end:{line:116,column:77}},type:"binary-expr",locations:[{start:{line:116,column:11},end:{line:116,column:36}},{start:{line:116,column:40},end:{line:116,column:77}}],line:116},"4":{loc:{start:{line:348,column:4},end:{line:349,column:16}},type:"if",locations:[{start:{line:348,column:4},end:{line:349,column:16}},{start:{line:348,column:4},end:{line:349,column:16}}],line:348},"5":{loc:{start:{line:350,column:4},end:{line:351,column:15}},type:"if",locations:[{start:{line:350,column:4},end:{line:351,column:15}},{start:{line:350,column:4},end:{line:351,column:15}}],line:350},"6":{loc:{start:{line:354,column:2},end:{line:355,column:14}},type:"if",locations:[{start:{line:354,column:2},end:{line:355,column:14}},{start:{line:354,column:2},end:{line:355,column:14}}],line:354},"7":{loc:{start:{line:357,column:2},end:{line:358,column:13}},type:"if",locations:[{start:{line:357,column:2},end:{line:358,column:13}},{start:{line:357,column:2},end:{line:358,column:13}}],line:357}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"af6a40d23dfbe53d11713dc5dd19ae0bd3187789"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_wqnf3fumx=function(){return actualCoverage;};}return actualCoverage;}cov_wqnf3fumx();const assert=(cov_wqnf3fumx().s[0]++,require('bsert'));const bio=(cov_wqnf3fumx().s[1]++,require('bufio'));const util=(cov_wqnf3fumx().s[2]++,require('../utils/util'));const consensus=(cov_wqnf3fumx().s[3]++,require('../protocol/consensus'));const{inspectSymbol}=(cov_wqnf3fumx().s[4]++,require('../utils'));/**
 * Outpoint
 * Represents a COutPoint.
 * @alias module:primitives.Outpoint
 * @property {Hash} hash
 * @property {Number} index
 */class Outpoint{/**
   * Create an outpoint.
   * @constructor
   * @param {Hash?} hash
   * @param {Number?} index
   */constructor(hash,index){cov_wqnf3fumx().f[0]++;cov_wqnf3fumx().s[5]++;this.hash=consensus.ZERO_HASH;cov_wqnf3fumx().s[6]++;this.index=0xffffffff;cov_wqnf3fumx().s[7]++;if(hash!=null){cov_wqnf3fumx().b[0][0]++;cov_wqnf3fumx().s[8]++;assert(Buffer.isBuffer(hash));cov_wqnf3fumx().s[9]++;assert(index>>>0===index,'Index must be a uint32.');cov_wqnf3fumx().s[10]++;this.hash=hash;cov_wqnf3fumx().s[11]++;this.index=index;}else{cov_wqnf3fumx().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_wqnf3fumx().f[1]++;cov_wqnf3fumx().s[12]++;assert(options,'Outpoint data is required.');cov_wqnf3fumx().s[13]++;assert(Buffer.isBuffer(options.hash));cov_wqnf3fumx().s[14]++;assert(options.index>>>0===options.index,'Index must be a uint32.');cov_wqnf3fumx().s[15]++;this.hash=options.hash;cov_wqnf3fumx().s[16]++;this.index=options.index;cov_wqnf3fumx().s[17]++;return this;}/**
   * Instantate outpoint from options object.
   * @param {Object} options
   * @returns {Outpoint}
   */static fromOptions(options){cov_wqnf3fumx().f[2]++;cov_wqnf3fumx().s[18]++;return new this().fromOptions(options);}/**
   * Clone the outpoint.
   * @returns {Outpoint}
   */clone(){cov_wqnf3fumx().f[3]++;const outpoint=(cov_wqnf3fumx().s[19]++,new this.constructor());cov_wqnf3fumx().s[20]++;outpoint.hash=this.hash;cov_wqnf3fumx().s[21]++;outpoint.index=this.index;cov_wqnf3fumx().s[22]++;return outpoint;}/**
   * Test equality against another outpoint.
   * @param {Outpoint} prevout
   * @returns {Boolean}
   */equals(prevout){cov_wqnf3fumx().f[4]++;cov_wqnf3fumx().s[23]++;assert(Outpoint.isOutpoint(prevout));cov_wqnf3fumx().s[24]++;return(cov_wqnf3fumx().b[1][0]++,this.hash.equals(prevout.hash))&&(cov_wqnf3fumx().b[1][1]++,this.index===prevout.index);}/**
   * Compare against another outpoint (BIP69).
   * @param {Outpoint} prevout
   * @returns {Number}
   */compare(prevout){cov_wqnf3fumx().f[5]++;cov_wqnf3fumx().s[25]++;assert(Outpoint.isOutpoint(prevout));const cmp=(cov_wqnf3fumx().s[26]++,strcmp(this.txid(),prevout.txid()));cov_wqnf3fumx().s[27]++;if(cmp!==0){cov_wqnf3fumx().b[2][0]++;cov_wqnf3fumx().s[28]++;return cmp;}else{cov_wqnf3fumx().b[2][1]++;}cov_wqnf3fumx().s[29]++;return this.index-prevout.index;}/**
   * Test whether the outpoint is null (hash of zeroes
   * with max-u32 index). Used to detect coinbases.
   * @returns {Boolean}
   */isNull(){cov_wqnf3fumx().f[6]++;cov_wqnf3fumx().s[30]++;return(cov_wqnf3fumx().b[3][0]++,this.index===0xffffffff)&&(cov_wqnf3fumx().b[3][1]++,this.hash.equals(consensus.ZERO_HASH));}/**
   * Get little-endian hash.
   * @returns {Hash}
   */rhash(){cov_wqnf3fumx().f[7]++;cov_wqnf3fumx().s[31]++;return util.revHex(this.hash);}/**
   * Get little-endian hash.
   * @returns {Hash}
   */txid(){cov_wqnf3fumx().f[8]++;cov_wqnf3fumx().s[32]++;return this.rhash();}/**
   * Serialize outpoint to a key
   * suitable for a hash table.
   * @returns {String}
   */toKey(){cov_wqnf3fumx().f[9]++;cov_wqnf3fumx().s[33]++;return this.toRaw();}/**
   * Inject properties from hash table key.
   * @private
   * @param {String} key
   * @returns {Outpoint}
   */fromKey(key){cov_wqnf3fumx().f[10]++;cov_wqnf3fumx().s[34]++;this.hash=key.slice(0,32);cov_wqnf3fumx().s[35]++;this.index=bio.readU32(key,32);cov_wqnf3fumx().s[36]++;return this;}/**
   * Instantiate outpoint from hash table key.
   * @param {String} key
   * @returns {Outpoint}
   */static fromKey(key){cov_wqnf3fumx().f[11]++;cov_wqnf3fumx().s[37]++;return new this().fromKey(key);}/**
   * Write outpoint to a buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_wqnf3fumx().f[12]++;cov_wqnf3fumx().s[38]++;bw.writeHash(this.hash);cov_wqnf3fumx().s[39]++;bw.writeU32(this.index);cov_wqnf3fumx().s[40]++;return bw;}/**
   * Calculate size of outpoint.
   * @returns {Number}
   */getSize(){cov_wqnf3fumx().f[13]++;cov_wqnf3fumx().s[41]++;return 36;}/**
   * Serialize outpoint.
   * @returns {Buffer}
   */toRaw(){cov_wqnf3fumx().f[14]++;cov_wqnf3fumx().s[42]++;return this.toWriter(bio.write(36)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_wqnf3fumx().f[15]++;cov_wqnf3fumx().s[43]++;this.hash=br.readHash();cov_wqnf3fumx().s[44]++;this.index=br.readU32();cov_wqnf3fumx().s[45]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_wqnf3fumx().f[16]++;cov_wqnf3fumx().s[46]++;return this.fromReader(bio.read(data));}/**
   * Instantiate outpoint from a buffer reader.
   * @param {BufferReader} br
   * @returns {Outpoint}
   */static fromReader(br){cov_wqnf3fumx().f[17]++;cov_wqnf3fumx().s[47]++;return new this().fromReader(br);}/**
   * Instantiate outpoint from serialized data.
   * @param {Buffer} data
   * @returns {Outpoint}
   */static fromRaw(data){cov_wqnf3fumx().f[18]++;cov_wqnf3fumx().s[48]++;return new this().fromRaw(data);}/**
   * Inject properties from json object.
   * @private
   * @params {Object} json
   */fromJSON(json){cov_wqnf3fumx().f[19]++;cov_wqnf3fumx().s[49]++;assert(json,'Outpoint data is required.');cov_wqnf3fumx().s[50]++;assert(typeof json.hash==='string','Hash must be a string.');cov_wqnf3fumx().s[51]++;assert(json.index>>>0===json.index,'Index must be a uint32.');cov_wqnf3fumx().s[52]++;this.hash=util.fromRev(json.hash);cov_wqnf3fumx().s[53]++;this.index=json.index;cov_wqnf3fumx().s[54]++;return this;}/**
   * Convert the outpoint to an object suitable
   * for JSON serialization. Note that the hash
   * will be reversed to abide by bitcoind's legacy
   * of little-endian uint256s.
   * @returns {Object}
   */toJSON(){cov_wqnf3fumx().f[20]++;cov_wqnf3fumx().s[55]++;return{hash:util.revHex(this.hash),index:this.index};}/**
   * Instantiate outpoint from json object.
   * @param {Object} json
   * @returns {Outpoint}
   */static fromJSON(json){cov_wqnf3fumx().f[21]++;cov_wqnf3fumx().s[56]++;return new this().fromJSON(json);}/**
   * Inject properties from tx.
   * @private
   * @param {TX} tx
   * @param {Number} index
   */fromTX(tx,index){cov_wqnf3fumx().f[22]++;cov_wqnf3fumx().s[57]++;assert(tx);cov_wqnf3fumx().s[58]++;assert(typeof index==='number');cov_wqnf3fumx().s[59]++;assert(index>=0);cov_wqnf3fumx().s[60]++;this.hash=tx.hash();cov_wqnf3fumx().s[61]++;this.index=index;cov_wqnf3fumx().s[62]++;return this;}/**
   * Instantiate outpoint from tx.
   * @param {TX} tx
   * @param {Number} index
   * @returns {Outpoint}
   */static fromTX(tx,index){cov_wqnf3fumx().f[23]++;cov_wqnf3fumx().s[63]++;return new this().fromTX(tx,index);}/**
   * Serialize outpoint to a key
   * suitable for a hash table.
   * @param {Hash} hash
   * @param {Number} index
   * @returns {String}
   */static toKey(hash,index){cov_wqnf3fumx().f[24]++;cov_wqnf3fumx().s[64]++;return new Outpoint(hash,index).toKey();}/**
   * Convert the outpoint to a user-friendly string.
   * @returns {String}
   */[inspectSymbol](){cov_wqnf3fumx().f[25]++;cov_wqnf3fumx().s[65]++;return`<Outpoint: ${this.rhash()}/${this.index}>`;}/**
   * Test an object to see if it is an outpoint.
   * @param {Object} obj
   * @returns {Boolean}
   */static isOutpoint(obj){cov_wqnf3fumx().f[26]++;cov_wqnf3fumx().s[66]++;return obj instanceof Outpoint;}}/*
 * Helpers
 */function strcmp(a,b){cov_wqnf3fumx().f[27]++;const len=(cov_wqnf3fumx().s[67]++,Math.min(a.length,b.length));cov_wqnf3fumx().s[68]++;for(let i=(cov_wqnf3fumx().s[69]++,0);i<len;i++){cov_wqnf3fumx().s[70]++;if(a[i]<b[i]){cov_wqnf3fumx().b[4][0]++;cov_wqnf3fumx().s[71]++;return-1;}else{cov_wqnf3fumx().b[4][1]++;}cov_wqnf3fumx().s[72]++;if(a[i]>b[i]){cov_wqnf3fumx().b[5][0]++;cov_wqnf3fumx().s[73]++;return 1;}else{cov_wqnf3fumx().b[5][1]++;}}cov_wqnf3fumx().s[74]++;if(a.length<b.length){cov_wqnf3fumx().b[6][0]++;cov_wqnf3fumx().s[75]++;return-1;}else{cov_wqnf3fumx().b[6][1]++;}cov_wqnf3fumx().s[76]++;if(a.length>b.length){cov_wqnf3fumx().b[7][0]++;cov_wqnf3fumx().s[77]++;return 1;}else{cov_wqnf3fumx().b[7][1]++;}cov_wqnf3fumx().s[78]++;return 0;}/*
 * Expose
 */cov_wqnf3fumx().s[79]++;module.exports=Outpoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
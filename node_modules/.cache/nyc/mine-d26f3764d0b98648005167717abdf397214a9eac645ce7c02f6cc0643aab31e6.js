/*!
 * mine.js - mining function for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_3pd3fm5e2(){var path="E:\\Projects\\Test\\bcoin\\lib\\mining\\mine.js";var hash="5b3b8885c3f4a170d2b12e147918b42944725721";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\mining\\mine.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:16},end:{line:10,column:46}},"2":{start:{line:23,column:14},end:{line:23,column:17}},"3":{start:{line:25,column:2},end:{line:25,column:38}},"4":{start:{line:28,column:2},end:{line:38,column:3}},"5":{start:{line:30,column:4},end:{line:31,column:19}},"6":{start:{line:31,column:6},end:{line:31,column:19}},"7":{start:{line:34,column:4},end:{line:34,column:15}},"8":{start:{line:37,column:4},end:{line:37,column:40}},"9":{start:{line:40,column:2},end:{line:40,column:12}},"10":{start:{line:53,column:2},end:{line:53,column:32}},"11":{start:{line:55,column:2},end:{line:60,column:3}},"12":{start:{line:55,column:15},end:{line:55,column:27}},"13":{start:{line:56,column:4},end:{line:57,column:16}},"14":{start:{line:57,column:6},end:{line:57,column:16}},"15":{start:{line:58,column:4},end:{line:59,column:15}},"16":{start:{line:59,column:6},end:{line:59,column:15}},"17":{start:{line:62,column:2},end:{line:62,column:11}},"18":{start:{line:69,column:0},end:{line:69,column:22}}},fnMap:{"0":{name:"mine",decl:{start:{line:22,column:9},end:{line:22,column:13}},loc:{start:{line:22,column:38},end:{line:41,column:1}},line:22},"1":{name:"rcmp",decl:{start:{line:52,column:9},end:{line:52,column:13}},loc:{start:{line:52,column:20},end:{line:63,column:1}},line:52}},branchMap:{"0":{loc:{start:{line:30,column:4},end:{line:31,column:19}},type:"if",locations:[{start:{line:30,column:4},end:{line:31,column:19}},{start:{line:30,column:4},end:{line:31,column:19}}],line:30},"1":{loc:{start:{line:56,column:4},end:{line:57,column:16}},type:"if",locations:[{start:{line:56,column:4},end:{line:57,column:16}},{start:{line:56,column:4},end:{line:57,column:16}}],line:56},"2":{loc:{start:{line:58,column:4},end:{line:59,column:15}},type:"if",locations:[{start:{line:58,column:4},end:{line:59,column:15}},{start:{line:58,column:4},end:{line:59,column:15}}],line:58}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5b3b8885c3f4a170d2b12e147918b42944725721"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_3pd3fm5e2=function(){return actualCoverage;};}return actualCoverage;}cov_3pd3fm5e2();const assert=(cov_3pd3fm5e2().s[0]++,require('bsert'));const hash256=(cov_3pd3fm5e2().s[1]++,require('bcrypto/lib/hash256'));/**
 * Hash until the nonce overflows.
 * @alias module:mining.mine
 * @param {Buffer} data
 * @param {Buffer} target - Big endian.
 * @param {Number} min
 * @param {Number} max
 * @returns {Number} Nonce or -1.
 */function mine(data,target,min,max){cov_3pd3fm5e2().f[0]++;let nonce=(cov_3pd3fm5e2().s[2]++,min);cov_3pd3fm5e2().s[3]++;data.writeUInt32LE(nonce,76,true);// The heart and soul of the miner: match the target.
cov_3pd3fm5e2().s[4]++;while(nonce<=max){cov_3pd3fm5e2().s[5]++;// Hash and test against the next target.
if(rcmp(hash256.digest(data),target)<=0){cov_3pd3fm5e2().b[0][0]++;cov_3pd3fm5e2().s[6]++;return nonce;}else{cov_3pd3fm5e2().b[0][1]++;}// Increment the nonce to get a different hash.
cov_3pd3fm5e2().s[7]++;nonce+=1;// Update the raw buffer.
cov_3pd3fm5e2().s[8]++;data.writeUInt32LE(nonce,76,true);}cov_3pd3fm5e2().s[9]++;return-1;}/**
 * "Reverse" comparison so we don't have
 * to waste time reversing the block hash.
 * @ignore
 * @param {Buffer} a
 * @param {Buffer} b
 * @returns {Number}
 */function rcmp(a,b){cov_3pd3fm5e2().f[1]++;cov_3pd3fm5e2().s[10]++;assert(a.length===b.length);cov_3pd3fm5e2().s[11]++;for(let i=(cov_3pd3fm5e2().s[12]++,a.length-1);i>=0;i--){cov_3pd3fm5e2().s[13]++;if(a[i]<b[i]){cov_3pd3fm5e2().b[1][0]++;cov_3pd3fm5e2().s[14]++;return-1;}else{cov_3pd3fm5e2().b[1][1]++;}cov_3pd3fm5e2().s[15]++;if(a[i]>b[i]){cov_3pd3fm5e2().b[2][0]++;cov_3pd3fm5e2().s[16]++;return 1;}else{cov_3pd3fm5e2().b[2][1]++;}}cov_3pd3fm5e2().s[17]++;return 0;}/*
 * Expose
 */cov_3pd3fm5e2().s[18]++;module.exports=mine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pbmUuanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsImhhc2gyNTYiLCJtaW5lIiwiZGF0YSIsInRhcmdldCIsIm1pbiIsIm1heCIsIm5vbmNlIiwid3JpdGVVSW50MzJMRSIsInJjbXAiLCJkaWdlc3QiLCJhIiwiYiIsImxlbmd0aCIsImkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBRUEsYSwrbEZBU1k7eUZBUFosS0FBTUEsQ0FBQUEsTUFBTSx5QkFBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBVixDQUFaLENBQ0EsS0FBTUMsQ0FBQUEsT0FBTyx5QkFBR0QsT0FBTyxDQUFDLHFCQUFELENBQVYsQ0FBYixDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUVBLFFBQVNFLENBQUFBLElBQVQsQ0FBY0MsSUFBZCxDQUFvQkMsTUFBcEIsQ0FBNEJDLEdBQTVCLENBQWlDQyxHQUFqQyxDQUFzQyx3QkFDcEMsR0FBSUMsQ0FBQUEsS0FBSyx5QkFBR0YsR0FBSCxDQUFULENBRG9DLHVCQUdwQ0YsSUFBSSxDQUFDSyxhQUFMLENBQW1CRCxLQUFuQixDQUEwQixFQUExQixDQUE4QixJQUE5QixFQUVBO0FBTG9DLHVCQU1wQyxNQUFPQSxLQUFLLEVBQUlELEdBQWhCLENBQXFCLHdCQUNuQjtBQUNBLEdBQUlHLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxNQUFSLENBQWVQLElBQWYsQ0FBRCxDQUF1QkMsTUFBdkIsQ0FBSixFQUFzQyxDQUExQyxDQUNFLHdEQUFPRyxDQUFBQSxLQUFQLENBQWEsQ0FEZixnQ0FHQTtBQUxtQix1QkFNbkJBLEtBQUssRUFBSSxDQUFULENBRUE7QUFSbUIsdUJBU25CSixJQUFJLENBQUNLLGFBQUwsQ0FBbUJELEtBQW5CLENBQTBCLEVBQTFCLENBQThCLElBQTlCLEVBQ0QsQ0FoQm1DLHVCQWtCcEMsTUFBTyxDQUFDLENBQVIsQ0FDRCxDQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FFQSxRQUFTRSxDQUFBQSxJQUFULENBQWNFLENBQWQsQ0FBaUJDLENBQWpCLENBQW9CLGdEQUNsQmIsTUFBTSxDQUFDWSxDQUFDLENBQUNFLE1BQUYsR0FBYUQsQ0FBQyxDQUFDQyxNQUFoQixDQUFOLENBRGtCLHdCQUdsQixJQUFLLEdBQUlDLENBQUFBLENBQUMsMEJBQUdILENBQUMsQ0FBQ0UsTUFBRixDQUFXLENBQWQsQ0FBVixDQUEyQkMsQ0FBQyxFQUFJLENBQWhDLENBQW1DQSxDQUFDLEVBQXBDLENBQXdDLHlCQUN0QyxHQUFJSCxDQUFDLENBQUNHLENBQUQsQ0FBRCxDQUFPRixDQUFDLENBQUNFLENBQUQsQ0FBWixDQUNFLHlEQUFPLENBQUMsQ0FBUixDQUFVLENBRFosZ0NBRHNDLHdCQUd0QyxHQUFJSCxDQUFDLENBQUNHLENBQUQsQ0FBRCxDQUFPRixDQUFDLENBQUNFLENBQUQsQ0FBWixDQUNFLHlEQUFPLEVBQVAsQ0FBUyxDQURYLGdDQUVELENBUmlCLHdCQVVsQixNQUFPLEVBQVAsQ0FDRCxDQUVEO0FBQ0E7QUFDQSxHLHdCQUVBQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJkLElBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIG1pbmUuanMgLSBtaW5pbmcgZnVuY3Rpb24gZm9yIGJjb2luXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBDaHJpc3RvcGhlciBKZWZmcmV5IChNSVQgTGljZW5zZSkuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9iY29pbi1vcmcvYmNvaW5cclxuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdic2VydCcpO1xyXG5jb25zdCBoYXNoMjU2ID0gcmVxdWlyZSgnYmNyeXB0by9saWIvaGFzaDI1NicpO1xyXG5cclxuLyoqXHJcbiAqIEhhc2ggdW50aWwgdGhlIG5vbmNlIG92ZXJmbG93cy5cclxuICogQGFsaWFzIG1vZHVsZTptaW5pbmcubWluZVxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YVxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gdGFyZ2V0IC0gQmlnIGVuZGlhbi5cclxuICogQHBhcmFtIHtOdW1iZXJ9IG1pblxyXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4XHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IE5vbmNlIG9yIC0xLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1pbmUoZGF0YSwgdGFyZ2V0LCBtaW4sIG1heCkge1xyXG4gIGxldCBub25jZSA9IG1pbjtcclxuXHJcbiAgZGF0YS53cml0ZVVJbnQzMkxFKG5vbmNlLCA3NiwgdHJ1ZSk7XHJcblxyXG4gIC8vIFRoZSBoZWFydCBhbmQgc291bCBvZiB0aGUgbWluZXI6IG1hdGNoIHRoZSB0YXJnZXQuXHJcbiAgd2hpbGUgKG5vbmNlIDw9IG1heCkge1xyXG4gICAgLy8gSGFzaCBhbmQgdGVzdCBhZ2FpbnN0IHRoZSBuZXh0IHRhcmdldC5cclxuICAgIGlmIChyY21wKGhhc2gyNTYuZGlnZXN0KGRhdGEpLCB0YXJnZXQpIDw9IDApXHJcbiAgICAgIHJldHVybiBub25jZTtcclxuXHJcbiAgICAvLyBJbmNyZW1lbnQgdGhlIG5vbmNlIHRvIGdldCBhIGRpZmZlcmVudCBoYXNoLlxyXG4gICAgbm9uY2UgKz0gMTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHJhdyBidWZmZXIuXHJcbiAgICBkYXRhLndyaXRlVUludDMyTEUobm9uY2UsIDc2LCB0cnVlKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAtMTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFwiUmV2ZXJzZVwiIGNvbXBhcmlzb24gc28gd2UgZG9uJ3QgaGF2ZVxyXG4gKiB0byB3YXN0ZSB0aW1lIHJldmVyc2luZyB0aGUgYmxvY2sgaGFzaC5cclxuICogQGlnbm9yZVxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYVxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHJjbXAoYSwgYikge1xyXG4gIGFzc2VydChhLmxlbmd0aCA9PT0gYi5sZW5ndGgpO1xyXG5cclxuICBmb3IgKGxldCBpID0gYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgaWYgKGFbaV0gPCBiW2ldKVxyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICBpZiAoYVtpXSA+IGJbaV0pXHJcbiAgICAgIHJldHVybiAxO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIDA7XHJcbn1cclxuXHJcbi8qXHJcbiAqIEV4cG9zZVxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbWluZTtcclxuIl19
/*!
 * headers.js - headers object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_iu46qdszn(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\headers.js";var hash="b853dcaf4577edbe8fa6194b279e92923a192874";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\headers.js",statementMap:{"0":{start:{line:10,column:12},end:{line:10,column:28}},"1":{start:{line:11,column:13},end:{line:11,column:37}},"2":{start:{line:12,column:22},end:{line:12,column:48}},"3":{start:{line:13,column:24},end:{line:13,column:43}},"4":{start:{line:31,column:4},end:{line:31,column:12}},"5":{start:{line:33,column:4},end:{line:34,column:33}},"6":{start:{line:34,column:6},end:{line:34,column:33}},"7":{start:{line:44,column:4},end:{line:44,column:16}},"8":{start:{line:53,column:4},end:{line:53,column:14}},"9":{start:{line:62,column:4},end:{line:62,column:23}},"10":{start:{line:63,column:4},end:{line:63,column:22}},"11":{start:{line:64,column:4},end:{line:64,column:14}},"12":{start:{line:73,column:17},end:{line:73,column:31}},"13":{start:{line:74,column:4},end:{line:74,column:51}},"14":{start:{line:84,column:4},end:{line:84,column:22}},"15":{start:{line:85,column:4},end:{line:85,column:20}},"16":{start:{line:86,column:4},end:{line:86,column:16}},"17":{start:{line:96,column:4},end:{line:96,column:43}},"18":{start:{line:106,column:4},end:{line:106,column:37}},"19":{start:{line:117,column:4},end:{line:118,column:36}},"20":{start:{line:118,column:6},end:{line:118,column:36}},"21":{start:{line:119,column:4},end:{line:119,column:36}},"22":{start:{line:130,column:4},end:{line:131,column:36}},"23":{start:{line:131,column:6},end:{line:131,column:36}},"24":{start:{line:132,column:4},end:{line:132,column:37}},"25":{start:{line:142,column:20},end:{line:142,column:30}},"26":{start:{line:143,column:4},end:{line:143,column:36}},"27":{start:{line:144,column:4},end:{line:144,column:40}},"28":{start:{line:145,column:4},end:{line:145,column:42}},"29":{start:{line:146,column:4},end:{line:146,column:30}},"30":{start:{line:147,column:4},end:{line:147,column:30}},"31":{start:{line:148,column:4},end:{line:148,column:32}},"32":{start:{line:149,column:4},end:{line:149,column:31}},"33":{start:{line:150,column:4},end:{line:150,column:32}},"34":{start:{line:151,column:4},end:{line:151,column:19}},"35":{start:{line:160,column:4},end:{line:160,column:16}},"36":{start:{line:170,column:20},end:{line:170,column:35}},"37":{start:{line:171,column:4},end:{line:171,column:32}},"38":{start:{line:172,column:4},end:{line:172,column:34}},"39":{start:{line:173,column:4},end:{line:173,column:19}},"40":{start:{line:183,column:4},end:{line:183,column:26}},"41":{start:{line:198,column:4},end:{line:207,column:6}},"42":{start:{line:217,column:4},end:{line:217,column:25}},"43":{start:{line:218,column:4},end:{line:218,column:16}},"44":{start:{line:228,column:4},end:{line:228,column:37}},"45":{start:{line:238,column:4},end:{line:238,column:25}},"46":{start:{line:250,column:4},end:{line:260,column:6}},"47":{start:{line:270,column:4},end:{line:270,column:34}},"48":{start:{line:278,column:0},end:{line:278,column:25}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:30,column:2},end:{line:30,column:3}},loc:{start:{line:30,column:23},end:{line:35,column:3}},line:30},"1":{name:"(anonymous_1)",decl:{start:{line:43,column:2},end:{line:43,column:3}},loc:{start:{line:43,column:15},end:{line:45,column:3}},line:43},"2":{name:"(anonymous_2)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:12},end:{line:54,column:3}},line:52},"3":{name:"(anonymous_3)",decl:{start:{line:61,column:2},end:{line:61,column:3}},loc:{start:{line:61,column:15},end:{line:65,column:3}},line:61},"4":{name:"(anonymous_4)",decl:{start:{line:72,column:2},end:{line:72,column:3}},loc:{start:{line:72,column:10},end:{line:75,column:3}},line:72},"5":{name:"(anonymous_5)",decl:{start:{line:83,column:2},end:{line:83,column:3}},loc:{start:{line:83,column:17},end:{line:87,column:3}},line:83},"6":{name:"(anonymous_6)",decl:{start:{line:95,column:2},end:{line:95,column:3}},loc:{start:{line:95,column:16},end:{line:97,column:3}},line:95},"7":{name:"(anonymous_7)",decl:{start:{line:105,column:2},end:{line:105,column:3}},loc:{start:{line:105,column:24},end:{line:107,column:3}},line:105},"8":{name:"(anonymous_8)",decl:{start:{line:116,column:2},end:{line:116,column:3}},loc:{start:{line:116,column:28},end:{line:120,column:3}},line:116},"9":{name:"(anonymous_9)",decl:{start:{line:129,column:2},end:{line:129,column:3}},loc:{start:{line:129,column:29},end:{line:133,column:3}},line:129},"10":{name:"(anonymous_10)",decl:{start:{line:141,column:2},end:{line:141,column:3}},loc:{start:{line:141,column:26},end:{line:152,column:3}},line:141},"11":{name:"(anonymous_11)",decl:{start:{line:159,column:2},end:{line:159,column:3}},loc:{start:{line:159,column:14},end:{line:161,column:3}},line:159},"12":{name:"(anonymous_12)",decl:{start:{line:169,column:2},end:{line:169,column:3}},loc:{start:{line:169,column:26},end:{line:174,column:3}},line:169},"13":{name:"(anonymous_13)",decl:{start:{line:182,column:2},end:{line:182,column:3}},loc:{start:{line:182,column:11},end:{line:184,column:3}},line:182},"14":{name:"(anonymous_14)",decl:{start:{line:197,column:2},end:{line:197,column:3}},loc:{start:{line:197,column:33},end:{line:208,column:3}},line:197},"15":{name:"(anonymous_15)",decl:{start:{line:216,column:2},end:{line:216,column:3}},loc:{start:{line:216,column:17},end:{line:219,column:3}},line:216},"16":{name:"(anonymous_16)",decl:{start:{line:227,column:2},end:{line:227,column:3}},loc:{start:{line:227,column:24},end:{line:229,column:3}},line:227},"17":{name:"(anonymous_17)",decl:{start:{line:237,column:2},end:{line:237,column:3}},loc:{start:{line:237,column:20},end:{line:239,column:3}},line:237},"18":{name:"(anonymous_18)",decl:{start:{line:249,column:2},end:{line:249,column:3}},loc:{start:{line:249,column:23},end:{line:261,column:3}},line:249},"19":{name:"(anonymous_19)",decl:{start:{line:269,column:2},end:{line:269,column:3}},loc:{start:{line:269,column:24},end:{line:271,column:3}},line:269}},branchMap:{"0":{loc:{start:{line:33,column:4},end:{line:34,column:33}},type:"if",locations:[{start:{line:33,column:4},end:{line:34,column:33}},{start:{line:33,column:4},end:{line:34,column:33}}],line:33},"1":{loc:{start:{line:117,column:4},end:{line:118,column:36}},type:"if",locations:[{start:{line:117,column:4},end:{line:118,column:36}},{start:{line:117,column:4},end:{line:118,column:36}}],line:117},"2":{loc:{start:{line:130,column:4},end:{line:131,column:36}},type:"if",locations:[{start:{line:130,column:4},end:{line:131,column:36}},{start:{line:130,column:4},end:{line:131,column:36}}],line:130},"3":{loc:{start:{line:252,column:14},end:{line:252,column:42}},type:"cond-expr",locations:[{start:{line:252,column:31},end:{line:252,column:37}},{start:{line:252,column:40},end:{line:252,column:42}}],line:252}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b853dcaf4577edbe8fa6194b279e92923a192874"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_iu46qdszn=function(){return actualCoverage;};}return actualCoverage;}cov_iu46qdszn();const bio=(cov_iu46qdszn().s[0]++,require('bufio'));const util=(cov_iu46qdszn().s[1]++,require('../utils/util'));const AbstractBlock=(cov_iu46qdszn().s[2]++,require('./abstractblock'));const{inspectSymbol}=(cov_iu46qdszn().s[3]++,require('../utils'));/**
 * Headers
 * Represents block headers obtained
 * from the network via `headers`.
 * @alias module:primitives.Headers
 * @extends AbstractBlock
 */class Headers extends AbstractBlock{/**
   * Create headers.
   * @constructor
   * @param {Object} options
   */constructor(options){cov_iu46qdszn().f[0]++;cov_iu46qdszn().s[4]++;super();cov_iu46qdszn().s[5]++;if(options){cov_iu46qdszn().b[0][0]++;cov_iu46qdszn().s[6]++;this.parseOptions(options);}else{cov_iu46qdszn().b[0][1]++;}}/**
   * Perform non-contextual
   * verification on the headers.
   * @returns {Boolean}
   */verifyBody(){cov_iu46qdszn().f[1]++;cov_iu46qdszn().s[7]++;return true;}/**
   * Get size of the headers.
   * @returns {Number}
   */getSize(){cov_iu46qdszn().f[2]++;cov_iu46qdszn().s[8]++;return 81;}/**
   * Serialize the headers to a buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_iu46qdszn().f[3]++;cov_iu46qdszn().s[9]++;this.writeHead(bw);cov_iu46qdszn().s[10]++;bw.writeVarint(0);cov_iu46qdszn().s[11]++;return bw;}/**
   * Serialize the headers.
   * @returns {Buffer|String}
   */toRaw(){cov_iu46qdszn().f[4]++;const size=(cov_iu46qdszn().s[12]++,this.getSize());cov_iu46qdszn().s[13]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {Buffer} data
   */fromReader(br){cov_iu46qdszn().f[5]++;cov_iu46qdszn().s[14]++;this.readHead(br);cov_iu46qdszn().s[15]++;br.readVarint();cov_iu46qdszn().s[16]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_iu46qdszn().f[6]++;cov_iu46qdszn().s[17]++;return this.fromReader(bio.read(data));}/**
   * Instantiate headers from buffer reader.
   * @param {BufferReader} br
   * @returns {Headers}
   */static fromReader(br){cov_iu46qdszn().f[7]++;cov_iu46qdszn().s[18]++;return new this().fromReader(br);}/**
   * Instantiate headers from serialized data.
   * @param {Buffer} data
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Headers}
   */static fromRaw(data,enc){cov_iu46qdszn().f[8]++;cov_iu46qdszn().s[19]++;if(typeof data==='string'){cov_iu46qdszn().b[1][0]++;cov_iu46qdszn().s[20]++;data=Buffer.from(data,enc);}else{cov_iu46qdszn().b[1][1]++;}cov_iu46qdszn().s[21]++;return new this().fromRaw(data);}/**
   * Instantiate headers from serialized data.
   * @param {Buffer} data
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Headers}
   */static fromHead(data,enc){cov_iu46qdszn().f[9]++;cov_iu46qdszn().s[22]++;if(typeof data==='string'){cov_iu46qdszn().b[2][0]++;cov_iu46qdszn().s[23]++;data=Buffer.from(data,enc);}else{cov_iu46qdszn().b[2][1]++;}cov_iu46qdszn().s[24]++;return new this().fromHead(data);}/**
   * Instantiate headers from a chain entry.
   * @param {ChainEntry} entry
   * @returns {Headers}
   */static fromEntry(entry){cov_iu46qdszn().f[10]++;const headers=(cov_iu46qdszn().s[25]++,new this());cov_iu46qdszn().s[26]++;headers.version=entry.version;cov_iu46qdszn().s[27]++;headers.prevBlock=entry.prevBlock;cov_iu46qdszn().s[28]++;headers.merkleRoot=entry.merkleRoot;cov_iu46qdszn().s[29]++;headers.time=entry.time;cov_iu46qdszn().s[30]++;headers.bits=entry.bits;cov_iu46qdszn().s[31]++;headers.nonce=entry.nonce;cov_iu46qdszn().s[32]++;headers._hash=entry.hash;cov_iu46qdszn().s[33]++;headers._hhash=entry.hash;cov_iu46qdszn().s[34]++;return headers;}/**
   * Convert the block to a headers object.
   * @returns {Headers}
   */toHeaders(){cov_iu46qdszn().f[11]++;cov_iu46qdszn().s[35]++;return this;}/**
   * Convert the block to a headers object.
   * @param {Block|MerkleBlock} block
   * @returns {Headers}
   */static fromBlock(block){cov_iu46qdszn().f[12]++;const headers=(cov_iu46qdszn().s[36]++,new this(block));cov_iu46qdszn().s[37]++;headers._hash=block._hash;cov_iu46qdszn().s[38]++;headers._hhash=block._hhash;cov_iu46qdszn().s[39]++;return headers;}/**
   * Convert the block to an object suitable
   * for JSON serialization.
   * @returns {Object}
   */toJSON(){cov_iu46qdszn().f[13]++;cov_iu46qdszn().s[40]++;return this.getJSON();}/**
   * Convert the block to an object suitable
   * for JSON serialization. Note that the hashes
   * will be reversed to abide by bitcoind's legacy
   * of little-endian uint256s.
   * @param {Network} network
   * @param {CoinView} view
   * @param {Number} height
   * @returns {Object}
   */getJSON(network,view,height){cov_iu46qdszn().f[14]++;cov_iu46qdszn().s[41]++;return{hash:this.rhash(),height:height,version:this.version,prevBlock:util.revHex(this.prevBlock),merkleRoot:util.revHex(this.merkleRoot),time:this.time,bits:this.bits,nonce:this.nonce};}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   */fromJSON(json){cov_iu46qdszn().f[15]++;cov_iu46qdszn().s[42]++;this.parseJSON(json);cov_iu46qdszn().s[43]++;return this;}/**
   * Instantiate a merkle block from a jsonified block object.
   * @param {Object} json - The jsonified block object.
   * @returns {Headers}
   */static fromJSON(json){cov_iu46qdszn().f[16]++;cov_iu46qdszn().s[44]++;return new this().fromJSON(json);}/**
   * Inspect the headers and return a more
   * user-friendly representation of the data.
   * @returns {Object}
   */[inspectSymbol](){cov_iu46qdszn().f[17]++;cov_iu46qdszn().s[45]++;return this.format();}/**
   * Inspect the headers and return a more
   * user-friendly representation of the data.
   * @param {CoinView} view
   * @param {Number} height
   * @returns {Object}
   */format(view,height){cov_iu46qdszn().f[18]++;cov_iu46qdszn().s[46]++;return{hash:this.rhash(),height:height!=null?(cov_iu46qdszn().b[3][0]++,height):(cov_iu46qdszn().b[3][1]++,-1),date:util.date(this.time),version:this.version.toString(16),prevBlock:util.revHex(this.prevBlock),merkleRoot:util.revHex(this.merkleRoot),time:this.time,bits:this.bits,nonce:this.nonce};}/**
   * Test an object to see if it is a Headers object.
   * @param {Object} obj
   * @returns {Boolean}
   */static isHeaders(obj){cov_iu46qdszn().f[19]++;cov_iu46qdszn().s[47]++;return obj instanceof Headers;}}/*
 * Expose
 */cov_iu46qdszn().s[48]++;module.exports=Headers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
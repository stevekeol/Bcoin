/*!
 * mnemonic.js - hd mnemonics for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_tm3wyb50h(){var path="E:\\Projects\\Test\\bcoin\\lib\\hd\\mnemonic.js";var hash="b572ef9f37446feae75145a61450b6106cc337e2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\hd\\mnemonic.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:12},end:{line:10,column:28}},"2":{start:{line:11,column:15},end:{line:11,column:44}},"3":{start:{line:12,column:16},end:{line:12,column:46}},"4":{start:{line:13,column:15},end:{line:13,column:44}},"5":{start:{line:14,column:15},end:{line:14,column:44}},"6":{start:{line:15,column:15},end:{line:15,column:44}},"7":{start:{line:16,column:17},end:{line:16,column:38}},"8":{start:{line:17,column:15},end:{line:17,column:34}},"9":{start:{line:18,column:13},end:{line:18,column:30}},"10":{start:{line:19,column:24},end:{line:19,column:43}},"11":{start:{line:25,column:22},end:{line:25,column:41}},"12":{start:{line:48,column:4},end:{line:48,column:35}},"13":{start:{line:49,column:4},end:{line:49,column:30}},"14":{start:{line:50,column:4},end:{line:50,column:24}},"15":{start:{line:51,column:4},end:{line:51,column:23}},"16":{start:{line:53,column:4},end:{line:54,column:32}},"17":{start:{line:54,column:6},end:{line:54,column:32}},"18":{start:{line:64,column:4},end:{line:65,column:36}},"19":{start:{line:65,column:6},end:{line:65,column:36}},"20":{start:{line:67,column:4},end:{line:73,column:5}},"21":{start:{line:68,column:6},end:{line:68,column:55}},"22":{start:{line:69,column:6},end:{line:69,column:49}},"23":{start:{line:70,column:6},end:{line:70,column:49}},"24":{start:{line:71,column:6},end:{line:71,column:38}},"25":{start:{line:72,column:6},end:{line:72,column:31}},"26":{start:{line:75,column:4},end:{line:79,column:5}},"27":{start:{line:76,column:6},end:{line:76,column:51}},"28":{start:{line:77,column:6},end:{line:77,column:66}},"29":{start:{line:78,column:6},end:{line:78,column:39}},"30":{start:{line:81,column:4},end:{line:84,column:5}},"31":{start:{line:82,column:6},end:{line:82,column:38}},"32":{start:{line:83,column:6},end:{line:83,column:18}},"33":{start:{line:86,column:4},end:{line:89,column:5}},"34":{start:{line:87,column:6},end:{line:87,column:40}},"35":{start:{line:88,column:6},end:{line:88,column:18}},"36":{start:{line:91,column:4},end:{line:91,column:16}},"37":{start:{line:101,column:4},end:{line:101,column:43}},"38":{start:{line:109,column:4},end:{line:109,column:35}},"39":{start:{line:110,column:4},end:{line:110,column:30}},"40":{start:{line:111,column:4},end:{line:114,column:5}},"41":{start:{line:112,column:6},end:{line:112,column:28}},"42":{start:{line:113,column:6},end:{line:113,column:26}},"43":{start:{line:115,column:4},end:{line:115,column:23}},"44":{start:{line:125,column:4},end:{line:126,column:22}},"45":{start:{line:126,column:6},end:{line:126,column:22}},"46":{start:{line:128,column:19},end:{line:128,column:41}},"47":{start:{line:129,column:19},end:{line:129,column:48}},"48":{start:{line:131,column:4},end:{line:134,column:16}},"49":{start:{line:143,column:4},end:{line:144,column:55}},"50":{start:{line:144,column:6},end:{line:144,column:55}},"51":{start:{line:146,column:4},end:{line:146,column:50}},"52":{start:{line:148,column:4},end:{line:148,column:24}},"53":{start:{line:157,column:4},end:{line:158,column:25}},"54":{start:{line:158,column:6},end:{line:158,column:25}},"55":{start:{line:162,column:18},end:{line:162,column:46}},"56":{start:{line:165,column:20},end:{line:165,column:37}},"57":{start:{line:166,column:16},end:{line:166,column:38}},"58":{start:{line:171,column:17},end:{line:171,column:37}},"59":{start:{line:172,column:17},end:{line:172,column:41}},"60":{start:{line:173,column:4},end:{line:173,column:26}},"61":{start:{line:174,column:4},end:{line:174,column:35}},"62":{start:{line:178,column:17},end:{line:178,column:52}},"63":{start:{line:180,column:17},end:{line:180,column:19}},"64":{start:{line:181,column:4},end:{line:191,column:5}},"65":{start:{line:181,column:17},end:{line:181,column:18}},"66":{start:{line:182,column:18},end:{line:182,column:19}},"67":{start:{line:183,column:6},end:{line:189,column:7}},"68":{start:{line:183,column:19},end:{line:183,column:20}},"69":{start:{line:184,column:20},end:{line:184,column:30}},"70":{start:{line:185,column:20},end:{line:185,column:27}},"71":{start:{line:186,column:20},end:{line:186,column:35}},"72":{start:{line:187,column:8},end:{line:187,column:20}},"73":{start:{line:188,column:8},end:{line:188,column:47}},"74":{start:{line:190,column:6},end:{line:190,column:37}},"75":{start:{line:194,column:4},end:{line:197,column:32}},"76":{start:{line:195,column:6},end:{line:195,column:37}},"77":{start:{line:197,column:6},end:{line:197,column:32}},"78":{start:{line:199,column:4},end:{line:199,column:25}},"79":{start:{line:201,column:4},end:{line:201,column:18}},"80":{start:{line:211,column:4},end:{line:211,column:39}},"81":{start:{line:212,column:4},end:{line:212,column:34}},"82":{start:{line:214,column:18},end:{line:214,column:52}},"83":{start:{line:215,column:18},end:{line:215,column:35}},"84":{start:{line:216,column:18},end:{line:216,column:28}},"85":{start:{line:218,column:4},end:{line:218,column:45}},"86":{start:{line:220,column:17},end:{line:220,column:30}},"87":{start:{line:222,column:4},end:{line:222,column:39}},"88":{start:{line:223,column:4},end:{line:223,column:39}},"89":{start:{line:224,column:4},end:{line:224,column:28}},"90":{start:{line:226,column:17},end:{line:226,column:37}},"91":{start:{line:227,column:17},end:{line:227,column:41}},"92":{start:{line:228,column:4},end:{line:228,column:17}},"93":{start:{line:230,column:17},end:{line:230,column:47}},"94":{start:{line:231,column:17},end:{line:231,column:43}},"95":{start:{line:234,column:4},end:{line:248,column:5}},"96":{start:{line:234,column:17},end:{line:234,column:18}},"97":{start:{line:235,column:19},end:{line:235,column:27}},"98":{start:{line:236,column:20},end:{line:236,column:34}},"99":{start:{line:238,column:6},end:{line:239,column:48}},"100":{start:{line:239,column:8},end:{line:239,column:48}},"101":{start:{line:241,column:6},end:{line:247,column:7}},"102":{start:{line:241,column:19},end:{line:241,column:20}},"103":{start:{line:242,column:20},end:{line:242,column:30}},"104":{start:{line:243,column:20},end:{line:243,column:27}},"105":{start:{line:244,column:20},end:{line:244,column:35}},"106":{start:{line:245,column:20},end:{line:245,column:44}},"107":{start:{line:246,column:8},end:{line:246,column:38}},"108":{start:{line:250,column:19},end:{line:250,column:39}},"109":{start:{line:251,column:20},end:{line:251,column:55}},"110":{start:{line:252,column:17},end:{line:252,column:49}},"111":{start:{line:253,column:17},end:{line:253,column:39}},"112":{start:{line:256,column:4},end:{line:263,column:5}},"113":{start:{line:256,column:17},end:{line:256,column:18}},"114":{start:{line:257,column:18},end:{line:257,column:23}},"115":{start:{line:258,column:18},end:{line:258,column:31}},"116":{start:{line:259,column:17},end:{line:259,column:46}},"117":{start:{line:260,column:17},end:{line:260,column:46}},"118":{start:{line:261,column:6},end:{line:262,column:45}},"119":{start:{line:262,column:8},end:{line:262,column:45}},"120":{start:{line:265,column:4},end:{line:265,column:40}},"121":{start:{line:267,column:4},end:{line:267,column:21}},"122":{start:{line:268,column:4},end:{line:268,column:25}},"123":{start:{line:269,column:4},end:{line:269,column:27}},"124":{start:{line:270,column:4},end:{line:270,column:25}},"125":{start:{line:272,column:4},end:{line:272,column:16}},"126":{start:{line:283,column:4},end:{line:283,column:41}},"127":{start:{line:294,column:4},end:{line:294,column:37}},"128":{start:{line:295,column:4},end:{line:295,column:53}},"129":{start:{line:296,column:4},end:{line:296,column:53}},"130":{start:{line:297,column:4},end:{line:297,column:44}},"131":{start:{line:298,column:4},end:{line:298,column:61}},"132":{start:{line:300,column:4},end:{line:300,column:27}},"133":{start:{line:301,column:4},end:{line:301,column:35}},"134":{start:{line:303,column:4},end:{line:304,column:27}},"135":{start:{line:304,column:6},end:{line:304,column:27}},"136":{start:{line:306,column:4},end:{line:306,column:16}},"137":{start:{line:317,column:4},end:{line:317,column:49}},"138":{start:{line:328,column:4},end:{line:332,column:5}},"139":{start:{line:329,column:19},end:{line:329,column:45}},"140":{start:{line:330,column:6},end:{line:331,column:20}},"141":{start:{line:331,column:8},end:{line:331,column:20}},"142":{start:{line:334,column:4},end:{line:334,column:53}},"143":{start:{line:344,column:18},end:{line:344,column:37}},"144":{start:{line:346,column:4},end:{line:347,column:19}},"145":{start:{line:347,column:6},end:{line:347,column:19}},"146":{start:{line:349,column:18},end:{line:349,column:36}},"147":{start:{line:350,column:17},end:{line:350,column:36}},"148":{start:{line:352,column:4},end:{line:352,column:31}},"149":{start:{line:354,column:4},end:{line:354,column:16}},"150":{start:{line:363,column:4},end:{line:368,column:6}},"151":{start:{line:378,column:4},end:{line:378,column:17}},"152":{start:{line:379,column:4},end:{line:379,column:47}},"153":{start:{line:380,column:4},end:{line:380,column:46}},"154":{start:{line:381,column:4},end:{line:381,column:45}},"155":{start:{line:382,column:4},end:{line:382,column:44}},"156":{start:{line:383,column:4},end:{line:383,column:44}},"157":{start:{line:384,column:4},end:{line:384,column:44}},"158":{start:{line:385,column:4},end:{line:385,column:33}},"159":{start:{line:386,column:4},end:{line:386,column:54}},"160":{start:{line:388,column:4},end:{line:388,column:26}},"161":{start:{line:389,column:4},end:{line:389,column:34}},"162":{start:{line:390,column:4},end:{line:390,column:52}},"163":{start:{line:391,column:4},end:{line:391,column:30}},"164":{start:{line:393,column:4},end:{line:393,column:16}},"165":{start:{line:403,column:4},end:{line:403,column:37}},"166":{start:{line:412,column:15},end:{line:412,column:16}},"167":{start:{line:413,column:4},end:{line:413,column:14}},"168":{start:{line:414,column:4},end:{line:414,column:37}},"169":{start:{line:415,column:4},end:{line:415,column:16}},"170":{start:{line:424,column:17},end:{line:424,column:58}},"171":{start:{line:426,column:4},end:{line:426,column:24}},"172":{start:{line:428,column:4},end:{line:428,column:27}},"173":{start:{line:429,column:4},end:{line:429,column:21}},"174":{start:{line:430,column:4},end:{line:430,column:37}},"175":{start:{line:432,column:4},end:{line:432,column:14}},"176":{start:{line:441,column:17},end:{line:441,column:31}},"177":{start:{line:442,column:4},end:{line:442,column:51}},"178":{start:{line:452,column:17},end:{line:452,column:29}},"179":{start:{line:454,column:4},end:{line:454,column:39}},"180":{start:{line:455,column:4},end:{line:455,column:39}},"181":{start:{line:456,column:4},end:{line:456,column:28}},"182":{start:{line:458,column:21},end:{line:458,column:52}},"183":{start:{line:459,column:4},end:{line:459,column:21}},"184":{start:{line:461,column:4},end:{line:461,column:21}},"185":{start:{line:462,column:4},end:{line:462,column:29}},"186":{start:{line:463,column:4},end:{line:463,column:42}},"187":{start:{line:465,column:4},end:{line:465,column:16}},"188":{start:{line:475,column:4},end:{line:475,column:43}},"189":{start:{line:485,column:4},end:{line:485,column:37}},"190":{start:{line:495,column:4},end:{line:495,column:36}},"191":{start:{line:504,column:4},end:{line:504,column:28}},"192":{start:{line:513,column:4},end:{line:513,column:45}},"193":{start:{line:523,column:4},end:{line:523,column:35}},"194":{start:{line:533,column:0},end:{line:541,column:2}},"195":{start:{line:557,column:4},end:{line:557,column:23}},"196":{start:{line:558,column:4},end:{line:558,column:35}},"197":{start:{line:560,column:4},end:{line:563,column:5}},"198":{start:{line:560,column:17},end:{line:560,column:18}},"199":{start:{line:561,column:19},end:{line:561,column:27}},"200":{start:{line:562,column:6},end:{line:562,column:25}},"201":{start:{line:571,column:0},end:{line:571,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:47,column:2},end:{line:47,column:3}},loc:{start:{line:47,column:23},end:{line:55,column:3}},line:47},"1":{name:"(anonymous_1)",decl:{start:{line:63,column:2},end:{line:63,column:3}},loc:{start:{line:63,column:23},end:{line:92,column:3}},line:63},"2":{name:"(anonymous_2)",decl:{start:{line:100,column:2},end:{line:100,column:3}},loc:{start:{line:100,column:30},end:{line:102,column:3}},line:100},"3":{name:"(anonymous_3)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:12},end:{line:116,column:3}},line:108},"4":{name:"(anonymous_4)",decl:{start:{line:124,column:2},end:{line:124,column:3}},loc:{start:{line:124,column:21},end:{line:135,column:3}},line:124},"5":{name:"(anonymous_5)",decl:{start:{line:142,column:2},end:{line:142,column:3}},loc:{start:{line:142,column:15},end:{line:149,column:3}},line:142},"6":{name:"(anonymous_6)",decl:{start:{line:156,column:2},end:{line:156,column:3}},loc:{start:{line:156,column:14},end:{line:202,column:3}},line:156},"7":{name:"(anonymous_7)",decl:{start:{line:210,column:2},end:{line:210,column:3}},loc:{start:{line:210,column:21},end:{line:273,column:3}},line:210},"8":{name:"(anonymous_8)",decl:{start:{line:282,column:2},end:{line:282,column:3}},loc:{start:{line:282,column:28},end:{line:284,column:3}},line:282},"9":{name:"(anonymous_9)",decl:{start:{line:293,column:2},end:{line:293,column:3}},loc:{start:{line:293,column:29},end:{line:307,column:3}},line:293},"10":{name:"(anonymous_10)",decl:{start:{line:316,column:2},end:{line:316,column:3}},loc:{start:{line:316,column:36},end:{line:318,column:3}},line:316},"11":{name:"(anonymous_11)",decl:{start:{line:327,column:2},end:{line:327,column:3}},loc:{start:{line:327,column:27},end:{line:335,column:3}},line:327},"12":{name:"(anonymous_12)",decl:{start:{line:343,column:2},end:{line:343,column:3}},loc:{start:{line:343,column:27},end:{line:355,column:3}},line:343},"13":{name:"(anonymous_13)",decl:{start:{line:362,column:2},end:{line:362,column:3}},loc:{start:{line:362,column:11},end:{line:369,column:3}},line:362},"14":{name:"(anonymous_14)",decl:{start:{line:377,column:2},end:{line:377,column:3}},loc:{start:{line:377,column:17},end:{line:394,column:3}},line:377},"15":{name:"(anonymous_15)",decl:{start:{line:402,column:2},end:{line:402,column:3}},loc:{start:{line:402,column:24},end:{line:404,column:3}},line:402},"16":{name:"(anonymous_16)",decl:{start:{line:411,column:2},end:{line:411,column:3}},loc:{start:{line:411,column:12},end:{line:416,column:3}},line:411},"17":{name:"(anonymous_17)",decl:{start:{line:423,column:2},end:{line:423,column:3}},loc:{start:{line:423,column:15},end:{line:433,column:3}},line:423},"18":{name:"(anonymous_18)",decl:{start:{line:440,column:2},end:{line:440,column:3}},loc:{start:{line:440,column:16},end:{line:443,column:3}},line:440},"19":{name:"(anonymous_19)",decl:{start:{line:451,column:2},end:{line:451,column:3}},loc:{start:{line:451,column:17},end:{line:466,column:3}},line:451},"20":{name:"(anonymous_20)",decl:{start:{line:474,column:2},end:{line:474,column:3}},loc:{start:{line:474,column:16},end:{line:476,column:3}},line:474},"21":{name:"(anonymous_21)",decl:{start:{line:484,column:2},end:{line:484,column:3}},loc:{start:{line:484,column:24},end:{line:486,column:3}},line:484},"22":{name:"(anonymous_22)",decl:{start:{line:494,column:2},end:{line:494,column:3}},loc:{start:{line:494,column:23},end:{line:496,column:3}},line:494},"23":{name:"(anonymous_23)",decl:{start:{line:503,column:2},end:{line:503,column:3}},loc:{start:{line:503,column:13},end:{line:505,column:3}},line:503},"24":{name:"(anonymous_24)",decl:{start:{line:512,column:2},end:{line:512,column:3}},loc:{start:{line:512,column:20},end:{line:514,column:3}},line:512},"25":{name:"(anonymous_25)",decl:{start:{line:522,column:2},end:{line:522,column:3}},loc:{start:{line:522,column:25},end:{line:524,column:3}},line:522},"26":{name:"(anonymous_26)",decl:{start:{line:556,column:2},end:{line:556,column:3}},loc:{start:{line:556,column:21},end:{line:564,column:3}},line:556}},branchMap:{"0":{loc:{start:{line:53,column:4},end:{line:54,column:32}},type:"if",locations:[{start:{line:53,column:4},end:{line:54,column:32}},{start:{line:53,column:4},end:{line:54,column:32}}],line:53},"1":{loc:{start:{line:64,column:4},end:{line:65,column:36}},type:"if",locations:[{start:{line:64,column:4},end:{line:65,column:36}},{start:{line:64,column:4},end:{line:65,column:36}}],line:64},"2":{loc:{start:{line:67,column:4},end:{line:73,column:5}},type:"if",locations:[{start:{line:67,column:4},end:{line:73,column:5}},{start:{line:67,column:4},end:{line:73,column:5}}],line:67},"3":{loc:{start:{line:75,column:4},end:{line:79,column:5}},type:"if",locations:[{start:{line:75,column:4},end:{line:79,column:5}},{start:{line:75,column:4},end:{line:79,column:5}}],line:75},"4":{loc:{start:{line:81,column:4},end:{line:84,column:5}},type:"if",locations:[{start:{line:81,column:4},end:{line:84,column:5}},{start:{line:81,column:4},end:{line:84,column:5}}],line:81},"5":{loc:{start:{line:86,column:4},end:{line:89,column:5}},type:"if",locations:[{start:{line:86,column:4},end:{line:89,column:5}},{start:{line:86,column:4},end:{line:89,column:5}}],line:86},"6":{loc:{start:{line:111,column:4},end:{line:114,column:5}},type:"if",locations:[{start:{line:111,column:4},end:{line:114,column:5}},{start:{line:111,column:4},end:{line:114,column:5}}],line:111},"7":{loc:{start:{line:125,column:4},end:{line:126,column:22}},type:"if",locations:[{start:{line:125,column:4},end:{line:126,column:22}},{start:{line:125,column:4},end:{line:126,column:22}}],line:125},"8":{loc:{start:{line:143,column:4},end:{line:144,column:55}},type:"if",locations:[{start:{line:143,column:4},end:{line:144,column:55}},{start:{line:143,column:4},end:{line:144,column:55}}],line:143},"9":{loc:{start:{line:157,column:4},end:{line:158,column:25}},type:"if",locations:[{start:{line:157,column:4},end:{line:158,column:25}},{start:{line:157,column:4},end:{line:158,column:25}}],line:157},"10":{loc:{start:{line:194,column:4},end:{line:197,column:32}},type:"if",locations:[{start:{line:194,column:4},end:{line:197,column:32}},{start:{line:194,column:4},end:{line:197,column:32}}],line:194},"11":{loc:{start:{line:238,column:6},end:{line:239,column:48}},type:"if",locations:[{start:{line:238,column:6},end:{line:239,column:48}},{start:{line:238,column:6},end:{line:239,column:48}}],line:238},"12":{loc:{start:{line:261,column:6},end:{line:262,column:45}},type:"if",locations:[{start:{line:261,column:6},end:{line:262,column:45}},{start:{line:261,column:6},end:{line:262,column:45}}],line:261},"13":{loc:{start:{line:298,column:11},end:{line:298,column:59}},type:"binary-expr",locations:[{start:{line:298,column:11},end:{line:298,column:16}},{start:{line:298,column:20},end:{line:298,column:59}}],line:298},"14":{loc:{start:{line:303,column:4},end:{line:304,column:27}},type:"if",locations:[{start:{line:303,column:4},end:{line:304,column:27}},{start:{line:303,column:4},end:{line:304,column:27}}],line:303},"15":{loc:{start:{line:330,column:6},end:{line:331,column:20}},type:"if",locations:[{start:{line:330,column:6},end:{line:331,column:20}},{start:{line:330,column:6},end:{line:331,column:20}}],line:330},"16":{loc:{start:{line:346,column:4},end:{line:347,column:19}},type:"if",locations:[{start:{line:346,column:4},end:{line:347,column:19}},{start:{line:346,column:4},end:{line:347,column:19}}],line:346}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b572ef9f37446feae75145a61450b6106cc337e2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_tm3wyb50h=function(){return actualCoverage;};}return actualCoverage;}cov_tm3wyb50h();const assert=(cov_tm3wyb50h().s[0]++,require('bsert'));const bio=(cov_tm3wyb50h().s[1]++,require('bufio'));const sha256=(cov_tm3wyb50h().s[2]++,require('bcrypto/lib/sha256'));const cleanse=(cov_tm3wyb50h().s[3]++,require('bcrypto/lib/cleanse'));const random=(cov_tm3wyb50h().s[4]++,require('bcrypto/lib/random'));const pbkdf2=(cov_tm3wyb50h().s[5]++,require('bcrypto/lib/pbkdf2'));const sha512=(cov_tm3wyb50h().s[6]++,require('bcrypto/lib/sha512'));const wordlist=(cov_tm3wyb50h().s[7]++,require('./wordlist'));const common=(cov_tm3wyb50h().s[8]++,require('./common'));const nfkd=(cov_tm3wyb50h().s[9]++,require('./nfkd'));const{inspectSymbol}=(cov_tm3wyb50h().s[10]++,require('../utils'));/*
 * Constants
 */const wordlistCache=(cov_tm3wyb50h().s[11]++,Object.create(null));/**
 * HD Mnemonic
 * @alias module:hd.Mnemonic
 */class Mnemonic{/**
   * Create a mnemonic.
   * @constructor
   * @param {Object} options
   * @param {Number?} options.bit - Bits of entropy (Must
   * be a multiple of 8) (default=128).
   * @param {Buffer?} options.entropy - Entropy bytes. Will
   * be generated with `options.bits` bits of entropy
   * if not present.
   * @param {String?} options.phrase - Mnemonic phrase (will
   * be generated if not present).
   * @param {String?} options.language - Language.
   */constructor(options){cov_tm3wyb50h().f[0]++;cov_tm3wyb50h().s[12]++;this.bits=common.MIN_ENTROPY;cov_tm3wyb50h().s[13]++;this.language='english';cov_tm3wyb50h().s[14]++;this.entropy=null;cov_tm3wyb50h().s[15]++;this.phrase=null;cov_tm3wyb50h().s[16]++;if(options){cov_tm3wyb50h().b[0][0]++;cov_tm3wyb50h().s[17]++;this.fromOptions(options);}else{cov_tm3wyb50h().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_tm3wyb50h().f[1]++;cov_tm3wyb50h().s[18]++;if(typeof options==='string'){cov_tm3wyb50h().b[1][0]++;cov_tm3wyb50h().s[19]++;options={phrase:options};}else{cov_tm3wyb50h().b[1][1]++;}cov_tm3wyb50h().s[20]++;if(options.bits!=null){cov_tm3wyb50h().b[2][0]++;cov_tm3wyb50h().s[21]++;assert((options.bits&0xffff)===options.bits);cov_tm3wyb50h().s[22]++;assert(options.bits>=common.MIN_ENTROPY);cov_tm3wyb50h().s[23]++;assert(options.bits<=common.MAX_ENTROPY);cov_tm3wyb50h().s[24]++;assert(options.bits%32===0);cov_tm3wyb50h().s[25]++;this.bits=options.bits;}else{cov_tm3wyb50h().b[2][1]++;}cov_tm3wyb50h().s[26]++;if(options.language){cov_tm3wyb50h().b[3][0]++;cov_tm3wyb50h().s[27]++;assert(typeof options.language==='string');cov_tm3wyb50h().s[28]++;assert(Mnemonic.languages.indexOf(options.language)!==-1);cov_tm3wyb50h().s[29]++;this.language=options.language;}else{cov_tm3wyb50h().b[3][1]++;}cov_tm3wyb50h().s[30]++;if(options.phrase){cov_tm3wyb50h().b[4][0]++;cov_tm3wyb50h().s[31]++;this.fromPhrase(options.phrase);cov_tm3wyb50h().s[32]++;return this;}else{cov_tm3wyb50h().b[4][1]++;}cov_tm3wyb50h().s[33]++;if(options.entropy){cov_tm3wyb50h().b[5][0]++;cov_tm3wyb50h().s[34]++;this.fromEntropy(options.entropy);cov_tm3wyb50h().s[35]++;return this;}else{cov_tm3wyb50h().b[5][1]++;}cov_tm3wyb50h().s[36]++;return this;}/**
   * Instantiate mnemonic from options.
   * @param {Object} options
   * @returns {Mnemonic}
   */static fromOptions(options){cov_tm3wyb50h().f[2]++;cov_tm3wyb50h().s[37]++;return new this().fromOptions(options);}/**
   * Destroy the mnemonic (zeroes entropy).
   */destroy(){cov_tm3wyb50h().f[3]++;cov_tm3wyb50h().s[38]++;this.bits=common.MIN_ENTROPY;cov_tm3wyb50h().s[39]++;this.language='english';cov_tm3wyb50h().s[40]++;if(this.entropy){cov_tm3wyb50h().b[6][0]++;cov_tm3wyb50h().s[41]++;cleanse(this.entropy);cov_tm3wyb50h().s[42]++;this.entropy=null;}else{cov_tm3wyb50h().b[6][1]++;}cov_tm3wyb50h().s[43]++;this.phrase=null;}/**
   * Generate the seed.
   * @param {String?} passphrase
   * @returns {Buffer} pbkdf2 seed.
   */toSeed(passphrase){cov_tm3wyb50h().f[4]++;cov_tm3wyb50h().s[44]++;if(!passphrase){cov_tm3wyb50h().b[7][0]++;cov_tm3wyb50h().s[45]++;passphrase='';}else{cov_tm3wyb50h().b[7][1]++;}const phrase=(cov_tm3wyb50h().s[46]++,nfkd(this.getPhrase()));const passwd=(cov_tm3wyb50h().s[47]++,nfkd(`mnemonic${passphrase}`));cov_tm3wyb50h().s[48]++;return pbkdf2.derive(sha512,Buffer.from(phrase,'utf8'),Buffer.from(passwd,'utf8'),2048,64);}/**
   * Get or generate entropy.
   * @returns {Buffer}
   */getEntropy(){cov_tm3wyb50h().f[5]++;cov_tm3wyb50h().s[49]++;if(!this.entropy){cov_tm3wyb50h().b[8][0]++;cov_tm3wyb50h().s[50]++;this.entropy=random.randomBytes(this.bits/8);}else{cov_tm3wyb50h().b[8][1]++;}cov_tm3wyb50h().s[51]++;assert(this.bits/8===this.entropy.length);cov_tm3wyb50h().s[52]++;return this.entropy;}/**
   * Generate a mnemonic phrase from chosen language.
   * @returns {String}
   */getPhrase(){cov_tm3wyb50h().f[6]++;cov_tm3wyb50h().s[53]++;if(this.phrase){cov_tm3wyb50h().b[9][0]++;cov_tm3wyb50h().s[54]++;return this.phrase;}else{cov_tm3wyb50h().b[9][1]++;}// Include the first `ENT / 32` bits
// of the hash (the checksum).
const wbits=(cov_tm3wyb50h().s[55]++,this.bits+this.bits/32);// Get entropy and checksum.
const entropy=(cov_tm3wyb50h().s[56]++,this.getEntropy());const chk=(cov_tm3wyb50h().s[57]++,sha256.digest(entropy));// Append the hash to the entropy to
// make things easy when grabbing
// the checksum bits.
const size=(cov_tm3wyb50h().s[58]++,Math.ceil(wbits/8));const data=(cov_tm3wyb50h().s[59]++,Buffer.allocUnsafe(size));cov_tm3wyb50h().s[60]++;entropy.copy(data,0);cov_tm3wyb50h().s[61]++;chk.copy(data,entropy.length);// Build the mnemonic by reading
// 11 bit indexes from the entropy.
const list=(cov_tm3wyb50h().s[62]++,Mnemonic.getWordlist(this.language));let phrase=(cov_tm3wyb50h().s[63]++,[]);cov_tm3wyb50h().s[64]++;for(let i=(cov_tm3wyb50h().s[65]++,0);i<wbits/11;i++){let index=(cov_tm3wyb50h().s[66]++,0);cov_tm3wyb50h().s[67]++;for(let j=(cov_tm3wyb50h().s[68]++,0);j<11;j++){const pos=(cov_tm3wyb50h().s[69]++,i*11+j);const bit=(cov_tm3wyb50h().s[70]++,pos%8);const oct=(cov_tm3wyb50h().s[71]++,(pos-bit)/8);cov_tm3wyb50h().s[72]++;index<<=1;cov_tm3wyb50h().s[73]++;index|=data[oct]>>>7-bit&1;}cov_tm3wyb50h().s[74]++;phrase.push(list.words[index]);}// Japanese likes double-width spaces.
cov_tm3wyb50h().s[75]++;if(this.language==='japanese'){cov_tm3wyb50h().b[10][0]++;cov_tm3wyb50h().s[76]++;phrase=phrase.join('\u3000');}else{cov_tm3wyb50h().b[10][1]++;cov_tm3wyb50h().s[77]++;phrase=phrase.join(' ');}cov_tm3wyb50h().s[78]++;this.phrase=phrase;cov_tm3wyb50h().s[79]++;return phrase;}/**
   * Inject properties from phrase.
   * @private
   * @param {String} phrase
   */fromPhrase(phrase){cov_tm3wyb50h().f[7]++;cov_tm3wyb50h().s[80]++;assert(typeof phrase==='string');cov_tm3wyb50h().s[81]++;assert(phrase.length<=1000);const words=(cov_tm3wyb50h().s[82]++,phrase.trim().split(/[\s\u3000]+/));const wbits=(cov_tm3wyb50h().s[83]++,words.length*11);const cbits=(cov_tm3wyb50h().s[84]++,wbits%32);cov_tm3wyb50h().s[85]++;assert(cbits!==0,'Invalid checksum.');const bits=(cov_tm3wyb50h().s[86]++,wbits-cbits);cov_tm3wyb50h().s[87]++;assert(bits>=common.MIN_ENTROPY);cov_tm3wyb50h().s[88]++;assert(bits<=common.MAX_ENTROPY);cov_tm3wyb50h().s[89]++;assert(bits%32===0);const size=(cov_tm3wyb50h().s[90]++,Math.ceil(wbits/8));const data=(cov_tm3wyb50h().s[91]++,Buffer.allocUnsafe(size));cov_tm3wyb50h().s[92]++;data.fill(0);const lang=(cov_tm3wyb50h().s[93]++,Mnemonic.getLanguage(words[0]));const list=(cov_tm3wyb50h().s[94]++,Mnemonic.getWordlist(lang));// Rebuild entropy bytes.
cov_tm3wyb50h().s[95]++;for(let i=(cov_tm3wyb50h().s[96]++,0);i<words.length;i++){const word=(cov_tm3wyb50h().s[97]++,words[i]);const index=(cov_tm3wyb50h().s[98]++,list.map[word]);cov_tm3wyb50h().s[99]++;if(index==null){cov_tm3wyb50h().b[11][0]++;cov_tm3wyb50h().s[100]++;throw new Error('Could not find word.');}else{cov_tm3wyb50h().b[11][1]++;}cov_tm3wyb50h().s[101]++;for(let j=(cov_tm3wyb50h().s[102]++,0);j<11;j++){const pos=(cov_tm3wyb50h().s[103]++,i*11+j);const bit=(cov_tm3wyb50h().s[104]++,pos%8);const oct=(cov_tm3wyb50h().s[105]++,(pos-bit)/8);const val=(cov_tm3wyb50h().s[106]++,index>>>10-j&1);cov_tm3wyb50h().s[107]++;data[oct]|=val<<7-bit;}}const cbytes=(cov_tm3wyb50h().s[108]++,Math.ceil(cbits/8));const entropy=(cov_tm3wyb50h().s[109]++,data.slice(0,data.length-cbytes));const chk1=(cov_tm3wyb50h().s[110]++,data.slice(data.length-cbytes));const chk2=(cov_tm3wyb50h().s[111]++,sha256.digest(entropy));// Verify checksum.
cov_tm3wyb50h().s[112]++;for(let i=(cov_tm3wyb50h().s[113]++,0);i<cbits;i++){const bit=(cov_tm3wyb50h().s[114]++,i%8);const oct=(cov_tm3wyb50h().s[115]++,(i-bit)/8);const b1=(cov_tm3wyb50h().s[116]++,chk1[oct]>>>7-bit&1);const b2=(cov_tm3wyb50h().s[117]++,chk2[oct]>>>7-bit&1);cov_tm3wyb50h().s[118]++;if(b1!==b2){cov_tm3wyb50h().b[12][0]++;cov_tm3wyb50h().s[119]++;throw new Error('Invalid checksum.');}else{cov_tm3wyb50h().b[12][1]++;}}cov_tm3wyb50h().s[120]++;assert(bits/8===entropy.length);cov_tm3wyb50h().s[121]++;this.bits=bits;cov_tm3wyb50h().s[122]++;this.language=lang;cov_tm3wyb50h().s[123]++;this.entropy=entropy;cov_tm3wyb50h().s[124]++;this.phrase=phrase;cov_tm3wyb50h().s[125]++;return this;}/**
   * Instantiate mnemonic from a phrase (validates checksum).
   * @param {String} phrase
   * @returns {Mnemonic}
   * @throws on bad checksum
   */static fromPhrase(phrase){cov_tm3wyb50h().f[8]++;cov_tm3wyb50h().s[126]++;return new this().fromPhrase(phrase);}/**
   * Inject properties from entropy.
   * @private
   * @param {Buffer} entropy
   * @param {String?} lang
   */fromEntropy(entropy,lang){cov_tm3wyb50h().f[9]++;cov_tm3wyb50h().s[127]++;assert(Buffer.isBuffer(entropy));cov_tm3wyb50h().s[128]++;assert(entropy.length*8>=common.MIN_ENTROPY);cov_tm3wyb50h().s[129]++;assert(entropy.length*8<=common.MAX_ENTROPY);cov_tm3wyb50h().s[130]++;assert(entropy.length*8%32===0);cov_tm3wyb50h().s[131]++;assert((cov_tm3wyb50h().b[13][0]++,!lang)||(cov_tm3wyb50h().b[13][1]++,Mnemonic.languages.indexOf(lang)!==-1));cov_tm3wyb50h().s[132]++;this.entropy=entropy;cov_tm3wyb50h().s[133]++;this.bits=entropy.length*8;cov_tm3wyb50h().s[134]++;if(lang){cov_tm3wyb50h().b[14][0]++;cov_tm3wyb50h().s[135]++;this.language=lang;}else{cov_tm3wyb50h().b[14][1]++;}cov_tm3wyb50h().s[136]++;return this;}/**
   * Instantiate mnemonic from entropy.
   * @param {Buffer} entropy
   * @param {String?} lang
   * @returns {Mnemonic}
   */static fromEntropy(entropy,lang){cov_tm3wyb50h().f[10]++;cov_tm3wyb50h().s[137]++;return new this().fromEntropy(entropy,lang);}/**
   * Determine a single word's language.
   * @param {String} word
   * @returns {String} Language.
   * @throws on not found.
   */static getLanguage(word){cov_tm3wyb50h().f[11]++;cov_tm3wyb50h().s[138]++;for(const lang of Mnemonic.languages){const list=(cov_tm3wyb50h().s[139]++,Mnemonic.getWordlist(lang));cov_tm3wyb50h().s[140]++;if(list.map[word]!=null){cov_tm3wyb50h().b[15][0]++;cov_tm3wyb50h().s[141]++;return lang;}else{cov_tm3wyb50h().b[15][1]++;}}cov_tm3wyb50h().s[142]++;throw new Error('Could not determine language.');}/**
   * Retrieve the wordlist for a language.
   * @param {String} lang
   * @returns {Object}
   */static getWordlist(lang){cov_tm3wyb50h().f[12]++;const cache=(cov_tm3wyb50h().s[143]++,wordlistCache[lang]);cov_tm3wyb50h().s[144]++;if(cache){cov_tm3wyb50h().b[16][0]++;cov_tm3wyb50h().s[145]++;return cache;}else{cov_tm3wyb50h().b[16][1]++;}const words=(cov_tm3wyb50h().s[146]++,wordlist.get(lang));const list=(cov_tm3wyb50h().s[147]++,new WordList(words));cov_tm3wyb50h().s[148]++;wordlistCache[lang]=list;cov_tm3wyb50h().s[149]++;return list;}/**
   * Convert mnemonic to a json-friendly object.
   * @returns {Object}
   */toJSON(){cov_tm3wyb50h().f[13]++;cov_tm3wyb50h().s[150]++;return{bits:this.bits,language:this.language,entropy:this.getEntropy().toString('hex'),phrase:this.getPhrase()};}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   */fromJSON(json){cov_tm3wyb50h().f[14]++;cov_tm3wyb50h().s[151]++;assert(json);cov_tm3wyb50h().s[152]++;assert((json.bits&0xffff)===json.bits);cov_tm3wyb50h().s[153]++;assert(typeof json.language==='string');cov_tm3wyb50h().s[154]++;assert(typeof json.entropy==='string');cov_tm3wyb50h().s[155]++;assert(typeof json.phrase==='string');cov_tm3wyb50h().s[156]++;assert(json.bits>=common.MIN_ENTROPY);cov_tm3wyb50h().s[157]++;assert(json.bits<=common.MAX_ENTROPY);cov_tm3wyb50h().s[158]++;assert(json.bits%32===0);cov_tm3wyb50h().s[159]++;assert(json.bits/8===json.entropy.length/2);cov_tm3wyb50h().s[160]++;this.bits=json.bits;cov_tm3wyb50h().s[161]++;this.language=json.language;cov_tm3wyb50h().s[162]++;this.entropy=Buffer.from(json.entropy,'hex');cov_tm3wyb50h().s[163]++;this.phrase=json.phrase;cov_tm3wyb50h().s[164]++;return this;}/**
   * Instantiate mnemonic from json object.
   * @param {Object} json
   * @returns {Mnemonic}
   */static fromJSON(json){cov_tm3wyb50h().f[15]++;cov_tm3wyb50h().s[165]++;return new this().fromJSON(json);}/**
   * Calculate serialization size.
   * @returns {Number}
   */getSize(){cov_tm3wyb50h().f[16]++;let size=(cov_tm3wyb50h().s[166]++,0);cov_tm3wyb50h().s[167]++;size+=3;cov_tm3wyb50h().s[168]++;size+=this.getEntropy().length;cov_tm3wyb50h().s[169]++;return size;}/**
   * Write the mnemonic to a buffer writer.
   * @params {BufferWriter} bw
   */toWriter(bw){cov_tm3wyb50h().f[17]++;const lang=(cov_tm3wyb50h().s[170]++,Mnemonic.languages.indexOf(this.language));cov_tm3wyb50h().s[171]++;assert(lang!==-1);cov_tm3wyb50h().s[172]++;bw.writeU16(this.bits);cov_tm3wyb50h().s[173]++;bw.writeU8(lang);cov_tm3wyb50h().s[174]++;bw.writeBytes(this.getEntropy());cov_tm3wyb50h().s[175]++;return bw;}/**
   * Serialize mnemonic.
   * @returns {Buffer}
   */toRaw(writer){cov_tm3wyb50h().f[18]++;const size=(cov_tm3wyb50h().s[176]++,this.getSize());cov_tm3wyb50h().s[177]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_tm3wyb50h().f[19]++;const bits=(cov_tm3wyb50h().s[178]++,br.readU16());cov_tm3wyb50h().s[179]++;assert(bits>=common.MIN_ENTROPY);cov_tm3wyb50h().s[180]++;assert(bits<=common.MAX_ENTROPY);cov_tm3wyb50h().s[181]++;assert(bits%32===0);const language=(cov_tm3wyb50h().s[182]++,Mnemonic.languages[br.readU8()]);cov_tm3wyb50h().s[183]++;assert(language);cov_tm3wyb50h().s[184]++;this.bits=bits;cov_tm3wyb50h().s[185]++;this.language=language;cov_tm3wyb50h().s[186]++;this.entropy=br.readBytes(bits/8);cov_tm3wyb50h().s[187]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_tm3wyb50h().f[20]++;cov_tm3wyb50h().s[188]++;return this.fromReader(bio.read(data));}/**
   * Instantiate mnemonic from buffer reader.
   * @param {BufferReader} br
   * @returns {Mnemonic}
   */static fromReader(br){cov_tm3wyb50h().f[21]++;cov_tm3wyb50h().s[189]++;return new this().fromReader(br);}/**
   * Instantiate mnemonic from serialized data.
   * @param {Buffer} data
   * @returns {Mnemonic}
   */static fromRaw(data){cov_tm3wyb50h().f[22]++;cov_tm3wyb50h().s[190]++;return new this().fromRaw(data);}/**
   * Convert the mnemonic to a string.
   * @returns {String}
   */toString(){cov_tm3wyb50h().f[23]++;cov_tm3wyb50h().s[191]++;return this.getPhrase();}/**
   * Inspect the mnemonic.
   * @returns {String}
   */[inspectSymbol](){cov_tm3wyb50h().f[24]++;cov_tm3wyb50h().s[192]++;return`<Mnemonic: ${this.getPhrase()}>`;}/**
   * Test whether an object is a Mnemonic.
   * @param {Object} obj
   * @returns {Boolean}
   */static isMnemonic(obj){cov_tm3wyb50h().f[25]++;cov_tm3wyb50h().s[193]++;return obj instanceof Mnemonic;}}/**
 * List of languages.
 * @const {String[]}
 * @default
 */cov_tm3wyb50h().s[194]++;Mnemonic.languages=['simplified chinese','traditional chinese','english','french','italian','japanese','spanish'];/**
 * Word List
 * @ignore
 */class WordList{/**
   * Create word list.
   * @constructor
   * @ignore
   * @param {Array} words
   */constructor(words){cov_tm3wyb50h().f[26]++;cov_tm3wyb50h().s[195]++;this.words=words;cov_tm3wyb50h().s[196]++;this.map=Object.create(null);cov_tm3wyb50h().s[197]++;for(let i=(cov_tm3wyb50h().s[198]++,0);i<words.length;i++){const word=(cov_tm3wyb50h().s[199]++,words[i]);cov_tm3wyb50h().s[200]++;this.map[word]=i;}}}/*
 * Expose
 */cov_tm3wyb50h().s[201]++;module.exports=Mnemonic;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
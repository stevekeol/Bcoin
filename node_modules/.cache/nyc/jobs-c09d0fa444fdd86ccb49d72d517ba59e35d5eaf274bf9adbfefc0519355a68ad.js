/*!
 * jobs.js - worker jobs for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1qm7kdurs6(){var path="E:\\Projects\\Test\\bcoin\\lib\\workers\\jobs.js";var hash="c92b4c47006bffd20e11af8459e97d370cfc4edd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\workers\\jobs.js",statementMap:{"0":{start:{line:9,column:18},end:{line:9,column:50}},"1":{start:{line:10,column:17},end:{line:10,column:46}},"2":{start:{line:11,column:17},end:{line:11,column:42}},"3":{start:{line:12,column:16},end:{line:12,column:36}},"4":{start:{line:18,column:13},end:{line:18,column:20}},"5":{start:{line:28,column:0},end:{line:34,column:2}},"6":{start:{line:29,column:2},end:{line:33,column:3}},"7":{start:{line:30,column:4},end:{line:30,column:26}},"8":{start:{line:32,column:4},end:{line:32,column:44}},"9":{start:{line:44,column:0},end:{line:65,column:2}},"10":{start:{line:45,column:2},end:{line:64,column:3}},"11":{start:{line:47,column:6},end:{line:47,column:47}},"12":{start:{line:49,column:6},end:{line:49,column:61}},"13":{start:{line:51,column:6},end:{line:51,column:46}},"14":{start:{line:53,column:6},end:{line:53,column:67}},"15":{start:{line:55,column:6},end:{line:55,column:48}},"16":{start:{line:57,column:6},end:{line:57,column:39}},"17":{start:{line:59,column:6},end:{line:59,column:55}},"18":{start:{line:61,column:6},end:{line:61,column:65}},"19":{start:{line:63,column:6},end:{line:63,column:54}},"20":{start:{line:76,column:0},end:{line:85,column:2}},"21":{start:{line:77,column:2},end:{line:83,column:3}},"22":{start:{line:78,column:4},end:{line:78,column:26}},"23":{start:{line:80,column:4},end:{line:81,column:48}},"24":{start:{line:81,column:6},end:{line:81,column:48}},"25":{start:{line:82,column:4},end:{line:82,column:14}},"26":{start:{line:84,column:2},end:{line:84,column:41}},"27":{start:{line:97,column:0},end:{line:106,column:2}},"28":{start:{line:98,column:2},end:{line:104,column:3}},"29":{start:{line:99,column:4},end:{line:99,column:38}},"30":{start:{line:101,column:4},end:{line:102,column:53}},"31":{start:{line:102,column:6},end:{line:102,column:53}},"32":{start:{line:103,column:4},end:{line:103,column:14}},"33":{start:{line:105,column:2},end:{line:105,column:46}},"34":{start:{line:116,column:0},end:{line:119,column:2}},"35":{start:{line:117,column:16},end:{line:117,column:35}},"36":{start:{line:118,column:2},end:{line:118,column:52}},"37":{start:{line:131,column:0},end:{line:134,column:2}},"38":{start:{line:132,column:17},end:{line:132,column:58}},"39":{start:{line:133,column:2},end:{line:133,column:65}},"40":{start:{line:144,column:0},end:{line:147,column:2}},"41":{start:{line:145,column:17},end:{line:145,column:51}},"42":{start:{line:146,column:2},end:{line:146,column:50}},"43":{start:{line:158,column:0},end:{line:161,column:2}},"44":{start:{line:159,column:14},end:{line:159,column:41}},"45":{start:{line:160,column:2},end:{line:160,column:45}},"46":{start:{line:172,column:0},end:{line:175,column:2}},"47":{start:{line:173,column:16},end:{line:173,column:48}},"48":{start:{line:174,column:2},end:{line:174,column:45}},"49":{start:{line:189,column:0},end:{line:192,column:2}},"50":{start:{line:190,column:14},end:{line:190,column:48}},"51":{start:{line:191,column:2},end:{line:191,column:45}}},fnMap:{"0":{name:"execute",decl:{start:{line:28,column:24},end:{line:28,column:31}},loc:{start:{line:28,column:35},end:{line:34,column:1}},line:28},"1":{name:"handle",decl:{start:{line:44,column:23},end:{line:44,column:29}},loc:{start:{line:44,column:33},end:{line:65,column:1}},line:44},"2":{name:"check",decl:{start:{line:76,column:22},end:{line:76,column:27}},loc:{start:{line:76,column:45},end:{line:85,column:1}},line:76},"3":{name:"checkInput",decl:{start:{line:97,column:27},end:{line:97,column:37}},loc:{start:{line:97,column:62},end:{line:106,column:1}},line:97},"4":{name:"sign",decl:{start:{line:116,column:21},end:{line:116,column:25}},loc:{start:{line:116,column:42},end:{line:119,column:1}},line:116},"5":{name:"signInput",decl:{start:{line:131,column:26},end:{line:131,column:35}},loc:{start:{line:131,column:65},end:{line:134,column:1}},line:131},"6":{name:"ecVerify",decl:{start:{line:144,column:25},end:{line:144,column:33}},loc:{start:{line:144,column:49},end:{line:147,column:1}},line:144},"7":{name:"ecSign",decl:{start:{line:158,column:23},end:{line:158,column:29}},loc:{start:{line:158,column:40},end:{line:161,column:1}},line:158},"8":{name:"mine",decl:{start:{line:172,column:21},end:{line:172,column:25}},loc:{start:{line:172,column:50},end:{line:175,column:1}},line:172},"9":{name:"scrypt",decl:{start:{line:189,column:23},end:{line:189,column:29}},loc:{start:{line:189,column:58},end:{line:192,column:1}},line:189}},branchMap:{"0":{loc:{start:{line:45,column:2},end:{line:64,column:3}},type:"switch",locations:[{start:{line:46,column:4},end:{line:47,column:47}},{start:{line:48,column:4},end:{line:49,column:61}},{start:{line:50,column:4},end:{line:51,column:46}},{start:{line:52,column:4},end:{line:53,column:67}},{start:{line:54,column:4},end:{line:55,column:48}},{start:{line:56,column:4},end:{line:57,column:39}},{start:{line:58,column:4},end:{line:59,column:55}},{start:{line:60,column:4},end:{line:61,column:65}},{start:{line:62,column:4},end:{line:63,column:54}}],line:45},"1":{loc:{start:{line:80,column:4},end:{line:81,column:48}},type:"if",locations:[{start:{line:80,column:4},end:{line:81,column:48}},{start:{line:80,column:4},end:{line:81,column:48}}],line:80},"2":{loc:{start:{line:101,column:4},end:{line:102,column:53}},type:"if",locations:[{start:{line:101,column:4},end:{line:102,column:53}},{start:{line:101,column:4},end:{line:102,column:53}}],line:101}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0,0,0,0,0,0,0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c92b4c47006bffd20e11af8459e97d370cfc4edd"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1qm7kdurs6=function(){return actualCoverage;};}return actualCoverage;}cov_1qm7kdurs6();const secp256k1=(cov_1qm7kdurs6().s[0]++,require('bcrypto/lib/secp256k1'));const{derive}=(cov_1qm7kdurs6().s[1]++,require('bcrypto/lib/scrypt'));const hashcash=(cov_1qm7kdurs6().s[2]++,require('../mining/mine'));const packets=(cov_1qm7kdurs6().s[3]++,require('./packets'));/**
 * @exports workers/jobs
 */const jobs=(cov_1qm7kdurs6().s[4]++,exports);/**
 * Execute a job on the worker.
 * @param {String} cmd
 * @param {Array} args
 * @returns {Object}
 * @throws on unknown command
 */cov_1qm7kdurs6().s[5]++;jobs.execute=function execute(p){cov_1qm7kdurs6().f[0]++;cov_1qm7kdurs6().s[6]++;try{cov_1qm7kdurs6().s[7]++;return jobs.handle(p);}catch(e){cov_1qm7kdurs6().s[8]++;return new packets.ErrorResultPacket(e);}};/**
 * Execute a job on the worker.
 * @param {String} cmd
 * @param {Array} args
 * @returns {Object}
 * @throws on unknown command
 */cov_1qm7kdurs6().s[9]++;jobs.handle=function handle(p){cov_1qm7kdurs6().f[1]++;cov_1qm7kdurs6().s[10]++;switch(p.cmd){case packets.types.CHECK:cov_1qm7kdurs6().b[0][0]++;cov_1qm7kdurs6().s[11]++;return jobs.check(p.tx,p.view,p.flags);case packets.types.CHECKINPUT:cov_1qm7kdurs6().b[0][1]++;cov_1qm7kdurs6().s[12]++;return jobs.checkInput(p.tx,p.index,p.coin,p.flags);case packets.types.SIGN:cov_1qm7kdurs6().b[0][2]++;cov_1qm7kdurs6().s[13]++;return jobs.sign(p.tx,p.rings,p.type);case packets.types.SIGNINPUT:cov_1qm7kdurs6().b[0][3]++;cov_1qm7kdurs6().s[14]++;return jobs.signInput(p.tx,p.index,p.coin,p.ring,p.type);case packets.types.ECVERIFY:cov_1qm7kdurs6().b[0][4]++;cov_1qm7kdurs6().s[15]++;return jobs.ecVerify(p.msg,p.sig,p.key);case packets.types.ECSIGN:cov_1qm7kdurs6().b[0][5]++;cov_1qm7kdurs6().s[16]++;return jobs.ecSign(p.msg,p.key);case packets.types.MINE:cov_1qm7kdurs6().b[0][6]++;cov_1qm7kdurs6().s[17]++;return jobs.mine(p.data,p.target,p.min,p.max);case packets.types.SCRYPT:cov_1qm7kdurs6().b[0][7]++;cov_1qm7kdurs6().s[18]++;return jobs.scrypt(p.passwd,p.salt,p.N,p.r,p.p,p.len);default:cov_1qm7kdurs6().b[0][8]++;cov_1qm7kdurs6().s[19]++;throw new Error(`Unknown command: "${p.cmd}".`);}};/**
 * Execute tx.check() on worker.
 * @see TX#check
 * @param {TX} tx
 * @param {CoinView} view
 * @param {VerifyFlags} flags
 * @returns {CheckResultPacket}
 */cov_1qm7kdurs6().s[20]++;jobs.check=function check(tx,view,flags){cov_1qm7kdurs6().f[2]++;cov_1qm7kdurs6().s[21]++;try{cov_1qm7kdurs6().s[22]++;tx.check(view,flags);}catch(err){cov_1qm7kdurs6().s[23]++;if(err.type==='ScriptError'){cov_1qm7kdurs6().b[1][0]++;cov_1qm7kdurs6().s[24]++;return new packets.CheckResultPacket(err);}else{cov_1qm7kdurs6().b[1][1]++;}cov_1qm7kdurs6().s[25]++;throw err;}cov_1qm7kdurs6().s[26]++;return new packets.CheckResultPacket();};/**
 * Execute tx.checkInput() on worker.
 * @see TX#checkInput
 * @param {TX} tx
 * @param {Number} index
 * @param {Output} coin
 * @param {VerifyFlags} flags
 * @returns {CheckInputResultPacket}
 */cov_1qm7kdurs6().s[27]++;jobs.checkInput=function checkInput(tx,index,coin,flags){cov_1qm7kdurs6().f[3]++;cov_1qm7kdurs6().s[28]++;try{cov_1qm7kdurs6().s[29]++;tx.checkInput(index,coin,flags);}catch(err){cov_1qm7kdurs6().s[30]++;if(err.type==='ScriptError'){cov_1qm7kdurs6().b[2][0]++;cov_1qm7kdurs6().s[31]++;return new packets.CheckInputResultPacket(err);}else{cov_1qm7kdurs6().b[2][1]++;}cov_1qm7kdurs6().s[32]++;throw err;}cov_1qm7kdurs6().s[33]++;return new packets.CheckInputResultPacket();};/**
 * Execute tx.sign() on worker.
 * @see MTX#sign
 * @param {MTX} tx
 * @param {KeyRing[]} ring
 * @param {SighashType} type
 */cov_1qm7kdurs6().s[34]++;jobs.sign=function sign(tx,ring,type){cov_1qm7kdurs6().f[4]++;const total=(cov_1qm7kdurs6().s[35]++,tx.sign(ring,type));cov_1qm7kdurs6().s[36]++;return packets.SignResultPacket.fromTX(tx,total);};/**
 * Execute tx.signInput() on worker.
 * @see MTX#signInput
 * @param {MTX} tx
 * @param {Number} index
 * @param {Output} coin
 * @param {KeyRing} ring
 * @param {SighashType} type
 */cov_1qm7kdurs6().s[37]++;jobs.signInput=function signInput(tx,index,coin,ring,type){cov_1qm7kdurs6().f[5]++;const result=(cov_1qm7kdurs6().s[38]++,tx.signInput(tx,index,coin,ring,type));cov_1qm7kdurs6().s[39]++;return packets.SignInputResultPacket.fromTX(tx,index,result);};/**
 * Execute secp256k1.verify() on worker.
 * @see secp256k1.verify
 * @param {TX} tx
 * @param {VerifyFlags} flags
 * @returns {Boolean}
 */cov_1qm7kdurs6().s[40]++;jobs.ecVerify=function ecVerify(msg,sig,key){cov_1qm7kdurs6().f[6]++;const result=(cov_1qm7kdurs6().s[41]++,secp256k1.verifyDER(msg,sig,key));cov_1qm7kdurs6().s[42]++;return new packets.ECVerifyResultPacket(result);};/**
 * Execute secp256k1.sign() on worker.
 * @see secp256k1.sign
 * @param {TX} tx
 * @param {Number} index
 * @param {VerifyFlags} flags
 * @returns {Boolean}
 */cov_1qm7kdurs6().s[43]++;jobs.ecSign=function ecSign(msg,key){cov_1qm7kdurs6().f[7]++;const sig=(cov_1qm7kdurs6().s[44]++,secp256k1.signDER(msg,key));cov_1qm7kdurs6().s[45]++;return new packets.ECSignResultPacket(sig);};/**
 * Mine a block on worker.
 * @param {Buffer} data
 * @param {Buffer} target
 * @param {Number} min
 * @param {Number} max
 * @returns {Number}
 */cov_1qm7kdurs6().s[46]++;jobs.mine=function mine(data,target,min,max){cov_1qm7kdurs6().f[8]++;const nonce=(cov_1qm7kdurs6().s[47]++,hashcash(data,target,min,max));cov_1qm7kdurs6().s[48]++;return new packets.MineResultPacket(nonce);};/**
 * Execute scrypt() on worker.
 * @see scrypt
 * @param {Buffer} passwd
 * @param {Buffer} salt
 * @param {Number} N
 * @param {Number} r
 * @param {Number} p
 * @param {Number} len
 * @returns {Buffer}
 */cov_1qm7kdurs6().s[49]++;jobs.scrypt=function scrypt(passwd,salt,N,r,p,len){cov_1qm7kdurs6().f[9]++;const key=(cov_1qm7kdurs6().s[50]++,derive(passwd,salt,N,r,p,len));cov_1qm7kdurs6().s[51]++;return new packets.ScryptResultPacket(key);};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
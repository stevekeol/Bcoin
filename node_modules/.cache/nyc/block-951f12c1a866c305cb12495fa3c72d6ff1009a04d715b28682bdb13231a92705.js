/*!
 * block.js - block object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_15wu0g9ke1(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\block.js";var hash="437ecf0a02e052fcb042d1af1631236b1e205d04";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\block.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:12},end:{line:11,column:28}},"2":{start:{line:12,column:20},end:{line:12,column:41}},"3":{start:{line:13,column:16},end:{line:13,column:46}},"4":{start:{line:14,column:15},end:{line:14,column:44}},"5":{start:{line:15,column:18},end:{line:15,column:50}},"6":{start:{line:16,column:22},end:{line:16,column:48}},"7":{start:{line:17,column:11},end:{line:17,column:26}},"8":{start:{line:18,column:20},end:{line:18,column:44}},"9":{start:{line:19,column:16},end:{line:19,column:36}},"10":{start:{line:20,column:16},end:{line:20,column:46}},"11":{start:{line:21,column:13},end:{line:21,column:37}},"12":{start:{line:22,column:19},end:{line:22,column:22}},"13":{start:{line:23,column:24},end:{line:23,column:43}},"14":{start:{line:24,column:18},end:{line:24,column:45}},"15":{start:{line:25,column:18},end:{line:25,column:45}},"16":{start:{line:42,column:4},end:{line:42,column:12}},"17":{start:{line:44,column:4},end:{line:44,column:18}},"18":{start:{line:46,column:4},end:{line:46,column:21}},"19":{start:{line:47,column:4},end:{line:47,column:20}},"20":{start:{line:48,column:4},end:{line:48,column:23}},"21":{start:{line:50,column:4},end:{line:51,column:32}},"22":{start:{line:51,column:6},end:{line:51,column:32}},"23":{start:{line:61,column:4},end:{line:61,column:31}},"24":{start:{line:63,column:4},end:{line:69,column:5}},"25":{start:{line:64,column:6},end:{line:64,column:41}},"26":{start:{line:65,column:6},end:{line:68,column:7}},"27":{start:{line:66,column:8},end:{line:66,column:33}},"28":{start:{line:67,column:8},end:{line:67,column:26}},"29":{start:{line:71,column:4},end:{line:71,column:16}},"30":{start:{line:81,column:4},end:{line:81,column:43}},"31":{start:{line:90,column:4},end:{line:90,column:20}},"32":{start:{line:92,column:4},end:{line:92,column:21}},"33":{start:{line:93,column:4},end:{line:93,column:20}},"34":{start:{line:94,column:4},end:{line:94,column:23}},"35":{start:{line:96,column:4},end:{line:97,column:18}},"36":{start:{line:97,column:6},end:{line:97,column:18}},"37":{start:{line:99,column:4},end:{line:100,column:19}},"38":{start:{line:100,column:6},end:{line:100,column:19}},"39":{start:{line:102,column:4},end:{line:102,column:16}},"40":{start:{line:111,column:4},end:{line:111,column:29}},"41":{start:{line:120,column:4},end:{line:120,column:30}},"42":{start:{line:129,column:4},end:{line:130,column:37}},"43":{start:{line:130,column:6},end:{line:130,column:37}},"44":{start:{line:131,column:4},end:{line:131,column:24}},"45":{start:{line:140,column:4},end:{line:141,column:35}},"46":{start:{line:141,column:6},end:{line:141,column:35}},"47":{start:{line:143,column:16},end:{line:143,column:28}},"48":{start:{line:144,column:4},end:{line:144,column:28}},"49":{start:{line:146,column:4},end:{line:146,column:14}},"50":{start:{line:155,column:4},end:{line:158,column:5}},"51":{start:{line:156,column:6},end:{line:156,column:27}},"52":{start:{line:157,column:6},end:{line:157,column:16}},"53":{start:{line:159,column:4},end:{line:159,column:29}},"54":{start:{line:170,column:4},end:{line:173,column:5}},"55":{start:{line:171,column:6},end:{line:171,column:25}},"56":{start:{line:172,column:6},end:{line:172,column:33}},"57":{start:{line:175,column:4},end:{line:181,column:5}},"58":{start:{line:176,column:6},end:{line:176,column:30}},"59":{start:{line:177,column:6},end:{line:177,column:33}},"60":{start:{line:178,column:18},end:{line:178,column:57}},"61":{start:{line:179,column:6},end:{line:179,column:27}},"62":{start:{line:180,column:6},end:{line:180,column:17}},"63":{start:{line:183,column:16},end:{line:183,column:35}},"64":{start:{line:185,column:4},end:{line:185,column:25}},"65":{start:{line:186,column:4},end:{line:186,column:26}},"66":{start:{line:187,column:4},end:{line:187,column:32}},"67":{start:{line:189,column:4},end:{line:189,column:15}},"68":{start:{line:198,column:4},end:{line:199,column:36}},"69":{start:{line:199,column:6},end:{line:199,column:36}},"70":{start:{line:200,column:4},end:{line:200,column:24}},"71":{start:{line:209,column:18},end:{line:209,column:48}},"72":{start:{line:210,column:4},end:{line:210,column:54}},"73":{start:{line:219,column:16},end:{line:219,column:31}},"74":{start:{line:220,column:17},end:{line:220,column:39}},"75":{start:{line:221,column:4},end:{line:221,column:66}},"76":{start:{line:230,column:4},end:{line:230,column:32}},"77":{start:{line:239,column:16},end:{line:239,column:31}},"78":{start:{line:240,column:4},end:{line:240,column:34}},"79":{start:{line:250,column:4},end:{line:251,column:33}},"80":{start:{line:251,column:6},end:{line:251,column:33}},"81":{start:{line:253,column:4},end:{line:256,column:5}},"82":{start:{line:254,column:6},end:{line:255,column:20}},"83":{start:{line:255,column:8},end:{line:255,column:20}},"84":{start:{line:258,column:4},end:{line:258,column:17}},"85":{start:{line:268,column:4},end:{line:268,column:37}},"86":{start:{line:278,column:4},end:{line:282,column:5}},"87":{start:{line:278,column:17},end:{line:278,column:18}},"88":{start:{line:279,column:17},end:{line:279,column:28}},"89":{start:{line:280,column:6},end:{line:281,column:17}},"90":{start:{line:281,column:8},end:{line:281,column:17}},"91":{start:{line:284,column:4},end:{line:284,column:14}},"92":{start:{line:295,column:19},end:{line:295,column:21}},"93":{start:{line:297,column:4},end:{line:298,column:29}},"94":{start:{line:298,column:6},end:{line:298,column:29}},"95":{start:{line:300,column:30},end:{line:300,column:64}},"96":{start:{line:302,column:4},end:{line:303,column:18}},"97":{start:{line:303,column:6},end:{line:303,column:18}},"98":{start:{line:305,column:4},end:{line:305,column:55}},"99":{start:{line:314,column:4},end:{line:314,column:44}},"100":{start:{line:325,column:18},end:{line:325,column:40}},"101":{start:{line:326,column:19},end:{line:326,column:21}},"102":{start:{line:328,column:4},end:{line:328,column:47}},"103":{start:{line:330,column:4},end:{line:330,column:37}},"104":{start:{line:332,column:4},end:{line:335,column:5}},"105":{start:{line:332,column:17},end:{line:332,column:18}},"106":{start:{line:333,column:17},end:{line:333,column:28}},"107":{start:{line:334,column:6},end:{line:334,column:36}},"108":{start:{line:337,column:19},end:{line:337,column:53}},"109":{start:{line:342,column:17},end:{line:342,column:42}},"110":{start:{line:344,column:4},end:{line:346,column:13}},"111":{start:{line:356,column:4},end:{line:357,column:45}},"112":{start:{line:357,column:6},end:{line:357,column:45}},"113":{start:{line:358,column:4},end:{line:358,column:27}},"114":{start:{line:368,column:4},end:{line:369,column:18}},"115":{start:{line:369,column:6},end:{line:369,column:18}},"116":{start:{line:371,column:21},end:{line:371,column:32}},"117":{start:{line:373,column:4},end:{line:374,column:18}},"118":{start:{line:374,column:6},end:{line:374,column:18}},"119":{start:{line:376,column:18},end:{line:376,column:36}},"120":{start:{line:378,column:4},end:{line:379,column:18}},"121":{start:{line:379,column:6},end:{line:379,column:18}},"122":{start:{line:381,column:4},end:{line:382,column:18}},"123":{start:{line:382,column:6},end:{line:382,column:18}},"124":{start:{line:384,column:4},end:{line:384,column:34}},"125":{start:{line:395,column:4},end:{line:396,column:18}},"126":{start:{line:396,column:6},end:{line:396,column:18}},"127":{start:{line:398,column:21},end:{line:398,column:32}},"128":{start:{line:400,column:15},end:{line:400,column:19}},"129":{start:{line:402,column:4},end:{line:408,column:5}},"130":{start:{line:402,column:17},end:{line:402,column:44}},"131":{start:{line:403,column:21},end:{line:403,column:40}},"132":{start:{line:404,column:6},end:{line:407,column:7}},"133":{start:{line:405,column:8},end:{line:405,column:45}},"134":{start:{line:406,column:8},end:{line:406,column:14}},"135":{start:{line:410,column:4},end:{line:411,column:18}},"136":{start:{line:411,column:6},end:{line:411,column:18}},"137":{start:{line:413,column:4},end:{line:415,column:13}},"138":{start:{line:425,column:20},end:{line:425,column:36}},"139":{start:{line:426,column:4},end:{line:426,column:17}},"140":{start:{line:437,column:4},end:{line:441,column:5}},"141":{start:{line:440,column:6},end:{line:440,column:44}},"142":{start:{line:444,column:4},end:{line:445,column:44}},"143":{start:{line:445,column:6},end:{line:445,column:44}},"144":{start:{line:448,column:17},end:{line:448,column:40}},"145":{start:{line:452,column:4},end:{line:453,column:48}},"146":{start:{line:453,column:6},end:{line:453,column:48}},"147":{start:{line:455,column:4},end:{line:456,column:45}},"148":{start:{line:456,column:6},end:{line:456,column:45}},"149":{start:{line:459,column:18},end:{line:459,column:48}},"150":{start:{line:461,column:17},end:{line:461,column:18}},"151":{start:{line:463,column:4},end:{line:480,column:5}},"152":{start:{line:463,column:17},end:{line:463,column:18}},"153":{start:{line:464,column:17},end:{line:464,column:28}},"154":{start:{line:467,column:6},end:{line:468,column:47}},"155":{start:{line:468,column:8},end:{line:468,column:47}},"156":{start:{line:471,column:37},end:{line:471,column:53}},"157":{start:{line:473,column:6},end:{line:474,column:38}},"158":{start:{line:474,column:8},end:{line:474,column:38}},"159":{start:{line:477,column:6},end:{line:477,column:37}},"160":{start:{line:478,column:6},end:{line:479,column:46}},"161":{start:{line:479,column:8},end:{line:479,column:46}},"162":{start:{line:482,column:4},end:{line:482,column:30}},"163":{start:{line:491,column:4},end:{line:492,column:16}},"164":{start:{line:492,column:6},end:{line:492,column:16}},"165":{start:{line:494,column:4},end:{line:495,column:16}},"166":{start:{line:495,column:6},end:{line:495,column:16}},"167":{start:{line:497,column:21},end:{line:497,column:32}},"168":{start:{line:499,column:4},end:{line:500,column:16}},"169":{start:{line:500,column:6},end:{line:500,column:16}},"170":{start:{line:502,column:4},end:{line:502,column:57}},"171":{start:{line:511,column:4},end:{line:511,column:32}},"172":{start:{line:512,column:4},end:{line:512,column:37}},"173":{start:{line:513,column:4},end:{line:513,column:40}},"174":{start:{line:523,column:20},end:{line:523,column:35}},"175":{start:{line:525,column:4},end:{line:530,column:5}},"176":{start:{line:525,column:17},end:{line:525,column:18}},"177":{start:{line:526,column:17},end:{line:526,column:28}},"178":{start:{line:528,column:6},end:{line:529,column:40}},"179":{start:{line:529,column:8},end:{line:529,column:40}},"180":{start:{line:532,column:4},end:{line:532,column:29}},"181":{start:{line:542,column:4},end:{line:542,column:25}},"182":{start:{line:554,column:27},end:{line:554,column:51}},"183":{start:{line:555,column:4},end:{line:573,column:6}},"184":{start:{line:571,column:8},end:{line:571,column:40}},"185":{start:{line:583,column:4},end:{line:583,column:26}},"186":{start:{line:599,column:4},end:{line:599,column:35}},"187":{start:{line:600,column:4},end:{line:613,column:6}},"188":{start:{line:611,column:8},end:{line:611,column:50}},"189":{start:{line:623,column:4},end:{line:623,column:44}},"190":{start:{line:624,column:4},end:{line:624,column:36}},"191":{start:{line:626,column:4},end:{line:626,column:25}},"192":{start:{line:628,column:4},end:{line:629,column:37}},"193":{start:{line:629,column:6},end:{line:629,column:37}},"194":{start:{line:631,column:4},end:{line:631,column:16}},"195":{start:{line:641,column:4},end:{line:641,column:37}},"196":{start:{line:651,column:4},end:{line:651,column:15}},"197":{start:{line:653,column:4},end:{line:653,column:22}},"198":{start:{line:655,column:18},end:{line:655,column:33}},"199":{start:{line:656,column:18},end:{line:656,column:19}},"200":{start:{line:658,column:4},end:{line:662,column:5}},"201":{start:{line:658,column:17},end:{line:658,column:18}},"202":{start:{line:659,column:17},end:{line:659,column:40}},"203":{start:{line:660,column:6},end:{line:660,column:29}},"204":{start:{line:661,column:6},end:{line:661,column:24}},"205":{start:{line:664,column:4},end:{line:668,column:5}},"206":{start:{line:665,column:6},end:{line:665,column:31}},"207":{start:{line:666,column:6},end:{line:666,column:36}},"208":{start:{line:667,column:6},end:{line:667,column:30}},"209":{start:{line:670,column:4},end:{line:670,column:16}},"210":{start:{line:680,column:4},end:{line:680,column:43}},"211":{start:{line:691,column:4},end:{line:691,column:39}},"212":{start:{line:702,column:4},end:{line:703,column:36}},"213":{start:{line:703,column:6},end:{line:703,column:36}},"214":{start:{line:704,column:4},end:{line:704,column:36}},"215":{start:{line:716,column:4},end:{line:716,column:47}},"216":{start:{line:728,column:4},end:{line:728,column:23}},"217":{start:{line:730,column:4},end:{line:730,column:36}},"218":{start:{line:732,column:4},end:{line:733,column:28}},"219":{start:{line:733,column:6},end:{line:733,column:28}},"220":{start:{line:735,column:4},end:{line:735,column:14}},"221":{start:{line:747,column:4},end:{line:747,column:23}},"222":{start:{line:749,column:4},end:{line:749,column:36}},"223":{start:{line:751,column:4},end:{line:752,column:28}},"224":{start:{line:752,column:6},end:{line:752,column:28}},"225":{start:{line:754,column:4},end:{line:754,column:14}},"226":{start:{line:766,column:16},end:{line:766,column:37}},"227":{start:{line:767,column:15},end:{line:767,column:34}},"228":{start:{line:768,column:4},end:{line:768,column:25}},"229":{start:{line:769,column:4},end:{line:769,column:27}},"230":{start:{line:770,column:4},end:{line:770,column:15}},"231":{start:{line:781,column:16},end:{line:781,column:38}},"232":{start:{line:782,column:15},end:{line:782,column:34}},"233":{start:{line:783,column:4},end:{line:783,column:26}},"234":{start:{line:784,column:4},end:{line:784,column:27}},"235":{start:{line:785,column:4},end:{line:785,column:15}},"236":{start:{line:794,column:4},end:{line:794,column:35}},"237":{start:{line:803,column:15},end:{line:803,column:16}},"238":{start:{line:805,column:4},end:{line:805,column:15}},"239":{start:{line:806,column:4},end:{line:806,column:49}},"240":{start:{line:808,column:4},end:{line:809,column:31}},"241":{start:{line:809,column:6},end:{line:809,column:31}},"242":{start:{line:811,column:4},end:{line:811,column:33}},"243":{start:{line:820,column:15},end:{line:820,column:16}},"244":{start:{line:821,column:18},end:{line:821,column:19}},"245":{start:{line:823,column:4},end:{line:823,column:15}},"246":{start:{line:824,column:4},end:{line:824,column:49}},"247":{start:{line:826,column:4},end:{line:830,column:5}},"248":{start:{line:827,column:18},end:{line:827,column:31}},"249":{start:{line:828,column:6},end:{line:828,column:23}},"250":{start:{line:829,column:6},end:{line:829,column:29}},"251":{start:{line:832,column:4},end:{line:832,column:39}},"252":{start:{line:842,column:4},end:{line:842,column:32}},"253":{start:{line:853,column:17},end:{line:853,column:28}},"254":{start:{line:854,column:16},end:{line:854,column:33}},"255":{start:{line:855,column:18},end:{line:855,column:33}},"256":{start:{line:857,column:4},end:{line:872,column:5}},"257":{start:{line:857,column:17},end:{line:857,column:18}},"258":{start:{line:858,column:17},end:{line:858,column:28}},"259":{start:{line:860,column:6},end:{line:871,column:7}},"260":{start:{line:861,column:8},end:{line:862,column:19}},"261":{start:{line:862,column:10},end:{line:862,column:19}},"262":{start:{line:867,column:8},end:{line:868,column:19}},"263":{start:{line:868,column:10},end:{line:868,column:19}},"264":{start:{line:870,column:8},end:{line:870,column:37}},"265":{start:{line:874,column:4},end:{line:881,column:5}},"266":{start:{line:875,column:6},end:{line:880,column:7}},"267":{start:{line:876,column:8},end:{line:877,column:19}},"268":{start:{line:877,column:10},end:{line:877,column:19}},"269":{start:{line:879,column:8},end:{line:879,column:42}},"270":{start:{line:883,column:4},end:{line:883,column:47}},"271":{start:{line:893,column:4},end:{line:893,column:21}},"272":{start:{line:894,column:4},end:{line:894,column:21}},"273":{start:{line:895,column:4},end:{line:895,column:27}},"274":{start:{line:903,column:0},end:{line:903,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:41,column:2},end:{line:41,column:3}},loc:{start:{line:41,column:23},end:{line:52,column:3}},line:41},"1":{name:"(anonymous_1)",decl:{start:{line:60,column:2},end:{line:60,column:3}},loc:{start:{line:60,column:23},end:{line:72,column:3}},line:60},"2":{name:"(anonymous_2)",decl:{start:{line:80,column:2},end:{line:80,column:3}},loc:{start:{line:80,column:30},end:{line:82,column:3}},line:80},"3":{name:"(anonymous_3)",decl:{start:{line:89,column:2},end:{line:89,column:3}},loc:{start:{line:89,column:15},end:{line:103,column:3}},line:89},"4":{name:"(anonymous_4)",decl:{start:{line:110,column:2},end:{line:110,column:3}},loc:{start:{line:110,column:10},end:{line:112,column:3}},line:110},"5":{name:"(anonymous_5)",decl:{start:{line:119,column:2},end:{line:119,column:3}},loc:{start:{line:119,column:11},end:{line:121,column:3}},line:119},"6":{name:"(anonymous_6)",decl:{start:{line:128,column:2},end:{line:128,column:3}},loc:{start:{line:128,column:13},end:{line:132,column:3}},line:128},"7":{name:"(anonymous_7)",decl:{start:{line:139,column:2},end:{line:139,column:3}},loc:{start:{line:139,column:15},end:{line:147,column:3}},line:139},"8":{name:"(anonymous_8)",decl:{start:{line:154,column:2},end:{line:154,column:3}},loc:{start:{line:154,column:21},end:{line:160,column:3}},line:154},"9":{name:"(anonymous_9)",decl:{start:{line:169,column:2},end:{line:169,column:3}},loc:{start:{line:169,column:10},end:{line:190,column:3}},line:169},"10":{name:"(anonymous_10)",decl:{start:{line:197,column:2},end:{line:197,column:3}},loc:{start:{line:197,column:13},end:{line:201,column:3}},line:197},"11":{name:"(anonymous_11)",decl:{start:{line:208,column:2},end:{line:208,column:3}},loc:{start:{line:208,column:19},end:{line:211,column:3}},line:208},"12":{name:"(anonymous_12)",decl:{start:{line:218,column:2},end:{line:218,column:3}},loc:{start:{line:218,column:14},end:{line:222,column:3}},line:218},"13":{name:"(anonymous_13)",decl:{start:{line:229,column:2},end:{line:229,column:3}},loc:{start:{line:229,column:12},end:{line:231,column:3}},line:229},"14":{name:"(anonymous_14)",decl:{start:{line:238,column:2},end:{line:238,column:3}},loc:{start:{line:238,column:16},end:{line:241,column:3}},line:238},"15":{name:"(anonymous_15)",decl:{start:{line:249,column:2},end:{line:249,column:3}},loc:{start:{line:249,column:15},end:{line:259,column:3}},line:249},"16":{name:"(anonymous_16)",decl:{start:{line:267,column:2},end:{line:267,column:3}},loc:{start:{line:267,column:14},end:{line:269,column:3}},line:267},"17":{name:"(anonymous_17)",decl:{start:{line:277,column:2},end:{line:277,column:3}},loc:{start:{line:277,column:16},end:{line:285,column:3}},line:277},"18":{name:"(anonymous_18)",decl:{start:{line:294,column:2},end:{line:294,column:3}},loc:{start:{line:294,column:24},end:{line:306,column:3}},line:294},"19":{name:"(anonymous_19)",decl:{start:{line:313,column:2},end:{line:313,column:3}},loc:{start:{line:313,column:23},end:{line:315,column:3}},line:313},"20":{name:"(anonymous_20)",decl:{start:{line:324,column:2},end:{line:324,column:3}},loc:{start:{line:324,column:28},end:{line:347,column:3}},line:324},"21":{name:"(anonymous_21)",decl:{start:{line:355,column:2},end:{line:355,column:3}},loc:{start:{line:355,column:21},end:{line:359,column:3}},line:355},"22":{name:"(anonymous_22)",decl:{start:{line:367,column:2},end:{line:367,column:3}},loc:{start:{line:367,column:20},end:{line:385,column:3}},line:367},"23":{name:"(anonymous_23)",decl:{start:{line:394,column:2},end:{line:394,column:3}},loc:{start:{line:394,column:25},end:{line:416,column:3}},line:394},"24":{name:"(anonymous_24)",decl:{start:{line:424,column:2},end:{line:424,column:3}},loc:{start:{line:424,column:15},end:{line:427,column:3}},line:424},"25":{name:"(anonymous_25)",decl:{start:{line:435,column:2},end:{line:435,column:3}},loc:{start:{line:435,column:14},end:{line:483,column:3}},line:435},"26":{name:"(anonymous_26)",decl:{start:{line:490,column:2},end:{line:490,column:3}},loc:{start:{line:490,column:22},end:{line:503,column:3}},line:490},"27":{name:"(anonymous_27)",decl:{start:{line:510,column:2},end:{line:510,column:3}},loc:{start:{line:510,column:15},end:{line:514,column:3}},line:510},"28":{name:"(anonymous_28)",decl:{start:{line:522,column:2},end:{line:522,column:3}},loc:{start:{line:522,column:15},end:{line:533,column:3}},line:522},"29":{name:"(anonymous_29)",decl:{start:{line:541,column:2},end:{line:541,column:3}},loc:{start:{line:541,column:20},end:{line:543,column:3}},line:541},"30":{name:"(anonymous_30)",decl:{start:{line:553,column:2},end:{line:553,column:3}},loc:{start:{line:553,column:23},end:{line:574,column:3}},line:553},"31":{name:"(anonymous_31)",decl:{start:{line:570,column:24},end:{line:570,column:25}},loc:{start:{line:570,column:35},end:{line:572,column:7}},line:570},"32":{name:"(anonymous_32)",decl:{start:{line:582,column:2},end:{line:582,column:3}},loc:{start:{line:582,column:11},end:{line:584,column:3}},line:582},"33":{name:"(anonymous_33)",decl:{start:{line:598,column:2},end:{line:598,column:3}},loc:{start:{line:598,column:40},end:{line:614,column:3}},line:598},"34":{name:"(anonymous_34)",decl:{start:{line:610,column:24},end:{line:610,column:25}},loc:{start:{line:610,column:35},end:{line:612,column:7}},line:610},"35":{name:"(anonymous_35)",decl:{start:{line:622,column:2},end:{line:622,column:3}},loc:{start:{line:622,column:17},end:{line:632,column:3}},line:622},"36":{name:"(anonymous_36)",decl:{start:{line:640,column:2},end:{line:640,column:3}},loc:{start:{line:640,column:24},end:{line:642,column:3}},line:640},"37":{name:"(anonymous_37)",decl:{start:{line:650,column:2},end:{line:650,column:3}},loc:{start:{line:650,column:17},end:{line:671,column:3}},line:650},"38":{name:"(anonymous_38)",decl:{start:{line:679,column:2},end:{line:679,column:3}},loc:{start:{line:679,column:16},end:{line:681,column:3}},line:679},"39":{name:"(anonymous_39)",decl:{start:{line:690,column:2},end:{line:690,column:3}},loc:{start:{line:690,column:26},end:{line:692,column:3}},line:690},"40":{name:"(anonymous_40)",decl:{start:{line:701,column:2},end:{line:701,column:3}},loc:{start:{line:701,column:28},end:{line:705,column:3}},line:701},"41":{name:"(anonymous_41)",decl:{start:{line:715,column:2},end:{line:715,column:3}},loc:{start:{line:715,column:19},end:{line:717,column:3}},line:715},"42":{name:"(anonymous_42)",decl:{start:{line:727,column:2},end:{line:727,column:3}},loc:{start:{line:727,column:18},end:{line:736,column:3}},line:727},"43":{name:"(anonymous_43)",decl:{start:{line:746,column:2},end:{line:746,column:3}},loc:{start:{line:746,column:19},end:{line:755,column:3}},line:746},"44":{name:"(anonymous_44)",decl:{start:{line:765,column:2},end:{line:765,column:3}},loc:{start:{line:765,column:16},end:{line:771,column:3}},line:765},"45":{name:"(anonymous_45)",decl:{start:{line:780,column:2},end:{line:780,column:3}},loc:{start:{line:780,column:17},end:{line:786,column:3}},line:780},"46":{name:"(anonymous_46)",decl:{start:{line:793,column:2},end:{line:793,column:3}},loc:{start:{line:793,column:14},end:{line:795,column:3}},line:793},"47":{name:"(anonymous_47)",decl:{start:{line:802,column:2},end:{line:802,column:3}},loc:{start:{line:802,column:19},end:{line:812,column:3}},line:802},"48":{name:"(anonymous_48)",decl:{start:{line:819,column:2},end:{line:819,column:3}},loc:{start:{line:819,column:20},end:{line:833,column:3}},line:819},"49":{name:"(anonymous_49)",decl:{start:{line:841,column:2},end:{line:841,column:3}},loc:{start:{line:841,column:22},end:{line:843,column:3}},line:841},"50":{name:"(anonymous_50)",decl:{start:{line:852,column:2},end:{line:852,column:3}},loc:{start:{line:852,column:17},end:{line:884,column:3}},line:852},"51":{name:"(anonymous_51)",decl:{start:{line:892,column:2},end:{line:892,column:3}},loc:{start:{line:892,column:29},end:{line:896,column:3}},line:892}},branchMap:{"0":{loc:{start:{line:50,column:4},end:{line:51,column:32}},type:"if",locations:[{start:{line:50,column:4},end:{line:51,column:32}},{start:{line:50,column:4},end:{line:51,column:32}}],line:50},"1":{loc:{start:{line:63,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:63,column:4},end:{line:69,column:5}},{start:{line:63,column:4},end:{line:69,column:5}}],line:63},"2":{loc:{start:{line:96,column:4},end:{line:97,column:18}},type:"if",locations:[{start:{line:96,column:4},end:{line:97,column:18}},{start:{line:96,column:4},end:{line:97,column:18}}],line:96},"3":{loc:{start:{line:129,column:4},end:{line:130,column:37}},type:"if",locations:[{start:{line:129,column:4},end:{line:130,column:37}},{start:{line:129,column:4},end:{line:130,column:37}}],line:129},"4":{loc:{start:{line:140,column:4},end:{line:141,column:35}},type:"if",locations:[{start:{line:140,column:4},end:{line:141,column:35}},{start:{line:140,column:4},end:{line:141,column:35}}],line:140},"5":{loc:{start:{line:155,column:4},end:{line:158,column:5}},type:"if",locations:[{start:{line:155,column:4},end:{line:158,column:5}},{start:{line:155,column:4},end:{line:158,column:5}}],line:155},"6":{loc:{start:{line:170,column:4},end:{line:173,column:5}},type:"if",locations:[{start:{line:170,column:4},end:{line:173,column:5}},{start:{line:170,column:4},end:{line:173,column:5}}],line:170},"7":{loc:{start:{line:175,column:4},end:{line:181,column:5}},type:"if",locations:[{start:{line:175,column:4},end:{line:181,column:5}},{start:{line:175,column:4},end:{line:181,column:5}}],line:175},"8":{loc:{start:{line:198,column:4},end:{line:199,column:36}},type:"if",locations:[{start:{line:198,column:4},end:{line:199,column:36}},{start:{line:198,column:4},end:{line:199,column:36}}],line:198},"9":{loc:{start:{line:250,column:4},end:{line:251,column:33}},type:"if",locations:[{start:{line:250,column:4},end:{line:251,column:33}},{start:{line:250,column:4},end:{line:251,column:33}}],line:250},"10":{loc:{start:{line:254,column:6},end:{line:255,column:20}},type:"if",locations:[{start:{line:254,column:6},end:{line:255,column:20}},{start:{line:254,column:6},end:{line:255,column:20}}],line:254},"11":{loc:{start:{line:280,column:6},end:{line:281,column:17}},type:"if",locations:[{start:{line:280,column:6},end:{line:281,column:17}},{start:{line:280,column:6},end:{line:281,column:17}}],line:280},"12":{loc:{start:{line:302,column:4},end:{line:303,column:18}},type:"if",locations:[{start:{line:302,column:4},end:{line:303,column:18}},{start:{line:302,column:4},end:{line:303,column:18}}],line:302},"13":{loc:{start:{line:305,column:11},end:{line:305,column:54}},type:"cond-expr",locations:[{start:{line:305,column:27},end:{line:305,column:47}},{start:{line:305,column:50},end:{line:305,column:54}}],line:305},"14":{loc:{start:{line:344,column:11},end:{line:346,column:12}},type:"cond-expr",locations:[{start:{line:345,column:8},end:{line:345,column:28}},{start:{line:346,column:8},end:{line:346,column:12}}],line:344},"15":{loc:{start:{line:356,column:4},end:{line:357,column:45}},type:"if",locations:[{start:{line:356,column:4},end:{line:357,column:45}},{start:{line:356,column:4},end:{line:357,column:45}}],line:356},"16":{loc:{start:{line:368,column:4},end:{line:369,column:18}},type:"if",locations:[{start:{line:368,column:4},end:{line:369,column:18}},{start:{line:368,column:4},end:{line:369,column:18}}],line:368},"17":{loc:{start:{line:373,column:4},end:{line:374,column:18}},type:"if",locations:[{start:{line:373,column:4},end:{line:374,column:18}},{start:{line:373,column:4},end:{line:374,column:18}}],line:373},"18":{loc:{start:{line:378,column:4},end:{line:379,column:18}},type:"if",locations:[{start:{line:378,column:4},end:{line:379,column:18}},{start:{line:378,column:4},end:{line:379,column:18}}],line:378},"19":{loc:{start:{line:381,column:4},end:{line:382,column:18}},type:"if",locations:[{start:{line:381,column:4},end:{line:382,column:18}},{start:{line:381,column:4},end:{line:382,column:18}}],line:381},"20":{loc:{start:{line:395,column:4},end:{line:396,column:18}},type:"if",locations:[{start:{line:395,column:4},end:{line:396,column:18}},{start:{line:395,column:4},end:{line:396,column:18}}],line:395},"21":{loc:{start:{line:404,column:6},end:{line:407,column:7}},type:"if",locations:[{start:{line:404,column:6},end:{line:407,column:7}},{start:{line:404,column:6},end:{line:407,column:7}}],line:404},"22":{loc:{start:{line:410,column:4},end:{line:411,column:18}},type:"if",locations:[{start:{line:410,column:4},end:{line:411,column:18}},{start:{line:410,column:4},end:{line:411,column:18}}],line:410},"23":{loc:{start:{line:413,column:11},end:{line:415,column:12}},type:"cond-expr",locations:[{start:{line:414,column:8},end:{line:414,column:28}},{start:{line:415,column:8},end:{line:415,column:12}}],line:413},"24":{loc:{start:{line:437,column:4},end:{line:441,column:5}},type:"if",locations:[{start:{line:437,column:4},end:{line:441,column:5}},{start:{line:437,column:4},end:{line:441,column:5}}],line:437},"25":{loc:{start:{line:437,column:8},end:{line:439,column:56}},type:"binary-expr",locations:[{start:{line:437,column:8},end:{line:437,column:29}},{start:{line:438,column:11},end:{line:438,column:53}},{start:{line:439,column:11},end:{line:439,column:56}}],line:437},"26":{loc:{start:{line:444,column:4},end:{line:445,column:44}},type:"if",locations:[{start:{line:444,column:4},end:{line:445,column:44}},{start:{line:444,column:4},end:{line:445,column:44}}],line:444},"27":{loc:{start:{line:444,column:8},end:{line:444,column:58}},type:"binary-expr",locations:[{start:{line:444,column:8},end:{line:444,column:29}},{start:{line:444,column:33},end:{line:444,column:58}}],line:444},"28":{loc:{start:{line:452,column:4},end:{line:453,column:48}},type:"if",locations:[{start:{line:452,column:4},end:{line:453,column:48}},{start:{line:452,column:4},end:{line:453,column:48}}],line:452},"29":{loc:{start:{line:455,column:4},end:{line:456,column:45}},type:"if",locations:[{start:{line:455,column:4},end:{line:456,column:45}},{start:{line:455,column:4},end:{line:456,column:45}}],line:455},"30":{loc:{start:{line:467,column:6},end:{line:468,column:47}},type:"if",locations:[{start:{line:467,column:6},end:{line:468,column:47}},{start:{line:467,column:6},end:{line:468,column:47}}],line:467},"31":{loc:{start:{line:467,column:10},end:{line:467,column:34}},type:"binary-expr",locations:[{start:{line:467,column:10},end:{line:467,column:15}},{start:{line:467,column:19},end:{line:467,column:34}}],line:467},"32":{loc:{start:{line:473,column:6},end:{line:474,column:38}},type:"if",locations:[{start:{line:473,column:6},end:{line:474,column:38}},{start:{line:473,column:6},end:{line:474,column:38}}],line:473},"33":{loc:{start:{line:478,column:6},end:{line:479,column:46}},type:"if",locations:[{start:{line:478,column:6},end:{line:479,column:46}},{start:{line:478,column:6},end:{line:479,column:46}}],line:478},"34":{loc:{start:{line:491,column:4},end:{line:492,column:16}},type:"if",locations:[{start:{line:491,column:4},end:{line:492,column:16}},{start:{line:491,column:4},end:{line:492,column:16}}],line:491},"35":{loc:{start:{line:494,column:4},end:{line:495,column:16}},type:"if",locations:[{start:{line:494,column:4},end:{line:495,column:16}},{start:{line:494,column:4},end:{line:495,column:16}}],line:494},"36":{loc:{start:{line:499,column:4},end:{line:500,column:16}},type:"if",locations:[{start:{line:499,column:4},end:{line:500,column:16}},{start:{line:499,column:4},end:{line:500,column:16}}],line:499},"37":{loc:{start:{line:557,column:14},end:{line:557,column:42}},type:"cond-expr",locations:[{start:{line:557,column:31},end:{line:557,column:37}},{start:{line:557,column:40},end:{line:557,column:42}}],line:557},"38":{loc:{start:{line:564,column:22},end:{line:566,column:14}},type:"cond-expr",locations:[{start:{line:565,column:10},end:{line:565,column:37}},{start:{line:566,column:10},end:{line:566,column:14}}],line:564},"39":{loc:{start:{line:664,column:4},end:{line:668,column:5}},type:"if",locations:[{start:{line:664,column:4},end:{line:668,column:5}},{start:{line:664,column:4},end:{line:668,column:5}}],line:664},"40":{loc:{start:{line:702,column:4},end:{line:703,column:36}},type:"if",locations:[{start:{line:702,column:4},end:{line:703,column:36}},{start:{line:702,column:4},end:{line:703,column:36}}],line:702},"41":{loc:{start:{line:861,column:8},end:{line:862,column:19}},type:"if",locations:[{start:{line:861,column:8},end:{line:862,column:19}},{start:{line:861,column:8},end:{line:862,column:19}}],line:861},"42":{loc:{start:{line:867,column:8},end:{line:868,column:19}},type:"if",locations:[{start:{line:867,column:8},end:{line:868,column:19}},{start:{line:867,column:8},end:{line:868,column:19}}],line:867},"43":{loc:{start:{line:876,column:8},end:{line:877,column:19}},type:"if",locations:[{start:{line:876,column:8},end:{line:877,column:19}},{start:{line:876,column:8},end:{line:877,column:19}}],line:876}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"437ecf0a02e052fcb042d1af1631236b1e205d04"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_15wu0g9ke1=function(){return actualCoverage;};}return actualCoverage;}cov_15wu0g9ke1();const assert=(cov_15wu0g9ke1().s[0]++,require('bsert'));const bio=(cov_15wu0g9ke1().s[1]++,require('bufio'));const{BufferSet}=(cov_15wu0g9ke1().s[2]++,require('buffer-map'));const hash256=(cov_15wu0g9ke1().s[3]++,require('bcrypto/lib/hash256'));const merkle=(cov_15wu0g9ke1().s[4]++,require('bcrypto/lib/merkle'));const consensus=(cov_15wu0g9ke1().s[5]++,require('../protocol/consensus'));const AbstractBlock=(cov_15wu0g9ke1().s[6]++,require('./abstractblock'));const TX=(cov_15wu0g9ke1().s[7]++,require('./tx'));const MerkleBlock=(cov_15wu0g9ke1().s[8]++,require('./merkleblock'));const Headers=(cov_15wu0g9ke1().s[9]++,require('./headers'));const Network=(cov_15wu0g9ke1().s[10]++,require('../protocol/network'));const util=(cov_15wu0g9ke1().s[11]++,require('../utils/util'));const{encoding}=(cov_15wu0g9ke1().s[12]++,bio);const{inspectSymbol}=(cov_15wu0g9ke1().s[13]++,require('../utils'));const GCSFilter=(cov_15wu0g9ke1().s[14]++,require('../golomb/golomb'));const{opcodes}=(cov_15wu0g9ke1().s[15]++,require('../script/common'));/**
 * Block
 * Represents a full block.
 * @alias module:primitives.Block
 * @extends AbstractBlock
 */class Block extends AbstractBlock{/**
   * Create a block.
   * @constructor
   * @param {Object} options
   */constructor(options){cov_15wu0g9ke1().f[0]++;cov_15wu0g9ke1().s[16]++;super();cov_15wu0g9ke1().s[17]++;this.txs=[];cov_15wu0g9ke1().s[18]++;this._raw=null;cov_15wu0g9ke1().s[19]++;this._size=-1;cov_15wu0g9ke1().s[20]++;this._witness=-1;cov_15wu0g9ke1().s[21]++;if(options){cov_15wu0g9ke1().b[0][0]++;cov_15wu0g9ke1().s[22]++;this.fromOptions(options);}else{cov_15wu0g9ke1().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_15wu0g9ke1().f[1]++;cov_15wu0g9ke1().s[23]++;this.parseOptions(options);cov_15wu0g9ke1().s[24]++;if(options.txs){cov_15wu0g9ke1().b[1][0]++;cov_15wu0g9ke1().s[25]++;assert(Array.isArray(options.txs));cov_15wu0g9ke1().s[26]++;for(const tx of options.txs){cov_15wu0g9ke1().s[27]++;assert(tx instanceof TX);cov_15wu0g9ke1().s[28]++;this.txs.push(tx);}}else{cov_15wu0g9ke1().b[1][1]++;}cov_15wu0g9ke1().s[29]++;return this;}/**
   * Instantiate block from options.
   * @param {Object} options
   * @returns {Block}
   */static fromOptions(options){cov_15wu0g9ke1().f[2]++;cov_15wu0g9ke1().s[30]++;return new this().fromOptions(options);}/**
   * Clear any cached values.
   * @param {Boolean?} all - Clear transactions.
   */refresh(all){cov_15wu0g9ke1().f[3]++;cov_15wu0g9ke1().s[31]++;this._refresh();cov_15wu0g9ke1().s[32]++;this._raw=null;cov_15wu0g9ke1().s[33]++;this._size=-1;cov_15wu0g9ke1().s[34]++;this._witness=-1;cov_15wu0g9ke1().s[35]++;if(!all){cov_15wu0g9ke1().b[2][0]++;cov_15wu0g9ke1().s[36]++;return this;}else{cov_15wu0g9ke1().b[2][1]++;}cov_15wu0g9ke1().s[37]++;for(const tx of this.txs){cov_15wu0g9ke1().s[38]++;tx.refresh();}cov_15wu0g9ke1().s[39]++;return this;}/**
   * Serialize the block. Include witnesses if present.
   * @returns {Buffer}
   */toRaw(){cov_15wu0g9ke1().f[4]++;cov_15wu0g9ke1().s[40]++;return this.frame().data;}/**
   * Check if block has been serialized.
   * @returns {Buffer}
   */hasRaw(){cov_15wu0g9ke1().f[5]++;cov_15wu0g9ke1().s[41]++;return Boolean(this._raw);}/**
   * Serialize the block, do not include witnesses.
   * @returns {Buffer}
   */toNormal(){cov_15wu0g9ke1().f[6]++;cov_15wu0g9ke1().s[42]++;if(this.hasWitness()){cov_15wu0g9ke1().b[3][0]++;cov_15wu0g9ke1().s[43]++;return this.frameNormal().data;}else{cov_15wu0g9ke1().b[3][1]++;}cov_15wu0g9ke1().s[44]++;return this.toRaw();}/**
   * Serialize the block. Include witnesses if present.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_15wu0g9ke1().f[7]++;cov_15wu0g9ke1().s[45]++;if(this.mutable){cov_15wu0g9ke1().b[4][0]++;cov_15wu0g9ke1().s[46]++;return this.writeWitness(bw);}else{cov_15wu0g9ke1().b[4][1]++;}const raw=(cov_15wu0g9ke1().s[47]++,this.frame());cov_15wu0g9ke1().s[48]++;bw.writeBytes(raw.data);cov_15wu0g9ke1().s[49]++;return bw;}/**
   * Serialize the block, do not include witnesses.
   * @param {BufferWriter} bw
   */toNormalWriter(bw){cov_15wu0g9ke1().f[8]++;cov_15wu0g9ke1().s[50]++;if(this.hasWitness()){cov_15wu0g9ke1().b[5][0]++;cov_15wu0g9ke1().s[51]++;this.writeNormal(bw);cov_15wu0g9ke1().s[52]++;return bw;}else{cov_15wu0g9ke1().b[5][1]++;}cov_15wu0g9ke1().s[53]++;return this.toWriter(bw);}/**
   * Get the raw block serialization.
   * Include witnesses if present.
   * @private
   * @returns {RawBlock}
   */frame(){cov_15wu0g9ke1().f[9]++;cov_15wu0g9ke1().s[54]++;if(this.mutable){cov_15wu0g9ke1().b[6][0]++;cov_15wu0g9ke1().s[55]++;assert(!this._raw);cov_15wu0g9ke1().s[56]++;return this.frameWitness();}else{cov_15wu0g9ke1().b[6][1]++;}cov_15wu0g9ke1().s[57]++;if(this._raw){cov_15wu0g9ke1().b[7][0]++;cov_15wu0g9ke1().s[58]++;assert(this._size>=0);cov_15wu0g9ke1().s[59]++;assert(this._witness>=0);const raw=(cov_15wu0g9ke1().s[60]++,new RawBlock(this._size,this._witness));cov_15wu0g9ke1().s[61]++;raw.data=this._raw;cov_15wu0g9ke1().s[62]++;return raw;}else{cov_15wu0g9ke1().b[7][1]++;}const raw=(cov_15wu0g9ke1().s[63]++,this.frameWitness());cov_15wu0g9ke1().s[64]++;this._raw=raw.data;cov_15wu0g9ke1().s[65]++;this._size=raw.size;cov_15wu0g9ke1().s[66]++;this._witness=raw.witness;cov_15wu0g9ke1().s[67]++;return raw;}/**
   * Calculate real size and size of the witness bytes.
   * @returns {Object} Contains `size` and `witness`.
   */getSizes(){cov_15wu0g9ke1().f[10]++;cov_15wu0g9ke1().s[68]++;if(this.mutable){cov_15wu0g9ke1().b[8][0]++;cov_15wu0g9ke1().s[69]++;return this.getWitnessSizes();}else{cov_15wu0g9ke1().b[8][1]++;}cov_15wu0g9ke1().s[70]++;return this.frame();}/**
   * Calculate virtual block size.
   * @returns {Number} Virtual size.
   */getVirtualSize(){cov_15wu0g9ke1().f[11]++;const scale=(cov_15wu0g9ke1().s[71]++,consensus.WITNESS_SCALE_FACTOR);cov_15wu0g9ke1().s[72]++;return(this.getWeight()+scale-1)/scale|0;}/**
   * Calculate block weight.
   * @returns {Number} weight
   */getWeight(){cov_15wu0g9ke1().f[12]++;const raw=(cov_15wu0g9ke1().s[73]++,this.getSizes());const base=(cov_15wu0g9ke1().s[74]++,raw.size-raw.witness);cov_15wu0g9ke1().s[75]++;return base*(consensus.WITNESS_SCALE_FACTOR-1)+raw.size;}/**
   * Get real block size.
   * @returns {Number} size
   */getSize(){cov_15wu0g9ke1().f[13]++;cov_15wu0g9ke1().s[76]++;return this.getSizes().size;}/**
   * Get base block size (without witness).
   * @returns {Number} size
   */getBaseSize(){cov_15wu0g9ke1().f[14]++;const raw=(cov_15wu0g9ke1().s[77]++,this.getSizes());cov_15wu0g9ke1().s[78]++;return raw.size-raw.witness;}/**
   * Test whether the block contains a
   * transaction with a non-empty witness.
   * @returns {Boolean}
   */hasWitness(){cov_15wu0g9ke1().f[15]++;cov_15wu0g9ke1().s[79]++;if(this._witness!==-1){cov_15wu0g9ke1().b[9][0]++;cov_15wu0g9ke1().s[80]++;return this._witness!==0;}else{cov_15wu0g9ke1().b[9][1]++;}cov_15wu0g9ke1().s[81]++;for(const tx of this.txs){cov_15wu0g9ke1().s[82]++;if(tx.hasWitness()){cov_15wu0g9ke1().b[10][0]++;cov_15wu0g9ke1().s[83]++;return true;}else{cov_15wu0g9ke1().b[10][1]++;}}cov_15wu0g9ke1().s[84]++;return false;}/**
   * Test the block's transaction vector against a hash.
   * @param {Hash} hash
   * @returns {Boolean}
   */hasTX(hash){cov_15wu0g9ke1().f[16]++;cov_15wu0g9ke1().s[85]++;return this.indexOf(hash)!==-1;}/**
   * Find the index of a transaction in the block.
   * @param {Hash} hash
   * @returns {Number} index (-1 if not present).
   */indexOf(hash){cov_15wu0g9ke1().f[17]++;cov_15wu0g9ke1().s[86]++;for(let i=(cov_15wu0g9ke1().s[87]++,0);i<this.txs.length;i++){const tx=(cov_15wu0g9ke1().s[88]++,this.txs[i]);cov_15wu0g9ke1().s[89]++;if(tx.hash().equals(hash)){cov_15wu0g9ke1().b[11][0]++;cov_15wu0g9ke1().s[90]++;return i;}else{cov_15wu0g9ke1().b[11][1]++;}}cov_15wu0g9ke1().s[91]++;return-1;}/**
   * Calculate merkle root. Returns null
   * if merkle tree has been malleated.
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Hash|null}
   */createMerkleRoot(enc){cov_15wu0g9ke1().f[18]++;const leaves=(cov_15wu0g9ke1().s[92]++,[]);cov_15wu0g9ke1().s[93]++;for(const tx of this.txs){cov_15wu0g9ke1().s[94]++;leaves.push(tx.hash());}const[root,malleated]=(cov_15wu0g9ke1().s[95]++,merkle.createRoot(hash256,leaves));cov_15wu0g9ke1().s[96]++;if(malleated){cov_15wu0g9ke1().b[12][0]++;cov_15wu0g9ke1().s[97]++;return null;}else{cov_15wu0g9ke1().b[12][1]++;}cov_15wu0g9ke1().s[98]++;return enc==='hex'?(cov_15wu0g9ke1().b[13][0]++,root.toString('hex')):(cov_15wu0g9ke1().b[13][1]++,root);}/**
   * Create a witness nonce (for mining).
   * @returns {Buffer}
   */createWitnessNonce(){cov_15wu0g9ke1().f[19]++;cov_15wu0g9ke1().s[99]++;return Buffer.from(consensus.ZERO_HASH);}/**
   * Calculate commitment hash (the root of the
   * witness merkle tree hashed with the witnessNonce).
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Hash}
   */createCommitmentHash(enc){cov_15wu0g9ke1().f[20]++;const nonce=(cov_15wu0g9ke1().s[100]++,this.getWitnessNonce());const leaves=(cov_15wu0g9ke1().s[101]++,[]);cov_15wu0g9ke1().s[102]++;assert(nonce,'No witness nonce present.');cov_15wu0g9ke1().s[103]++;leaves.push(consensus.ZERO_HASH);cov_15wu0g9ke1().s[104]++;for(let i=(cov_15wu0g9ke1().s[105]++,1);i<this.txs.length;i++){const tx=(cov_15wu0g9ke1().s[106]++,this.txs[i]);cov_15wu0g9ke1().s[107]++;leaves.push(tx.witnessHash());}const[root]=(cov_15wu0g9ke1().s[108]++,merkle.createRoot(hash256,leaves));// Note: malleation check ignored here.
// assert(!malleated);
const hash=(cov_15wu0g9ke1().s[109]++,hash256.root(root,nonce));cov_15wu0g9ke1().s[110]++;return enc==='hex'?(cov_15wu0g9ke1().b[14][0]++,hash.toString('hex')):(cov_15wu0g9ke1().b[14][1]++,hash);}/**
   * Retrieve the merkle root from the block header.
   * @param {String?} enc
   * @returns {Hash}
   */getMerkleRoot(enc){cov_15wu0g9ke1().f[21]++;cov_15wu0g9ke1().s[111]++;if(enc==='hex'){cov_15wu0g9ke1().b[15][0]++;cov_15wu0g9ke1().s[112]++;return this.merkleRoot.toString('hex');}else{cov_15wu0g9ke1().b[15][1]++;}cov_15wu0g9ke1().s[113]++;return this.merkleRoot;}/**
   * Retrieve the witness nonce from the
   * coinbase's witness vector (if present).
   * @returns {Buffer|null}
   */getWitnessNonce(){cov_15wu0g9ke1().f[22]++;cov_15wu0g9ke1().s[114]++;if(this.txs.length===0){cov_15wu0g9ke1().b[16][0]++;cov_15wu0g9ke1().s[115]++;return null;}else{cov_15wu0g9ke1().b[16][1]++;}const coinbase=(cov_15wu0g9ke1().s[116]++,this.txs[0]);cov_15wu0g9ke1().s[117]++;if(coinbase.inputs.length!==1){cov_15wu0g9ke1().b[17][0]++;cov_15wu0g9ke1().s[118]++;return null;}else{cov_15wu0g9ke1().b[17][1]++;}const input=(cov_15wu0g9ke1().s[119]++,coinbase.inputs[0]);cov_15wu0g9ke1().s[120]++;if(input.witness.items.length!==1){cov_15wu0g9ke1().b[18][0]++;cov_15wu0g9ke1().s[121]++;return null;}else{cov_15wu0g9ke1().b[18][1]++;}cov_15wu0g9ke1().s[122]++;if(input.witness.items[0].length!==32){cov_15wu0g9ke1().b[19][0]++;cov_15wu0g9ke1().s[123]++;return null;}else{cov_15wu0g9ke1().b[19][1]++;}cov_15wu0g9ke1().s[124]++;return input.witness.items[0];}/**
   * Retrieve the commitment hash
   * from the coinbase's outputs.
   * @param {String?} enc
   * @returns {Hash|null}
   */getCommitmentHash(enc){cov_15wu0g9ke1().f[23]++;cov_15wu0g9ke1().s[125]++;if(this.txs.length===0){cov_15wu0g9ke1().b[20][0]++;cov_15wu0g9ke1().s[126]++;return null;}else{cov_15wu0g9ke1().b[20][1]++;}const coinbase=(cov_15wu0g9ke1().s[127]++,this.txs[0]);let hash=(cov_15wu0g9ke1().s[128]++,null);cov_15wu0g9ke1().s[129]++;for(let i=(cov_15wu0g9ke1().s[130]++,coinbase.outputs.length-1);i>=0;i--){const output=(cov_15wu0g9ke1().s[131]++,coinbase.outputs[i]);cov_15wu0g9ke1().s[132]++;if(output.script.isCommitment()){cov_15wu0g9ke1().b[21][0]++;cov_15wu0g9ke1().s[133]++;hash=output.script.getCommitment();cov_15wu0g9ke1().s[134]++;break;}else{cov_15wu0g9ke1().b[21][1]++;}}cov_15wu0g9ke1().s[135]++;if(!hash){cov_15wu0g9ke1().b[22][0]++;cov_15wu0g9ke1().s[136]++;return null;}else{cov_15wu0g9ke1().b[22][1]++;}cov_15wu0g9ke1().s[137]++;return enc==='hex'?(cov_15wu0g9ke1().b[23][0]++,hash.toString('hex')):(cov_15wu0g9ke1().b[23][1]++,hash);}/**
   * Do non-contextual verification on the block. Including checking the block
   * size, the coinbase and the merkle root. This is consensus-critical.
   * @returns {Boolean}
   */verifyBody(){cov_15wu0g9ke1().f[24]++;const[valid]=(cov_15wu0g9ke1().s[138]++,this.checkBody());cov_15wu0g9ke1().s[139]++;return valid;}/**
   * Do non-contextual verification on the block. Including checking the block
   * size, the coinbase and the merkle root. This is consensus-critical.
   * @returns {Array} [valid, reason, score]
   */checkBody(){cov_15wu0g9ke1().f[25]++;cov_15wu0g9ke1().s[140]++;// Check base size.
if((cov_15wu0g9ke1().b[25][0]++,this.txs.length===0)||(cov_15wu0g9ke1().b[25][1]++,this.txs.length>consensus.MAX_BLOCK_SIZE)||(cov_15wu0g9ke1().b[25][2]++,this.getBaseSize()>consensus.MAX_BLOCK_SIZE)){cov_15wu0g9ke1().b[24][0]++;cov_15wu0g9ke1().s[141]++;return[false,'bad-blk-length',100];}else{cov_15wu0g9ke1().b[24][1]++;}// First TX must be a coinbase.
cov_15wu0g9ke1().s[142]++;if((cov_15wu0g9ke1().b[27][0]++,this.txs.length===0)||(cov_15wu0g9ke1().b[27][1]++,!this.txs[0].isCoinbase())){cov_15wu0g9ke1().b[26][0]++;cov_15wu0g9ke1().s[143]++;return[false,'bad-cb-missing',100];}else{cov_15wu0g9ke1().b[26][1]++;}// Check merkle root.
const root=(cov_15wu0g9ke1().s[144]++,this.createMerkleRoot());// If the merkle is mutated,
// we have duplicate txs.
cov_15wu0g9ke1().s[145]++;if(!root){cov_15wu0g9ke1().b[28][0]++;cov_15wu0g9ke1().s[146]++;return[false,'bad-txns-duplicate',100];}else{cov_15wu0g9ke1().b[28][1]++;}cov_15wu0g9ke1().s[147]++;if(!this.merkleRoot.equals(root)){cov_15wu0g9ke1().b[29][0]++;cov_15wu0g9ke1().s[148]++;return[false,'bad-txnmrklroot',100];}else{cov_15wu0g9ke1().b[29][1]++;}// Test all transactions.
const scale=(cov_15wu0g9ke1().s[149]++,consensus.WITNESS_SCALE_FACTOR);let sigops=(cov_15wu0g9ke1().s[150]++,0);cov_15wu0g9ke1().s[151]++;for(let i=(cov_15wu0g9ke1().s[152]++,0);i<this.txs.length;i++){const tx=(cov_15wu0g9ke1().s[153]++,this.txs[i]);// The rest of the txs must not be coinbases.
cov_15wu0g9ke1().s[154]++;if((cov_15wu0g9ke1().b[31][0]++,i>0)&&(cov_15wu0g9ke1().b[31][1]++,tx.isCoinbase())){cov_15wu0g9ke1().b[30][0]++;cov_15wu0g9ke1().s[155]++;return[false,'bad-cb-multiple',100];}else{cov_15wu0g9ke1().b[30][1]++;}// Sanity checks.
const[valid,reason,score]=(cov_15wu0g9ke1().s[156]++,tx.checkSanity());cov_15wu0g9ke1().s[157]++;if(!valid){cov_15wu0g9ke1().b[32][0]++;cov_15wu0g9ke1().s[158]++;return[valid,reason,score];}else{cov_15wu0g9ke1().b[32][1]++;}// Count legacy sigops (do not count scripthash or witness).
cov_15wu0g9ke1().s[159]++;sigops+=tx.getLegacySigops();cov_15wu0g9ke1().s[160]++;if(sigops*scale>consensus.MAX_BLOCK_SIGOPS_COST){cov_15wu0g9ke1().b[33][0]++;cov_15wu0g9ke1().s[161]++;return[false,'bad-blk-sigops',100];}else{cov_15wu0g9ke1().b[33][1]++;}}cov_15wu0g9ke1().s[162]++;return[true,'valid',0];}/**
   * Retrieve the coinbase height from the coinbase input script.
   * @returns {Number} height (-1 if not present).
   */getCoinbaseHeight(){cov_15wu0g9ke1().f[26]++;cov_15wu0g9ke1().s[163]++;if(this.version<2){cov_15wu0g9ke1().b[34][0]++;cov_15wu0g9ke1().s[164]++;return-1;}else{cov_15wu0g9ke1().b[34][1]++;}cov_15wu0g9ke1().s[165]++;if(this.txs.length===0){cov_15wu0g9ke1().b[35][0]++;cov_15wu0g9ke1().s[166]++;return-1;}else{cov_15wu0g9ke1().b[35][1]++;}const coinbase=(cov_15wu0g9ke1().s[167]++,this.txs[0]);cov_15wu0g9ke1().s[168]++;if(coinbase.inputs.length===0){cov_15wu0g9ke1().b[36][0]++;cov_15wu0g9ke1().s[169]++;return-1;}else{cov_15wu0g9ke1().b[36][1]++;}cov_15wu0g9ke1().s[170]++;return coinbase.inputs[0].script.getCoinbaseHeight();}/**
   * Get the "claimed" reward by the coinbase.
   * @returns {Amount} claimed
   */getClaimed(){cov_15wu0g9ke1().f[27]++;cov_15wu0g9ke1().s[171]++;assert(this.txs.length>0);cov_15wu0g9ke1().s[172]++;assert(this.txs[0].isCoinbase());cov_15wu0g9ke1().s[173]++;return this.txs[0].getOutputValue();}/**
   * Get all unique outpoint hashes in the
   * block. Coinbases are ignored.
   * @returns {Hash[]} Outpoint hashes.
   */getPrevout(){cov_15wu0g9ke1().f[28]++;const prevout=(cov_15wu0g9ke1().s[174]++,new BufferSet());cov_15wu0g9ke1().s[175]++;for(let i=(cov_15wu0g9ke1().s[176]++,1);i<this.txs.length;i++){const tx=(cov_15wu0g9ke1().s[177]++,this.txs[i]);cov_15wu0g9ke1().s[178]++;for(const input of tx.inputs){cov_15wu0g9ke1().s[179]++;prevout.add(input.prevout.hash);}}cov_15wu0g9ke1().s[180]++;return prevout.toArray();}/**
   * Inspect the block and return a more
   * user-friendly representation of the data.
   * @returns {Object}
   */[inspectSymbol](){cov_15wu0g9ke1().f[29]++;cov_15wu0g9ke1().s[181]++;return this.format();}/**
   * Inspect the block and return a more
   * user-friendly representation of the data.
   * @param {CoinView} view
   * @param {Number} height
   * @returns {Object}
   */format(view,height){cov_15wu0g9ke1().f[30]++;const commitmentHash=(cov_15wu0g9ke1().s[182]++,this.getCommitmentHash());cov_15wu0g9ke1().s[183]++;return{hash:this.rhash(),height:height!=null?(cov_15wu0g9ke1().b[37][0]++,height):(cov_15wu0g9ke1().b[37][1]++,-1),size:this.getSize(),virtualSize:this.getVirtualSize(),date:util.date(this.time),version:this.version.toString(16),prevBlock:util.revHex(this.prevBlock),merkleRoot:util.revHex(this.merkleRoot),commitmentHash:commitmentHash?(cov_15wu0g9ke1().b[38][0]++,util.revHex(commitmentHash)):(cov_15wu0g9ke1().b[38][1]++,null),time:this.time,bits:this.bits,nonce:this.nonce,txs:this.txs.map((tx,i)=>{cov_15wu0g9ke1().f[31]++;cov_15wu0g9ke1().s[184]++;return tx.format(view,null,i);})};}/**
   * Convert the block to an object suitable
   * for JSON serialization.
   * @returns {Object}
   */toJSON(){cov_15wu0g9ke1().f[32]++;cov_15wu0g9ke1().s[185]++;return this.getJSON();}/**
   * Convert the block to an object suitable
   * for JSON serialization. Note that the hashes
   * will be reversed to abide by bitcoind's legacy
   * of little-endian uint256s.
   * @param {Network} network
   * @param {CoinView} view
   * @param {Number} height
   * @param {Number} depth
   * @returns {Object}
   */getJSON(network,view,height,depth){cov_15wu0g9ke1().f[33]++;cov_15wu0g9ke1().s[186]++;network=Network.get(network);cov_15wu0g9ke1().s[187]++;return{hash:this.rhash(),height:height,depth:depth,version:this.version,prevBlock:util.revHex(this.prevBlock),merkleRoot:util.revHex(this.merkleRoot),time:this.time,bits:this.bits,nonce:this.nonce,txs:this.txs.map((tx,i)=>{cov_15wu0g9ke1().f[34]++;cov_15wu0g9ke1().s[188]++;return tx.getJSON(network,view,null,i);})};}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   */fromJSON(json){cov_15wu0g9ke1().f[35]++;cov_15wu0g9ke1().s[189]++;assert(json,'Block data is required.');cov_15wu0g9ke1().s[190]++;assert(Array.isArray(json.txs));cov_15wu0g9ke1().s[191]++;this.parseJSON(json);cov_15wu0g9ke1().s[192]++;for(const tx of json.txs){cov_15wu0g9ke1().s[193]++;this.txs.push(TX.fromJSON(tx));}cov_15wu0g9ke1().s[194]++;return this;}/**
   * Instantiate a block from a jsonified block object.
   * @param {Object} json - The jsonified block object.
   * @returns {Block}
   */static fromJSON(json){cov_15wu0g9ke1().f[36]++;cov_15wu0g9ke1().s[195]++;return new this().fromJSON(json);}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromReader(br){cov_15wu0g9ke1().f[37]++;cov_15wu0g9ke1().s[196]++;br.start();cov_15wu0g9ke1().s[197]++;this.readHead(br);const count=(cov_15wu0g9ke1().s[198]++,br.readVarint());let witness=(cov_15wu0g9ke1().s[199]++,0);cov_15wu0g9ke1().s[200]++;for(let i=(cov_15wu0g9ke1().s[201]++,0);i<count;i++){const tx=(cov_15wu0g9ke1().s[202]++,TX.fromReader(br,true));cov_15wu0g9ke1().s[203]++;witness+=tx._witness;cov_15wu0g9ke1().s[204]++;this.txs.push(tx);}cov_15wu0g9ke1().s[205]++;if(!this.mutable){cov_15wu0g9ke1().b[39][0]++;cov_15wu0g9ke1().s[206]++;this._raw=br.endData();cov_15wu0g9ke1().s[207]++;this._size=this._raw.length;cov_15wu0g9ke1().s[208]++;this._witness=witness;}else{cov_15wu0g9ke1().b[39][1]++;}cov_15wu0g9ke1().s[209]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_15wu0g9ke1().f[38]++;cov_15wu0g9ke1().s[210]++;return this.fromReader(bio.read(data));}/**
   * Instantiate a block from a serialized Buffer.
   * @param {Buffer} data
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Block}
   */static fromReader(data){cov_15wu0g9ke1().f[39]++;cov_15wu0g9ke1().s[211]++;return new this().fromReader(data);}/**
   * Instantiate a block from a serialized Buffer.
   * @param {Buffer} data
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Block}
   */static fromRaw(data,enc){cov_15wu0g9ke1().f[40]++;cov_15wu0g9ke1().s[212]++;if(typeof data==='string'){cov_15wu0g9ke1().b[40][0]++;cov_15wu0g9ke1().s[213]++;data=Buffer.from(data,enc);}else{cov_15wu0g9ke1().b[40][1]++;}cov_15wu0g9ke1().s[214]++;return new this().fromRaw(data);}/**
   * Convert the Block to a MerkleBlock.
   * @param {Bloom} filter - Bloom filter for transactions
   * to match. The merkle block will contain only the
   * matched transactions.
   * @returns {MerkleBlock}
   */toMerkle(filter){cov_15wu0g9ke1().f[41]++;cov_15wu0g9ke1().s[215]++;return MerkleBlock.fromBlock(this,filter);}/**
   * Serialze block with or without witness data.
   * @private
   * @param {Boolean} witness
   * @param {BufferWriter?} writer
   * @returns {Buffer}
   */writeNormal(bw){cov_15wu0g9ke1().f[42]++;cov_15wu0g9ke1().s[216]++;this.writeHead(bw);cov_15wu0g9ke1().s[217]++;bw.writeVarint(this.txs.length);cov_15wu0g9ke1().s[218]++;for(const tx of this.txs){cov_15wu0g9ke1().s[219]++;tx.toNormalWriter(bw);}cov_15wu0g9ke1().s[220]++;return bw;}/**
   * Serialze block with or without witness data.
   * @private
   * @param {Boolean} witness
   * @param {BufferWriter?} writer
   * @returns {Buffer}
   */writeWitness(bw){cov_15wu0g9ke1().f[43]++;cov_15wu0g9ke1().s[221]++;this.writeHead(bw);cov_15wu0g9ke1().s[222]++;bw.writeVarint(this.txs.length);cov_15wu0g9ke1().s[223]++;for(const tx of this.txs){cov_15wu0g9ke1().s[224]++;tx.toWriter(bw,true);}cov_15wu0g9ke1().s[225]++;return bw;}/**
   * Serialze block with or without witness data.
   * @private
   * @param {Boolean} witness
   * @param {BufferWriter?} writer
   * @returns {Buffer}
   */frameNormal(){cov_15wu0g9ke1().f[44]++;const raw=(cov_15wu0g9ke1().s[226]++,this.getNormalSizes());const bw=(cov_15wu0g9ke1().s[227]++,bio.write(raw.size));cov_15wu0g9ke1().s[228]++;this.writeNormal(bw);cov_15wu0g9ke1().s[229]++;raw.data=bw.render();cov_15wu0g9ke1().s[230]++;return raw;}/**
   * Serialze block without witness data.
   * @private
   * @param {BufferWriter?} writer
   * @returns {Buffer}
   */frameWitness(){cov_15wu0g9ke1().f[45]++;const raw=(cov_15wu0g9ke1().s[231]++,this.getWitnessSizes());const bw=(cov_15wu0g9ke1().s[232]++,bio.write(raw.size));cov_15wu0g9ke1().s[233]++;this.writeWitness(bw);cov_15wu0g9ke1().s[234]++;raw.data=bw.render();cov_15wu0g9ke1().s[235]++;return raw;}/**
   * Convert the block to a headers object.
   * @returns {Headers}
   */toHeaders(){cov_15wu0g9ke1().f[46]++;cov_15wu0g9ke1().s[236]++;return Headers.fromBlock(this);}/**
   * Get real block size without witness.
   * @returns {RawBlock}
   */getNormalSizes(){cov_15wu0g9ke1().f[47]++;let size=(cov_15wu0g9ke1().s[237]++,0);cov_15wu0g9ke1().s[238]++;size+=80;cov_15wu0g9ke1().s[239]++;size+=encoding.sizeVarint(this.txs.length);cov_15wu0g9ke1().s[240]++;for(const tx of this.txs){cov_15wu0g9ke1().s[241]++;size+=tx.getBaseSize();}cov_15wu0g9ke1().s[242]++;return new RawBlock(size,0);}/**
   * Get real block size with witness.
   * @returns {RawBlock}
   */getWitnessSizes(){cov_15wu0g9ke1().f[48]++;let size=(cov_15wu0g9ke1().s[243]++,0);let witness=(cov_15wu0g9ke1().s[244]++,0);cov_15wu0g9ke1().s[245]++;size+=80;cov_15wu0g9ke1().s[246]++;size+=encoding.sizeVarint(this.txs.length);cov_15wu0g9ke1().s[247]++;for(const tx of this.txs){const raw=(cov_15wu0g9ke1().s[248]++,tx.getSizes());cov_15wu0g9ke1().s[249]++;size+=raw.size;cov_15wu0g9ke1().s[250]++;witness+=raw.witness;}cov_15wu0g9ke1().s[251]++;return new RawBlock(size,witness);}/**
   * Test whether an object is a Block.
   * @param {Object} obj
   * @returns {Boolean}
   */static isBlock(obj){cov_15wu0g9ke1().f[49]++;cov_15wu0g9ke1().s[252]++;return obj instanceof Block;}/*
   * Get block filter (BIP 158)
   * @see https://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki
   * @param {CoinView} view
   * @returns {Object} See {@link Golomb}
   */toFilter(view){cov_15wu0g9ke1().f[50]++;const hash=(cov_15wu0g9ke1().s[253]++,this.hash());const key=(cov_15wu0g9ke1().s[254]++,hash.slice(0,16));const items=(cov_15wu0g9ke1().s[255]++,new BufferSet());cov_15wu0g9ke1().s[256]++;for(let i=(cov_15wu0g9ke1().s[257]++,0);i<this.txs.length;i++){const tx=(cov_15wu0g9ke1().s[258]++,this.txs[i]);cov_15wu0g9ke1().s[259]++;for(const output of tx.outputs){cov_15wu0g9ke1().s[260]++;if(output.script.length===0){cov_15wu0g9ke1().b[41][0]++;cov_15wu0g9ke1().s[261]++;continue;}else{cov_15wu0g9ke1().b[41][1]++;}// In order to allow the filters to later be committed
// to within an OP_RETURN output, we ignore all
// OP_RETURNs to avoid a circular dependency.
cov_15wu0g9ke1().s[262]++;if(output.script.raw[0]===opcodes.OP_RETURN){cov_15wu0g9ke1().b[42][0]++;cov_15wu0g9ke1().s[263]++;continue;}else{cov_15wu0g9ke1().b[42][1]++;}cov_15wu0g9ke1().s[264]++;items.add(output.script.raw);}}cov_15wu0g9ke1().s[265]++;for(const[,coins]of view.map){cov_15wu0g9ke1().s[266]++;for(const[,coin]of coins.outputs){cov_15wu0g9ke1().s[267]++;if(coin.output.script.length===0){cov_15wu0g9ke1().b[43][0]++;cov_15wu0g9ke1().s[268]++;continue;}else{cov_15wu0g9ke1().b[43][1]++;}cov_15wu0g9ke1().s[269]++;items.add(coin.output.script.raw);}}cov_15wu0g9ke1().s[270]++;return GCSFilter.fromItems(19,key,items);}}/*
 * Helpers
 */class RawBlock{constructor(size,witness){cov_15wu0g9ke1().f[51]++;cov_15wu0g9ke1().s[271]++;this.data=null;cov_15wu0g9ke1().s[272]++;this.size=size;cov_15wu0g9ke1().s[273]++;this.witness=witness;}}/*
 * Expose
 */cov_15wu0g9ke1().s[274]++;module.exports=Block;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/*!
 * private.js - hd private keys for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_lva21mxz(){var path="E:\\Projects\\Test\\bcoin\\lib\\hd\\private.js";var hash="fe7c3c131b70e43191ca2cd5e0e3d0d4e9214cb2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\hd\\private.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:12},end:{line:10,column:28}},"2":{start:{line:11,column:15},end:{line:11,column:53}},"3":{start:{line:12,column:15},end:{line:12,column:44}},"4":{start:{line:13,column:16},end:{line:13,column:46}},"5":{start:{line:14,column:16},end:{line:14,column:46}},"6":{start:{line:15,column:16},end:{line:15,column:46}},"7":{start:{line:16,column:15},end:{line:16,column:44}},"8":{start:{line:17,column:18},end:{line:17,column:50}},"9":{start:{line:18,column:16},end:{line:18,column:46}},"10":{start:{line:19,column:18},end:{line:19,column:50}},"11":{start:{line:20,column:15},end:{line:20,column:34}},"12":{start:{line:21,column:17},end:{line:21,column:38}},"13":{start:{line:22,column:20},end:{line:22,column:39}},"14":{start:{line:28,column:18},end:{line:28,column:54}},"15":{start:{line:53,column:4},end:{line:53,column:19}},"16":{start:{line:54,column:4},end:{line:54,column:31}},"17":{start:{line:55,column:4},end:{line:55,column:24}},"18":{start:{line:56,column:4},end:{line:56,column:41}},"19":{start:{line:57,column:4},end:{line:57,column:42}},"20":{start:{line:59,column:4},end:{line:59,column:37}},"21":{start:{line:60,column:4},end:{line:60,column:26}},"22":{start:{line:62,column:4},end:{line:62,column:29}},"23":{start:{line:64,column:4},end:{line:65,column:32}},"24":{start:{line:65,column:6},end:{line:65,column:32}},"25":{start:{line:75,column:4},end:{line:75,column:54}},"26":{start:{line:76,column:4},end:{line:76,column:53}},"27":{start:{line:77,column:4},end:{line:77,column:76}},"28":{start:{line:78,column:4},end:{line:78,column:62}},"29":{start:{line:79,column:4},end:{line:79,column:47}},"30":{start:{line:80,column:4},end:{line:80,column:48}},"31":{start:{line:82,column:4},end:{line:82,column:31}},"32":{start:{line:83,column:4},end:{line:83,column:55}},"33":{start:{line:84,column:4},end:{line:84,column:41}},"34":{start:{line:85,column:4},end:{line:85,column:39}},"35":{start:{line:86,column:4},end:{line:86,column:41}},"36":{start:{line:87,column:4},end:{line:87,column:73}},"37":{start:{line:89,column:4},end:{line:89,column:16}},"38":{start:{line:99,column:4},end:{line:99,column:43}},"39":{start:{line:108,column:14},end:{line:108,column:31}},"40":{start:{line:110,column:4},end:{line:118,column:5}},"41":{start:{line:111,column:6},end:{line:111,column:30}},"42":{start:{line:112,column:6},end:{line:112,column:29}},"43":{start:{line:113,column:6},end:{line:113,column:53}},"44":{start:{line:114,column:6},end:{line:114,column:39}},"45":{start:{line:115,column:6},end:{line:115,column:37}},"46":{start:{line:116,column:6},end:{line:116,column:37}},"47":{start:{line:117,column:6},end:{line:117,column:30}},"48":{start:{line:120,column:4},end:{line:120,column:15}},"49":{start:{line:129,column:4},end:{line:129,column:34}},"50":{start:{line:138,column:4},end:{line:138,column:44}},"51":{start:{line:147,column:4},end:{line:147,column:19}},"52":{start:{line:148,column:4},end:{line:148,column:24}},"53":{start:{line:149,column:4},end:{line:149,column:31}},"54":{start:{line:151,column:4},end:{line:151,column:28}},"55":{start:{line:152,column:4},end:{line:152,column:29}},"56":{start:{line:153,column:4},end:{line:153,column:28}},"57":{start:{line:155,column:4},end:{line:155,column:26}},"58":{start:{line:157,column:4},end:{line:161,column:5}},"59":{start:{line:158,column:6},end:{line:159,column:36}},"60":{start:{line:159,column:8},end:{line:159,column:36}},"61":{start:{line:160,column:6},end:{line:160,column:31}},"62":{start:{line:172,column:4},end:{line:172,column:38}},"63":{start:{line:174,column:4},end:{line:175,column:45}},"64":{start:{line:175,column:6},end:{line:175,column:45}},"65":{start:{line:177,column:4},end:{line:178,column:41}},"66":{start:{line:178,column:6},end:{line:178,column:41}},"67":{start:{line:180,column:4},end:{line:183,column:5}},"68":{start:{line:181,column:6},end:{line:181,column:31}},"69":{start:{line:182,column:6},end:{line:182,column:19}},"70":{start:{line:185,column:15},end:{line:185,column:32}},"71":{start:{line:186,column:18},end:{line:186,column:38}},"72":{start:{line:188,column:4},end:{line:189,column:19}},"73":{start:{line:189,column:6},end:{line:189,column:19}},"74":{start:{line:191,column:15},end:{line:191,column:27}},"75":{start:{line:193,column:4},end:{line:200,column:5}},"76":{start:{line:194,column:6},end:{line:194,column:20}},"77":{start:{line:195,column:6},end:{line:195,column:37}},"78":{start:{line:196,column:6},end:{line:196,column:27}},"79":{start:{line:198,column:6},end:{line:198,column:36}},"80":{start:{line:199,column:6},end:{line:199,column:27}},"81":{start:{line:202,column:17},end:{line:202,column:28}},"82":{start:{line:204,column:17},end:{line:204,column:49}},"83":{start:{line:205,column:17},end:{line:205,column:34}},"84":{start:{line:206,column:18},end:{line:206,column:36}},"85":{start:{line:209,column:4},end:{line:213,column:5}},"86":{start:{line:210,column:6},end:{line:210,column:64}},"87":{start:{line:212,column:6},end:{line:212,column:36}},"88":{start:{line:215,column:4},end:{line:218,column:5}},"89":{start:{line:216,column:17},end:{line:216,column:47}},"90":{start:{line:217,column:6},end:{line:217,column:50}},"91":{start:{line:220,column:18},end:{line:220,column:40}},"92":{start:{line:221,column:4},end:{line:221,column:33}},"93":{start:{line:222,column:4},end:{line:222,column:47}},"94":{start:{line:223,column:4},end:{line:223,column:29}},"95":{start:{line:224,column:4},end:{line:224,column:28}},"96":{start:{line:225,column:4},end:{line:225,column:27}},"97":{start:{line:226,column:4},end:{line:226,column:59}},"98":{start:{line:228,column:4},end:{line:228,column:32}},"99":{start:{line:230,column:4},end:{line:230,column:17}},"100":{start:{line:241,column:4},end:{line:241,column:56}},"101":{start:{line:254,column:4},end:{line:254,column:69}},"102":{start:{line:255,column:4},end:{line:255,column:65}},"103":{start:{line:256,column:4},end:{line:256,column:75}},"104":{start:{line:257,column:4},end:{line:257,column:60}},"105":{start:{line:258,column:4},end:{line:261,column:29}},"106":{start:{line:270,column:4},end:{line:270,column:33}},"107":{start:{line:280,column:4},end:{line:280,column:43}},"108":{start:{line:291,column:4},end:{line:292,column:19}},"109":{start:{line:292,column:6},end:{line:292,column:19}},"110":{start:{line:294,column:4},end:{line:295,column:19}},"111":{start:{line:295,column:6},end:{line:295,column:19}},"112":{start:{line:297,column:19},end:{line:297,column:39}},"113":{start:{line:299,column:4},end:{line:304,column:5}},"114":{start:{line:300,column:6},end:{line:300,column:45}},"115":{start:{line:301,column:6},end:{line:301,column:18}},"116":{start:{line:303,column:6},end:{line:303,column:19}},"117":{start:{line:315,column:4},end:{line:316,column:19}},"118":{start:{line:316,column:6},end:{line:316,column:19}},"119":{start:{line:318,column:4},end:{line:319,column:19}},"120":{start:{line:319,column:6},end:{line:319,column:19}},"121":{start:{line:321,column:20},end:{line:321,column:46}},"122":{start:{line:323,column:4},end:{line:328,column:5}},"123":{start:{line:324,column:6},end:{line:324,column:44}},"124":{start:{line:325,column:6},end:{line:325,column:18}},"125":{start:{line:327,column:6},end:{line:327,column:19}},"126":{start:{line:338,column:4},end:{line:343,column:5}},"127":{start:{line:339,column:6},end:{line:339,column:35}},"128":{start:{line:340,column:6},end:{line:340,column:18}},"129":{start:{line:342,column:6},end:{line:342,column:19}},"130":{start:{line:354,column:20},end:{line:354,column:48}},"131":{start:{line:356,column:14},end:{line:356,column:18}},"132":{start:{line:358,column:4},end:{line:359,column:30}},"133":{start:{line:359,column:6},end:{line:359,column:30}},"134":{start:{line:361,column:4},end:{line:361,column:15}},"135":{start:{line:371,column:4},end:{line:371,column:45}},"136":{start:{line:373,column:4},end:{line:377,column:48}},"137":{start:{line:387,column:4},end:{line:387,column:45}},"138":{start:{line:389,column:14},end:{line:389,column:36}},"139":{start:{line:391,column:4},end:{line:392,column:17}},"140":{start:{line:392,column:6},end:{line:392,column:17}},"141":{start:{line:394,column:4},end:{line:394,column:57}},"142":{start:{line:396,column:4},end:{line:397,column:17}},"143":{start:{line:397,column:6},end:{line:397,column:17}},"144":{start:{line:399,column:4},end:{line:399,column:43}},"145":{start:{line:401,column:4},end:{line:402,column:17}},"146":{start:{line:402,column:6},end:{line:402,column:17}},"147":{start:{line:404,column:4},end:{line:404,column:48}},"148":{start:{line:406,column:4},end:{line:407,column:17}},"149":{start:{line:407,column:6},end:{line:407,column:17}},"150":{start:{line:409,column:4},end:{line:409,column:50}},"151":{start:{line:411,column:4},end:{line:412,column:17}},"152":{start:{line:412,column:6},end:{line:412,column:17}},"153":{start:{line:414,column:4},end:{line:414,column:13}},"154":{start:{line:424,column:4},end:{line:424,column:34}},"155":{start:{line:426,column:4},end:{line:429,column:5}},"156":{start:{line:428,column:6},end:{line:428,column:47}},"157":{start:{line:431,column:17},end:{line:431,column:44}},"158":{start:{line:432,column:17},end:{line:432,column:34}},"159":{start:{line:433,column:18},end:{line:433,column:36}},"160":{start:{line:436,column:4},end:{line:437,column:56}},"161":{start:{line:437,column:6},end:{line:437,column:56}},"162":{start:{line:439,column:4},end:{line:439,column:19}},"163":{start:{line:440,column:4},end:{line:440,column:31}},"164":{start:{line:441,column:4},end:{line:441,column:24}},"165":{start:{line:442,column:4},end:{line:442,column:27}},"166":{start:{line:443,column:4},end:{line:443,column:27}},"167":{start:{line:444,column:4},end:{line:444,column:59}},"168":{start:{line:446,column:4},end:{line:446,column:16}},"169":{start:{line:456,column:4},end:{line:456,column:37}},"170":{start:{line:467,column:4},end:{line:467,column:41}},"171":{start:{line:468,column:4},end:{line:468,column:54}},"172":{start:{line:479,column:4},end:{line:479,column:57}},"173":{start:{line:489,column:21},end:{line:489,column:48}},"174":{start:{line:490,column:4},end:{line:490,column:32}},"175":{start:{line:491,column:4},end:{line:491,column:16}},"176":{start:{line:501,column:4},end:{line:501,column:41}},"177":{start:{line:512,column:4},end:{line:512,column:54}},"178":{start:{line:513,column:4},end:{line:513,column:62}},"179":{start:{line:514,column:4},end:{line:514,column:19}},"180":{start:{line:515,column:4},end:{line:515,column:31}},"181":{start:{line:516,column:4},end:{line:516,column:24}},"182":{start:{line:517,column:4},end:{line:517,column:29}},"183":{start:{line:518,column:4},end:{line:518,column:26}},"184":{start:{line:519,column:4},end:{line:519,column:58}},"185":{start:{line:520,column:4},end:{line:520,column:16}},"186":{start:{line:531,column:4},end:{line:531,column:44}},"187":{start:{line:540,column:16},end:{line:540,column:46}},"188":{start:{line:541,column:20},end:{line:541,column:42}},"189":{start:{line:542,column:4},end:{line:542,column:46}},"190":{start:{line:553,column:4},end:{line:553,column:37}},"191":{start:{line:554,column:4},end:{line:554,column:54}},"192":{start:{line:565,column:20},end:{line:565,column:34}},"193":{start:{line:567,column:4},end:{line:567,column:42}},"194":{start:{line:569,column:4},end:{line:569,column:29}},"195":{start:{line:570,column:4},end:{line:570,column:44}},"196":{start:{line:571,column:4},end:{line:571,column:37}},"197":{start:{line:572,column:4},end:{line:572,column:38}},"198":{start:{line:573,column:4},end:{line:573,column:30}},"199":{start:{line:574,column:4},end:{line:574,column:39}},"200":{start:{line:575,column:4},end:{line:575,column:70}},"201":{start:{line:577,column:4},end:{line:577,column:38}},"202":{start:{line:579,column:4},end:{line:579,column:16}},"203":{start:{line:590,column:4},end:{line:590,column:52}},"204":{start:{line:600,column:4},end:{line:600,column:46}},"205":{start:{line:609,column:4},end:{line:609,column:14}},"206":{start:{line:619,column:4},end:{line:619,column:35}},"207":{start:{line:621,column:4},end:{line:621,column:46}},"208":{start:{line:622,column:4},end:{line:622,column:27}},"209":{start:{line:623,column:4},end:{line:623,column:42}},"210":{start:{line:624,column:4},end:{line:624,column:35}},"211":{start:{line:625,column:4},end:{line:625,column:34}},"212":{start:{line:626,column:4},end:{line:626,column:18}},"213":{start:{line:627,column:4},end:{line:627,column:35}},"214":{start:{line:628,column:4},end:{line:628,column:37}},"215":{start:{line:630,column:4},end:{line:630,column:14}},"216":{start:{line:640,column:4},end:{line:640,column:58}},"217":{start:{line:651,column:4},end:{line:651,column:48}},"218":{start:{line:662,column:4},end:{line:662,column:46}},"219":{start:{line:673,column:4},end:{line:673,column:45}},"220":{start:{line:682,column:4},end:{line:684,column:6}},"221":{start:{line:695,column:4},end:{line:695,column:56}},"222":{start:{line:697,column:4},end:{line:697,column:44}},"223":{start:{line:699,column:4},end:{line:699,column:16}},"224":{start:{line:710,column:4},end:{line:710,column:46}},"225":{start:{line:720,column:4},end:{line:720,column:39}},"226":{start:{line:728,column:0},end:{line:728,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:23},end:{line:66,column:3}},line:52},"1":{name:"(anonymous_1)",decl:{start:{line:74,column:2},end:{line:74,column:3}},loc:{start:{line:74,column:23},end:{line:90,column:3}},line:74},"2":{name:"(anonymous_2)",decl:{start:{line:98,column:2},end:{line:98,column:3}},loc:{start:{line:98,column:30},end:{line:100,column:3}},line:98},"3":{name:"(anonymous_3)",decl:{start:{line:107,column:2},end:{line:107,column:3}},loc:{start:{line:107,column:13},end:{line:121,column:3}},line:107},"4":{name:"(anonymous_4)",decl:{start:{line:128,column:2},end:{line:128,column:3}},loc:{start:{line:128,column:20},end:{line:130,column:3}},line:128},"5":{name:"(anonymous_5)",decl:{start:{line:137,column:2},end:{line:137,column:3}},loc:{start:{line:137,column:19},end:{line:139,column:3}},line:137},"6":{name:"(anonymous_6)",decl:{start:{line:146,column:2},end:{line:146,column:3}},loc:{start:{line:146,column:15},end:{line:162,column:3}},line:146},"7":{name:"(anonymous_7)",decl:{start:{line:171,column:2},end:{line:171,column:3}},loc:{start:{line:171,column:26},end:{line:231,column:3}},line:171},"8":{name:"(anonymous_8)",decl:{start:{line:240,column:2},end:{line:240,column:3}},loc:{start:{line:240,column:15},end:{line:242,column:3}},line:240},"9":{name:"(anonymous_9)",decl:{start:{line:253,column:2},end:{line:253,column:3}},loc:{start:{line:253,column:40},end:{line:262,column:3}},line:253},"10":{name:"(anonymous_10)",decl:{start:{line:269,column:2},end:{line:269,column:3}},loc:{start:{line:269,column:13},end:{line:271,column:3}},line:269},"11":{name:"(anonymous_11)",decl:{start:{line:279,column:2},end:{line:279,column:3}},loc:{start:{line:279,column:21},end:{line:281,column:3}},line:279},"12":{name:"(anonymous_12)",decl:{start:{line:290,column:2},end:{line:290,column:3}},loc:{start:{line:290,column:33},end:{line:305,column:3}},line:290},"13":{name:"(anonymous_13)",decl:{start:{line:314,column:2},end:{line:314,column:3}},loc:{start:{line:314,column:30},end:{line:329,column:3}},line:314},"14":{name:"(anonymous_14)",decl:{start:{line:337,column:2},end:{line:337,column:3}},loc:{start:{line:337,column:27},end:{line:344,column:3}},line:337},"15":{name:"(anonymous_15)",decl:{start:{line:353,column:2},end:{line:353,column:3}},loc:{start:{line:353,column:19},end:{line:362,column:3}},line:353},"16":{name:"(anonymous_16)",decl:{start:{line:370,column:2},end:{line:370,column:3}},loc:{start:{line:370,column:14},end:{line:378,column:3}},line:370},"17":{name:"(anonymous_17)",decl:{start:{line:386,column:2},end:{line:386,column:3}},loc:{start:{line:386,column:15},end:{line:415,column:3}},line:386},"18":{name:"(anonymous_18)",decl:{start:{line:423,column:2},end:{line:423,column:3}},loc:{start:{line:423,column:17},end:{line:447,column:3}},line:423},"19":{name:"(anonymous_19)",decl:{start:{line:455,column:2},end:{line:455,column:3}},loc:{start:{line:455,column:24},end:{line:457,column:3}},line:455},"20":{name:"(anonymous_20)",decl:{start:{line:466,column:2},end:{line:466,column:3}},loc:{start:{line:466,column:37},end:{line:469,column:3}},line:466},"21":{name:"(anonymous_21)",decl:{start:{line:478,column:2},end:{line:478,column:3}},loc:{start:{line:478,column:44},end:{line:480,column:3}},line:478},"22":{name:"(anonymous_22)",decl:{start:{line:488,column:2},end:{line:488,column:3}},loc:{start:{line:488,column:21},end:{line:492,column:3}},line:488},"23":{name:"(anonymous_23)",decl:{start:{line:500,column:2},end:{line:500,column:3}},loc:{start:{line:500,column:28},end:{line:502,column:3}},line:500},"24":{name:"(anonymous_24)",decl:{start:{line:511,column:2},end:{line:511,column:3}},loc:{start:{line:511,column:24},end:{line:521,column:3}},line:511},"25":{name:"(anonymous_25)",decl:{start:{line:530,column:2},end:{line:530,column:3}},loc:{start:{line:530,column:31},end:{line:532,column:3}},line:530},"26":{name:"(anonymous_26)",decl:{start:{line:539,column:2},end:{line:539,column:3}},loc:{start:{line:539,column:20},end:{line:543,column:3}},line:539},"27":{name:"(anonymous_27)",decl:{start:{line:552,column:2},end:{line:552,column:3}},loc:{start:{line:552,column:28},end:{line:555,column:3}},line:552},"28":{name:"(anonymous_28)",decl:{start:{line:564,column:2},end:{line:564,column:3}},loc:{start:{line:564,column:26},end:{line:580,column:3}},line:564},"29":{name:"(anonymous_29)",decl:{start:{line:589,column:2},end:{line:589,column:3}},loc:{start:{line:589,column:25},end:{line:591,column:3}},line:589},"30":{name:"(anonymous_30)",decl:{start:{line:599,column:2},end:{line:599,column:3}},loc:{start:{line:599,column:20},end:{line:601,column:3}},line:599},"31":{name:"(anonymous_31)",decl:{start:{line:608,column:2},end:{line:608,column:3}},loc:{start:{line:608,column:12},end:{line:610,column:3}},line:608},"32":{name:"(anonymous_32)",decl:{start:{line:618,column:2},end:{line:618,column:3}},loc:{start:{line:618,column:24},end:{line:631,column:3}},line:618},"33":{name:"(anonymous_33)",decl:{start:{line:639,column:2},end:{line:639,column:3}},loc:{start:{line:639,column:17},end:{line:641,column:3}},line:639},"34":{name:"(anonymous_34)",decl:{start:{line:650,column:2},end:{line:650,column:3}},loc:{start:{line:650,column:35},end:{line:652,column:3}},line:650},"35":{name:"(anonymous_35)",decl:{start:{line:661,column:2},end:{line:661,column:3}},loc:{start:{line:661,column:33},end:{line:663,column:3}},line:661},"36":{name:"(anonymous_36)",decl:{start:{line:672,column:2},end:{line:672,column:3}},loc:{start:{line:672,column:32},end:{line:674,column:3}},line:672},"37":{name:"(anonymous_37)",decl:{start:{line:681,column:2},end:{line:681,column:3}},loc:{start:{line:681,column:18},end:{line:685,column:3}},line:681},"38":{name:"(anonymous_38)",decl:{start:{line:694,column:2},end:{line:694,column:3}},loc:{start:{line:694,column:26},end:{line:700,column:3}},line:694},"39":{name:"(anonymous_39)",decl:{start:{line:709,column:2},end:{line:709,column:3}},loc:{start:{line:709,column:33},end:{line:711,column:3}},line:709},"40":{name:"(anonymous_40)",decl:{start:{line:719,column:2},end:{line:719,column:3}},loc:{start:{line:719,column:29},end:{line:721,column:3}},line:719}},branchMap:{"0":{loc:{start:{line:64,column:4},end:{line:65,column:32}},type:"if",locations:[{start:{line:64,column:4},end:{line:65,column:32}},{start:{line:64,column:4},end:{line:65,column:32}}],line:64},"1":{loc:{start:{line:110,column:4},end:{line:118,column:5}},type:"if",locations:[{start:{line:110,column:4},end:{line:118,column:5}},{start:{line:110,column:4},end:{line:118,column:5}}],line:110},"2":{loc:{start:{line:157,column:4},end:{line:161,column:5}},type:"if",locations:[{start:{line:157,column:4},end:{line:161,column:5}},{start:{line:157,column:4},end:{line:161,column:5}}],line:157},"3":{loc:{start:{line:158,column:6},end:{line:159,column:36}},type:"if",locations:[{start:{line:158,column:6},end:{line:159,column:36}},{start:{line:158,column:6},end:{line:159,column:36}}],line:158},"4":{loc:{start:{line:174,column:4},end:{line:175,column:45}},type:"if",locations:[{start:{line:174,column:4},end:{line:175,column:45}},{start:{line:174,column:4},end:{line:175,column:45}}],line:174},"5":{loc:{start:{line:177,column:4},end:{line:178,column:41}},type:"if",locations:[{start:{line:177,column:4},end:{line:178,column:41}},{start:{line:177,column:4},end:{line:178,column:41}}],line:177},"6":{loc:{start:{line:180,column:4},end:{line:183,column:5}},type:"if",locations:[{start:{line:180,column:4},end:{line:183,column:5}},{start:{line:180,column:4},end:{line:183,column:5}}],line:180},"7":{loc:{start:{line:188,column:4},end:{line:189,column:19}},type:"if",locations:[{start:{line:188,column:4},end:{line:189,column:19}},{start:{line:188,column:4},end:{line:189,column:19}}],line:188},"8":{loc:{start:{line:193,column:4},end:{line:200,column:5}},type:"if",locations:[{start:{line:193,column:4},end:{line:200,column:5}},{start:{line:193,column:4},end:{line:200,column:5}}],line:193},"9":{loc:{start:{line:215,column:4},end:{line:218,column:5}},type:"if",locations:[{start:{line:215,column:4},end:{line:218,column:5}},{start:{line:215,column:4},end:{line:218,column:5}}],line:215},"10":{loc:{start:{line:291,column:4},end:{line:292,column:19}},type:"if",locations:[{start:{line:291,column:4},end:{line:292,column:19}},{start:{line:291,column:4},end:{line:292,column:19}}],line:291},"11":{loc:{start:{line:294,column:4},end:{line:295,column:19}},type:"if",locations:[{start:{line:294,column:4},end:{line:295,column:19}},{start:{line:294,column:4},end:{line:295,column:19}}],line:294},"12":{loc:{start:{line:315,column:4},end:{line:316,column:19}},type:"if",locations:[{start:{line:315,column:4},end:{line:316,column:19}},{start:{line:315,column:4},end:{line:316,column:19}}],line:315},"13":{loc:{start:{line:318,column:4},end:{line:319,column:19}},type:"if",locations:[{start:{line:318,column:4},end:{line:319,column:19}},{start:{line:318,column:4},end:{line:319,column:19}}],line:318},"14":{loc:{start:{line:373,column:11},end:{line:377,column:47}},type:"binary-expr",locations:[{start:{line:373,column:11},end:{line:373,column:35}},{start:{line:374,column:9},end:{line:374,column:57}},{start:{line:375,column:9},end:{line:375,column:43}},{start:{line:376,column:9},end:{line:376,column:45}},{start:{line:377,column:9},end:{line:377,column:47}}],line:373},"15":{loc:{start:{line:391,column:4},end:{line:392,column:17}},type:"if",locations:[{start:{line:391,column:4},end:{line:392,column:17}},{start:{line:391,column:4},end:{line:392,column:17}}],line:391},"16":{loc:{start:{line:396,column:4},end:{line:397,column:17}},type:"if",locations:[{start:{line:396,column:4},end:{line:397,column:17}},{start:{line:396,column:4},end:{line:397,column:17}}],line:396},"17":{loc:{start:{line:401,column:4},end:{line:402,column:17}},type:"if",locations:[{start:{line:401,column:4},end:{line:402,column:17}},{start:{line:401,column:4},end:{line:402,column:17}}],line:401},"18":{loc:{start:{line:406,column:4},end:{line:407,column:17}},type:"if",locations:[{start:{line:406,column:4},end:{line:407,column:17}},{start:{line:406,column:4},end:{line:407,column:17}}],line:406},"19":{loc:{start:{line:411,column:4},end:{line:412,column:17}},type:"if",locations:[{start:{line:411,column:4},end:{line:412,column:17}},{start:{line:411,column:4},end:{line:412,column:17}}],line:411},"20":{loc:{start:{line:426,column:4},end:{line:429,column:5}},type:"if",locations:[{start:{line:426,column:4},end:{line:429,column:5}},{start:{line:426,column:4},end:{line:429,column:5}}],line:426},"21":{loc:{start:{line:426,column:8},end:{line:427,column:47}},type:"binary-expr",locations:[{start:{line:426,column:8},end:{line:426,column:44}},{start:{line:427,column:11},end:{line:427,column:47}}],line:426},"22":{loc:{start:{line:436,column:4},end:{line:437,column:56}},type:"if",locations:[{start:{line:436,column:4},end:{line:437,column:56}},{start:{line:436,column:4},end:{line:437,column:56}}],line:436},"23":{loc:{start:{line:512,column:11},end:{line:512,column:52}},type:"binary-expr",locations:[{start:{line:512,column:11},end:{line:512,column:31}},{start:{line:512,column:35},end:{line:512,column:52}}],line:512},"24":{loc:{start:{line:513,column:11},end:{line:513,column:60}},type:"binary-expr",locations:[{start:{line:513,column:11},end:{line:513,column:35}},{start:{line:513,column:39},end:{line:513,column:60}}],line:513}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fe7c3c131b70e43191ca2cd5e0e3d0d4e9214cb2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_lva21mxz=function(){return actualCoverage;};}return actualCoverage;}cov_lva21mxz();const assert=(cov_lva21mxz().s[0]++,require('bsert'));const bio=(cov_lva21mxz().s[1]++,require('bufio'));const base58=(cov_lva21mxz().s[2]++,require('bcrypto/lib/encoding/base58'));const sha512=(cov_lva21mxz().s[3]++,require('bcrypto/lib/sha512'));const hash160=(cov_lva21mxz().s[4]++,require('bcrypto/lib/hash160'));const hash256=(cov_lva21mxz().s[5]++,require('bcrypto/lib/hash256'));const cleanse=(cov_lva21mxz().s[6]++,require('bcrypto/lib/cleanse'));const random=(cov_lva21mxz().s[7]++,require('bcrypto/lib/random'));const secp256k1=(cov_lva21mxz().s[8]++,require('bcrypto/lib/secp256k1'));const Network=(cov_lva21mxz().s[9]++,require('../protocol/network'));const consensus=(cov_lva21mxz().s[10]++,require('../protocol/consensus'));const common=(cov_lva21mxz().s[11]++,require('./common'));const Mnemonic=(cov_lva21mxz().s[12]++,require('./mnemonic'));const HDPublicKey=(cov_lva21mxz().s[13]++,require('./public'));/*
 * Constants
 */const SEED_SALT=(cov_lva21mxz().s[14]++,Buffer.from('Bitcoin seed','ascii'));/**
 * HDPrivateKey
 * @alias module:hd.PrivateKey
 * @property {Number} depth
 * @property {Number} parentFingerPrint
 * @property {Number} childIndex
 * @property {Buffer} chainCode
 * @property {Buffer} privateKey
 */class HDPrivateKey{/**
   * Create an hd private key.
   * @constructor
   * @param {Object|String} options
   * @param {Number?} options.depth
   * @param {Number?} options.parentFingerPrint
   * @param {Number?} options.childIndex
   * @param {Buffer?} options.chainCode
   * @param {Buffer?} options.privateKey
   */constructor(options){cov_lva21mxz().f[0]++;cov_lva21mxz().s[15]++;this.depth=0;cov_lva21mxz().s[16]++;this.parentFingerPrint=0;cov_lva21mxz().s[17]++;this.childIndex=0;cov_lva21mxz().s[18]++;this.chainCode=consensus.ZERO_HASH;cov_lva21mxz().s[19]++;this.privateKey=consensus.ZERO_HASH;cov_lva21mxz().s[20]++;this.publicKey=common.ZERO_KEY;cov_lva21mxz().s[21]++;this.fingerPrint=-1;cov_lva21mxz().s[22]++;this._hdPublicKey=null;cov_lva21mxz().s[23]++;if(options){cov_lva21mxz().b[0][0]++;cov_lva21mxz().s[24]++;this.fromOptions(options);}else{cov_lva21mxz().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_lva21mxz().f[1]++;cov_lva21mxz().s[25]++;assert(options,'No options for HD private key.');cov_lva21mxz().s[26]++;assert((options.depth&0xff)===options.depth);cov_lva21mxz().s[27]++;assert(options.parentFingerPrint>>>0===options.parentFingerPrint);cov_lva21mxz().s[28]++;assert(options.childIndex>>>0===options.childIndex);cov_lva21mxz().s[29]++;assert(Buffer.isBuffer(options.chainCode));cov_lva21mxz().s[30]++;assert(Buffer.isBuffer(options.privateKey));cov_lva21mxz().s[31]++;this.depth=options.depth;cov_lva21mxz().s[32]++;this.parentFingerPrint=options.parentFingerPrint;cov_lva21mxz().s[33]++;this.childIndex=options.childIndex;cov_lva21mxz().s[34]++;this.chainCode=options.chainCode;cov_lva21mxz().s[35]++;this.privateKey=options.privateKey;cov_lva21mxz().s[36]++;this.publicKey=secp256k1.publicKeyCreate(options.privateKey,true);cov_lva21mxz().s[37]++;return this;}/**
   * Instantiate HD private key from options object.
   * @param {Object} options
   * @returns {HDPrivateKey}
   */static fromOptions(options){cov_lva21mxz().f[2]++;cov_lva21mxz().s[38]++;return new this().fromOptions(options);}/**
   * Get HD public key.
   * @returns {HDPublicKey}
   */toPublic(){cov_lva21mxz().f[3]++;let key=(cov_lva21mxz().s[39]++,this._hdPublicKey);cov_lva21mxz().s[40]++;if(!key){cov_lva21mxz().b[1][0]++;cov_lva21mxz().s[41]++;key=new HDPublicKey();cov_lva21mxz().s[42]++;key.depth=this.depth;cov_lva21mxz().s[43]++;key.parentFingerPrint=this.parentFingerPrint;cov_lva21mxz().s[44]++;key.childIndex=this.childIndex;cov_lva21mxz().s[45]++;key.chainCode=this.chainCode;cov_lva21mxz().s[46]++;key.publicKey=this.publicKey;cov_lva21mxz().s[47]++;this._hdPublicKey=key;}else{cov_lva21mxz().b[1][1]++;}cov_lva21mxz().s[48]++;return key;}/**
   * Get cached base58 xprivkey.
   * @returns {Base58String}
   */xprivkey(network){cov_lva21mxz().f[4]++;cov_lva21mxz().s[49]++;return this.toBase58(network);}/**
   * Get cached base58 xpubkey.
   * @returns {Base58String}
   */xpubkey(network){cov_lva21mxz().f[5]++;cov_lva21mxz().s[50]++;return this.toPublic().xpubkey(network);}/**
   * Destroy the key (zeroes chain code, privkey, and pubkey).
   * @param {Boolean} pub - Destroy hd public key as well.
   */destroy(pub){cov_lva21mxz().f[6]++;cov_lva21mxz().s[51]++;this.depth=0;cov_lva21mxz().s[52]++;this.childIndex=0;cov_lva21mxz().s[53]++;this.parentFingerPrint=0;cov_lva21mxz().s[54]++;cleanse(this.chainCode);cov_lva21mxz().s[55]++;cleanse(this.privateKey);cov_lva21mxz().s[56]++;cleanse(this.publicKey);cov_lva21mxz().s[57]++;this.fingerPrint=-1;cov_lva21mxz().s[58]++;if(this._hdPublicKey){cov_lva21mxz().b[2][0]++;cov_lva21mxz().s[59]++;if(pub){cov_lva21mxz().b[3][0]++;cov_lva21mxz().s[60]++;this._hdPublicKey.destroy();}else{cov_lva21mxz().b[3][1]++;}cov_lva21mxz().s[61]++;this._hdPublicKey=null;}else{cov_lva21mxz().b[2][1]++;}}/**
   * Derive a child key.
   * @param {Number} index - Derivation index.
   * @param {Boolean?} hardened - Whether the derivation should be hardened.
   * @returns {HDPrivateKey}
   */derive(index,hardened){cov_lva21mxz().f[7]++;cov_lva21mxz().s[62]++;assert(typeof index==='number');cov_lva21mxz().s[63]++;if(index>>>0!==index){cov_lva21mxz().b[4][0]++;cov_lva21mxz().s[64]++;throw new Error('Index out of range.');}else{cov_lva21mxz().b[4][1]++;}cov_lva21mxz().s[65]++;if(this.depth>=0xff){cov_lva21mxz().b[5][0]++;cov_lva21mxz().s[66]++;throw new Error('Depth too high.');}else{cov_lva21mxz().b[5][1]++;}cov_lva21mxz().s[67]++;if(hardened){cov_lva21mxz().b[6][0]++;cov_lva21mxz().s[68]++;index|=common.HARDENED;cov_lva21mxz().s[69]++;index>>>=0;}else{cov_lva21mxz().b[6][1]++;}const id=(cov_lva21mxz().s[70]++,this.getID(index));const cache=(cov_lva21mxz().s[71]++,common.cache.get(id));cov_lva21mxz().s[72]++;if(cache){cov_lva21mxz().b[7][0]++;cov_lva21mxz().s[73]++;return cache;}else{cov_lva21mxz().b[7][1]++;}const bw=(cov_lva21mxz().s[74]++,bio.pool(37));cov_lva21mxz().s[75]++;if(index&common.HARDENED){cov_lva21mxz().b[8][0]++;cov_lva21mxz().s[76]++;bw.writeU8(0);cov_lva21mxz().s[77]++;bw.writeBytes(this.privateKey);cov_lva21mxz().s[78]++;bw.writeU32BE(index);}else{cov_lva21mxz().b[8][1]++;cov_lva21mxz().s[79]++;bw.writeBytes(this.publicKey);cov_lva21mxz().s[80]++;bw.writeU32BE(index);}const data=(cov_lva21mxz().s[81]++,bw.render());const hash=(cov_lva21mxz().s[82]++,sha512.mac(data,this.chainCode));const left=(cov_lva21mxz().s[83]++,hash.slice(0,32));const right=(cov_lva21mxz().s[84]++,hash.slice(32,64));let key;cov_lva21mxz().s[85]++;try{cov_lva21mxz().s[86]++;key=secp256k1.privateKeyTweakAdd(this.privateKey,left);}catch(e){cov_lva21mxz().s[87]++;return this.derive(index+1);}cov_lva21mxz().s[88]++;if(this.fingerPrint===-1){cov_lva21mxz().b[9][0]++;const fp=(cov_lva21mxz().s[89]++,hash160.digest(this.publicKey));cov_lva21mxz().s[90]++;this.fingerPrint=fp.readUInt32BE(0,true);}else{cov_lva21mxz().b[9][1]++;}const child=(cov_lva21mxz().s[91]++,new this.constructor());cov_lva21mxz().s[92]++;child.depth=this.depth+1;cov_lva21mxz().s[93]++;child.parentFingerPrint=this.fingerPrint;cov_lva21mxz().s[94]++;child.childIndex=index;cov_lva21mxz().s[95]++;child.chainCode=right;cov_lva21mxz().s[96]++;child.privateKey=key;cov_lva21mxz().s[97]++;child.publicKey=secp256k1.publicKeyCreate(key,true);cov_lva21mxz().s[98]++;common.cache.set(id,child);cov_lva21mxz().s[99]++;return child;}/**
   * Unique HD key ID.
   * @private
   * @param {Number} index
   * @returns {String}
   */getID(index){cov_lva21mxz().f[8]++;cov_lva21mxz().s[100]++;return'v'+this.publicKey.toString('hex')+index;}/**
   * Derive a BIP44 account key.
   * @param {Number} purpose
   * @param {Number} type
   * @param {Number} account
   * @returns {HDPrivateKey}
   * @throws Error if key is not a master key.
   */deriveAccount(purpose,type,account){cov_lva21mxz().f[9]++;cov_lva21mxz().s[101]++;assert(purpose>>>0===purpose,'Purpose must be a number.');cov_lva21mxz().s[102]++;assert(type>>>0===type,'Coin type must be a number.');cov_lva21mxz().s[103]++;assert(account>>>0===account,'Account index must be a number.');cov_lva21mxz().s[104]++;assert(this.isMaster(),'Cannot derive account index.');cov_lva21mxz().s[105]++;return this.derive(purpose,true).derive(type,true).derive(account,true);}/**
   * Test whether the key is a master key.
   * @returns {Boolean}
   */isMaster(){cov_lva21mxz().f[10]++;cov_lva21mxz().s[106]++;return common.isMaster(this);}/**
   * Test whether the key is (most likely) a BIP44 account key.
   * @param {Number?} account
   * @returns {Boolean}
   */isAccount(account){cov_lva21mxz().f[11]++;cov_lva21mxz().s[107]++;return common.isAccount(this,account);}/**
   * Test whether an object is in the form of a base58 xprivkey.
   * @param {String} data
   * @param {Network?} network
   * @returns {Boolean}
   */static isBase58(data,network){cov_lva21mxz().f[12]++;cov_lva21mxz().s[108]++;if(typeof data!=='string'){cov_lva21mxz().b[10][0]++;cov_lva21mxz().s[109]++;return false;}else{cov_lva21mxz().b[10][1]++;}cov_lva21mxz().s[110]++;if(data.length<4){cov_lva21mxz().b[11][0]++;cov_lva21mxz().s[111]++;return false;}else{cov_lva21mxz().b[11][1]++;}const prefix=(cov_lva21mxz().s[112]++,data.substring(0,4));cov_lva21mxz().s[113]++;try{cov_lva21mxz().s[114]++;Network.fromPrivate58(prefix,network);cov_lva21mxz().s[115]++;return true;}catch(e){cov_lva21mxz().s[116]++;return false;}}/**
   * Test whether a buffer has a valid network prefix.
   * @param {Buffer} data
   * @param {Network?} network
   * @returns {Boolean}
   */static isRaw(data,network){cov_lva21mxz().f[13]++;cov_lva21mxz().s[117]++;if(!Buffer.isBuffer(data)){cov_lva21mxz().b[12][0]++;cov_lva21mxz().s[118]++;return false;}else{cov_lva21mxz().b[12][1]++;}cov_lva21mxz().s[119]++;if(data.length<4){cov_lva21mxz().b[13][0]++;cov_lva21mxz().s[120]++;return false;}else{cov_lva21mxz().b[13][1]++;}const version=(cov_lva21mxz().s[121]++,data.readUInt32BE(0,true));cov_lva21mxz().s[122]++;try{cov_lva21mxz().s[123]++;Network.fromPrivate(version,network);cov_lva21mxz().s[124]++;return true;}catch(e){cov_lva21mxz().s[125]++;return false;}}/**
   * Test whether a string is a valid path.
   * @param {String} path
   * @returns {Boolean}
   */static isValidPath(path){cov_lva21mxz().f[14]++;cov_lva21mxz().s[126]++;try{cov_lva21mxz().s[127]++;common.parsePath(path,true);cov_lva21mxz().s[128]++;return true;}catch(e){cov_lva21mxz().s[129]++;return false;}}/**
   * Derive a key from a derivation path.
   * @param {String} path
   * @returns {HDPrivateKey}
   * @throws Error if `path` is not a valid path.
   */derivePath(path){cov_lva21mxz().f[15]++;const indexes=(cov_lva21mxz().s[130]++,common.parsePath(path,true));let key=(cov_lva21mxz().s[131]++,this);cov_lva21mxz().s[132]++;for(const index of indexes){cov_lva21mxz().s[133]++;key=key.derive(index);}cov_lva21mxz().s[134]++;return key;}/**
   * Compare a key against an object.
   * @param {Object} obj
   * @returns {Boolean}
   */equals(obj){cov_lva21mxz().f[16]++;cov_lva21mxz().s[135]++;assert(HDPrivateKey.isHDPrivateKey(obj));cov_lva21mxz().s[136]++;return(cov_lva21mxz().b[14][0]++,this.depth===obj.depth)&&(cov_lva21mxz().b[14][1]++,this.parentFingerPrint===obj.parentFingerPrint)&&(cov_lva21mxz().b[14][2]++,this.childIndex===obj.childIndex)&&(cov_lva21mxz().b[14][3]++,this.chainCode.equals(obj.chainCode))&&(cov_lva21mxz().b[14][4]++,this.privateKey.equals(obj.privateKey));}/**
   * Compare a key against an object.
   * @param {Object} obj
   * @returns {Boolean}
   */compare(key){cov_lva21mxz().f[17]++;cov_lva21mxz().s[137]++;assert(HDPrivateKey.isHDPrivateKey(key));let cmp=(cov_lva21mxz().s[138]++,this.depth-key.depth);cov_lva21mxz().s[139]++;if(cmp!==0){cov_lva21mxz().b[15][0]++;cov_lva21mxz().s[140]++;return cmp;}else{cov_lva21mxz().b[15][1]++;}cov_lva21mxz().s[141]++;cmp=this.parentFingerPrint-key.parentFingerPrint;cov_lva21mxz().s[142]++;if(cmp!==0){cov_lva21mxz().b[16][0]++;cov_lva21mxz().s[143]++;return cmp;}else{cov_lva21mxz().b[16][1]++;}cov_lva21mxz().s[144]++;cmp=this.childIndex-key.childIndex;cov_lva21mxz().s[145]++;if(cmp!==0){cov_lva21mxz().b[17][0]++;cov_lva21mxz().s[146]++;return cmp;}else{cov_lva21mxz().b[17][1]++;}cov_lva21mxz().s[147]++;cmp=this.chainCode.compare(key.chainCode);cov_lva21mxz().s[148]++;if(cmp!==0){cov_lva21mxz().b[18][0]++;cov_lva21mxz().s[149]++;return cmp;}else{cov_lva21mxz().b[18][1]++;}cov_lva21mxz().s[150]++;cmp=this.privateKey.compare(key.privateKey);cov_lva21mxz().s[151]++;if(cmp!==0){cov_lva21mxz().b[19][0]++;cov_lva21mxz().s[152]++;return cmp;}else{cov_lva21mxz().b[19][1]++;}cov_lva21mxz().s[153]++;return 0;}/**
   * Inject properties from seed.
   * @private
   * @param {Buffer} seed
   */fromSeed(seed){cov_lva21mxz().f[18]++;cov_lva21mxz().s[154]++;assert(Buffer.isBuffer(seed));cov_lva21mxz().s[155]++;if((cov_lva21mxz().b[21][0]++,seed.length*8<common.MIN_ENTROPY)||(cov_lva21mxz().b[21][1]++,seed.length*8>common.MAX_ENTROPY)){cov_lva21mxz().b[20][0]++;cov_lva21mxz().s[156]++;throw new Error('Entropy not in range.');}else{cov_lva21mxz().b[20][1]++;}const hash=(cov_lva21mxz().s[157]++,sha512.mac(seed,SEED_SALT));const left=(cov_lva21mxz().s[158]++,hash.slice(0,32));const right=(cov_lva21mxz().s[159]++,hash.slice(32,64));// Only a 1 in 2^127 chance of happening.
cov_lva21mxz().s[160]++;if(!secp256k1.privateKeyVerify(left)){cov_lva21mxz().b[22][0]++;cov_lva21mxz().s[161]++;throw new Error('Master private key is invalid.');}else{cov_lva21mxz().b[22][1]++;}cov_lva21mxz().s[162]++;this.depth=0;cov_lva21mxz().s[163]++;this.parentFingerPrint=0;cov_lva21mxz().s[164]++;this.childIndex=0;cov_lva21mxz().s[165]++;this.chainCode=right;cov_lva21mxz().s[166]++;this.privateKey=left;cov_lva21mxz().s[167]++;this.publicKey=secp256k1.publicKeyCreate(left,true);cov_lva21mxz().s[168]++;return this;}/**
   * Instantiate an hd private key from a 512 bit seed.
   * @param {Buffer} seed
   * @returns {HDPrivateKey}
   */static fromSeed(seed){cov_lva21mxz().f[19]++;cov_lva21mxz().s[169]++;return new this().fromSeed(seed);}/**
   * Inject properties from a mnemonic.
   * @private
   * @param {Mnemonic} mnemonic
   * @param {String?} passphrase
   */fromMnemonic(mnemonic,passphrase){cov_lva21mxz().f[20]++;cov_lva21mxz().s[170]++;assert(mnemonic instanceof Mnemonic);cov_lva21mxz().s[171]++;return this.fromSeed(mnemonic.toSeed(passphrase));}/**
   * Instantiate an hd private key from a mnemonic.
   * @param {Mnemonic} mnemonic
   * @param {String?} passphrase
   * @returns {HDPrivateKey}
   */static fromMnemonic(mnemonic,passphrase){cov_lva21mxz().f[21]++;cov_lva21mxz().s[172]++;return new this().fromMnemonic(mnemonic,passphrase);}/**
   * Inject properties from a mnemonic.
   * @private
   * @param {String} mnemonic
   */fromPhrase(phrase){cov_lva21mxz().f[22]++;const mnemonic=(cov_lva21mxz().s[173]++,Mnemonic.fromPhrase(phrase));cov_lva21mxz().s[174]++;this.fromMnemonic(mnemonic);cov_lva21mxz().s[175]++;return this;}/**
   * Instantiate an hd private key from a phrase.
   * @param {String} phrase
   * @returns {HDPrivateKey}
   */static fromPhrase(phrase){cov_lva21mxz().f[23]++;cov_lva21mxz().s[176]++;return new this().fromPhrase(phrase);}/**
   * Inject properties from privateKey and entropy.
   * @private
   * @param {Buffer} key
   * @param {Buffer} entropy
   */fromKey(key,entropy){cov_lva21mxz().f[24]++;cov_lva21mxz().s[177]++;assert((cov_lva21mxz().b[23][0]++,Buffer.isBuffer(key))&&(cov_lva21mxz().b[23][1]++,key.length===32));cov_lva21mxz().s[178]++;assert((cov_lva21mxz().b[24][0]++,Buffer.isBuffer(entropy))&&(cov_lva21mxz().b[24][1]++,entropy.length===32));cov_lva21mxz().s[179]++;this.depth=0;cov_lva21mxz().s[180]++;this.parentFingerPrint=0;cov_lva21mxz().s[181]++;this.childIndex=0;cov_lva21mxz().s[182]++;this.chainCode=entropy;cov_lva21mxz().s[183]++;this.privateKey=key;cov_lva21mxz().s[184]++;this.publicKey=secp256k1.publicKeyCreate(key,true);cov_lva21mxz().s[185]++;return this;}/**
   * Create an hd private key from a key and entropy bytes.
   * @param {Buffer} key
   * @param {Buffer} entropy
   * @returns {HDPrivateKey}
   */static fromKey(key,entropy){cov_lva21mxz().f[25]++;cov_lva21mxz().s[186]++;return new this().fromKey(key,entropy);}/**
   * Generate an hd private key.
   * @returns {HDPrivateKey}
   */static generate(){cov_lva21mxz().f[26]++;const key=(cov_lva21mxz().s[187]++,secp256k1.privateKeyGenerate());const entropy=(cov_lva21mxz().s[188]++,random.randomBytes(32));cov_lva21mxz().s[189]++;return HDPrivateKey.fromKey(key,entropy);}/**
   * Inject properties from base58 key.
   * @private
   * @param {Base58String} xkey
   * @param {Network?} network
   */fromBase58(xkey,network){cov_lva21mxz().f[27]++;cov_lva21mxz().s[190]++;assert(typeof xkey==='string');cov_lva21mxz().s[191]++;return this.fromRaw(base58.decode(xkey),network);}/**
   * Inject properties from serialized data.
   * @private
   * @param {BufferReader} br
   * @param {(Network|NetworkType)?} network
   */fromReader(br,network){cov_lva21mxz().f[28]++;const version=(cov_lva21mxz().s[192]++,br.readU32BE());cov_lva21mxz().s[193]++;Network.fromPrivate(version,network);cov_lva21mxz().s[194]++;this.depth=br.readU8();cov_lva21mxz().s[195]++;this.parentFingerPrint=br.readU32BE();cov_lva21mxz().s[196]++;this.childIndex=br.readU32BE();cov_lva21mxz().s[197]++;this.chainCode=br.readBytes(32);cov_lva21mxz().s[198]++;assert(br.readU8()===0);cov_lva21mxz().s[199]++;this.privateKey=br.readBytes(32);cov_lva21mxz().s[200]++;this.publicKey=secp256k1.publicKeyCreate(this.privateKey,true);cov_lva21mxz().s[201]++;br.verifyChecksum(hash256.digest);cov_lva21mxz().s[202]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   */fromRaw(data,network){cov_lva21mxz().f[29]++;cov_lva21mxz().s[203]++;return this.fromReader(bio.read(data),network);}/**
   * Serialize key to a base58 string.
   * @param {(Network|NetworkType)?} network
   * @returns {Base58String}
   */toBase58(network){cov_lva21mxz().f[30]++;cov_lva21mxz().s[204]++;return base58.encode(this.toRaw(network));}/**
   * Calculate serialization size.
   * @returns {Number}
   */getSize(){cov_lva21mxz().f[31]++;cov_lva21mxz().s[205]++;return 82;}/**
   * Write the key to a buffer writer.
   * @param {BufferWriter} bw
   * @param {(Network|NetworkType)?} network
   */toWriter(bw,network){cov_lva21mxz().f[32]++;cov_lva21mxz().s[206]++;network=Network.get(network);cov_lva21mxz().s[207]++;bw.writeU32BE(network.keyPrefix.xprivkey);cov_lva21mxz().s[208]++;bw.writeU8(this.depth);cov_lva21mxz().s[209]++;bw.writeU32BE(this.parentFingerPrint);cov_lva21mxz().s[210]++;bw.writeU32BE(this.childIndex);cov_lva21mxz().s[211]++;bw.writeBytes(this.chainCode);cov_lva21mxz().s[212]++;bw.writeU8(0);cov_lva21mxz().s[213]++;bw.writeBytes(this.privateKey);cov_lva21mxz().s[214]++;bw.writeChecksum(hash256.digest);cov_lva21mxz().s[215]++;return bw;}/**
   * Serialize the key.
   * @param {(Network|NetworkType)?} network
   * @returns {Buffer}
   */toRaw(network){cov_lva21mxz().f[33]++;cov_lva21mxz().s[216]++;return this.toWriter(bio.write(82),network).render();}/**
   * Instantiate an HD private key from a base58 string.
   * @param {Base58String} xkey
   * @param {Network?} network
   * @returns {HDPrivateKey}
   */static fromBase58(xkey,network){cov_lva21mxz().f[34]++;cov_lva21mxz().s[217]++;return new this().fromBase58(xkey,network);}/**
   * Instantiate key from buffer reader.
   * @param {BufferReader} br
   * @param {(Network|NetworkType)?} network
   * @returns {HDPrivateKey}
   */static fromReader(br,network){cov_lva21mxz().f[35]++;cov_lva21mxz().s[218]++;return new this().fromReader(br,network);}/**
   * Instantiate key from serialized data.
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   * @returns {HDPrivateKey}
   */static fromRaw(data,network){cov_lva21mxz().f[36]++;cov_lva21mxz().s[219]++;return new this().fromRaw(data,network);}/**
   * Convert key to a more json-friendly object.
   * @returns {Object}
   */toJSON(network){cov_lva21mxz().f[37]++;cov_lva21mxz().s[220]++;return{xprivkey:this.xprivkey(network)};}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   * @param {Network?} network
   */fromJSON(json,network){cov_lva21mxz().f[38]++;cov_lva21mxz().s[221]++;assert(json.xprivkey,'Could not handle key JSON.');cov_lva21mxz().s[222]++;this.fromBase58(json.xprivkey,network);cov_lva21mxz().s[223]++;return this;}/**
   * Instantiate an HDPrivateKey from a jsonified key object.
   * @param {Object} json - The jsonified key object.
   * @param {Network?} network
   * @returns {HDPrivateKey}
   */static fromJSON(json,network){cov_lva21mxz().f[39]++;cov_lva21mxz().s[224]++;return new this().fromJSON(json,network);}/**
   * Test whether an object is an HDPrivateKey.
   * @param {Object} obj
   * @returns {Boolean}
   */static isHDPrivateKey(obj){cov_lva21mxz().f[40]++;cov_lva21mxz().s[225]++;return obj instanceof HDPrivateKey;}}/*
 * Expose
 */cov_lva21mxz().s[226]++;module.exports=HDPrivateKey;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
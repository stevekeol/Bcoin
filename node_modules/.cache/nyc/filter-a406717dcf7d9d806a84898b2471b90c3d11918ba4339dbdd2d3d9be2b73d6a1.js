/*!
 * filters.js - filter object for bcoin
 * Copyright (c) 2019, the bcoin developers (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_2mewfb8q20(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\filter.js";var hash="c513d8749f0fbbe867184a6b5b2951a7481aec89";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\filter.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:12},end:{line:10,column:28}},"2":{start:{line:11,column:13},end:{line:11,column:37}},"3":{start:{line:12,column:18},end:{line:12,column:50}},"4":{start:{line:13,column:24},end:{line:13,column:43}},"5":{start:{line:19,column:21},end:{line:19,column:36}},"6":{start:{line:37,column:4},end:{line:37,column:38}},"7":{start:{line:38,column:4},end:{line:38,column:31}},"8":{start:{line:40,column:4},end:{line:41,column:32}},"9":{start:{line:41,column:6},end:{line:41,column:32}},"10":{start:{line:51,column:4},end:{line:51,column:48}},"11":{start:{line:52,column:4},end:{line:52,column:44}},"12":{start:{line:53,column:4},end:{line:53,column:44}},"13":{start:{line:54,column:4},end:{line:54,column:33}},"14":{start:{line:55,column:4},end:{line:55,column:33}},"15":{start:{line:56,column:4},end:{line:56,column:16}},"16":{start:{line:66,column:4},end:{line:66,column:43}},"17":{start:{line:75,column:4},end:{line:75,column:30}},"18":{start:{line:76,column:4},end:{line:76,column:31}},"19":{start:{line:77,column:4},end:{line:77,column:14}},"20":{start:{line:86,column:15},end:{line:86,column:16}},"21":{start:{line:87,column:4},end:{line:87,column:15}},"22":{start:{line:88,column:4},end:{line:88,column:31}},"23":{start:{line:89,column:4},end:{line:89,column:16}},"24":{start:{line:98,column:17},end:{line:98,column:31}},"25":{start:{line:99,column:4},end:{line:99,column:51}},"26":{start:{line:109,column:4},end:{line:109,column:32}},"27":{start:{line:110,column:4},end:{line:110,column:57}},"28":{start:{line:111,column:4},end:{line:111,column:16}},"29":{start:{line:121,column:4},end:{line:121,column:43}},"30":{start:{line:131,column:4},end:{line:131,column:37}},"31":{start:{line:141,column:4},end:{line:141,column:36}},"32":{start:{line:151,column:4},end:{line:151,column:45}},"33":{start:{line:152,column:4},end:{line:152,column:72}},"34":{start:{line:153,column:4},end:{line:153,column:72}},"35":{start:{line:154,column:4},end:{line:154,column:43}},"36":{start:{line:155,column:4},end:{line:155,column:43}},"37":{start:{line:156,column:4},end:{line:156,column:16}},"38":{start:{line:166,column:4},end:{line:169,column:6}},"39":{start:{line:179,column:4},end:{line:179,column:37}},"40":{start:{line:188,column:4},end:{line:188,column:54}},"41":{start:{line:198,column:4},end:{line:198,column:33}},"42":{start:{line:206,column:0},end:{line:206,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:36,column:2},end:{line:36,column:3}},loc:{start:{line:36,column:23},end:{line:42,column:3}},line:36},"1":{name:"(anonymous_1)",decl:{start:{line:50,column:2},end:{line:50,column:3}},loc:{start:{line:50,column:23},end:{line:57,column:3}},line:50},"2":{name:"(anonymous_2)",decl:{start:{line:65,column:2},end:{line:65,column:3}},loc:{start:{line:65,column:30},end:{line:67,column:3}},line:65},"3":{name:"(anonymous_3)",decl:{start:{line:74,column:2},end:{line:74,column:3}},loc:{start:{line:74,column:15},end:{line:78,column:3}},line:74},"4":{name:"(anonymous_4)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:12},end:{line:90,column:3}},line:85},"5":{name:"(anonymous_5)",decl:{start:{line:97,column:2},end:{line:97,column:3}},loc:{start:{line:97,column:10},end:{line:100,column:3}},line:97},"6":{name:"(anonymous_6)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:17},end:{line:112,column:3}},line:108},"7":{name:"(anonymous_7)",decl:{start:{line:120,column:2},end:{line:120,column:3}},loc:{start:{line:120,column:16},end:{line:122,column:3}},line:120},"8":{name:"(anonymous_8)",decl:{start:{line:130,column:2},end:{line:130,column:3}},loc:{start:{line:130,column:24},end:{line:132,column:3}},line:130},"9":{name:"(anonymous_9)",decl:{start:{line:140,column:2},end:{line:140,column:3}},loc:{start:{line:140,column:23},end:{line:142,column:3}},line:140},"10":{name:"(anonymous_10)",decl:{start:{line:150,column:2},end:{line:150,column:3}},loc:{start:{line:150,column:17},end:{line:157,column:3}},line:150},"11":{name:"(anonymous_11)",decl:{start:{line:165,column:2},end:{line:165,column:3}},loc:{start:{line:165,column:11},end:{line:170,column:3}},line:165},"12":{name:"(anonymous_12)",decl:{start:{line:178,column:2},end:{line:178,column:3}},loc:{start:{line:178,column:24},end:{line:180,column:3}},line:178},"13":{name:"(anonymous_13)",decl:{start:{line:187,column:2},end:{line:187,column:3}},loc:{start:{line:187,column:20},end:{line:189,column:3}},line:187},"14":{name:"(anonymous_14)",decl:{start:{line:197,column:2},end:{line:197,column:3}},loc:{start:{line:197,column:23},end:{line:199,column:3}},line:197}},branchMap:{"0":{loc:{start:{line:40,column:4},end:{line:41,column:32}},type:"if",locations:[{start:{line:40,column:4},end:{line:41,column:32}},{start:{line:40,column:4},end:{line:41,column:32}}],line:40}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c513d8749f0fbbe867184a6b5b2951a7481aec89"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2mewfb8q20=function(){return actualCoverage;};}return actualCoverage;}cov_2mewfb8q20();const assert=(cov_2mewfb8q20().s[0]++,require('bsert'));const bio=(cov_2mewfb8q20().s[1]++,require('bufio'));const util=(cov_2mewfb8q20().s[2]++,require('../utils/util'));const consensus=(cov_2mewfb8q20().s[3]++,require('../protocol/consensus'));const{inspectSymbol}=(cov_2mewfb8q20().s[4]++,require('../utils'));/*
 * Constants
 */const EMPTY_BUFFER=(cov_2mewfb8q20().s[5]++,Buffer.alloc(0));/**
 * Filter
 * Represents a GCSFilter.
 * @alias module:primitives.Filter
 * @property {Hash} hash
 * @property {Number} index
 */class Filter{/**
   * Create an filter.
   * @constructor
   * @param {Object?} options
   */constructor(options){cov_2mewfb8q20().f[0]++;cov_2mewfb8q20().s[6]++;this.header=consensus.ZERO_HASH;cov_2mewfb8q20().s[7]++;this.filter=EMPTY_BUFFER;cov_2mewfb8q20().s[8]++;if(options){cov_2mewfb8q20().b[0][0]++;cov_2mewfb8q20().s[9]++;this.fromOptions(options);}else{cov_2mewfb8q20().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_2mewfb8q20().f[1]++;cov_2mewfb8q20().s[10]++;assert(options,'Filter data is required.');cov_2mewfb8q20().s[11]++;assert(Buffer.isBuffer(options.header));cov_2mewfb8q20().s[12]++;assert(Buffer.isBuffer(options.filter));cov_2mewfb8q20().s[13]++;this.header=options.header;cov_2mewfb8q20().s[14]++;this.filter=options.filter;cov_2mewfb8q20().s[15]++;return this;}/**
   * Instantate outpoint from options object.
   * @param {Object} options
   * @returns {Filter}
   */static fromOptions(options){cov_2mewfb8q20().f[2]++;cov_2mewfb8q20().s[16]++;return new this().fromOptions(options);}/**
   * Write filter to a buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_2mewfb8q20().f[3]++;cov_2mewfb8q20().s[17]++;bw.writeHash(this.header);cov_2mewfb8q20().s[18]++;bw.writeBytes(this.filter);cov_2mewfb8q20().s[19]++;return bw;}/**
   * Calculate size of filter.
   * @returns {Number}
   */getSize(){cov_2mewfb8q20().f[4]++;let size=(cov_2mewfb8q20().s[20]++,0);cov_2mewfb8q20().s[21]++;size+=32;cov_2mewfb8q20().s[22]++;size+=this.filter.length;cov_2mewfb8q20().s[23]++;return size;}/**
   * Serialize filter.
   * @returns {Buffer}
   */toRaw(){cov_2mewfb8q20().f[5]++;const size=(cov_2mewfb8q20().s[24]++,this.getSize());cov_2mewfb8q20().s[25]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_2mewfb8q20().f[6]++;cov_2mewfb8q20().s[26]++;this.header=br.readHash();cov_2mewfb8q20().s[27]++;this.filter=br.readBytes(br.getSize()-br.offset);cov_2mewfb8q20().s[28]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_2mewfb8q20().f[7]++;cov_2mewfb8q20().s[29]++;return this.fromReader(bio.read(data));}/**
   * Instantiate filter from a buffer reader.
   * @param {BufferReader} br
   * @returns {Filter}
   */static fromReader(br){cov_2mewfb8q20().f[8]++;cov_2mewfb8q20().s[30]++;return new this().fromReader(br);}/**
   * Instantiate filter from serialized data.
   * @param {Buffer} data
   * @returns {Filter}
   */static fromRaw(data){cov_2mewfb8q20().f[9]++;cov_2mewfb8q20().s[31]++;return new this().fromRaw(data);}/**
   * Inject properties from json object.
   * @private
   * @params {Object} json
   */fromJSON(json){cov_2mewfb8q20().f[10]++;cov_2mewfb8q20().s[32]++;assert(json,'Filter data is required.');cov_2mewfb8q20().s[33]++;assert(typeof json.filter==='string','Filter must be a string.');cov_2mewfb8q20().s[34]++;assert(typeof json.header==='string','Header must be a string.');cov_2mewfb8q20().s[35]++;this.filter=Buffer.from(json.filter);cov_2mewfb8q20().s[36]++;this.header=Buffer.from(json.header);cov_2mewfb8q20().s[37]++;return this;}/**
   * Convert the filter to an object suitable
   * for JSON serialization.
   * @returns {Object}
   */toJSON(){cov_2mewfb8q20().f[11]++;cov_2mewfb8q20().s[38]++;return{filter:this.filter.toString('hex'),header:util.revHex(this.header)};}/**
   * Instantiate filter from json object.
   * @param {Object} json
   * @returns {Filter}
   */static fromJSON(json){cov_2mewfb8q20().f[12]++;cov_2mewfb8q20().s[39]++;return new this().fromJSON(json);}/**
   * Convert the filter to a user-friendly string.
   * @returns {String}
   */[inspectSymbol](){cov_2mewfb8q20().f[13]++;cov_2mewfb8q20().s[40]++;return`<Filter: ${this.filter.toString('hex')}>`;}/**
   * Test an object to see if it is an filter.
   * @param {Object} obj
   * @returns {Boolean}
   */static isFilter(obj){cov_2mewfb8q20().f[14]++;cov_2mewfb8q20().s[41]++;return obj instanceof Filter;}}/*
 * Expose
 */cov_2mewfb8q20().s[42]++;module.exports=Filter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
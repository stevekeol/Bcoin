/*!
 * errors.js - error objects for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';/**
 * @module protocol/errors
 */function cov_13ykbcannf(){var path="E:\\Projects\\Test\\bcoin\\lib\\protocol\\errors.js";var hash="c2ddb62665e9d4c0172008dc9462275c6e1119f3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\protocol\\errors.js",statementMap:{"0":{start:{line:14,column:15},end:{line:14,column:31}},"1":{start:{line:44,column:4},end:{line:44,column:12}},"2":{start:{line:46,column:4},end:{line:46,column:37}},"3":{start:{line:47,column:4},end:{line:47,column:39}},"4":{start:{line:48,column:4},end:{line:48,column:23}},"5":{start:{line:50,column:4},end:{line:50,column:30}},"6":{start:{line:51,column:4},end:{line:51,column:22}},"7":{start:{line:52,column:4},end:{line:52,column:21}},"8":{start:{line:53,column:4},end:{line:53,column:25}},"9":{start:{line:54,column:4},end:{line:54,column:23}},"10":{start:{line:55,column:4},end:{line:55,column:27}},"11":{start:{line:56,column:4},end:{line:56,column:40}},"12":{start:{line:58,column:4},end:{line:59,column:61}},"13":{start:{line:61,column:4},end:{line:62,column:49}},"14":{start:{line:62,column:6},end:{line:62,column:49}},"15":{start:{line:70,column:0},end:{line:70,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:43,column:2},end:{line:43,column:3}},loc:{start:{line:43,column:51},end:{line:63,column:3}},line:43}},branchMap:{"0":{loc:{start:{line:56,column:21},end:{line:56,column:39}},type:"binary-expr",locations:[{start:{line:56,column:21},end:{line:56,column:30}},{start:{line:56,column:34},end:{line:56,column:39}}],line:56},"1":{loc:{start:{line:61,column:4},end:{line:62,column:49}},type:"if",locations:[{start:{line:61,column:4},end:{line:62,column:49}},{start:{line:61,column:4},end:{line:62,column:49}}],line:61}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c2ddb62665e9d4c0172008dc9462275c6e1119f3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_13ykbcannf=function(){return actualCoverage;};}return actualCoverage;}cov_13ykbcannf();const assert=(cov_13ykbcannf().s[0]++,require('bsert'));/**
 * Verify Error
 * An error thrown during verification. Can be either
 * a mempool transaction validation error or a blockchain
 * block verification error. Ultimately used to send
 * `reject` packets to peers.
 * @extends Error
 * @param {Block|TX} msg
 * @param {String} code - Reject packet code.
 * @param {String} reason - Reject packet reason.
 * @param {Number} score - Ban score increase
 * (can be -1 for no reject packet).
 * @param {Boolean} malleated
 */class VerifyError extends Error{/**
   * Create a verify error.
   * @constructor
   * @param {Block|TX} msg
   * @param {String} code - Reject packet code.
   * @param {String} reason - Reject packet reason.
   * @param {Number} score - Ban score increase
   * (can be -1 for no reject packet).
   * @param {Boolean} malleated
   */constructor(msg,code,reason,score,malleated){cov_13ykbcannf().f[0]++;cov_13ykbcannf().s[1]++;super();cov_13ykbcannf().s[2]++;assert(typeof code==='string');cov_13ykbcannf().s[3]++;assert(typeof reason==='string');cov_13ykbcannf().s[4]++;assert(score>=0);cov_13ykbcannf().s[5]++;this.type='VerifyError';cov_13ykbcannf().s[6]++;this.message='';cov_13ykbcannf().s[7]++;this.code=code;cov_13ykbcannf().s[8]++;this.reason=reason;cov_13ykbcannf().s[9]++;this.score=score;cov_13ykbcannf().s[10]++;this.hash=msg.hash();cov_13ykbcannf().s[11]++;this.malleated=(cov_13ykbcannf().b[0][0]++,malleated)||(cov_13ykbcannf().b[0][1]++,false);cov_13ykbcannf().s[12]++;this.message=`Verification failure: ${reason}`+` (code=${code} score=${score} hash=${msg.rhash()})`;cov_13ykbcannf().s[13]++;if(Error.captureStackTrace){cov_13ykbcannf().b[1][0]++;cov_13ykbcannf().s[14]++;Error.captureStackTrace(this,VerifyError);}else{cov_13ykbcannf().b[1][1]++;}}}/*
 * Expose
 */cov_13ykbcannf().s[15]++;exports.VerifyError=VerifyError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9ycy5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiVmVyaWZ5RXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibXNnIiwiY29kZSIsInJlYXNvbiIsInNjb3JlIiwibWFsbGVhdGVkIiwidHlwZSIsIm1lc3NhZ2UiLCJoYXNoIiwicmhhc2giLCJjYXB0dXJlU3RhY2tUcmFjZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUVBLGFBRUE7QUFDQTtBQUNBLEcsc21FQUlZOzJGQUZaLEtBQU1BLENBQUFBLE1BQU0sMEJBQUdDLE9BQU8sQ0FBQyxPQUFELENBQVYsQ0FBWixDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FFQSxLQUFNQyxDQUFBQSxXQUFOLFFBQTBCQyxDQUFBQSxLQUFNLENBQzlCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBRUVDLFdBQVcsQ0FBQ0MsR0FBRCxDQUFNQyxJQUFOLENBQVlDLE1BQVosQ0FBb0JDLEtBQXBCLENBQTJCQyxTQUEzQixDQUFzQyxpREFDL0MsUUFEK0Msd0JBRy9DVCxNQUFNLENBQUMsTUFBT00sQ0FBQUEsSUFBUCxHQUFnQixRQUFqQixDQUFOLENBSCtDLHdCQUkvQ04sTUFBTSxDQUFDLE1BQU9PLENBQUFBLE1BQVAsR0FBa0IsUUFBbkIsQ0FBTixDQUorQyx3QkFLL0NQLE1BQU0sQ0FBQ1EsS0FBSyxFQUFJLENBQVYsQ0FBTixDQUwrQyx3QkFPL0MsS0FBS0UsSUFBTCxDQUFZLGFBQVosQ0FQK0Msd0JBUS9DLEtBQUtDLE9BQUwsQ0FBZSxFQUFmLENBUitDLHdCQVMvQyxLQUFLTCxJQUFMLENBQVlBLElBQVosQ0FUK0Msd0JBVS9DLEtBQUtDLE1BQUwsQ0FBY0EsTUFBZCxDQVYrQyx3QkFXL0MsS0FBS0MsS0FBTCxDQUFhQSxLQUFiLENBWCtDLHlCQVkvQyxLQUFLSSxJQUFMLENBQVlQLEdBQUcsQ0FBQ08sSUFBSixFQUFaLENBWitDLHlCQWEvQyxLQUFLSCxTQUFMLENBQWlCLDRCQUFBQSxTQUFTLCtCQUFJLEtBQUosQ0FBMUIsQ0FiK0MseUJBZS9DLEtBQUtFLE9BQUwsQ0FBZ0IseUJBQXdCSixNQUFPLEVBQWhDLENBQ1YsVUFBU0QsSUFBSyxVQUFTRSxLQUFNLFNBQVFILEdBQUcsQ0FBQ1EsS0FBSixFQUFZLEdBRHRELENBZitDLHlCQWtCL0MsR0FBSVYsS0FBSyxDQUFDVyxpQkFBVixDQUNFLHFEQUFBWCxLQUFLLENBQUNXLGlCQUFOLENBQXdCLElBQXhCLENBQThCWixXQUE5QixFQUEyQyxDQUQ3QyxpQ0FFRCxDQWhDNkIsQ0FtQ2hDO0FBQ0E7QUFDQSxHLHlCQUVBYSxPQUFPLENBQUNiLFdBQVIsQ0FBc0JBLFdBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGVycm9ycy5qcyAtIGVycm9yIG9iamVjdHMgZm9yIGJjb2luXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBGZWRvciBJbmR1dG55IChNSVQgTGljZW5zZSlcclxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIENocmlzdG9waGVyIEplZmZyZXkgKE1JVCBMaWNlbnNlKS5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2Jjb2luLW9yZy9iY29pblxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAbW9kdWxlIHByb3RvY29sL2Vycm9yc1xyXG4gKi9cclxuXHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2JzZXJ0Jyk7XHJcblxyXG4vKipcclxuICogVmVyaWZ5IEVycm9yXHJcbiAqIEFuIGVycm9yIHRocm93biBkdXJpbmcgdmVyaWZpY2F0aW9uLiBDYW4gYmUgZWl0aGVyXHJcbiAqIGEgbWVtcG9vbCB0cmFuc2FjdGlvbiB2YWxpZGF0aW9uIGVycm9yIG9yIGEgYmxvY2tjaGFpblxyXG4gKiBibG9jayB2ZXJpZmljYXRpb24gZXJyb3IuIFVsdGltYXRlbHkgdXNlZCB0byBzZW5kXHJcbiAqIGByZWplY3RgIHBhY2tldHMgdG8gcGVlcnMuXHJcbiAqIEBleHRlbmRzIEVycm9yXHJcbiAqIEBwYXJhbSB7QmxvY2t8VFh9IG1zZ1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29kZSAtIFJlamVjdCBwYWNrZXQgY29kZS5cclxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvbiAtIFJlamVjdCBwYWNrZXQgcmVhc29uLlxyXG4gKiBAcGFyYW0ge051bWJlcn0gc2NvcmUgLSBCYW4gc2NvcmUgaW5jcmVhc2VcclxuICogKGNhbiBiZSAtMSBmb3Igbm8gcmVqZWN0IHBhY2tldCkuXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbWFsbGVhdGVkXHJcbiAqL1xyXG5cclxuY2xhc3MgVmVyaWZ5RXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgdmVyaWZ5IGVycm9yLlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBwYXJhbSB7QmxvY2t8VFh9IG1zZ1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2RlIC0gUmVqZWN0IHBhY2tldCBjb2RlLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb24gLSBSZWplY3QgcGFja2V0IHJlYXNvbi5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gc2NvcmUgLSBCYW4gc2NvcmUgaW5jcmVhc2VcclxuICAgKiAoY2FuIGJlIC0xIGZvciBubyByZWplY3QgcGFja2V0KS5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1hbGxlYXRlZFxyXG4gICAqL1xyXG5cclxuICBjb25zdHJ1Y3Rvcihtc2csIGNvZGUsIHJlYXNvbiwgc2NvcmUsIG1hbGxlYXRlZCkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBhc3NlcnQodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnKTtcclxuICAgIGFzc2VydCh0eXBlb2YgcmVhc29uID09PSAnc3RyaW5nJyk7XHJcbiAgICBhc3NlcnQoc2NvcmUgPj0gMCk7XHJcblxyXG4gICAgdGhpcy50eXBlID0gJ1ZlcmlmeUVycm9yJztcclxuICAgIHRoaXMubWVzc2FnZSA9ICcnO1xyXG4gICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xyXG4gICAgdGhpcy5zY29yZSA9IHNjb3JlO1xyXG4gICAgdGhpcy5oYXNoID0gbXNnLmhhc2goKTtcclxuICAgIHRoaXMubWFsbGVhdGVkID0gbWFsbGVhdGVkIHx8IGZhbHNlO1xyXG5cclxuICAgIHRoaXMubWVzc2FnZSA9IGBWZXJpZmljYXRpb24gZmFpbHVyZTogJHtyZWFzb259YFxyXG4gICAgICArIGAgKGNvZGU9JHtjb2RlfSBzY29yZT0ke3Njb3JlfSBoYXNoPSR7bXNnLnJoYXNoKCl9KWA7XHJcblxyXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxyXG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBWZXJpZnlFcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4gKiBFeHBvc2VcclxuICovXHJcblxyXG5leHBvcnRzLlZlcmlmeUVycm9yID0gVmVyaWZ5RXJyb3I7XHJcbiJdfQ==
/*!
 * writer.js - bit writer for bcoin
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_2evkojrtcb(){var path="E:\\Projects\\Test\\bcoin\\lib\\golomb\\writer.js";var hash="165265c0fd94ddcbaaeadd2d79956a04b0edb599";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\golomb\\writer.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:24,column:4},end:{line:24,column:21}},"2":{start:{line:25,column:4},end:{line:25,column:20}},"3":{start:{line:34,column:4},end:{line:37,column:5}},"4":{start:{line:35,column:6},end:{line:35,column:26}},"5":{start:{line:36,column:6},end:{line:36,column:22}},"6":{start:{line:39,column:4},end:{line:42,column:5}},"7":{start:{line:40,column:20},end:{line:40,column:42}},"8":{start:{line:41,column:6},end:{line:41,column:51}},"9":{start:{line:44,column:4},end:{line:44,column:18}},"10":{start:{line:53,column:4},end:{line:56,column:5}},"11":{start:{line:54,column:6},end:{line:54,column:26}},"12":{start:{line:55,column:6},end:{line:55,column:22}},"13":{start:{line:58,column:18},end:{line:58,column:40}},"14":{start:{line:60,column:4},end:{line:60,column:59}},"15":{start:{line:61,column:4},end:{line:61,column:24}},"16":{start:{line:62,column:4},end:{line:62,column:56}},"17":{start:{line:72,column:4},end:{line:72,column:23}},"18":{start:{line:73,column:4},end:{line:73,column:24}},"19":{start:{line:75,column:4},end:{line:75,column:23}},"20":{start:{line:77,column:4},end:{line:82,column:5}},"21":{start:{line:78,column:17},end:{line:78,column:27}},"22":{start:{line:79,column:6},end:{line:79,column:25}},"23":{start:{line:80,column:6},end:{line:80,column:16}},"24":{start:{line:81,column:6},end:{line:81,column:17}},"25":{start:{line:84,column:4},end:{line:89,column:5}},"26":{start:{line:85,column:18},end:{line:85,column:28}},"27":{start:{line:86,column:6},end:{line:86,column:25}},"28":{start:{line:87,column:6},end:{line:87,column:16}},"29":{start:{line:88,column:6},end:{line:88,column:17}},"30":{start:{line:99,column:4},end:{line:99,column:23}},"31":{start:{line:100,column:4},end:{line:100,column:24}},"32":{start:{line:102,column:4},end:{line:107,column:5}},"33":{start:{line:103,column:6},end:{line:103,column:41}},"34":{start:{line:104,column:6},end:{line:104,column:33}},"35":{start:{line:106,column:6},end:{line:106,column:36}},"36":{start:{line:116,column:17},end:{line:116,column:55}},"37":{start:{line:118,column:4},end:{line:119,column:31}},"38":{start:{line:118,column:17},end:{line:118,column:18}},"39":{start:{line:119,column:6},end:{line:119,column:31}},"40":{start:{line:121,column:4},end:{line:121,column:16}},"41":{start:{line:129,column:0},end:{line:129,column:27}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:2},end:{line:23,column:3}},loc:{start:{line:23,column:16},end:{line:26,column:3}},line:23},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:2},end:{line:33,column:3}},loc:{start:{line:33,column:16},end:{line:45,column:3}},line:33},"2":{name:"(anonymous_2)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:16},end:{line:63,column:3}},line:52},"3":{name:"(anonymous_3)",decl:{start:{line:71,column:2},end:{line:71,column:3}},loc:{start:{line:71,column:24},end:{line:90,column:3}},line:71},"4":{name:"(anonymous_4)",decl:{start:{line:98,column:2},end:{line:98,column:3}},loc:{start:{line:98,column:26},end:{line:108,column:3}},line:98},"5":{name:"(anonymous_5)",decl:{start:{line:115,column:2},end:{line:115,column:3}},loc:{start:{line:115,column:11},end:{line:122,column:3}},line:115}},branchMap:{"0":{loc:{start:{line:34,column:4},end:{line:37,column:5}},type:"if",locations:[{start:{line:34,column:4},end:{line:37,column:5}},{start:{line:34,column:4},end:{line:37,column:5}}],line:34},"1":{loc:{start:{line:39,column:4},end:{line:42,column:5}},type:"if",locations:[{start:{line:39,column:4},end:{line:42,column:5}},{start:{line:39,column:4},end:{line:42,column:5}}],line:39},"2":{loc:{start:{line:53,column:4},end:{line:56,column:5}},type:"if",locations:[{start:{line:53,column:4},end:{line:56,column:5}},{start:{line:53,column:4},end:{line:56,column:5}}],line:53},"3":{loc:{start:{line:102,column:4},end:{line:107,column:5}},type:"if",locations:[{start:{line:102,column:4},end:{line:107,column:5}},{start:{line:102,column:4},end:{line:107,column:5}}],line:102}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"165265c0fd94ddcbaaeadd2d79956a04b0edb599"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2evkojrtcb=function(){return actualCoverage;};}return actualCoverage;}cov_2evkojrtcb();const assert=(cov_2evkojrtcb().s[0]++,require('bsert'));/**
 * Bit Writer - as specified by BIP 158 for Golomb Rice Coding
 * @see https://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki#golomb-rice-coding
 */class BitWriter{/**
   * Create a bit writer.
   * @constructor
   * @ignore
   */constructor(){cov_2evkojrtcb().f[0]++;cov_2evkojrtcb().s[1]++;this.stream=[];cov_2evkojrtcb().s[2]++;this.remain=0;}/**
   * Write bit.
   * @param {Buffer} bit
   */writeBit(bit){cov_2evkojrtcb().f[1]++;cov_2evkojrtcb().s[3]++;if(this.remain===0){cov_2evkojrtcb().b[0][0]++;cov_2evkojrtcb().s[4]++;this.stream.push(0);cov_2evkojrtcb().s[5]++;this.remain=8;}else{cov_2evkojrtcb().b[0][1]++;}cov_2evkojrtcb().s[6]++;if(bit){cov_2evkojrtcb().b[1][0]++;const index=(cov_2evkojrtcb().s[7]++,this.stream.length-1);cov_2evkojrtcb().s[8]++;this.stream[index]|=1<<this.remain-1;}else{cov_2evkojrtcb().b[1][1]++;}cov_2evkojrtcb().s[9]++;this.remain--;}/**
   * Write byte.
   * @param {Buffer} ch
   */writeByte(ch){cov_2evkojrtcb().f[2]++;cov_2evkojrtcb().s[10]++;if(this.remain===0){cov_2evkojrtcb().b[2][0]++;cov_2evkojrtcb().s[11]++;this.stream.push(0);cov_2evkojrtcb().s[12]++;this.remain=8;}else{cov_2evkojrtcb().b[2][1]++;}const index=(cov_2evkojrtcb().s[13]++,this.stream.length-1);cov_2evkojrtcb().s[14]++;this.stream[index]|=ch>>8-this.remain&0xff;cov_2evkojrtcb().s[15]++;this.stream.push(0);cov_2evkojrtcb().s[16]++;this.stream[index+1]=ch<<this.remain&0xff;}/**
   * Write bits.
   * @param {Number} num
   * @param {Number} count
   */writeBits(num,count){cov_2evkojrtcb().f[3]++;cov_2evkojrtcb().s[17]++;assert(count>=0);cov_2evkojrtcb().s[18]++;assert(count<=32);cov_2evkojrtcb().s[19]++;num<<=32-count;cov_2evkojrtcb().s[20]++;while(count>=8){const ch=(cov_2evkojrtcb().s[21]++,num>>>24);cov_2evkojrtcb().s[22]++;this.writeByte(ch);cov_2evkojrtcb().s[23]++;num<<=8;cov_2evkojrtcb().s[24]++;count-=8;}cov_2evkojrtcb().s[25]++;while(count>0){const bit=(cov_2evkojrtcb().s[26]++,num>>>31);cov_2evkojrtcb().s[27]++;this.writeBit(bit);cov_2evkojrtcb().s[28]++;num<<=1;cov_2evkojrtcb().s[29]++;count-=1;}}/**
   * Write bits. 64-bit.
   * @param {Number} num
   * @param {Number} count
   */writeBits64(num,count){cov_2evkojrtcb().f[4]++;cov_2evkojrtcb().s[30]++;assert(count>=0);cov_2evkojrtcb().s[31]++;assert(count<=64);cov_2evkojrtcb().s[32]++;if(count>32){cov_2evkojrtcb().b[3][0]++;cov_2evkojrtcb().s[33]++;this.writeBits(num.hi,count-32);cov_2evkojrtcb().s[34]++;this.writeBits(num.lo,32);}else{cov_2evkojrtcb().b[3][1]++;cov_2evkojrtcb().s[35]++;this.writeBits(num.lo,count);}}/**
   * Allocate and render the final buffer.
   * @returns {Buffer} Rendered buffer.
   */render(){cov_2evkojrtcb().f[5]++;const data=(cov_2evkojrtcb().s[36]++,Buffer.allocUnsafe(this.stream.length));cov_2evkojrtcb().s[37]++;for(let i=(cov_2evkojrtcb().s[38]++,0);i<this.stream.length;i++){cov_2evkojrtcb().s[39]++;data[i]=this.stream[i];}cov_2evkojrtcb().s[40]++;return data;}}/*
 * Expose
 */cov_2evkojrtcb().s[41]++;module.exports=BitWriter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlci5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiQml0V3JpdGVyIiwiY29uc3RydWN0b3IiLCJzdHJlYW0iLCJyZW1haW4iLCJ3cml0ZUJpdCIsImJpdCIsInB1c2giLCJpbmRleCIsImxlbmd0aCIsIndyaXRlQnl0ZSIsImNoIiwid3JpdGVCaXRzIiwibnVtIiwiY291bnQiLCJ3cml0ZUJpdHM2NCIsImhpIiwibG8iLCJyZW5kZXIiLCJkYXRhIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJpIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUVBLGEsMDFKQVNZOzJGQVBaLEtBQU1BLENBQUFBLE1BQU0sMEJBQUdDLE9BQU8sQ0FBQyxPQUFELENBQVYsQ0FBWixDQUVBO0FBQ0E7QUFDQTtBQUNBLEdBRUEsS0FBTUMsQ0FBQUEsU0FBVSxDQUNkO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsS0FFRUMsV0FBVyxFQUFHLGlEQUNaLEtBQUtDLE1BQUwsQ0FBYyxFQUFkLENBRFksd0JBRVosS0FBS0MsTUFBTCxDQUFjLENBQWQsQ0FDRCxDQUVEO0FBQ0Y7QUFDQTtBQUNBLEtBRUVDLFFBQVEsQ0FBQ0MsR0FBRCxDQUFNLGlEQUNaLEdBQUksS0FBS0YsTUFBTCxHQUFnQixDQUFwQixDQUF1QixvREFDckIsS0FBS0QsTUFBTCxDQUFZSSxJQUFaLENBQWlCLENBQWpCLEVBRHFCLHdCQUVyQixLQUFLSCxNQUFMLENBQWMsQ0FBZCxDQUNELENBSEQsaUNBRFksd0JBTVosR0FBSUUsR0FBSixDQUFTLDRCQUNQLEtBQU1FLENBQUFBLEtBQUssMEJBQUcsS0FBS0wsTUFBTCxDQUFZTSxNQUFaLENBQXFCLENBQXhCLENBQVgsQ0FETyx3QkFFUCxLQUFLTixNQUFMLENBQVlLLEtBQVosR0FBc0IsR0FBTSxLQUFLSixNQUFMLENBQWMsQ0FBMUMsQ0FDRCxDQUhELGlDQU5ZLHdCQVdaLEtBQUtBLE1BQUws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U0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogd3JpdGVyLmpzIC0gYml0IHdyaXRlciBmb3IgYmNvaW5cclxuICogQ29weXJpZ2h0IChjKSAyMDE3LCBDaHJpc3RvcGhlciBKZWZmcmV5IChNSVQgTGljZW5zZSkuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9iY29pbi1vcmcvYmNvaW5cclxuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdic2VydCcpO1xyXG5cclxuLyoqXHJcbiAqIEJpdCBXcml0ZXIgLSBhcyBzcGVjaWZpZWQgYnkgQklQIDE1OCBmb3IgR29sb21iIFJpY2UgQ29kaW5nXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDE1OC5tZWRpYXdpa2kjZ29sb21iLXJpY2UtY29kaW5nXHJcbiAqL1xyXG5cclxuY2xhc3MgQml0V3JpdGVyIHtcclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBiaXQgd3JpdGVyLlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBpZ25vcmVcclxuICAgKi9cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnN0cmVhbSA9IFtdO1xyXG4gICAgdGhpcy5yZW1haW4gPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV3JpdGUgYml0LlxyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBiaXRcclxuICAgKi9cclxuXHJcbiAgd3JpdGVCaXQoYml0KSB7XHJcbiAgICBpZiAodGhpcy5yZW1haW4gPT09IDApIHtcclxuICAgICAgdGhpcy5zdHJlYW0ucHVzaCgwKTtcclxuICAgICAgdGhpcy5yZW1haW4gPSA4O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChiaXQpIHtcclxuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnN0cmVhbS5sZW5ndGggLSAxO1xyXG4gICAgICB0aGlzLnN0cmVhbVtpbmRleF0gfD0gMSA8PCAodGhpcy5yZW1haW4gLSAxKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJlbWFpbi0tO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV3JpdGUgYnl0ZS5cclxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gY2hcclxuICAgKi9cclxuXHJcbiAgd3JpdGVCeXRlKGNoKSB7XHJcbiAgICBpZiAodGhpcy5yZW1haW4gPT09IDApIHtcclxuICAgICAgdGhpcy5zdHJlYW0ucHVzaCgwKTtcclxuICAgICAgdGhpcy5yZW1haW4gPSA4O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zdHJlYW0ubGVuZ3RoIC0gMTtcclxuXHJcbiAgICB0aGlzLnN0cmVhbVtpbmRleF0gfD0gKGNoID4+ICg4IC0gdGhpcy5yZW1haW4pKSAmIDB4ZmY7XHJcbiAgICB0aGlzLnN0cmVhbS5wdXNoKDApO1xyXG4gICAgdGhpcy5zdHJlYW1baW5kZXggKyAxXSA9IChjaCA8PCB0aGlzLnJlbWFpbikgJiAweGZmO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV3JpdGUgYml0cy5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gbnVtXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50XHJcbiAgICovXHJcblxyXG4gIHdyaXRlQml0cyhudW0sIGNvdW50KSB7XHJcbiAgICBhc3NlcnQoY291bnQgPj0gMCk7XHJcbiAgICBhc3NlcnQoY291bnQgPD0gMzIpO1xyXG5cclxuICAgIG51bSA8PD0gMzIgLSBjb3VudDtcclxuXHJcbiAgICB3aGlsZSAoY291bnQgPj0gOCkge1xyXG4gICAgICBjb25zdCBjaCA9IG51bSA+Pj4gMjQ7XHJcbiAgICAgIHRoaXMud3JpdGVCeXRlKGNoKTtcclxuICAgICAgbnVtIDw8PSA4O1xyXG4gICAgICBjb3VudCAtPSA4O1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChjb3VudCA+IDApIHtcclxuICAgICAgY29uc3QgYml0ID0gbnVtID4+PiAzMTtcclxuICAgICAgdGhpcy53cml0ZUJpdChiaXQpO1xyXG4gICAgICBudW0gPDw9IDE7XHJcbiAgICAgIGNvdW50IC09IDE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXcml0ZSBiaXRzLiA2NC1iaXQuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG51bVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudFxyXG4gICAqL1xyXG5cclxuICB3cml0ZUJpdHM2NChudW0sIGNvdW50KSB7XHJcbiAgICBhc3NlcnQoY291bnQgPj0gMCk7XHJcbiAgICBhc3NlcnQoY291bnQgPD0gNjQpO1xyXG5cclxuICAgIGlmIChjb3VudCA+IDMyKSB7XHJcbiAgICAgIHRoaXMud3JpdGVCaXRzKG51bS5oaSwgY291bnQgLSAzMik7XHJcbiAgICAgIHRoaXMud3JpdGVCaXRzKG51bS5sbywgMzIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy53cml0ZUJpdHMobnVtLmxvLCBjb3VudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbGxvY2F0ZSBhbmQgcmVuZGVyIHRoZSBmaW5hbCBidWZmZXIuXHJcbiAgICogQHJldHVybnMge0J1ZmZlcn0gUmVuZGVyZWQgYnVmZmVyLlxyXG4gICAqL1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCBkYXRhID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRoaXMuc3RyZWFtLmxlbmd0aCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0cmVhbS5sZW5ndGg7IGkrKylcclxuICAgICAgZGF0YVtpXSA9IHRoaXMuc3RyZWFtW2ldO1xyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH1cclxufVxyXG5cclxuLypcclxuICogRXhwb3NlXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCaXRXcml0ZXI7XHJcbiJdfQ==
/*!
 * golomb.js - gcs filters for bcoin
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1ulxzdpyn2(){var path="E:\\Projects\\Test\\bcoin\\lib\\golomb\\golomb.js";var hash="bccce28260efde9476c52a392141cf85f0df4f17";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\golomb\\golomb.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:14},end:{line:10,column:28}},"2":{start:{line:11,column:16},end:{line:11,column:46}},"3":{start:{line:12,column:17},end:{line:12,column:47}},"4":{start:{line:13,column:12},end:{line:13,column:28}},"5":{start:{line:14,column:20},end:{line:14,column:41}},"6":{start:{line:15,column:18},end:{line:15,column:37}},"7":{start:{line:16,column:18},end:{line:16,column:37}},"8":{start:{line:22,column:14},end:{line:22,column:29}},"9":{start:{line:23,column:12},end:{line:23,column:23}},"10":{start:{line:24,column:10},end:{line:24,column:25}},"11":{start:{line:43,column:4},end:{line:43,column:15}},"12":{start:{line:44,column:4},end:{line:44,column:15}},"13":{start:{line:45,column:4},end:{line:45,column:15}},"14":{start:{line:46,column:4},end:{line:46,column:22}},"15":{start:{line:56,column:14},end:{line:56,column:45}},"16":{start:{line:57,column:4},end:{line:57,column:49}},"17":{start:{line:68,column:4},end:{line:68,column:43}},"18":{start:{line:79,column:15},end:{line:79,column:39}},"19":{start:{line:80,column:17},end:{line:80,column:44}},"20":{start:{line:82,column:15},end:{line:82,column:25}},"21":{start:{line:84,column:4},end:{line:96,column:5}},"22":{start:{line:85,column:20},end:{line:85,column:36}},"23":{start:{line:87,column:6},end:{line:88,column:21}},"24":{start:{line:88,column:8},end:{line:88,column:21}},"25":{start:{line:90,column:6},end:{line:90,column:23}},"26":{start:{line:92,column:6},end:{line:93,column:20}},"27":{start:{line:93,column:8},end:{line:93,column:20}},"28":{start:{line:95,column:6},end:{line:95,column:19}},"29":{start:{line:98,column:4},end:{line:98,column:17}},"30":{start:{line:109,column:4},end:{line:109,column:33}},"31":{start:{line:110,column:4},end:{line:110,column:27}},"32":{start:{line:112,column:15},end:{line:112,column:39}},"33":{start:{line:113,column:18},end:{line:113,column:28}},"34":{start:{line:114,column:19},end:{line:114,column:21}},"35":{start:{line:116,column:4},end:{line:119,column:5}},"36":{start:{line:117,column:19},end:{line:117,column:46}},"37":{start:{line:118,column:6},end:{line:118,column:24}},"38":{start:{line:121,column:4},end:{line:121,column:25}},"39":{start:{line:123,column:16},end:{line:123,column:25}},"40":{start:{line:124,column:12},end:{line:124,column:13}},"41":{start:{line:126,column:4},end:{line:147,column:5}},"42":{start:{line:127,column:18},end:{line:127,column:34}},"43":{start:{line:129,column:6},end:{line:130,column:14}},"44":{start:{line:130,column:8},end:{line:130,column:14}},"45":{start:{line:132,column:6},end:{line:139,column:7}},"46":{start:{line:133,column:8},end:{line:137,column:9}},"47":{start:{line:134,column:10},end:{line:134,column:28}},"48":{start:{line:135,column:10},end:{line:135,column:17}},"49":{start:{line:136,column:10},end:{line:136,column:19}},"50":{start:{line:138,column:8},end:{line:138,column:21}},"51":{start:{line:141,column:20},end:{line:141,column:36}},"52":{start:{line:143,column:6},end:{line:144,column:21}},"53":{start:{line:144,column:8},end:{line:144,column:21}},"54":{start:{line:146,column:6},end:{line:146,column:24}},"55":{start:{line:149,column:4},end:{line:149,column:16}},"56":{start:{line:158,column:4},end:{line:164,column:5}},"57":{start:{line:159,column:6},end:{line:159,column:31}},"58":{start:{line:161,column:6},end:{line:162,column:19}},"59":{start:{line:162,column:8},end:{line:162,column:19}},"60":{start:{line:163,column:6},end:{line:163,column:14}},"61":{start:{line:174,column:16},end:{line:174,column:26}},"62":{start:{line:177,column:4},end:{line:178,column:19}},"63":{start:{line:178,column:6},end:{line:178,column:19}},"64":{start:{line:180,column:16},end:{line:180,column:37}},"65":{start:{line:182,column:4},end:{line:182,column:38}},"66":{start:{line:191,column:4},end:{line:191,column:21}},"67":{start:{line:200,column:15},end:{line:200,column:26}},"68":{start:{line:201,column:4},end:{line:201,column:27}},"69":{start:{line:202,column:4},end:{line:202,column:29}},"70":{start:{line:203,column:4},end:{line:203,column:23}},"71":{start:{line:212,column:17},end:{line:212,column:57}},"72":{start:{line:213,column:4},end:{line:213,column:31}},"73":{start:{line:214,column:4},end:{line:214,column:28}},"74":{start:{line:215,column:4},end:{line:215,column:16}},"75":{start:{line:224,column:17},end:{line:224,column:57}},"76":{start:{line:225,column:4},end:{line:225,column:34}},"77":{start:{line:226,column:4},end:{line:226,column:31}},"78":{start:{line:227,column:4},end:{line:227,column:28}},"79":{start:{line:228,column:4},end:{line:228,column:16}},"80":{start:{line:237,column:4},end:{line:237,column:26}},"81":{start:{line:238,column:4},end:{line:238,column:27}},"82":{start:{line:250,column:4},end:{line:250,column:49}},"83":{start:{line:251,column:4},end:{line:251,column:30}},"84":{start:{line:252,column:4},end:{line:252,column:33}},"85":{start:{line:254,column:4},end:{line:254,column:33}},"86":{start:{line:255,column:4},end:{line:255,column:30}},"87":{start:{line:257,column:4},end:{line:257,column:28}},"88":{start:{line:258,column:4},end:{line:258,column:37}},"89":{start:{line:260,column:4},end:{line:260,column:15}},"90":{start:{line:261,column:4},end:{line:261,column:24}},"91":{start:{line:262,column:4},end:{line:262,column:36}},"92":{start:{line:264,column:19},end:{line:264,column:21}},"93":{start:{line:266,column:4},end:{line:270,column:5}},"94":{start:{line:267,column:6},end:{line:267,column:36}},"95":{start:{line:268,column:19},end:{line:268,column:46}},"96":{start:{line:269,column:6},end:{line:269,column:24}},"97":{start:{line:272,column:4},end:{line:272,column:25}},"98":{start:{line:274,column:15},end:{line:274,column:30}},"99":{start:{line:276,column:15},end:{line:276,column:25}},"100":{start:{line:278,column:4},end:{line:292,column:5}},"101":{start:{line:279,column:18},end:{line:279,column:47}},"102":{start:{line:280,column:20},end:{line:280,column:58}},"103":{start:{line:282,column:6},end:{line:282,column:18}},"104":{start:{line:285,column:6},end:{line:288,column:7}},"105":{start:{line:286,column:8},end:{line:286,column:23}},"106":{start:{line:287,column:8},end:{line:287,column:23}},"107":{start:{line:289,column:6},end:{line:289,column:21}},"108":{start:{line:291,column:6},end:{line:291,column:34}},"109":{start:{line:294,column:4},end:{line:294,column:28}},"110":{start:{line:296,column:4},end:{line:296,column:16}},"111":{start:{line:308,column:4},end:{line:308,column:49}},"112":{start:{line:309,column:4},end:{line:309,column:49}},"113":{start:{line:310,column:4},end:{line:310,column:30}},"114":{start:{line:311,column:4},end:{line:311,column:34}},"115":{start:{line:313,column:4},end:{line:313,column:15}},"116":{start:{line:314,column:4},end:{line:314,column:15}},"117":{start:{line:315,column:4},end:{line:315,column:36}},"118":{start:{line:316,column:4},end:{line:316,column:21}},"119":{start:{line:318,column:4},end:{line:318,column:16}},"120":{start:{line:329,column:4},end:{line:329,column:49}},"121":{start:{line:330,column:15},end:{line:330,column:29}},"122":{start:{line:331,column:14},end:{line:331,column:29}},"123":{start:{line:332,column:4},end:{line:332,column:63}},"124":{start:{line:343,column:4},end:{line:343,column:49}},"125":{start:{line:344,column:4},end:{line:344,column:34}},"126":{start:{line:345,column:4},end:{line:345,column:29}},"127":{start:{line:347,column:14},end:{line:347,column:31}},"128":{start:{line:349,column:4},end:{line:349,column:47}},"129":{start:{line:359,column:4},end:{line:359,column:34}},"130":{start:{line:360,column:4},end:{line:360,column:29}},"131":{start:{line:362,column:14},end:{line:362,column:34}},"132":{start:{line:363,column:14},end:{line:363,column:31}},"133":{start:{line:365,column:4},end:{line:365,column:47}},"134":{start:{line:375,column:4},end:{line:375,column:37}},"135":{start:{line:387,column:4},end:{line:387,column:47}},"136":{start:{line:399,column:4},end:{line:399,column:44}},"137":{start:{line:410,column:4},end:{line:410,column:42}},"138":{start:{line:421,column:4},end:{line:421,column:42}},"139":{start:{line:431,column:4},end:{line:431,column:40}},"140":{start:{line:441,column:4},end:{line:441,column:36}},"141":{start:{line:450,column:19},end:{line:450,column:48}},"142":{start:{line:451,column:2},end:{line:451,column:30}},"143":{start:{line:455,column:2},end:{line:455,column:18}},"144":{start:{line:462,column:0},end:{line:462,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:42,column:2},end:{line:42,column:3}},loc:{start:{line:42,column:16},end:{line:47,column:3}},line:42},"1":{name:"(anonymous_1)",decl:{start:{line:55,column:2},end:{line:55,column:3}},loc:{start:{line:55,column:12},end:{line:58,column:3}},line:55},"2":{name:"(anonymous_2)",decl:{start:{line:67,column:2},end:{line:67,column:3}},loc:{start:{line:67,column:15},end:{line:69,column:3}},line:67},"3":{name:"(anonymous_3)",decl:{start:{line:78,column:2},end:{line:78,column:3}},loc:{start:{line:78,column:19},end:{line:99,column:3}},line:78},"4":{name:"(anonymous_4)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:23},end:{line:150,column:3}},line:108},"5":{name:"(anonymous_5)",decl:{start:{line:157,column:2},end:{line:157,column:3}},loc:{start:{line:157,column:14},end:{line:165,column:3}},line:157},"6":{name:"(anonymous_6)",decl:{start:{line:173,column:2},end:{line:173,column:3}},loc:{start:{line:173,column:15},end:{line:183,column:3}},line:173},"7":{name:"(anonymous_7)",decl:{start:{line:190,column:2},end:{line:190,column:3}},loc:{start:{line:190,column:12},end:{line:192,column:3}},line:190},"8":{name:"(anonymous_8)",decl:{start:{line:199,column:2},end:{line:199,column:3}},loc:{start:{line:199,column:13},end:{line:204,column:3}},line:199},"9":{name:"(anonymous_9)",decl:{start:{line:211,column:2},end:{line:211,column:3}},loc:{start:{line:211,column:13},end:{line:216,column:3}},line:211},"10":{name:"(anonymous_10)",decl:{start:{line:223,column:2},end:{line:223,column:3}},loc:{start:{line:223,column:14},end:{line:229,column:3}},line:223},"11":{name:"(anonymous_11)",decl:{start:{line:236,column:2},end:{line:236,column:3}},loc:{start:{line:236,column:10},end:{line:239,column:3}},line:236},"12":{name:"(anonymous_12)",decl:{start:{line:249,column:2},end:{line:249,column:3}},loc:{start:{line:249,column:27},end:{line:297,column:3}},line:249},"13":{name:"(anonymous_13)",decl:{start:{line:307,column:2},end:{line:307,column:3}},loc:{start:{line:307,column:24},end:{line:319,column:3}},line:307},"14":{name:"(anonymous_14)",decl:{start:{line:328,column:2},end:{line:328,column:3}},loc:{start:{line:328,column:22},end:{line:333,column:3}},line:328},"15":{name:"(anonymous_15)",decl:{start:{line:342,column:2},end:{line:342,column:3}},loc:{start:{line:342,column:22},end:{line:350,column:3}},line:342},"16":{name:"(anonymous_16)",decl:{start:{line:358,column:2},end:{line:358,column:3}},loc:{start:{line:358,column:20},end:{line:366,column:3}},line:358},"17":{name:"(anonymous_17)",decl:{start:{line:374,column:2},end:{line:374,column:3}},loc:{start:{line:374,column:16},end:{line:376,column:3}},line:374},"18":{name:"(anonymous_18)",decl:{start:{line:386,column:2},end:{line:386,column:3}},loc:{start:{line:386,column:34},end:{line:388,column:3}},line:386},"19":{name:"(anonymous_19)",decl:{start:{line:398,column:2},end:{line:398,column:3}},loc:{start:{line:398,column:31},end:{line:400,column:3}},line:398},"20":{name:"(anonymous_20)",decl:{start:{line:409,column:2},end:{line:409,column:3}},loc:{start:{line:409,column:29},end:{line:411,column:3}},line:409},"21":{name:"(anonymous_21)",decl:{start:{line:420,column:2},end:{line:420,column:3}},loc:{start:{line:420,column:29},end:{line:422,column:3}},line:420},"22":{name:"(anonymous_22)",decl:{start:{line:430,column:2},end:{line:430,column:3}},loc:{start:{line:430,column:27},end:{line:432,column:3}},line:430},"23":{name:"(anonymous_23)",decl:{start:{line:440,column:2},end:{line:440,column:3}},loc:{start:{line:440,column:23},end:{line:442,column:3}},line:440},"24":{name:"sipmod64",decl:{start:{line:449,column:9},end:{line:449,column:17}},loc:{start:{line:449,column:32},end:{line:452,column:1}},line:449},"25":{name:"compare",decl:{start:{line:454,column:9},end:{line:454,column:16}},loc:{start:{line:454,column:23},end:{line:456,column:1}},line:454}},branchMap:{"0":{loc:{start:{line:57,column:11},end:{line:57,column:48}},type:"cond-expr",locations:[{start:{line:57,column:27},end:{line:57,column:44}},{start:{line:57,column:47},end:{line:57,column:48}}],line:57},"1":{loc:{start:{line:87,column:6},end:{line:88,column:21}},type:"if",locations:[{start:{line:87,column:6},end:{line:88,column:21}},{start:{line:87,column:6},end:{line:88,column:21}}],line:87},"2":{loc:{start:{line:92,column:6},end:{line:93,column:20}},type:"if",locations:[{start:{line:92,column:6},end:{line:93,column:20}},{start:{line:92,column:6},end:{line:93,column:20}}],line:92},"3":{loc:{start:{line:129,column:6},end:{line:130,column:14}},type:"if",locations:[{start:{line:129,column:6},end:{line:130,column:14}},{start:{line:129,column:6},end:{line:130,column:14}}],line:129},"4":{loc:{start:{line:132,column:6},end:{line:139,column:7}},type:"if",locations:[{start:{line:132,column:6},end:{line:139,column:7}},{start:{line:132,column:6},end:{line:139,column:7}}],line:132},"5":{loc:{start:{line:133,column:8},end:{line:137,column:9}},type:"if",locations:[{start:{line:133,column:8},end:{line:137,column:9}},{start:{line:133,column:8},end:{line:137,column:9}}],line:133},"6":{loc:{start:{line:143,column:6},end:{line:144,column:21}},type:"if",locations:[{start:{line:143,column:6},end:{line:144,column:21}},{start:{line:143,column:6},end:{line:144,column:21}}],line:143},"7":{loc:{start:{line:161,column:6},end:{line:162,column:19}},type:"if",locations:[{start:{line:161,column:6},end:{line:162,column:19}},{start:{line:161,column:6},end:{line:162,column:19}}],line:161},"8":{loc:{start:{line:250,column:11},end:{line:250,column:47}},type:"binary-expr",locations:[{start:{line:250,column:11},end:{line:250,column:32}},{start:{line:250,column:36},end:{line:250,column:47}}],line:250},"9":{loc:{start:{line:251,column:11},end:{line:251,column:28}},type:"binary-expr",locations:[{start:{line:251,column:11},end:{line:251,column:17}},{start:{line:251,column:21},end:{line:251,column:28}}],line:251},"10":{loc:{start:{line:308,column:11},end:{line:308,column:47}},type:"binary-expr",locations:[{start:{line:308,column:11},end:{line:308,column:32}},{start:{line:308,column:36},end:{line:308,column:47}}],line:308},"11":{loc:{start:{line:309,column:11},end:{line:309,column:47}},type:"binary-expr",locations:[{start:{line:309,column:11},end:{line:309,column:32}},{start:{line:309,column:36},end:{line:309,column:47}}],line:309},"12":{loc:{start:{line:310,column:11},end:{line:310,column:28}},type:"binary-expr",locations:[{start:{line:310,column:11},end:{line:310,column:17}},{start:{line:310,column:21},end:{line:310,column:28}}],line:310},"13":{loc:{start:{line:329,column:11},end:{line:329,column:47}},type:"binary-expr",locations:[{start:{line:329,column:11},end:{line:329,column:32}},{start:{line:329,column:36},end:{line:329,column:47}}],line:329},"14":{loc:{start:{line:343,column:11},end:{line:343,column:47}},type:"binary-expr",locations:[{start:{line:343,column:11},end:{line:343,column:32}},{start:{line:343,column:36},end:{line:343,column:47}}],line:343}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"bccce28260efde9476c52a392141cf85f0df4f17"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ulxzdpyn2=function(){return actualCoverage;};}return actualCoverage;}cov_1ulxzdpyn2();const assert=(cov_1ulxzdpyn2().s[0]++,require('bsert'));const{U64}=(cov_1ulxzdpyn2().s[1]++,require('n64'));const hash256=(cov_1ulxzdpyn2().s[2]++,require('bcrypto/lib/hash256'));const{sipmod}=(cov_1ulxzdpyn2().s[3]++,require('bcrypto/lib/siphash'));const bio=(cov_1ulxzdpyn2().s[4]++,require('bufio'));const{BufferSet}=(cov_1ulxzdpyn2().s[5]++,require('buffer-map'));const BitWriter=(cov_1ulxzdpyn2().s[6]++,require('./writer'));const BitReader=(cov_1ulxzdpyn2().s[7]++,require('./reader'));/*
 * Constants
 */const DUMMY=(cov_1ulxzdpyn2().s[8]++,Buffer.alloc(0));const EOF=(cov_1ulxzdpyn2().s[9]++,new U64(-1));const M=(cov_1ulxzdpyn2().s[10]++,new U64(784931));/**
 * Golomb - BIP 158 block filters
 * @alias module:golomb.Golomb
 * @see https://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki
 * @property {Number} m
 * @property {Number} n
 * @property {Number} p
 * @property {Buffer} data
 */class Golomb{/**
   * Create a block filter.
   * @constructor
   */constructor(){cov_1ulxzdpyn2().f[0]++;cov_1ulxzdpyn2().s[11]++;this.n=0;cov_1ulxzdpyn2().s[12]++;this.p=0;cov_1ulxzdpyn2().s[13]++;this.m=M;cov_1ulxzdpyn2().s[14]++;this.data=DUMMY;}/**
   * Hash the block filter.
   * @param {String?} enc - Can be `'hex'` or `null`.
   * @returns {Hash|Buffer} hash
   */hash(enc){cov_1ulxzdpyn2().f[1]++;const h=(cov_1ulxzdpyn2().s[15]++,hash256.digest(this.toNBytes()));cov_1ulxzdpyn2().s[16]++;return enc==='hex'?(cov_1ulxzdpyn2().b[0][0]++,h.toString('hex')):(cov_1ulxzdpyn2().b[0][1]++,h);}/**
   * Get the block filter header.
   * hash of block filter concatenated with previous block filter header.
   * @param {Hash} prev - previous filter header.
   * @returns {Hash|Buffer} hash
   */header(prev){cov_1ulxzdpyn2().f[2]++;cov_1ulxzdpyn2().s[17]++;return hash256.root(this.hash(),prev);}/**
   * Get the membership of given item in the block filter.
   * @param {Buffer} key - 128-bit key.
   * @param {Buffer} data - item.
   * @returns {Boolean} match
   */match(key,data){cov_1ulxzdpyn2().f[3]++;const br=(cov_1ulxzdpyn2().s[18]++,new BitReader(this.data));const term=(cov_1ulxzdpyn2().s[19]++,sipmod64(data,key,this.m));let last=(cov_1ulxzdpyn2().s[20]++,new U64(0));cov_1ulxzdpyn2().s[21]++;while(last.lt(term)){const value=(cov_1ulxzdpyn2().s[22]++,this.readU64(br));cov_1ulxzdpyn2().s[23]++;if(value===EOF){cov_1ulxzdpyn2().b[1][0]++;cov_1ulxzdpyn2().s[24]++;return false;}else{cov_1ulxzdpyn2().b[1][1]++;}cov_1ulxzdpyn2().s[25]++;value.iadd(last);cov_1ulxzdpyn2().s[26]++;if(value.eq(term)){cov_1ulxzdpyn2().b[2][0]++;cov_1ulxzdpyn2().s[27]++;return true;}else{cov_1ulxzdpyn2().b[2][1]++;}cov_1ulxzdpyn2().s[28]++;last=value;}cov_1ulxzdpyn2().s[29]++;return false;}/**
   * Get the membership of any item of given items in the block filter.
   * @param {Buffer} key - 128-bit key.
   * @param {Buffer[]} items.
   * @returns {Boolean} match
   */matchAny(key,items){cov_1ulxzdpyn2().f[4]++;cov_1ulxzdpyn2().s[30]++;items=new BufferSet(items);cov_1ulxzdpyn2().s[31]++;assert(items.size>0);const br=(cov_1ulxzdpyn2().s[32]++,new BitReader(this.data));const last1=(cov_1ulxzdpyn2().s[33]++,new U64(0));const values=(cov_1ulxzdpyn2().s[34]++,[]);cov_1ulxzdpyn2().s[35]++;for(const item of items){const hash=(cov_1ulxzdpyn2().s[36]++,sipmod64(item,key,this.m));cov_1ulxzdpyn2().s[37]++;values.push(hash);}cov_1ulxzdpyn2().s[38]++;values.sort(compare);let last2=(cov_1ulxzdpyn2().s[39]++,values[0]);let i=(cov_1ulxzdpyn2().s[40]++,1);cov_1ulxzdpyn2().s[41]++;for(;;){const cmp=(cov_1ulxzdpyn2().s[42]++,last1.cmp(last2));cov_1ulxzdpyn2().s[43]++;if(cmp===0){cov_1ulxzdpyn2().b[3][0]++;cov_1ulxzdpyn2().s[44]++;break;}else{cov_1ulxzdpyn2().b[3][1]++;}cov_1ulxzdpyn2().s[45]++;if(cmp>0){cov_1ulxzdpyn2().b[4][0]++;cov_1ulxzdpyn2().s[46]++;if(i<values.length){cov_1ulxzdpyn2().b[5][0]++;cov_1ulxzdpyn2().s[47]++;last2=values[i];cov_1ulxzdpyn2().s[48]++;i+=1;cov_1ulxzdpyn2().s[49]++;continue;}else{cov_1ulxzdpyn2().b[5][1]++;}cov_1ulxzdpyn2().s[50]++;return false;}else{cov_1ulxzdpyn2().b[4][1]++;}const value=(cov_1ulxzdpyn2().s[51]++,this.readU64(br));cov_1ulxzdpyn2().s[52]++;if(value===EOF){cov_1ulxzdpyn2().b[6][0]++;cov_1ulxzdpyn2().s[53]++;return false;}else{cov_1ulxzdpyn2().b[6][1]++;}cov_1ulxzdpyn2().s[54]++;last1.iadd(value);}cov_1ulxzdpyn2().s[55]++;return true;}/**
   * Read uint64 from a bit reader.
   * @param {BufferReader} br {@link BitReader}
   */readU64(br){cov_1ulxzdpyn2().f[5]++;cov_1ulxzdpyn2().s[56]++;try{cov_1ulxzdpyn2().s[57]++;return this._readU64(br);}catch(e){cov_1ulxzdpyn2().s[58]++;if(e.message==='EOF'){cov_1ulxzdpyn2().b[7][0]++;cov_1ulxzdpyn2().s[59]++;return EOF;}else{cov_1ulxzdpyn2().b[7][1]++;}cov_1ulxzdpyn2().s[60]++;throw e;}}/**
   * Read uint64 from a bit reader.
   * @param {BufferReader} br {@link BitReader}
   * @throws on EOF
   */_readU64(br){cov_1ulxzdpyn2().f[6]++;const num=(cov_1ulxzdpyn2().s[61]++,new U64(0));// Unary
cov_1ulxzdpyn2().s[62]++;while(br.readBit()){cov_1ulxzdpyn2().s[63]++;num.iaddn(1);}const rem=(cov_1ulxzdpyn2().s[64]++,br.readBits64(this.p));cov_1ulxzdpyn2().s[65]++;return num.ishln(this.p).ior(rem);}/**
   * Serialize the block filter as raw filter bytes.
   * @returns {Buffer} filter
   */toBytes(){cov_1ulxzdpyn2().f[7]++;cov_1ulxzdpyn2().s[66]++;return this.data;}/**
   * Serialize the block filter as N and raw filter bytes
   * @returns {Buffer} filter
   */toNBytes(){cov_1ulxzdpyn2().f[8]++;const bw=(cov_1ulxzdpyn2().s[67]++,bio.write());cov_1ulxzdpyn2().s[68]++;bw.writeVarint(this.n);cov_1ulxzdpyn2().s[69]++;bw.writeBytes(this.data);cov_1ulxzdpyn2().s[70]++;return bw.render();}/**
   * Serialize the block filter as P and raw filter bytes
   * @returns {Buffer} filter
   */toPBytes(){cov_1ulxzdpyn2().f[9]++;const data=(cov_1ulxzdpyn2().s[71]++,Buffer.allocUnsafe(1+this.data.length));cov_1ulxzdpyn2().s[72]++;data.writeUInt8(this.p,0);cov_1ulxzdpyn2().s[73]++;this.data.copy(data,1);cov_1ulxzdpyn2().s[74]++;return data;}/**
   * Serialize the block filter as N, P and raw filter bytes
   * @returns {Buffer} filter
   */toNPBytes(){cov_1ulxzdpyn2().f[10]++;const data=(cov_1ulxzdpyn2().s[75]++,Buffer.allocUnsafe(5+this.data.length));cov_1ulxzdpyn2().s[76]++;data.writeUInt32BE(this.n,0);cov_1ulxzdpyn2().s[77]++;data.writeUInt8(this.p,4);cov_1ulxzdpyn2().s[78]++;this.data.copy(data,5);cov_1ulxzdpyn2().s[79]++;return data;}/**
   * Serialize the block filter as default filter bytes.
   * @returns {Buffer} filter
   */toRaw(){cov_1ulxzdpyn2().f[11]++;cov_1ulxzdpyn2().s[80]++;assert(this.p===19);cov_1ulxzdpyn2().s[81]++;return this.toNBytes();}/**
   * Instantiate a block filter from a P, 128-bit key and items.
   * @param {Number} P
   * @param {Buffer} 128-bit key
   * @param {Buffer[]} items
   * @returns {Golomb}
   */fromItems(P,key,items){cov_1ulxzdpyn2().f[12]++;cov_1ulxzdpyn2().s[82]++;assert((cov_1ulxzdpyn2().b[8][0]++,typeof P==='number')&&(cov_1ulxzdpyn2().b[8][1]++,isFinite(P)));cov_1ulxzdpyn2().s[83]++;assert((cov_1ulxzdpyn2().b[9][0]++,P>=0)&&(cov_1ulxzdpyn2().b[9][1]++,P<=32));cov_1ulxzdpyn2().s[84]++;items=new BufferSet(items);cov_1ulxzdpyn2().s[85]++;assert(Buffer.isBuffer(key));cov_1ulxzdpyn2().s[86]++;assert(key.length===16);cov_1ulxzdpyn2().s[87]++;assert(items.size>=0);cov_1ulxzdpyn2().s[88]++;assert(items.size<=0xffffffff);cov_1ulxzdpyn2().s[89]++;this.p=P;cov_1ulxzdpyn2().s[90]++;this.n=items.size;cov_1ulxzdpyn2().s[91]++;this.m=M.mul(new U64(this.n));const values=(cov_1ulxzdpyn2().s[92]++,[]);cov_1ulxzdpyn2().s[93]++;for(const item of items){cov_1ulxzdpyn2().s[94]++;assert(Buffer.isBuffer(item));const hash=(cov_1ulxzdpyn2().s[95]++,sipmod64(item,key,this.m));cov_1ulxzdpyn2().s[96]++;values.push(hash);}cov_1ulxzdpyn2().s[97]++;values.sort(compare);const bw=(cov_1ulxzdpyn2().s[98]++,new BitWriter());let last=(cov_1ulxzdpyn2().s[99]++,new U64(0));cov_1ulxzdpyn2().s[100]++;for(const hash of values){const rem=(cov_1ulxzdpyn2().s[101]++,hash.sub(last).imaskn(this.p));const value=(cov_1ulxzdpyn2().s[102]++,hash.sub(last).isub(rem).ishrn(this.p));cov_1ulxzdpyn2().s[103]++;last=hash;// Unary
cov_1ulxzdpyn2().s[104]++;while(!value.isZero()){cov_1ulxzdpyn2().s[105]++;bw.writeBit(1);cov_1ulxzdpyn2().s[106]++;value.isubn(1);}cov_1ulxzdpyn2().s[107]++;bw.writeBit(0);cov_1ulxzdpyn2().s[108]++;bw.writeBits64(rem,this.p);}cov_1ulxzdpyn2().s[109]++;this.data=bw.render();cov_1ulxzdpyn2().s[110]++;return this;}/**
   * Instantiate a block filter from a N, P, and raw data.
   * @param {Number} N
   * @param {Number} P
   * @param {Buffer} data
   * @returns {Golomb}
   */fromBytes(N,P,data){cov_1ulxzdpyn2().f[13]++;cov_1ulxzdpyn2().s[111]++;assert((cov_1ulxzdpyn2().b[10][0]++,typeof N==='number')&&(cov_1ulxzdpyn2().b[10][1]++,isFinite(N)));cov_1ulxzdpyn2().s[112]++;assert((cov_1ulxzdpyn2().b[11][0]++,typeof P==='number')&&(cov_1ulxzdpyn2().b[11][1]++,isFinite(P)));cov_1ulxzdpyn2().s[113]++;assert((cov_1ulxzdpyn2().b[12][0]++,P>=0)&&(cov_1ulxzdpyn2().b[12][1]++,P<=32));cov_1ulxzdpyn2().s[114]++;assert(Buffer.isBuffer(data));cov_1ulxzdpyn2().s[115]++;this.n=N;cov_1ulxzdpyn2().s[116]++;this.p=P;cov_1ulxzdpyn2().s[117]++;this.m=M.mul(new U64(this.n));cov_1ulxzdpyn2().s[118]++;this.data=data;cov_1ulxzdpyn2().s[119]++;return this;}/**
   * Instantiate a block filter from a P, and raw data.
   * @param {Number} P
   * @param {Buffer} data
   * @returns {Golomb}
   */fromNBytes(P,data){cov_1ulxzdpyn2().f[14]++;cov_1ulxzdpyn2().s[120]++;assert((cov_1ulxzdpyn2().b[13][0]++,typeof P==='number')&&(cov_1ulxzdpyn2().b[13][1]++,isFinite(P)));const br=(cov_1ulxzdpyn2().s[121]++,bio.read(data));const N=(cov_1ulxzdpyn2().s[122]++,br.readVarint());cov_1ulxzdpyn2().s[123]++;return this.fromBytes(N,P,data.slice(bio.sizeVarint(N)));}/**
   * Instantiate a block filter from a N, and raw data.
   * @param {Number} N
   * @param {Buffer} data
   * @returns {Golomb}
   */fromPBytes(N,data){cov_1ulxzdpyn2().f[15]++;cov_1ulxzdpyn2().s[124]++;assert((cov_1ulxzdpyn2().b[14][0]++,typeof N==='number')&&(cov_1ulxzdpyn2().b[14][1]++,isFinite(N)));cov_1ulxzdpyn2().s[125]++;assert(Buffer.isBuffer(data));cov_1ulxzdpyn2().s[126]++;assert(data.length>=1);const P=(cov_1ulxzdpyn2().s[127]++,data.readUInt8(0));cov_1ulxzdpyn2().s[128]++;return this.fromBytes(N,P,data.slice(1));}/**
   * Instantiate a block filter from raw data.
   * @param {Buffer} data
   * @returns {Golomb}
   */fromNPBytes(data){cov_1ulxzdpyn2().f[16]++;cov_1ulxzdpyn2().s[129]++;assert(Buffer.isBuffer(data));cov_1ulxzdpyn2().s[130]++;assert(data.length>=5);const N=(cov_1ulxzdpyn2().s[131]++,data.readUInt32BE(0));const P=(cov_1ulxzdpyn2().s[132]++,data.readUInt8(4));cov_1ulxzdpyn2().s[133]++;return this.fromBytes(N,P,data.slice(5));}/**
   * Instantiate a block filter from raw data.
   * @param {Buffer} data
   * @returns {Golomb}
   */fromRaw(data){cov_1ulxzdpyn2().f[17]++;cov_1ulxzdpyn2().s[134]++;return this.fromNBytes(19,data);}/**
   * Instantiate a block filter from a P, 128-bit key and items.
   * @param {Number} P
   * @param {Buffer} 128-bit key
   * @param {Buffer[]} items
   * @returns {Golomb}
   */static fromItems(P,key,items){cov_1ulxzdpyn2().f[18]++;cov_1ulxzdpyn2().s[135]++;return new this().fromItems(P,key,items);}/**
   * Instantiate a block filter from a N, P, and raw data.
   * @param {Number} N
   * @param {Number} P
   * @param {Buffer} data
   * @returns {Golomb}
   */static fromBytes(N,P,data){cov_1ulxzdpyn2().f[19]++;cov_1ulxzdpyn2().s[136]++;return new this().fromBytes(N,P,data);}/**
   * Instantiate a block filter from a P, and raw data.
   * @param {Number} P
   * @param {Buffer} data
   * @returns {Golomb}
   */static fromNBytes(P,data){cov_1ulxzdpyn2().f[20]++;cov_1ulxzdpyn2().s[137]++;return new this().fromNBytes(P,data);}/**
   * Instantiate a block filter from a N, and raw data.
   * @param {Number} N
   * @param {Buffer} data
   * @returns {Golomb}
   */static fromPBytes(N,data){cov_1ulxzdpyn2().f[21]++;cov_1ulxzdpyn2().s[138]++;return new this().fromPBytes(N,data);}/**
   * Instantiate a block filter from raw data.
   * @param {Buffer} data
   * @returns {Golomb}
   */static fromNPBytes(data){cov_1ulxzdpyn2().f[22]++;cov_1ulxzdpyn2().s[139]++;return new this().fromNPBytes(data);}/**
   * Instantiate a block filter from raw data.
   * @param {Buffer} data
   * @returns {Golomb}
   */static fromRaw(data){cov_1ulxzdpyn2().f[23]++;cov_1ulxzdpyn2().s[140]++;return new this().fromRaw(data);}}/*
 * Helpers
 */function sipmod64(data,key,m){cov_1ulxzdpyn2().f[24]++;const[hi,lo]=(cov_1ulxzdpyn2().s[141]++,sipmod(data,key,m.hi,m.lo));cov_1ulxzdpyn2().s[142]++;return U64.fromBits(hi,lo);}function compare(a,b){cov_1ulxzdpyn2().f[25]++;cov_1ulxzdpyn2().s[143]++;return a.cmp(b);}/*
 * Expose
 */cov_1ulxzdpyn2().s[144]++;module.exports=Golomb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
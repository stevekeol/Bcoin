/*!
 * memblock.js - memblock block object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_tyezx1uvy(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\memblock.js";var hash="2fc1b22e040f4141f941754e4ec194315b4f8106";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\memblock.js",statementMap:{"0":{start:{line:10,column:12},end:{line:10,column:28}},"1":{start:{line:11,column:22},end:{line:11,column:48}},"2":{start:{line:12,column:14},end:{line:12,column:32}},"3":{start:{line:13,column:16},end:{line:13,column:36}},"4":{start:{line:14,column:15},end:{line:14,column:42}},"5":{start:{line:15,column:14},end:{line:15,column:29}},"6":{start:{line:45,column:4},end:{line:45,column:12}},"7":{start:{line:47,column:4},end:{line:47,column:22}},"8":{start:{line:56,column:4},end:{line:56,column:16}},"9":{start:{line:65,column:4},end:{line:65,column:34}},"10":{start:{line:74,column:4},end:{line:74,column:28}},"11":{start:{line:83,column:4},end:{line:83,column:16}},"12":{start:{line:93,column:4},end:{line:94,column:16}},"13":{start:{line:94,column:6},end:{line:94,column:16}},"14":{start:{line:96,column:4},end:{line:100,column:5}},"15":{start:{line:97,column:6},end:{line:97,column:40}},"16":{start:{line:99,column:6},end:{line:99,column:16}},"17":{start:{line:111,column:15},end:{line:111,column:40}},"18":{start:{line:113,column:4},end:{line:113,column:16}},"19":{start:{line:115,column:20},end:{line:115,column:35}},"20":{start:{line:117,column:4},end:{line:118,column:16}},"21":{start:{line:118,column:6},end:{line:118,column:16}},"22":{start:{line:120,column:4},end:{line:120,column:15}},"23":{start:{line:122,column:18},end:{line:122,column:33}},"24":{start:{line:124,column:4},end:{line:127,column:5}},"25":{start:{line:125,column:6},end:{line:126,column:34}},"26":{start:{line:126,column:8},end:{line:126,column:34}},"27":{start:{line:129,column:4},end:{line:130,column:16}},"28":{start:{line:130,column:6},end:{line:130,column:16}},"29":{start:{line:132,column:4},end:{line:132,column:16}},"30":{start:{line:134,column:19},end:{line:134,column:36}},"31":{start:{line:136,column:4},end:{line:136,column:44}},"32":{start:{line:146,column:15},end:{line:146,column:35}},"33":{start:{line:148,column:4},end:{line:148,column:22}},"34":{start:{line:150,column:4},end:{line:150,column:24}},"35":{start:{line:152,column:4},end:{line:152,column:16}},"36":{start:{line:162,column:4},end:{line:162,column:36}},"37":{start:{line:171,column:4},end:{line:171,column:21}},"38":{start:{line:180,column:4},end:{line:180,column:21}},"39":{start:{line:191,column:18},end:{line:191,column:42}},"40":{start:{line:193,column:4},end:{line:193,column:29}},"41":{start:{line:194,column:4},end:{line:194,column:31}},"42":{start:{line:196,column:4},end:{line:196,column:17}},"43":{start:{line:205,column:4},end:{line:205,column:35}},"44":{start:{line:215,column:4},end:{line:215,column:35}},"45":{start:{line:223,column:0},end:{line:223,column:26}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:44,column:2},end:{line:44,column:3}},loc:{start:{line:44,column:16},end:{line:48,column:3}},line:44},"1":{name:"(anonymous_1)",decl:{start:{line:55,column:2},end:{line:55,column:3}},loc:{start:{line:55,column:13},end:{line:57,column:3}},line:55},"2":{name:"(anonymous_2)",decl:{start:{line:64,column:2},end:{line:64,column:3}},loc:{start:{line:64,column:11},end:{line:66,column:3}},line:64},"3":{name:"(anonymous_3)",decl:{start:{line:73,column:2},end:{line:73,column:3}},loc:{start:{line:73,column:12},end:{line:75,column:3}},line:73},"4":{name:"(anonymous_4)",decl:{start:{line:82,column:2},end:{line:82,column:3}},loc:{start:{line:82,column:15},end:{line:84,column:3}},line:82},"5":{name:"(anonymous_5)",decl:{start:{line:92,column:2},end:{line:92,column:3}},loc:{start:{line:92,column:22},end:{line:101,column:3}},line:92},"6":{name:"(anonymous_6)",decl:{start:{line:110,column:2},end:{line:110,column:3}},loc:{start:{line:110,column:24},end:{line:137,column:3}},line:110},"7":{name:"(anonymous_7)",decl:{start:{line:145,column:2},end:{line:145,column:3}},loc:{start:{line:145,column:16},end:{line:153,column:3}},line:145},"8":{name:"(anonymous_8)",decl:{start:{line:161,column:2},end:{line:161,column:3}},loc:{start:{line:161,column:23},end:{line:163,column:3}},line:161},"9":{name:"(anonymous_9)",decl:{start:{line:170,column:2},end:{line:170,column:3}},loc:{start:{line:170,column:10},end:{line:172,column:3}},line:170},"10":{name:"(anonymous_10)",decl:{start:{line:179,column:2},end:{line:179,column:3}},loc:{start:{line:179,column:13},end:{line:181,column:3}},line:179},"11":{name:"(anonymous_11)",decl:{start:{line:190,column:2},end:{line:190,column:3}},loc:{start:{line:190,column:12},end:{line:197,column:3}},line:190},"12":{name:"(anonymous_12)",decl:{start:{line:204,column:2},end:{line:204,column:3}},loc:{start:{line:204,column:14},end:{line:206,column:3}},line:204},"13":{name:"(anonymous_13)",decl:{start:{line:214,column:2},end:{line:214,column:3}},loc:{start:{line:214,column:25},end:{line:216,column:3}},line:214}},branchMap:{"0":{loc:{start:{line:93,column:4},end:{line:94,column:16}},type:"if",locations:[{start:{line:93,column:4},end:{line:94,column:16}},{start:{line:93,column:4},end:{line:94,column:16}}],line:93},"1":{loc:{start:{line:117,column:4},end:{line:118,column:16}},type:"if",locations:[{start:{line:117,column:4},end:{line:118,column:16}},{start:{line:117,column:4},end:{line:118,column:16}}],line:117},"2":{loc:{start:{line:124,column:4},end:{line:127,column:5}},type:"if",locations:[{start:{line:124,column:4},end:{line:127,column:5}},{start:{line:124,column:4},end:{line:127,column:5}}],line:124},"3":{loc:{start:{line:125,column:6},end:{line:126,column:34}},type:"if",locations:[{start:{line:125,column:6},end:{line:126,column:34}},{start:{line:125,column:6},end:{line:126,column:34}}],line:125},"4":{loc:{start:{line:129,column:4},end:{line:130,column:16}},type:"if",locations:[{start:{line:129,column:4},end:{line:130,column:16}},{start:{line:129,column:4},end:{line:130,column:16}}],line:129}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2fc1b22e040f4141f941754e4ec194315b4f8106"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_tyezx1uvy=function(){return actualCoverage;};}return actualCoverage;}cov_tyezx1uvy();const bio=(cov_tyezx1uvy().s[0]++,require('bufio'));const AbstractBlock=(cov_tyezx1uvy().s[1]++,require('./abstractblock'));const Block=(cov_tyezx1uvy().s[2]++,require('./block'));const Headers=(cov_tyezx1uvy().s[3]++,require('./headers'));const Script=(cov_tyezx1uvy().s[4]++,require('../script/script'));const DUMMY=(cov_tyezx1uvy().s[5]++,Buffer.alloc(0));/**
 * Mem Block
 * A block object which is essentially a "placeholder"
 * for a full {@link Block} object. The v8 garbage
 * collector's head will explode if there is too much
 * data on the javascript heap. Blocks can currently
 * be up to 1mb in size. In the future, they may be
 * 2mb, 8mb, or maybe 20mb, who knows? A MemBlock
 * is an optimization in Bcoin which defers parsing of
 * the serialized transactions (the block Buffer) until
 * the block has passed through the chain queue and
 * is about to enter the chain. This keeps a lot data
 * off of the javascript heap for most of the time a
 * block even exists in memory, and manages to keep a
 * lot of strain off of the garbage collector. Having
 * 500mb of blocks on the js heap would not be a good
 * thing.
 * @alias module:primitives.MemBlock
 * @extends AbstractBlock
 */class MemBlock extends AbstractBlock{/**
   * Create a mem block.
   * @constructor
   */constructor(){cov_tyezx1uvy().f[0]++;cov_tyezx1uvy().s[6]++;super();cov_tyezx1uvy().s[7]++;this._raw=DUMMY;}/**
   * Test whether the block is a memblock.
   * @returns {Boolean}
   */isMemory(){cov_tyezx1uvy().f[1]++;cov_tyezx1uvy().s[8]++;return true;}/**
   * Serialize the block headers.
   * @returns {Buffer}
   */toHead(){cov_tyezx1uvy().f[2]++;cov_tyezx1uvy().s[9]++;return this._raw.slice(0,80);}/**
   * Get the full block size.
   * @returns {Number}
   */getSize(){cov_tyezx1uvy().f[3]++;cov_tyezx1uvy().s[10]++;return this._raw.length;}/**
   * Verify the block.
   * @returns {Boolean}
   */verifyBody(){cov_tyezx1uvy().f[4]++;cov_tyezx1uvy().s[11]++;return true;}/**
   * Retrieve the coinbase height
   * from the coinbase input script.
   * @returns {Number} height (-1 if not present).
   */getCoinbaseHeight(){cov_tyezx1uvy().f[5]++;cov_tyezx1uvy().s[12]++;if(this.version<2){cov_tyezx1uvy().b[0][0]++;cov_tyezx1uvy().s[13]++;return-1;}else{cov_tyezx1uvy().b[0][1]++;}cov_tyezx1uvy().s[14]++;try{cov_tyezx1uvy().s[15]++;return this.parseCoinbaseHeight();}catch(e){cov_tyezx1uvy().s[16]++;return-1;}}/**
   * Parse the coinbase height
   * from the coinbase input script.
   * @private
   * @returns {Number} height (-1 if not present).
   */parseCoinbaseHeight(){cov_tyezx1uvy().f[6]++;const br=(cov_tyezx1uvy().s[17]++,bio.read(this._raw,true));cov_tyezx1uvy().s[18]++;br.seek(80);const txCount=(cov_tyezx1uvy().s[19]++,br.readVarint());cov_tyezx1uvy().s[20]++;if(txCount===0){cov_tyezx1uvy().b[1][0]++;cov_tyezx1uvy().s[21]++;return-1;}else{cov_tyezx1uvy().b[1][1]++;}cov_tyezx1uvy().s[22]++;br.seek(4);let inCount=(cov_tyezx1uvy().s[23]++,br.readVarint());cov_tyezx1uvy().s[24]++;if(inCount===0){cov_tyezx1uvy().b[2][0]++;cov_tyezx1uvy().s[25]++;if(br.readU8()!==0){cov_tyezx1uvy().b[3][0]++;cov_tyezx1uvy().s[26]++;inCount=br.readVarint();}else{cov_tyezx1uvy().b[3][1]++;}}else{cov_tyezx1uvy().b[2][1]++;}cov_tyezx1uvy().s[27]++;if(inCount===0){cov_tyezx1uvy().b[4][0]++;cov_tyezx1uvy().s[28]++;return-1;}else{cov_tyezx1uvy().b[4][1]++;}cov_tyezx1uvy().s[29]++;br.seek(36);const script=(cov_tyezx1uvy().s[30]++,br.readVarBytes());cov_tyezx1uvy().s[31]++;return Script.getCoinbaseHeight(script);}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_tyezx1uvy().f[7]++;const br=(cov_tyezx1uvy().s[32]++,bio.read(data,true));cov_tyezx1uvy().s[33]++;this.readHead(br);cov_tyezx1uvy().s[34]++;this._raw=br.data;cov_tyezx1uvy().s[35]++;return this;}/**
   * Insantiate a memblock from serialized data.
   * @param {Buffer} data
   * @returns {MemBlock}
   */static fromRaw(data){cov_tyezx1uvy().f[8]++;cov_tyezx1uvy().s[36]++;return new this().fromRaw(data);}/**
   * Return serialized block data.
   * @returns {Buffer}
   */toRaw(){cov_tyezx1uvy().f[9]++;cov_tyezx1uvy().s[37]++;return this._raw;}/**
   * Return serialized block data.
   * @returns {Buffer}
   */toNormal(){cov_tyezx1uvy().f[10]++;cov_tyezx1uvy().s[38]++;return this._raw;}/**
   * Parse the serialized block data
   * and create an actual {@link Block}.
   * @returns {Block}
   * @throws Parse error
   */toBlock(){cov_tyezx1uvy().f[11]++;const block=(cov_tyezx1uvy().s[39]++,Block.fromRaw(this._raw));cov_tyezx1uvy().s[40]++;block._hash=this._hash;cov_tyezx1uvy().s[41]++;block._hhash=this._hhash;cov_tyezx1uvy().s[42]++;return block;}/**
   * Convert the block to a headers object.
   * @returns {Headers}
   */toHeaders(){cov_tyezx1uvy().f[12]++;cov_tyezx1uvy().s[43]++;return Headers.fromBlock(this);}/**
   * Test whether an object is a MemBlock.
   * @param {Object} obj
   * @returns {Boolean}
   */static isMemBlock(obj){cov_tyezx1uvy().f[13]++;cov_tyezx1uvy().s[44]++;return obj instanceof MemBlock;}}/*
 * Expose
 */cov_tyezx1uvy().s[45]++;module.exports=MemBlock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
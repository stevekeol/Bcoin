/*!
 * node.js - http node client for bcoin
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1k7yh72y33(){var path="E:\\Projects\\Test\\bcoin\\lib\\client\\node.js";var hash="109a76ae8cfa0f3e45ef36df9c3b4245cfd11111";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\client\\node.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:17},end:{line:10,column:33}},"2":{start:{line:24,column:4},end:{line:24,column:19}},"3":{start:{line:33,column:4},end:{line:33,column:43}},"4":{start:{line:34,column:4},end:{line:34,column:28}},"5":{start:{line:35,column:4},end:{line:35,column:30}},"6":{start:{line:44,column:4},end:{line:44,column:44}},"7":{start:{line:53,column:4},end:{line:53,column:32}},"8":{start:{line:62,column:4},end:{line:62,column:25}},"9":{start:{line:73,column:4},end:{line:73,column:40}},"10":{start:{line:74,column:4},end:{line:74,column:48}},"11":{start:{line:85,column:4},end:{line:85,column:37}},"12":{start:{line:86,column:4},end:{line:86,column:53}},"13":{start:{line:98,column:4},end:{line:98,column:37}},"14":{start:{line:99,column:4},end:{line:99,column:36}},"15":{start:{line:100,column:4},end:{line:100,column:46}},"16":{start:{line:111,column:4},end:{line:111,column:40}},"17":{start:{line:112,column:4},end:{line:112,column:46}},"18":{start:{line:123,column:4},end:{line:123,column:37}},"19":{start:{line:124,column:4},end:{line:124,column:51}},"20":{start:{line:134,column:4},end:{line:134,column:37}},"21":{start:{line:135,column:4},end:{line:135,column:35}},"22":{start:{line:145,column:4},end:{line:145,column:67}},"23":{start:{line:146,column:4},end:{line:146,column:39}},"24":{start:{line:156,column:4},end:{line:156,column:67}},"25":{start:{line:157,column:4},end:{line:157,column:40}},"26":{start:{line:167,column:4},end:{line:167,column:69}},"27":{start:{line:168,column:4},end:{line:168,column:41}},"28":{start:{line:178,column:4},end:{line:178,column:35}},"29":{start:{line:179,column:4},end:{line:179,column:43}},"30":{start:{line:189,column:4},end:{line:189,column:43}},"31":{start:{line:199,column:4},end:{line:199,column:36}},"32":{start:{line:209,column:4},end:{line:209,column:38}},"33":{start:{line:218,column:4},end:{line:218,column:32}},"34":{start:{line:228,column:4},end:{line:228,column:41}},"35":{start:{line:239,column:4},end:{line:239,column:47}},"36":{start:{line:249,column:4},end:{line:249,column:32}},"37":{start:{line:250,column:4},end:{line:250,column:33}},"38":{start:{line:260,column:4},end:{line:260,column:36}},"39":{start:{line:261,column:4},end:{line:261,column:43}},"40":{start:{line:271,column:4},end:{line:272,column:24}},"41":{start:{line:272,column:6},end:{line:272,column:24}},"42":{start:{line:274,column:4},end:{line:274,column:43}},"43":{start:{line:283,column:4},end:{line:283,column:37}},"44":{start:{line:293,column:4},end:{line:293,column:57}},"45":{start:{line:294,column:16},end:{line:294,column:22}},"46":{start:{line:295,column:4},end:{line:296,column:35}},"47":{start:{line:296,column:6},end:{line:296,column:35}},"48":{start:{line:297,column:4},end:{line:297,column:27}},"49":{start:{line:307,column:4},end:{line:308,column:16}},"50":{start:{line:308,column:6},end:{line:308,column:16}},"51":{start:{line:310,column:4},end:{line:310,column:67}},"52":{start:{line:312,column:4},end:{line:312,column:38}},"53":{start:{line:320,column:0},end:{line:320,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:2},end:{line:23,column:3}},loc:{start:{line:23,column:23},end:{line:25,column:3}},line:23},"1":{name:"(anonymous_1)",decl:{start:{line:32,column:2},end:{line:32,column:3}},loc:{start:{line:32,column:15},end:{line:36,column:3}},line:32},"2":{name:"(anonymous_2)",decl:{start:{line:43,column:2},end:{line:43,column:3}},loc:{start:{line:43,column:24},end:{line:45,column:3}},line:43},"3":{name:"(anonymous_3)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:15},end:{line:54,column:3}},line:52},"4":{name:"(anonymous_4)",decl:{start:{line:61,column:2},end:{line:61,column:3}},loc:{start:{line:61,column:12},end:{line:63,column:3}},line:61},"5":{name:"(anonymous_5)",decl:{start:{line:72,column:2},end:{line:72,column:3}},loc:{start:{line:72,column:29},end:{line:75,column:3}},line:72},"6":{name:"(anonymous_6)",decl:{start:{line:84,column:2},end:{line:84,column:3}},loc:{start:{line:84,column:33},end:{line:87,column:3}},line:84},"7":{name:"(anonymous_7)",decl:{start:{line:97,column:2},end:{line:97,column:3}},loc:{start:{line:97,column:23},end:{line:101,column:3}},line:97},"8":{name:"(anonymous_8)",decl:{start:{line:110,column:2},end:{line:110,column:3}},loc:{start:{line:110,column:26},end:{line:113,column:3}},line:110},"9":{name:"(anonymous_9)",decl:{start:{line:122,column:2},end:{line:122,column:3}},loc:{start:{line:122,column:30},end:{line:125,column:3}},line:122},"10":{name:"(anonymous_10)",decl:{start:{line:133,column:2},end:{line:133,column:3}},loc:{start:{line:133,column:14},end:{line:136,column:3}},line:133},"11":{name:"(anonymous_11)",decl:{start:{line:144,column:2},end:{line:144,column:3}},loc:{start:{line:144,column:18},end:{line:147,column:3}},line:144},"12":{name:"(anonymous_12)",decl:{start:{line:155,column:2},end:{line:155,column:3}},loc:{start:{line:155,column:24},end:{line:158,column:3}},line:155},"13":{name:"(anonymous_13)",decl:{start:{line:166,column:2},end:{line:166,column:3}},loc:{start:{line:166,column:20},end:{line:169,column:3}},line:166},"14":{name:"(anonymous_14)",decl:{start:{line:177,column:2},end:{line:177,column:3}},loc:{start:{line:177,column:16},end:{line:180,column:3}},line:177},"15":{name:"(anonymous_15)",decl:{start:{line:188,column:2},end:{line:188,column:3}},loc:{start:{line:188,column:16},end:{line:190,column:3}},line:188},"16":{name:"(anonymous_16)",decl:{start:{line:198,column:2},end:{line:198,column:3}},loc:{start:{line:198,column:15},end:{line:200,column:3}},line:198},"17":{name:"(anonymous_17)",decl:{start:{line:208,column:2},end:{line:208,column:3}},loc:{start:{line:208,column:17},end:{line:210,column:3}},line:208},"18":{name:"(anonymous_18)",decl:{start:{line:217,column:2},end:{line:217,column:3}},loc:{start:{line:217,column:11},end:{line:219,column:3}},line:217},"19":{name:"(anonymous_19)",decl:{start:{line:227,column:2},end:{line:227,column:3}},loc:{start:{line:227,column:18},end:{line:229,column:3}},line:227},"20":{name:"(anonymous_20)",decl:{start:{line:238,column:2},end:{line:238,column:3}},loc:{start:{line:238,column:24},end:{line:240,column:3}},line:238},"21":{name:"(anonymous_21)",decl:{start:{line:248,column:2},end:{line:248,column:3}},loc:{start:{line:248,column:11},end:{line:251,column:3}},line:248},"22":{name:"(anonymous_22)",decl:{start:{line:259,column:2},end:{line:259,column:3}},loc:{start:{line:259,column:20},end:{line:262,column:3}},line:259},"23":{name:"(anonymous_23)",decl:{start:{line:270,column:2},end:{line:270,column:3}},loc:{start:{line:270,column:20},end:{line:275,column:3}},line:270},"24":{name:"(anonymous_24)",decl:{start:{line:282,column:2},end:{line:282,column:3}},loc:{start:{line:282,column:16},end:{line:284,column:3}},line:282},"25":{name:"(anonymous_25)",decl:{start:{line:292,column:2},end:{line:292,column:3}},loc:{start:{line:292,column:22},end:{line:298,column:3}},line:292},"26":{name:"(anonymous_26)",decl:{start:{line:306,column:2},end:{line:306,column:3}},loc:{start:{line:306,column:16},end:{line:313,column:3}},line:306}},branchMap:{"0":{loc:{start:{line:145,column:11},end:{line:145,column:65}},type:"binary-expr",locations:[{start:{line:145,column:11},end:{line:145,column:36}},{start:{line:145,column:40},end:{line:145,column:65}}],line:145},"1":{loc:{start:{line:156,column:11},end:{line:156,column:65}},type:"binary-expr",locations:[{start:{line:156,column:11},end:{line:156,column:36}},{start:{line:156,column:40},end:{line:156,column:65}}],line:156},"2":{loc:{start:{line:167,column:11},end:{line:167,column:67}},type:"binary-expr",locations:[{start:{line:167,column:11},end:{line:167,column:37}},{start:{line:167,column:41},end:{line:167,column:67}}],line:167},"3":{loc:{start:{line:271,column:4},end:{line:272,column:24}},type:"if",locations:[{start:{line:271,column:4},end:{line:272,column:24}},{start:{line:271,column:4},end:{line:272,column:24}}],line:271},"4":{loc:{start:{line:293,column:11},end:{line:293,column:55}},type:"binary-expr",locations:[{start:{line:293,column:11},end:{line:293,column:25}},{start:{line:293,column:29},end:{line:293,column:55}}],line:293},"5":{loc:{start:{line:295,column:4},end:{line:296,column:35}},type:"if",locations:[{start:{line:295,column:4},end:{line:296,column:35}},{start:{line:295,column:4},end:{line:296,column:35}}],line:295},"6":{loc:{start:{line:307,column:4},end:{line:308,column:16}},type:"if",locations:[{start:{line:307,column:4},end:{line:308,column:16}},{start:{line:307,column:4},end:{line:308,column:16}}],line:307},"7":{loc:{start:{line:310,column:11},end:{line:310,column:65}},type:"binary-expr",locations:[{start:{line:310,column:11},end:{line:310,column:36}},{start:{line:310,column:40},end:{line:310,column:65}}],line:310}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"109a76ae8cfa0f3e45ef36df9c3b4245cfd11111"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1k7yh72y33=function(){return actualCoverage;};}return actualCoverage;}cov_1k7yh72y33();const assert=(cov_1k7yh72y33().s[0]++,require('bsert'));const{Client}=(cov_1k7yh72y33().s[1]++,require('bcurl'));/**
 * Node Client
 * @extends {bcurl.Client}
 */class NodeClient extends Client{/**
   * Creat a node client.
   * @param {Object?} options
   */constructor(options){cov_1k7yh72y33().f[0]++;cov_1k7yh72y33().s[2]++;super(options);}/**
   * Auth with server.
   * @returns {Promise}
   */async auth(){cov_1k7yh72y33().f[1]++;cov_1k7yh72y33().s[3]++;await this.call('auth',this.password);cov_1k7yh72y33().s[4]++;await this.watchChain();cov_1k7yh72y33().s[5]++;await this.watchMempool();}/**
   * Make an RPC call.
   * @returns {Promise}
   */execute(name,params){cov_1k7yh72y33().f[2]++;cov_1k7yh72y33().s[6]++;return super.execute('/',name,params);}/**
   * Get a mempool snapshot.
   * @returns {Promise}
   */getMempool(){cov_1k7yh72y33().f[3]++;cov_1k7yh72y33().s[7]++;return this.get('/mempool');}/**
   * Get some info about the server (network and version).
   * @returns {Promise}
   */getInfo(){cov_1k7yh72y33().f[4]++;cov_1k7yh72y33().s[8]++;return this.get('/');}/**
   * Get coins that pertain to an address from the mempool or chain database.
   * Takes into account spent coins in the mempool.
   * @param {String} address
   * @returns {Promise}
   */getCoinsByAddress(address){cov_1k7yh72y33().f[5]++;cov_1k7yh72y33().s[9]++;assert(typeof address==='string');cov_1k7yh72y33().s[10]++;return this.get(`/coin/address/${address}`);}/**
   * Get coins that pertain to addresses from the mempool or chain database.
   * Takes into account spent coins in the mempool.
   * @param {String[]} addresses
   * @returns {Promise}
   */getCoinsByAddresses(addresses){cov_1k7yh72y33().f[6]++;cov_1k7yh72y33().s[11]++;assert(Array.isArray(addresses));cov_1k7yh72y33().s[12]++;return this.post('/coin/address',{addresses});}/**
   * Retrieve a coin from the mempool or chain database.
   * Takes into account spent coins in the mempool.
   * @param {Hash} hash
   * @param {Number} index
   * @returns {Promise}
   */getCoin(hash,index){cov_1k7yh72y33().f[7]++;cov_1k7yh72y33().s[13]++;assert(typeof hash==='string');cov_1k7yh72y33().s[14]++;assert(index>>>0===index);cov_1k7yh72y33().s[15]++;return this.get(`/coin/${hash}/${index}`);}/**
   * Retrieve transactions pertaining to an
   * address from the mempool or chain database.
   * @param {String} address
   * @returns {Promise}
   */getTXByAddress(address){cov_1k7yh72y33().f[8]++;cov_1k7yh72y33().s[16]++;assert(typeof address==='string');cov_1k7yh72y33().s[17]++;return this.get(`/tx/address/${address}`);}/**
   * Retrieve transactions pertaining to
   * addresses from the mempool or chain database.
   * @param {String[]} addresses
   * @returns {Promise}
   */getTXByAddresses(addresses){cov_1k7yh72y33().f[9]++;cov_1k7yh72y33().s[18]++;assert(Array.isArray(addresses));cov_1k7yh72y33().s[19]++;return this.post('/tx/address',{addresses});}/**
   * Retrieve a transaction from the mempool or chain database.
   * @param {Hash} hash
   * @returns {Promise}
   */getTX(hash){cov_1k7yh72y33().f[10]++;cov_1k7yh72y33().s[20]++;assert(typeof hash==='string');cov_1k7yh72y33().s[21]++;return this.get(`/tx/${hash}`);}/**
   * Retrieve a block from the chain database.
   * @param {Hash|Number} block
   * @returns {Promise}
   */getBlock(block){cov_1k7yh72y33().f[11]++;cov_1k7yh72y33().s[22]++;assert((cov_1k7yh72y33().b[0][0]++,typeof block==='string')||(cov_1k7yh72y33().b[0][1]++,typeof block==='number'));cov_1k7yh72y33().s[23]++;return this.get(`/block/${block}`);}/**
   * Retrieve a block header.
   * @param {Hash|Number} block
   * @returns {Promise}
   */getBlockHeader(block){cov_1k7yh72y33().f[12]++;cov_1k7yh72y33().s[24]++;assert((cov_1k7yh72y33().b[1][0]++,typeof block==='string')||(cov_1k7yh72y33().b[1][1]++,typeof block==='number'));cov_1k7yh72y33().s[25]++;return this.get(`/header/${block}`);}/**
   * Retreive a filter from the filter indexer.
   * @param {Hash|Number} filter
   * @returns {Promise}
   */getFilter(filter){cov_1k7yh72y33().f[13]++;cov_1k7yh72y33().s[26]++;assert((cov_1k7yh72y33().b[2][0]++,typeof filter==='string')||(cov_1k7yh72y33().b[2][1]++,typeof filter==='number'));cov_1k7yh72y33().s[27]++;return this.get(`/filter/${filter}`);}/**
   * Add a transaction to the mempool and broadcast it.
   * @param {TX} tx
   * @returns {Promise}
   */broadcast(tx){cov_1k7yh72y33().f[14]++;cov_1k7yh72y33().s[28]++;assert(typeof tx==='string');cov_1k7yh72y33().s[29]++;return this.post('/broadcast',{tx});}/**
   * Reset the chain.
   * @param {Number} height
   * @returns {Promise}
   */reset(height){cov_1k7yh72y33().f[15]++;cov_1k7yh72y33().s[30]++;return this.post('/reset',{height});}/**
   * Watch the blockchain.
   * @private
   * @returns {Promise}
   */watchChain(){cov_1k7yh72y33().f[16]++;cov_1k7yh72y33().s[31]++;return this.call('watch chain');}/**
   * Watch the blockchain.
   * @private
   * @returns {Promise}
   */watchMempool(){cov_1k7yh72y33().f[17]++;cov_1k7yh72y33().s[32]++;return this.call('watch mempool');}/**
   * Get chain tip.
   * @returns {Promise}
   */getTip(){cov_1k7yh72y33().f[18]++;cov_1k7yh72y33().s[33]++;return this.call('get tip');}/**
   * Get chain entry.
   * @param {Hash} hash
   * @returns {Promise}
   */getEntry(block){cov_1k7yh72y33().f[19]++;cov_1k7yh72y33().s[34]++;return this.call('get entry',block);}/**
   * Get hashes.
   * @param {Number} [start=-1]
   * @param {Number} [end=-1]
   * @returns {Promise}
   */getHashes(start,end){cov_1k7yh72y33().f[20]++;cov_1k7yh72y33().s[35]++;return this.call('get hashes',start,end);}/**
   * Send a transaction. Do not wait for promise.
   * @param {TX} tx
   * @returns {Promise}
   */send(tx){cov_1k7yh72y33().f[21]++;cov_1k7yh72y33().s[36]++;assert(Buffer.isBuffer(tx));cov_1k7yh72y33().s[37]++;return this.call('send',tx);}/**
   * Set bloom filter.
   * @param {Bloom} filter
   * @returns {Promise}
   */setFilter(filter){cov_1k7yh72y33().f[22]++;cov_1k7yh72y33().s[38]++;assert(Buffer.isBuffer(filter));cov_1k7yh72y33().s[39]++;return this.call('set filter',filter);}/**
   * Add data to filter.
   * @param {Buffer} data
   * @returns {Promise}
   */addFilter(chunks){cov_1k7yh72y33().f[23]++;cov_1k7yh72y33().s[40]++;if(!Array.isArray(chunks)){cov_1k7yh72y33().b[3][0]++;cov_1k7yh72y33().s[41]++;chunks=[chunks];}else{cov_1k7yh72y33().b[3][1]++;}cov_1k7yh72y33().s[42]++;return this.call('add filter',chunks);}/**
   * Reset filter.
   * @returns {Promise}
   */resetFilter(){cov_1k7yh72y33().f[24]++;cov_1k7yh72y33().s[43]++;return this.call('reset filter');}/**
   * Estimate smart fee.
   * @param {Number?} blocks
   * @returns {Promise}
   */estimateFee(blocks){cov_1k7yh72y33().f[25]++;cov_1k7yh72y33().s[44]++;assert((cov_1k7yh72y33().b[4][0]++,blocks==null)||(cov_1k7yh72y33().b[4][1]++,typeof blocks==='number'));let query=(cov_1k7yh72y33().s[45]++,'/fee');cov_1k7yh72y33().s[46]++;if(blocks!=null){cov_1k7yh72y33().b[5][0]++;cov_1k7yh72y33().s[47]++;query+=`?blocks=${blocks}`;}else{cov_1k7yh72y33().b[5][1]++;}cov_1k7yh72y33().s[48]++;return this.get(query);}/**
   * Rescan for any missed transactions.
   * @param {Number|Hash} start - Start block.
   * @returns {Promise}
   */rescan(start){cov_1k7yh72y33().f[26]++;cov_1k7yh72y33().s[49]++;if(start==null){cov_1k7yh72y33().b[6][0]++;cov_1k7yh72y33().s[50]++;start=0;}else{cov_1k7yh72y33().b[6][1]++;}cov_1k7yh72y33().s[51]++;assert((cov_1k7yh72y33().b[7][0]++,typeof start==='number')||(cov_1k7yh72y33().b[7][1]++,typeof start==='string'));cov_1k7yh72y33().s[52]++;return this.call('rescan',start);}}/*
 * Expose
 */cov_1k7yh72y33().s[53]++;module.exports=NodeClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
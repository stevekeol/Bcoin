/*!
 * blockstore/abstract.js - abstract blockstore for bcoin
 * Copyright (c) 2019, Braydon Fuller (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_2mctnmvekq(){var path="E:\\Projects\\Test\\bcoin\\lib\\blockstore\\abstract.js";var hash="204edff4f54362714a38445c4dc758e90dcd589a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\blockstore\\abstract.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:30}},"1":{start:{line:25,column:4},end:{line:25,column:33}},"2":{start:{line:27,column:4},end:{line:30,column:56}},"3":{start:{line:28,column:6},end:{line:28,column:62}},"4":{start:{line:30,column:6},end:{line:30,column:56}},"5":{start:{line:40,column:4},end:{line:40,column:40}},"6":{start:{line:50,column:4},end:{line:50,column:40}},"7":{start:{line:60,column:4},end:{line:60,column:40}},"8":{start:{line:70,column:4},end:{line:70,column:40}},"9":{start:{line:79,column:4},end:{line:79,column:40}},"10":{start:{line:88,column:4},end:{line:88,column:40}},"11":{start:{line:97,column:4},end:{line:97,column:40}},"12":{start:{line:106,column:4},end:{line:106,column:40}},"13":{start:{line:115,column:4},end:{line:115,column:40}},"14":{start:{line:124,column:4},end:{line:124,column:40}},"15":{start:{line:133,column:4},end:{line:133,column:40}},"16":{start:{line:143,column:4},end:{line:143,column:40}},"17":{start:{line:152,column:4},end:{line:152,column:40}},"18":{start:{line:161,column:4},end:{line:161,column:40}},"19":{start:{line:170,column:4},end:{line:170,column:40}},"20":{start:{line:179,column:4},end:{line:179,column:40}},"21":{start:{line:189,column:4},end:{line:189,column:40}},"22":{start:{line:199,column:4},end:{line:199,column:40}},"23":{start:{line:209,column:4},end:{line:209,column:40}},"24":{start:{line:218,column:4},end:{line:218,column:40}},"25":{start:{line:226,column:0},end:{line:226,column:36}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:24,column:2},end:{line:24,column:3}},loc:{start:{line:24,column:23},end:{line:31,column:3}},line:24},"1":{name:"(anonymous_1)",decl:{start:{line:39,column:2},end:{line:39,column:3}},loc:{start:{line:39,column:17},end:{line:41,column:3}},line:39},"2":{name:"(anonymous_2)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:15},end:{line:51,column:3}},line:49},"3":{name:"(anonymous_3)",decl:{start:{line:59,column:2},end:{line:59,column:3}},loc:{start:{line:59,column:16},end:{line:61,column:3}},line:59},"4":{name:"(anonymous_4)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:32},end:{line:71,column:3}},line:69},"5":{name:"(anonymous_5)",decl:{start:{line:78,column:2},end:{line:78,column:3}},loc:{start:{line:78,column:30},end:{line:80,column:3}},line:78},"6":{name:"(anonymous_6)",decl:{start:{line:87,column:2},end:{line:87,column:3}},loc:{start:{line:87,column:32},end:{line:89,column:3}},line:87},"7":{name:"(anonymous_7)",decl:{start:{line:96,column:2},end:{line:96,column:3}},loc:{start:{line:96,column:26},end:{line:98,column:3}},line:96},"8":{name:"(anonymous_8)",decl:{start:{line:105,column:2},end:{line:105,column:3}},loc:{start:{line:105,column:25},end:{line:107,column:3}},line:105},"9":{name:"(anonymous_9)",decl:{start:{line:114,column:2},end:{line:114,column:3}},loc:{start:{line:114,column:25},end:{line:116,column:3}},line:114},"10":{name:"(anonymous_10)",decl:{start:{line:123,column:2},end:{line:123,column:3}},loc:{start:{line:123,column:31},end:{line:125,column:3}},line:123},"11":{name:"(anonymous_11)",decl:{start:{line:132,column:2},end:{line:132,column:3}},loc:{start:{line:132,column:23},end:{line:134,column:3}},line:132},"12":{name:"(anonymous_12)",decl:{start:{line:142,column:2},end:{line:142,column:3}},loc:{start:{line:142,column:33},end:{line:144,column:3}},line:142},"13":{name:"(anonymous_13)",decl:{start:{line:151,column:2},end:{line:151,column:3}},loc:{start:{line:151,column:26},end:{line:153,column:3}},line:151},"14":{name:"(anonymous_14)",decl:{start:{line:160,column:2},end:{line:160,column:3}},loc:{start:{line:160,column:24},end:{line:162,column:3}},line:160},"15":{name:"(anonymous_15)",decl:{start:{line:169,column:2},end:{line:169,column:3}},loc:{start:{line:169,column:26},end:{line:171,column:3}},line:169},"16":{name:"(anonymous_16)",decl:{start:{line:178,column:2},end:{line:178,column:3}},loc:{start:{line:178,column:20},end:{line:180,column:3}},line:178},"17":{name:"(anonymous_17)",decl:{start:{line:188,column:2},end:{line:188,column:3}},loc:{start:{line:188,column:24},end:{line:190,column:3}},line:188},"18":{name:"(anonymous_18)",decl:{start:{line:198,column:2},end:{line:198,column:3}},loc:{start:{line:198,column:22},end:{line:200,column:3}},line:198},"19":{name:"(anonymous_19)",decl:{start:{line:208,column:2},end:{line:208,column:3}},loc:{start:{line:208,column:24},end:{line:210,column:3}},line:208},"20":{name:"(anonymous_20)",decl:{start:{line:217,column:2},end:{line:217,column:3}},loc:{start:{line:217,column:18},end:{line:219,column:3}},line:217}},branchMap:{"0":{loc:{start:{line:25,column:19},end:{line:25,column:32}},type:"binary-expr",locations:[{start:{line:25,column:19},end:{line:25,column:26}},{start:{line:25,column:30},end:{line:25,column:32}}],line:25},"1":{loc:{start:{line:27,column:4},end:{line:30,column:56}},type:"if",locations:[{start:{line:27,column:4},end:{line:30,column:56}},{start:{line:27,column:4},end:{line:30,column:56}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"204edff4f54362714a38445c4dc758e90dcd589a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2mctnmvekq=function(){return actualCoverage;};}return actualCoverage;}cov_2mctnmvekq();const Logger=(cov_2mctnmvekq().s[0]++,require('blgr'));/**
 * Abstract Block Store
 *
 * @alias module:blockstore.AbstractBlockStore
 * @abstract
 */class AbstractBlockStore{/**
   * Create an abstract blockstore.
   * @constructor
   */constructor(options){cov_2mctnmvekq().f[0]++;cov_2mctnmvekq().s[1]++;this.options=(cov_2mctnmvekq().b[0][0]++,options)||(cov_2mctnmvekq().b[0][1]++,{});cov_2mctnmvekq().s[2]++;if(this.options.logger!=null){cov_2mctnmvekq().b[1][0]++;cov_2mctnmvekq().s[3]++;this.logger=this.options.logger.context('blockstore');}else{cov_2mctnmvekq().b[1][1]++;cov_2mctnmvekq().s[4]++;this.logger=Logger.global.context('blockstore');}}/**
   * This method ensures that resources are available
   * before opening.
   * @returns {Promise}
   */async ensure(){cov_2mctnmvekq().f[1]++;cov_2mctnmvekq().s[5]++;throw new Error('Abstract method.');}/**
   * This method opens any necessary resources and
   * initializes the store to be ready to be queried.
   * @returns {Promise}
   */async open(){cov_2mctnmvekq().f[2]++;cov_2mctnmvekq().s[6]++;throw new Error('Abstract method.');}/**
   * This method closes resources and prepares
   * the store to be closed.
   * @returns {Promise}
   */async close(){cov_2mctnmvekq().f[3]++;cov_2mctnmvekq().s[7]++;throw new Error('Abstract method.');}/**
   * This method stores merkle blocks including
   * all the relevant transactions.
   * @returns {Promise}
   */async writeMerkle(hash,data){cov_2mctnmvekq().f[4]++;cov_2mctnmvekq().s[8]++;throw new Error('Abstract method.');}/**
   * This method stores block undo coin data.
   * @returns {Promise}
   */async writeUndo(hash,data){cov_2mctnmvekq().f[5]++;cov_2mctnmvekq().s[9]++;throw new Error('Abstract method.');}/**
   * This method stores serialized block filter data in files.
   * @returns {Promise}
   */async writeFilter(hash,data){cov_2mctnmvekq().f[6]++;cov_2mctnmvekq().s[10]++;throw new Error('Abstract method.');}/**
   * This method stores block data.
   * @returns {Promise}
   */async write(hash,data){cov_2mctnmvekq().f[7]++;cov_2mctnmvekq().s[11]++;throw new Error('Abstract method.');}/**
   * This method reads merkle block data.
   * @returns {Promise}
   */async readMerkle(hash){cov_2mctnmvekq().f[8]++;cov_2mctnmvekq().s[12]++;throw new Error('Abstract method.');}/**
   * This method will retrieve serialized block filter data.
   * @returns {Promise}
   */async readFilter(hash){cov_2mctnmvekq().f[9]++;cov_2mctnmvekq().s[13]++;throw new Error('Abstract method.');}/**
   * This method will retrieve block filter header only.
   * @returns {Promise}
   */async readFilterHeader(hash){cov_2mctnmvekq().f[10]++;cov_2mctnmvekq().s[14]++;throw new Error('Abstract method.');}/**
   * This method will retrieve block undo coin data.
   * @returns {Promise}
   */async readUndo(hash){cov_2mctnmvekq().f[11]++;cov_2mctnmvekq().s[15]++;throw new Error('Abstract method.');}/**
   * This method will retrieve block data. Smaller portions of
   * the block can be read by using the offset and size arguments.
   * @returns {Promise}
   */async read(hash,offset,size){cov_2mctnmvekq().f[12]++;cov_2mctnmvekq().s[16]++;throw new Error('Abstract method.');}/**
   * This will free resources for storing the merkle block data.
   * @returns {Promise}
   */async pruneMerkle(hash){cov_2mctnmvekq().f[13]++;cov_2mctnmvekq().s[17]++;throw new Error('Abstract method.');}/**
   * This will free resources for storing the block undo coin data.
   * @returns {Promise}
   */async pruneUndo(hash){cov_2mctnmvekq().f[14]++;cov_2mctnmvekq().s[18]++;throw new Error('Abstract method.');}/**
   * This will free resources for storing the serialized block filter data.
   * @returns {Promise}
   */async pruneFilter(hash){cov_2mctnmvekq().f[15]++;cov_2mctnmvekq().s[19]++;throw new Error('Abstract method.');}/**
   * This will free resources for storing the block data.
   * @returns {Promise}
   */async prune(hash){cov_2mctnmvekq().f[16]++;cov_2mctnmvekq().s[20]++;throw new Error('Abstract method.');}/**
   * This will check if merkle block data has been stored
   * and is available.
   * @returns {Promise}
   */async hasMerkle(hash){cov_2mctnmvekq().f[17]++;cov_2mctnmvekq().s[21]++;throw new Error('Abstract method.');}/**
   * This will check if a block undo coin data has been stored
   * and is available.
   * @returns {Promise}
   */async hasUndo(hash){cov_2mctnmvekq().f[18]++;cov_2mctnmvekq().s[22]++;throw new Error('Abstract method.');}/**
   * This will check if a block filter has been stored
   * and is available.
   * @returns {Promise}
   */async hasFilter(hash){cov_2mctnmvekq().f[19]++;cov_2mctnmvekq().s[23]++;throw new Error('Abstract method.');}/**
   * This will check if a block has been stored and is available.
   * @returns {Promise}
   */async has(hash){cov_2mctnmvekq().f[20]++;cov_2mctnmvekq().s[24]++;throw new Error('Abstract method.');}}/*
 * Expose
 */cov_2mctnmvekq().s[25]++;module.exports=AbstractBlockStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
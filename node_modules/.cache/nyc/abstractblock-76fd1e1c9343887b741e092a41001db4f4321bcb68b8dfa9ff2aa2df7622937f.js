/*!
 * abstractblock.js - abstract block object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_2fgrv3414f(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\abstractblock.js";var hash="d7f65c93b25d05c472b5af51dd1e40f5a2f2e22c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\abstractblock.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:16},end:{line:11,column:46}},"2":{start:{line:12,column:12},end:{line:12,column:28}},"3":{start:{line:13,column:13},end:{line:13,column:37}},"4":{start:{line:14,column:16},end:{line:14,column:36}},"5":{start:{line:15,column:18},end:{line:15,column:50}},"6":{start:{line:37,column:4},end:{line:37,column:21}},"7":{start:{line:38,column:4},end:{line:38,column:41}},"8":{start:{line:39,column:4},end:{line:39,column:42}},"9":{start:{line:40,column:4},end:{line:40,column:18}},"10":{start:{line:41,column:4},end:{line:41,column:18}},"11":{start:{line:42,column:4},end:{line:42,column:19}},"12":{start:{line:44,column:4},end:{line:44,column:25}},"13":{start:{line:46,column:4},end:{line:46,column:22}},"14":{start:{line:47,column:4},end:{line:47,column:23}},"15":{start:{line:57,column:4},end:{line:57,column:47}},"16":{start:{line:58,column:4},end:{line:58,column:56}},"17":{start:{line:59,column:4},end:{line:59,column:47}},"18":{start:{line:60,column:4},end:{line:60,column:48}},"19":{start:{line:61,column:4},end:{line:61,column:50}},"20":{start:{line:62,column:4},end:{line:62,column:50}},"21":{start:{line:63,column:4},end:{line:63,column:52}},"22":{start:{line:65,column:4},end:{line:65,column:35}},"23":{start:{line:66,column:4},end:{line:66,column:39}},"24":{start:{line:67,column:4},end:{line:67,column:41}},"25":{start:{line:68,column:4},end:{line:68,column:29}},"26":{start:{line:69,column:4},end:{line:69,column:29}},"27":{start:{line:70,column:4},end:{line:70,column:31}},"28":{start:{line:72,column:4},end:{line:75,column:5}},"29":{start:{line:73,column:6},end:{line:73,column:51}},"30":{start:{line:74,column:6},end:{line:74,column:37}},"31":{start:{line:77,column:4},end:{line:77,column:16}},"32":{start:{line:87,column:4},end:{line:87,column:44}},"33":{start:{line:88,column:4},end:{line:88,column:50}},"34":{start:{line:89,column:4},end:{line:89,column:47}},"35":{start:{line:90,column:4},end:{line:90,column:48}},"36":{start:{line:91,column:4},end:{line:91,column:44}},"37":{start:{line:92,column:4},end:{line:92,column:44}},"38":{start:{line:93,column:4},end:{line:93,column:46}},"39":{start:{line:95,column:4},end:{line:95,column:32}},"40":{start:{line:96,column:4},end:{line:96,column:50}},"41":{start:{line:97,column:4},end:{line:97,column:52}},"42":{start:{line:98,column:4},end:{line:98,column:26}},"43":{start:{line:99,column:4},end:{line:99,column:26}},"44":{start:{line:100,column:4},end:{line:100,column:28}},"45":{start:{line:102,column:4},end:{line:102,column:16}},"46":{start:{line:111,column:4},end:{line:111,column:17}},"47":{start:{line:119,column:4},end:{line:119,column:22}},"48":{start:{line:120,column:4},end:{line:120,column:23}},"49":{start:{line:128,column:4},end:{line:128,column:27}},"50":{start:{line:138,column:12},end:{line:138,column:22}},"51":{start:{line:140,column:4},end:{line:144,column:5}},"52":{start:{line:141,column:6},end:{line:141,column:40}},"53":{start:{line:142,column:6},end:{line:143,column:23}},"54":{start:{line:143,column:8},end:{line:143,column:23}},"55":{start:{line:146,column:4},end:{line:154,column:5}},"56":{start:{line:147,column:16},end:{line:147,column:27}},"57":{start:{line:148,column:6},end:{line:152,column:7}},"58":{start:{line:149,column:8},end:{line:149,column:32}},"59":{start:{line:150,column:8},end:{line:151,column:28}},"60":{start:{line:151,column:10},end:{line:151,column:28}},"61":{start:{line:153,column:6},end:{line:153,column:14}},"62":{start:{line:156,column:4},end:{line:156,column:13}},"63":{start:{line:165,column:4},end:{line:165,column:50}},"64":{start:{line:175,column:4},end:{line:175,column:41}},"65":{start:{line:184,column:4},end:{line:184,column:30}},"66":{start:{line:185,column:4},end:{line:185,column:33}},"67":{start:{line:186,column:4},end:{line:186,column:34}},"68":{start:{line:187,column:4},end:{line:187,column:27}},"69":{start:{line:188,column:4},end:{line:188,column:27}},"70":{start:{line:189,column:4},end:{line:189,column:28}},"71":{start:{line:190,column:4},end:{line:190,column:14}},"72":{start:{line:199,column:4},end:{line:199,column:32}},"73":{start:{line:200,column:4},end:{line:200,column:35}},"74":{start:{line:201,column:4},end:{line:201,column:36}},"75":{start:{line:202,column:4},end:{line:202,column:29}},"76":{start:{line:203,column:4},end:{line:203,column:29}},"77":{start:{line:204,column:4},end:{line:204,column:30}},"78":{start:{line:205,column:4},end:{line:205,column:16}},"79":{start:{line:214,column:4},end:{line:215,column:19}},"80":{start:{line:215,column:6},end:{line:215,column:19}},"81":{start:{line:217,column:4},end:{line:218,column:19}},"82":{start:{line:218,column:6},end:{line:218,column:19}},"83":{start:{line:220,column:4},end:{line:220,column:16}},"84":{start:{line:229,column:4},end:{line:229,column:55}},"85":{start:{line:238,column:4},end:{line:238,column:40}},"86":{start:{line:247,column:4},end:{line:247,column:36}},"87":{start:{line:256,column:4},end:{line:256,column:57}},"88":{start:{line:264,column:0},end:{line:264,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:36,column:2},end:{line:36,column:3}},loc:{start:{line:36,column:16},end:{line:48,column:3}},line:36},"1":{name:"(anonymous_1)",decl:{start:{line:56,column:2},end:{line:56,column:3}},loc:{start:{line:56,column:24},end:{line:78,column:3}},line:56},"2":{name:"(anonymous_2)",decl:{start:{line:86,column:2},end:{line:86,column:3}},loc:{start:{line:86,column:18},end:{line:103,column:3}},line:86},"3":{name:"(anonymous_3)",decl:{start:{line:110,column:2},end:{line:110,column:3}},loc:{start:{line:110,column:13},end:{line:112,column:3}},line:110},"4":{name:"(anonymous_4)",decl:{start:{line:118,column:2},end:{line:118,column:3}},loc:{start:{line:118,column:13},end:{line:121,column:3}},line:118},"5":{name:"(anonymous_5)",decl:{start:{line:127,column:2},end:{line:127,column:3}},loc:{start:{line:127,column:12},end:{line:129,column:3}},line:127},"6":{name:"(anonymous_6)",decl:{start:{line:137,column:2},end:{line:137,column:3}},loc:{start:{line:137,column:12},end:{line:157,column:3}},line:137},"7":{name:"(anonymous_7)",decl:{start:{line:164,column:2},end:{line:164,column:3}},loc:{start:{line:164,column:11},end:{line:166,column:3}},line:164},"8":{name:"(anonymous_8)",decl:{start:{line:174,column:2},end:{line:174,column:3}},loc:{start:{line:174,column:17},end:{line:176,column:3}},line:174},"9":{name:"(anonymous_9)",decl:{start:{line:183,column:2},end:{line:183,column:3}},loc:{start:{line:183,column:16},end:{line:191,column:3}},line:183},"10":{name:"(anonymous_10)",decl:{start:{line:198,column:2},end:{line:198,column:3}},loc:{start:{line:198,column:15},end:{line:206,column:3}},line:198},"11":{name:"(anonymous_11)",decl:{start:{line:213,column:2},end:{line:213,column:3}},loc:{start:{line:213,column:11},end:{line:221,column:3}},line:213},"12":{name:"(anonymous_12)",decl:{start:{line:228,column:2},end:{line:228,column:3}},loc:{start:{line:228,column:14},end:{line:230,column:3}},line:228},"13":{name:"(anonymous_13)",decl:{start:{line:237,column:2},end:{line:237,column:3}},loc:{start:{line:237,column:15},end:{line:239,column:3}},line:237},"14":{name:"(anonymous_14)",decl:{start:{line:246,column:2},end:{line:246,column:3}},loc:{start:{line:246,column:10},end:{line:248,column:3}},line:246},"15":{name:"(anonymous_15)",decl:{start:{line:255,column:2},end:{line:255,column:3}},loc:{start:{line:255,column:10},end:{line:257,column:3}},line:255}},branchMap:{"0":{loc:{start:{line:72,column:4},end:{line:75,column:5}},type:"if",locations:[{start:{line:72,column:4},end:{line:75,column:5}},{start:{line:72,column:4},end:{line:75,column:5}}],line:72},"1":{loc:{start:{line:140,column:4},end:{line:144,column:5}},type:"if",locations:[{start:{line:140,column:4},end:{line:144,column:5}},{start:{line:140,column:4},end:{line:144,column:5}}],line:140},"2":{loc:{start:{line:142,column:6},end:{line:143,column:23}},type:"if",locations:[{start:{line:142,column:6},end:{line:143,column:23}},{start:{line:142,column:6},end:{line:143,column:23}}],line:142},"3":{loc:{start:{line:146,column:4},end:{line:154,column:5}},type:"if",locations:[{start:{line:146,column:4},end:{line:154,column:5}},{start:{line:146,column:4},end:{line:154,column:5}}],line:146},"4":{loc:{start:{line:148,column:6},end:{line:152,column:7}},type:"if",locations:[{start:{line:148,column:6},end:{line:152,column:7}},{start:{line:148,column:6},end:{line:152,column:7}}],line:148},"5":{loc:{start:{line:150,column:8},end:{line:151,column:28}},type:"if",locations:[{start:{line:150,column:8},end:{line:151,column:28}},{start:{line:150,column:8},end:{line:151,column:28}}],line:150},"6":{loc:{start:{line:214,column:4},end:{line:215,column:19}},type:"if",locations:[{start:{line:214,column:4},end:{line:215,column:19}},{start:{line:214,column:4},end:{line:215,column:19}}],line:214},"7":{loc:{start:{line:217,column:4},end:{line:218,column:19}},type:"if",locations:[{start:{line:217,column:4},end:{line:218,column:19}},{start:{line:217,column:4},end:{line:218,column:19}}],line:217}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d7f65c93b25d05c472b5af51dd1e40f5a2f2e22c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2fgrv3414f=function(){return actualCoverage;};}return actualCoverage;}cov_2fgrv3414f();const assert=(cov_2fgrv3414f().s[0]++,require('bsert'));const hash256=(cov_2fgrv3414f().s[1]++,require('bcrypto/lib/hash256'));const bio=(cov_2fgrv3414f().s[2]++,require('bufio'));const util=(cov_2fgrv3414f().s[3]++,require('../utils/util'));const InvItem=(cov_2fgrv3414f().s[4]++,require('./invitem'));const consensus=(cov_2fgrv3414f().s[5]++,require('../protocol/consensus'));/**
 * Abstract Block
 * The class which all block-like objects inherit from.
 * @alias module:primitives.AbstractBlock
 * @abstract
 * @property {Number} version
 * @property {Hash} prevBlock
 * @property {Hash} merkleRoot
 * @property {Number} time
 * @property {Number} bits
 * @property {Number} nonce
 */class AbstractBlock{/**
   * Create an abstract block.
   * @constructor
   */constructor(){cov_2fgrv3414f().f[0]++;cov_2fgrv3414f().s[6]++;this.version=1;cov_2fgrv3414f().s[7]++;this.prevBlock=consensus.ZERO_HASH;cov_2fgrv3414f().s[8]++;this.merkleRoot=consensus.ZERO_HASH;cov_2fgrv3414f().s[9]++;this.time=0;cov_2fgrv3414f().s[10]++;this.bits=0;cov_2fgrv3414f().s[11]++;this.nonce=0;cov_2fgrv3414f().s[12]++;this.mutable=false;cov_2fgrv3414f().s[13]++;this._hash=null;cov_2fgrv3414f().s[14]++;this._hhash=null;}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */parseOptions(options){cov_2fgrv3414f().f[1]++;cov_2fgrv3414f().s[15]++;assert(options,'Block data is required.');cov_2fgrv3414f().s[16]++;assert(options.version>>>0===options.version);cov_2fgrv3414f().s[17]++;assert(Buffer.isBuffer(options.prevBlock));cov_2fgrv3414f().s[18]++;assert(Buffer.isBuffer(options.merkleRoot));cov_2fgrv3414f().s[19]++;assert(options.time>>>0===options.time);cov_2fgrv3414f().s[20]++;assert(options.bits>>>0===options.bits);cov_2fgrv3414f().s[21]++;assert(options.nonce>>>0===options.nonce);cov_2fgrv3414f().s[22]++;this.version=options.version;cov_2fgrv3414f().s[23]++;this.prevBlock=options.prevBlock;cov_2fgrv3414f().s[24]++;this.merkleRoot=options.merkleRoot;cov_2fgrv3414f().s[25]++;this.time=options.time;cov_2fgrv3414f().s[26]++;this.bits=options.bits;cov_2fgrv3414f().s[27]++;this.nonce=options.nonce;cov_2fgrv3414f().s[28]++;if(options.mutable!=null){cov_2fgrv3414f().b[0][0]++;cov_2fgrv3414f().s[29]++;assert(typeof options.mutable==='boolean');cov_2fgrv3414f().s[30]++;this.mutable=options.mutable;}else{cov_2fgrv3414f().b[0][1]++;}cov_2fgrv3414f().s[31]++;return this;}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   */parseJSON(json){cov_2fgrv3414f().f[2]++;cov_2fgrv3414f().s[32]++;assert(json,'Block data is required.');cov_2fgrv3414f().s[33]++;assert(json.version>>>0===json.version);cov_2fgrv3414f().s[34]++;assert(typeof json.prevBlock==='string');cov_2fgrv3414f().s[35]++;assert(typeof json.merkleRoot==='string');cov_2fgrv3414f().s[36]++;assert(json.time>>>0===json.time);cov_2fgrv3414f().s[37]++;assert(json.bits>>>0===json.bits);cov_2fgrv3414f().s[38]++;assert(json.nonce>>>0===json.nonce);cov_2fgrv3414f().s[39]++;this.version=json.version;cov_2fgrv3414f().s[40]++;this.prevBlock=util.fromRev(json.prevBlock);cov_2fgrv3414f().s[41]++;this.merkleRoot=util.fromRev(json.merkleRoot);cov_2fgrv3414f().s[42]++;this.time=json.time;cov_2fgrv3414f().s[43]++;this.bits=json.bits;cov_2fgrv3414f().s[44]++;this.nonce=json.nonce;cov_2fgrv3414f().s[45]++;return this;}/**
   * Test whether the block is a memblock.
   * @returns {Boolean}
   */isMemory(){cov_2fgrv3414f().f[3]++;cov_2fgrv3414f().s[46]++;return false;}/**
   * Clear any cached values (abstract).
   */_refresh(){cov_2fgrv3414f().f[4]++;cov_2fgrv3414f().s[47]++;this._hash=null;cov_2fgrv3414f().s[48]++;this._hhash=null;}/**
   * Clear any cached values.
   */refresh(){cov_2fgrv3414f().f[5]++;cov_2fgrv3414f().s[49]++;return this._refresh();}/**
   * Hash the block headers.
   * @param {String?} enc - Can be `'hex'` or `null`.
   * @returns {Hash|Buffer} hash
   */hash(enc){cov_2fgrv3414f().f[6]++;let h=(cov_2fgrv3414f().s[50]++,this._hash);cov_2fgrv3414f().s[51]++;if(!h){cov_2fgrv3414f().b[1][0]++;cov_2fgrv3414f().s[52]++;h=hash256.digest(this.toHead());cov_2fgrv3414f().s[53]++;if(!this.mutable){cov_2fgrv3414f().b[2][0]++;cov_2fgrv3414f().s[54]++;this._hash=h;}else{cov_2fgrv3414f().b[2][1]++;}}else{cov_2fgrv3414f().b[1][1]++;}cov_2fgrv3414f().s[55]++;if(enc==='hex'){cov_2fgrv3414f().b[3][0]++;let hex=(cov_2fgrv3414f().s[56]++,this._hhash);cov_2fgrv3414f().s[57]++;if(!hex){cov_2fgrv3414f().b[4][0]++;cov_2fgrv3414f().s[58]++;hex=h.toString('hex');cov_2fgrv3414f().s[59]++;if(!this.mutable){cov_2fgrv3414f().b[5][0]++;cov_2fgrv3414f().s[60]++;this._hhash=hex;}else{cov_2fgrv3414f().b[5][1]++;}}else{cov_2fgrv3414f().b[4][1]++;}cov_2fgrv3414f().s[61]++;h=hex;}else{cov_2fgrv3414f().b[3][1]++;}cov_2fgrv3414f().s[62]++;return h;}/**
   * Serialize the block headers.
   * @returns {Buffer}
   */toHead(){cov_2fgrv3414f().f[7]++;cov_2fgrv3414f().s[63]++;return this.writeHead(bio.write(80)).render();}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromHead(data){cov_2fgrv3414f().f[8]++;cov_2fgrv3414f().s[64]++;return this.readHead(bio.read(data));}/**
   * Serialize the block headers.
   * @param {BufferWriter} bw
   */writeHead(bw){cov_2fgrv3414f().f[9]++;cov_2fgrv3414f().s[65]++;bw.writeU32(this.version);cov_2fgrv3414f().s[66]++;bw.writeHash(this.prevBlock);cov_2fgrv3414f().s[67]++;bw.writeHash(this.merkleRoot);cov_2fgrv3414f().s[68]++;bw.writeU32(this.time);cov_2fgrv3414f().s[69]++;bw.writeU32(this.bits);cov_2fgrv3414f().s[70]++;bw.writeU32(this.nonce);cov_2fgrv3414f().s[71]++;return bw;}/**
   * Parse the block headers.
   * @param {BufferReader} br
   */readHead(br){cov_2fgrv3414f().f[10]++;cov_2fgrv3414f().s[72]++;this.version=br.readU32();cov_2fgrv3414f().s[73]++;this.prevBlock=br.readHash();cov_2fgrv3414f().s[74]++;this.merkleRoot=br.readHash();cov_2fgrv3414f().s[75]++;this.time=br.readU32();cov_2fgrv3414f().s[76]++;this.bits=br.readU32();cov_2fgrv3414f().s[77]++;this.nonce=br.readU32();cov_2fgrv3414f().s[78]++;return this;}/**
   * Verify the block.
   * @returns {Boolean}
   */verify(){cov_2fgrv3414f().f[11]++;cov_2fgrv3414f().s[79]++;if(!this.verifyPOW()){cov_2fgrv3414f().b[6][0]++;cov_2fgrv3414f().s[80]++;return false;}else{cov_2fgrv3414f().b[6][1]++;}cov_2fgrv3414f().s[81]++;if(!this.verifyBody()){cov_2fgrv3414f().b[7][0]++;cov_2fgrv3414f().s[82]++;return false;}else{cov_2fgrv3414f().b[7][1]++;}cov_2fgrv3414f().s[83]++;return true;}/**
   * Verify proof-of-work.
   * @returns {Boolean}
   */verifyPOW(){cov_2fgrv3414f().f[12]++;cov_2fgrv3414f().s[84]++;return consensus.verifyPOW(this.hash(),this.bits);}/**
   * Verify the block.
   * @returns {Boolean}
   */verifyBody(){cov_2fgrv3414f().f[13]++;cov_2fgrv3414f().s[85]++;throw new Error('Abstract method.');}/**
   * Get little-endian block hash.
   * @returns {Hash}
   */rhash(){cov_2fgrv3414f().f[14]++;cov_2fgrv3414f().s[86]++;return util.revHex(this.hash());}/**
   * Convert the block to an inv item.
   * @returns {InvItem}
   */toInv(){cov_2fgrv3414f().f[15]++;cov_2fgrv3414f().s[87]++;return new InvItem(InvItem.types.BLOCK,this.hash());}}/*
 * Expose
 */cov_2fgrv3414f().s[88]++;module.exports=AbstractBlock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFic3RyYWN0YmxvY2suanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsImhhc2gyNTYiLCJiaW8iLCJ1dGlsIiwiSW52SXRlbSIsImNvbnNlbnN1cyIsIkFic3RyYWN0QmxvY2siLCJjb25zdHJ1Y3RvciIsInZlcnNpb24iLCJwcmV2QmxvY2siLCJaRVJPX0hBU0giLCJtZXJrbGVSb290IiwidGltZSIsImJpdHMiLCJub25jZSIsIm11dGFibGUiLCJfaGFzaCIsIl9oaGFzaCIsInBhcnNlT3B0aW9ucyIsIm9wdGlvbnMiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInBhcnNlSlNPTiIsImpzb24iLCJmcm9tUmV2IiwiaXNNZW1vcnkiLCJfcmVmcmVzaCIsInJlZnJlc2giLCJoYXNoIiwiZW5jIiwiaCIsImRpZ2VzdCIsInRvSGVhZCIsImhleCIsInRvU3RyaW5nIiwid3JpdGVIZWFkIiwid3JpdGUiLCJyZW5kZXIiLCJmcm9tSGVhZCIsImRhdGEiLCJyZWFkSGVhZCIsInJlYWQiLCJidyIsIndyaXRlVTMyIiwid3JpdGVIYXNoIiwiYnIiLCJyZWFkVTMyIiwicmVhZEhhc2giLCJ2ZXJpZnkiLCJ2ZXJpZnlQT1ciLCJ2ZXJpZnlCb2R5IiwiRXJyb3IiLCJyaGFzaCIsInJldkhleCIsInRvSW52IiwidHlwZXMiLCJCTE9DSyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUVBLGEscXRVQVFZOzJGQU5aLEtBQU1BLENBQUFBLE1BQU0sMEJBQUdDLE9BQU8sQ0FBQyxPQUFELENBQVYsQ0FBWixDQUNBLEtBQU1DLENBQUFBLE9BQU8sMEJBQUdELE9BQU8sQ0FBQyxxQkFBRCxDQUFWLENBQWIsQ0FDQSxLQUFNRSxDQUFBQSxHQUFHLDBCQUFHRixPQUFPLENBQUMsT0FBRCxDQUFWLENBQVQsQ0FDQSxLQUFNRyxDQUFBQSxJQUFJLDBCQUFHSCxPQUFPLENBQUMsZUFBRCxDQUFWLENBQVYsQ0FD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LENBRUQ7QUFDRjtBQUNBO0FBQ0EsS0FFRUQsU0FBUyxFQUFHLG1EQUNWLE1BQU81QyxDQUFBQSxTQUFTLENBQUM0QyxTQUFWLENBQW9CLEtBQUtyQixJQUFMLEVBQXBCLENBQWlDLEtBQUtmLElBQXRDLENBQVAsQ0FDRCxDQUVEO0FBQ0Y7QUFDQTtBQUNBLEtBRUVxQyxVQUFVLEVBQUcsbURBQ1gsS0FBTSxJQUFJQyxDQUFBQSxLQUFKLENBQVUsa0JBQVYsQ0FBTixDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0EsS0FFRUMsS0FBSyxFQUFHLG1EQUNOLE1BQU9qRCxDQUFBQSxJQUFJLENBQUNrRCxNQUFMLENBQVksS0FBS3pCLElBQUwsRUFBWixDQUFQLENBQ0QsQ0FFRDtBQUNGO0FBQ0E7QUFDQSxLQUVFMEIsS0FBSyxFQUFHLG1EQUNOLE1BQU8sSUFBSWxELENBQUFBLE9BQUosQ0FBWUEsT0FBTyxDQUFDbUQsS0FBUixDQUFjQyxLQUExQixDQUFpQyxLQUFLNUIsSUFBTCxFQUFqQyxDQUFQLENBQ0QsQ0FuT2lCLENBc09wQjtBQUNBO0FBQ0EsRyx5QkFFQTZCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQnBELGFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGFic3RyYWN0YmxvY2suanMgLSBhYnN0cmFjdCBibG9jayBvYmplY3QgZm9yIGJjb2luXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBGZWRvciBJbmR1dG55IChNSVQgTGljZW5zZSlcclxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIENocmlzdG9waGVyIEplZmZyZXkgKE1JVCBMaWNlbnNlKS5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2Jjb2luLW9yZy9iY29pblxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2JzZXJ0Jyk7XHJcbmNvbnN0IGhhc2gyNTYgPSByZXF1aXJlKCdiY3J5cHRvL2xpYi9oYXNoMjU2Jyk7XHJcbmNvbnN0IGJpbyA9IHJlcXVpcmUoJ2J1ZmlvJyk7XHJcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuLi91dGlscy91dGlsJyk7XHJcbmNvbnN0IEludkl0ZW0gPSByZXF1aXJlKCcuL2ludml0ZW0nKTtcclxuY29uc3QgY29uc2Vuc3VzID0gcmVxdWlyZSgnLi4vcHJvdG9jb2wvY29uc2Vuc3VzJyk7XHJcblxyXG4vKipcclxuICogQWJzdHJhY3QgQmxvY2tcclxuICogVGhlIGNsYXNzIHdoaWNoIGFsbCBibG9jay1saWtlIG9iamVjdHMgaW5oZXJpdCBmcm9tLlxyXG4gKiBAYWxpYXMgbW9kdWxlOnByaW1pdGl2ZXMuQWJzdHJhY3RCbG9ja1xyXG4gKiBAYWJzdHJhY3RcclxuICogQHByb3BlcnR5IHtOdW1iZXJ9IHZlcnNpb25cclxuICogQHByb3BlcnR5IHtIYXNofSBwcmV2QmxvY2tcclxuICogQHByb3BlcnR5IHtIYXNofSBtZXJrbGVSb290XHJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0aW1lXHJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBiaXRzXHJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBub25jZVxyXG4gKi9cclxuXHJcbmNsYXNzIEFic3RyYWN0QmxvY2sge1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhbiBhYnN0cmFjdCBibG9jay5cclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKi9cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnZlcnNpb24gPSAxO1xyXG4gICAgdGhpcy5wcmV2QmxvY2sgPSBjb25zZW5zdXMuWkVST19IQVNIO1xyXG4gICAgdGhpcy5tZXJrbGVSb290ID0gY29uc2Vuc3VzLlpFUk9fSEFTSDtcclxuICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICB0aGlzLmJpdHMgPSAwO1xyXG4gICAgdGhpcy5ub25jZSA9IDA7XHJcblxyXG4gICAgdGhpcy5tdXRhYmxlID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5faGFzaCA9IG51bGw7XHJcbiAgICB0aGlzLl9oaGFzaCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmplY3QgcHJvcGVydGllcyBmcm9tIG9wdGlvbnMgb2JqZWN0LlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAgKi9cclxuXHJcbiAgcGFyc2VPcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIGFzc2VydChvcHRpb25zLCAnQmxvY2sgZGF0YSBpcyByZXF1aXJlZC4nKTtcclxuICAgIGFzc2VydCgob3B0aW9ucy52ZXJzaW9uID4+PiAwKSA9PT0gb3B0aW9ucy52ZXJzaW9uKTtcclxuICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIob3B0aW9ucy5wcmV2QmxvY2spKTtcclxuICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIob3B0aW9ucy5tZXJrbGVSb290KSk7XHJcbiAgICBhc3NlcnQoKG9wdGlvbnMudGltZSA+Pj4gMCkgPT09IG9wdGlvbnMudGltZSk7XHJcbiAgICBhc3NlcnQoKG9wdGlvbnMuYml0cyA+Pj4gMCkgPT09IG9wdGlvbnMuYml0cyk7XHJcbiAgICBhc3NlcnQoKG9wdGlvbnMubm9uY2UgPj4+IDApID09PSBvcHRpb25zLm5vbmNlKTtcclxuXHJcbiAgICB0aGlzLnZlcnNpb24gPSBvcHRpb25zLnZlcnNpb247XHJcbiAgICB0aGlzLnByZXZCbG9jayA9IG9wdGlvbnMucHJldkJsb2NrO1xyXG4gICAgdGhpcy5tZXJrbGVSb290ID0gb3B0aW9ucy5tZXJrbGVSb290O1xyXG4gICAgdGhpcy50aW1lID0gb3B0aW9ucy50aW1lO1xyXG4gICAgdGhpcy5iaXRzID0gb3B0aW9ucy5iaXRzO1xyXG4gICAgdGhpcy5ub25jZSA9IG9wdGlvbnMubm9uY2U7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMubXV0YWJsZSAhPSBudWxsKSB7XHJcbiAgICAgIGFzc2VydCh0eXBlb2Ygb3B0aW9ucy5tdXRhYmxlID09PSAnYm9vbGVhbicpO1xyXG4gICAgICB0aGlzLm11dGFibGUgPSBvcHRpb25zLm11dGFibGU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmplY3QgcHJvcGVydGllcyBmcm9tIGpzb24gb2JqZWN0LlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb25cclxuICAgKi9cclxuXHJcbiAgcGFyc2VKU09OKGpzb24pIHtcclxuICAgIGFzc2VydChqc29uLCAnQmxvY2sgZGF0YSBpcyByZXF1aXJlZC4nKTtcclxuICAgIGFzc2VydCgoanNvbi52ZXJzaW9uID4+PiAwKSA9PT0ganNvbi52ZXJzaW9uKTtcclxuICAgIGFzc2VydCh0eXBlb2YganNvbi5wcmV2QmxvY2sgPT09ICdzdHJpbmcnKTtcclxuICAgIGFzc2VydCh0eXBlb2YganNvbi5tZXJrbGVSb290ID09PSAnc3RyaW5nJyk7XHJcbiAgICBhc3NlcnQoKGpzb24udGltZSA+Pj4gMCkgPT09IGpzb24udGltZSk7XHJcbiAgICBhc3NlcnQoKGpzb24uYml0cyA+Pj4gMCkgPT09IGpzb24uYml0cyk7XHJcbiAgICBhc3NlcnQoKGpzb24ubm9uY2UgPj4+IDApID09PSBqc29uLm5vbmNlKTtcclxuXHJcbiAgICB0aGlzLnZlcnNpb24gPSBqc29uLnZlcnNpb247XHJcbiAgICB0aGlzLnByZXZCbG9jayA9IHV0aWwuZnJvbVJldihqc29uLnByZXZCbG9jayk7XHJcbiAgICB0aGlzLm1lcmtsZVJvb3QgPSB1dGlsLmZyb21SZXYoanNvbi5tZXJrbGVSb290KTtcclxuICAgIHRoaXMudGltZSA9IGpzb24udGltZTtcclxuICAgIHRoaXMuYml0cyA9IGpzb24uYml0cztcclxuICAgIHRoaXMubm9uY2UgPSBqc29uLm5vbmNlO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCB3aGV0aGVyIHRoZSBibG9jayBpcyBhIG1lbWJsb2NrLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAqL1xyXG5cclxuICBpc01lbW9yeSgpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFyIGFueSBjYWNoZWQgdmFsdWVzIChhYnN0cmFjdCkuXHJcbiAgICovXHJcblxyXG4gIF9yZWZyZXNoKCkge1xyXG4gICAgdGhpcy5faGFzaCA9IG51bGw7XHJcbiAgICB0aGlzLl9oaGFzaCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhciBhbnkgY2FjaGVkIHZhbHVlcy5cclxuICAgKi9cclxuXHJcbiAgcmVmcmVzaCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9yZWZyZXNoKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYXNoIHRoZSBibG9jayBoZWFkZXJzLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nP30gZW5jIC0gQ2FuIGJlIGAnaGV4J2Agb3IgYG51bGxgLlxyXG4gICAqIEByZXR1cm5zIHtIYXNofEJ1ZmZlcn0gaGFzaFxyXG4gICAqL1xyXG5cclxuICBoYXNoKGVuYykge1xyXG4gICAgbGV0IGggPSB0aGlzLl9oYXNoO1xyXG5cclxuICAgIGlmICghaCkge1xyXG4gICAgICBoID0gaGFzaDI1Ni5kaWdlc3QodGhpcy50b0hlYWQoKSk7XHJcbiAgICAgIGlmICghdGhpcy5tdXRhYmxlKVxyXG4gICAgICAgIHRoaXMuX2hhc2ggPSBoO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlbmMgPT09ICdoZXgnKSB7XHJcbiAgICAgIGxldCBoZXggPSB0aGlzLl9oaGFzaDtcclxuICAgICAgaWYgKCFoZXgpIHtcclxuICAgICAgICBoZXggPSBoLnRvU3RyaW5nKCdoZXgnKTtcclxuICAgICAgICBpZiAoIXRoaXMubXV0YWJsZSlcclxuICAgICAgICAgIHRoaXMuX2hoYXNoID0gaGV4O1xyXG4gICAgICB9XHJcbiAgICAgIGggPSBoZXg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXJpYWxpemUgdGhlIGJsb2NrIGhlYWRlcnMuXHJcbiAgICogQHJldHVybnMge0J1ZmZlcn1cclxuICAgKi9cclxuXHJcbiAgdG9IZWFkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMud3JpdGVIZWFkKGJpby53cml0ZSg4MCkpLnJlbmRlcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5qZWN0IHByb3BlcnRpZXMgZnJvbSBzZXJpYWxpemVkIGRhdGEuXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YVxyXG4gICAqL1xyXG5cclxuICBmcm9tSGVhZChkYXRhKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZWFkSGVhZChiaW8ucmVhZChkYXRhKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXJpYWxpemUgdGhlIGJsb2NrIGhlYWRlcnMuXHJcbiAgICogQHBhcmFtIHtCdWZmZXJXcml0ZXJ9IGJ3XHJcbiAgICovXHJcblxyXG4gIHdyaXRlSGVhZChidykge1xyXG4gICAgYncud3JpdGVVMzIodGhpcy52ZXJzaW9uKTtcclxuICAgIGJ3LndyaXRlSGFzaCh0aGlzLnByZXZCbG9jayk7XHJcbiAgICBidy53cml0ZUhhc2godGhpcy5tZXJrbGVSb290KTtcclxuICAgIGJ3LndyaXRlVTMyKHRoaXMudGltZSk7XHJcbiAgICBidy53cml0ZVUzMih0aGlzLmJpdHMpO1xyXG4gICAgYncud3JpdGVVMzIodGhpcy5ub25jZSk7XHJcbiAgICByZXR1cm4gYnc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQYXJzZSB0aGUgYmxvY2sgaGVhZGVycy5cclxuICAgKiBAcGFyYW0ge0J1ZmZlclJlYWRlcn0gYnJcclxuICAgKi9cclxuXHJcbiAgcmVhZEhlYWQoYnIpIHtcclxuICAgIHRoaXMudmVyc2lvbiA9IGJyLnJlYWRVMzIoKTtcclxuICAgIHRoaXMucHJldkJsb2NrID0gYnIucmVhZEhhc2goKTtcclxuICAgIHRoaXMubWVya2xlUm9vdCA9IGJyLnJlYWRIYXNoKCk7XHJcbiAgICB0aGlzLnRpbWUgPSBici5yZWFkVTMyKCk7XHJcbiAgICB0aGlzLmJpdHMgPSBici5yZWFkVTMyKCk7XHJcbiAgICB0aGlzLm5vbmNlID0gYnIucmVhZFUzMigpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZnkgdGhlIGJsb2NrLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAqL1xyXG5cclxuICB2ZXJpZnkoKSB7XHJcbiAgICBpZiAoIXRoaXMudmVyaWZ5UE9XKCkpXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBpZiAoIXRoaXMudmVyaWZ5Qm9keSgpKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZnkgcHJvb2Ytb2Ytd29yay5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgKi9cclxuXHJcbiAgdmVyaWZ5UE9XKCkge1xyXG4gICAgcmV0dXJuIGNvbnNlbnN1cy52ZXJpZnlQT1codGhpcy5oYXNoKCksIHRoaXMuYml0cyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWZXJpZnkgdGhlIGJsb2NrLlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAqL1xyXG5cclxuICB2ZXJpZnlCb2R5KCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdBYnN0cmFjdCBtZXRob2QuJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgbGl0dGxlLWVuZGlhbiBibG9jayBoYXNoLlxyXG4gICAqIEByZXR1cm5zIHtIYXNofVxyXG4gICAqL1xyXG5cclxuICByaGFzaCgpIHtcclxuICAgIHJldHVybiB1dGlsLnJldkhleCh0aGlzLmhhc2goKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0IHRoZSBibG9jayB0byBhbiBpbnYgaXRlbS5cclxuICAgKiBAcmV0dXJucyB7SW52SXRlbX1cclxuICAgKi9cclxuXHJcbiAgdG9JbnYoKSB7XHJcbiAgICByZXR1cm4gbmV3IEludkl0ZW0oSW52SXRlbS50eXBlcy5CTE9DSywgdGhpcy5oYXNoKCkpO1xyXG4gIH1cclxufVxyXG5cclxuLypcclxuICogRXhwb3NlXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBYnN0cmFjdEJsb2NrO1xyXG4iXX0=
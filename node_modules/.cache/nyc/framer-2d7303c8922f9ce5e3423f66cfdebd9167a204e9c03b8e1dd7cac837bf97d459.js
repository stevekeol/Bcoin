/*!
 * framer.js - packet framer for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_2erz10uq8q(){var path="E:\\Projects\\Test\\bcoin\\lib\\net\\framer.js";var hash="bf43da8cdd4b3bd840470054c961f315421bde8b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\net\\framer.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:16},end:{line:11,column:46}},"2":{start:{line:12,column:16},end:{line:12,column:46}},"3":{start:{line:27,column:4},end:{line:27,column:40}},"4":{start:{line:39,column:4},end:{line:39,column:35}},"5":{start:{line:40,column:4},end:{line:40,column:28}},"6":{start:{line:41,column:4},end:{line:41,column:41}},"7":{start:{line:43,column:16},end:{line:43,column:55}},"8":{start:{line:46,column:4},end:{line:46,column:51}},"9":{start:{line:49,column:4},end:{line:49,column:31}},"10":{start:{line:51,column:4},end:{line:52,column:17}},"11":{start:{line:51,column:17},end:{line:51,column:31}},"12":{start:{line:52,column:6},end:{line:52,column:17}},"13":{start:{line:55,column:4},end:{line:55,column:48}},"14":{start:{line:57,column:4},end:{line:58,column:41}},"15":{start:{line:58,column:6},end:{line:58,column:41}},"16":{start:{line:61,column:4},end:{line:61,column:33}},"17":{start:{line:63,column:4},end:{line:63,column:26}},"18":{start:{line:65,column:4},end:{line:65,column:15}},"19":{start:{line:73,column:0},end:{line:73,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:26,column:2},end:{line:26,column:3}},loc:{start:{line:26,column:23},end:{line:28,column:3}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:38,column:2},end:{line:38,column:3}},loc:{start:{line:38,column:33},end:{line:66,column:3}},line:38}},branchMap:{"0":{loc:{start:{line:57,column:4},end:{line:58,column:41}},type:"if",locations:[{start:{line:57,column:4},end:{line:58,column:41}},{start:{line:57,column:4},end:{line:58,column:41}}],line:57}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"bf43da8cdd4b3bd840470054c961f315421bde8b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2erz10uq8q=function(){return actualCoverage;};}return actualCoverage;}cov_2erz10uq8q();const assert=(cov_2erz10uq8q().s[0]++,require('bsert'));const Network=(cov_2erz10uq8q().s[1]++,require('../protocol/network'));const hash256=(cov_2erz10uq8q().s[2]++,require('bcrypto/lib/hash256'));/**
 * Protocol Message Framer
 * @alias module:net.Framer
 */class Framer{/**
   * Create a framer.
   * @constructor
   * @param {Network} network
   */constructor(network){cov_2erz10uq8q().f[0]++;cov_2erz10uq8q().s[3]++;this.network=Network.get(network);}/**
   * Frame a payload with a header.
   * @param {String} cmd - Packet type.
   * @param {Buffer} payload
   * @param {Buffer?} checksum - Precomputed checksum.
   * @returns {Buffer} Payload with header prepended.
   */packet(cmd,payload,checksum){cov_2erz10uq8q().f[1]++;cov_2erz10uq8q().s[4]++;assert(payload,'No payload.');cov_2erz10uq8q().s[5]++;assert(cmd.length<12);cov_2erz10uq8q().s[6]++;assert(payload.length<=0xffffffff);const msg=(cov_2erz10uq8q().s[7]++,Buffer.allocUnsafe(24+payload.length));// Magic value
cov_2erz10uq8q().s[8]++;msg.writeUInt32LE(this.network.magic,0,true);// Command
cov_2erz10uq8q().s[9]++;msg.write(cmd,4,'ascii');cov_2erz10uq8q().s[10]++;for(let i=(cov_2erz10uq8q().s[11]++,4+cmd.length);i<16;i++){cov_2erz10uq8q().s[12]++;msg[i]=0;}// Payload length
cov_2erz10uq8q().s[13]++;msg.writeUInt32LE(payload.length,16,true);cov_2erz10uq8q().s[14]++;if(!checksum){cov_2erz10uq8q().b[0][0]++;cov_2erz10uq8q().s[15]++;checksum=hash256.digest(payload);}else{cov_2erz10uq8q().b[0][1]++;}// Checksum
cov_2erz10uq8q().s[16]++;checksum.copy(msg,20,0,4);cov_2erz10uq8q().s[17]++;payload.copy(msg,24);cov_2erz10uq8q().s[18]++;return msg;}}/*
 * Expose
 */cov_2erz10uq8q().s[19]++;module.exports=Framer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyYW1lci5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiTmV0d29yayIsImhhc2gyNTYiLCJGcmFtZXIiLCJjb25zdHJ1Y3RvciIsIm5ldHdvcmsiLCJnZXQiLCJwYWNrZXQiLCJjbWQiLCJwYXlsb2FkIiwiY2hlY2tzdW0iLCJsZW5ndGgiLCJtc2ciLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIndyaXRlVUludDMyTEUiLCJtYWdpYyIsIndyaXRlIiwiaSIsImRpZ2VzdCIsImNvcHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FFQSxhLDR4RUFRWTsyRkFOWixLQUFNQSxDQUFBQSxNQUFNLDBCQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFWLENBQVosQ0FDQSxLQUFNQyxDQUFBQSxPQUFPLDBCQUFHRCxPQUFPLENBQUMscUJBQUQsQ0FBVixDQUFiLENBQ0EsS0FBTUUsQ0FBQUEsT0FBTywwQkFBR0YsT0FBTyxDQUFDLHFCQUFELENBQVYsQ0FBYixDQUVBO0FBQ0E7QUFDQTtBQUNBLEdBRUEsS0FBTUcsQ0FBQUEsTUFBTyxDQUNYO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsS0FFRUMsV0FBVyxDQUFDQyxPQUFELENBQVUsaURBQ25CLEtBQUtBLE9BQUwsQ0FBZUosT0FBTyxDQUFDSyxHQUFSLENBQVlELE9BQVosQ0FBZixDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FFRUUsTUFBTSxDQUFDQyxHQUFELENBQU1DLE9BQU4sQ0FBZUMsUUFBZixDQUF5QixpREFDN0JYLE1BQU0sQ0FBQ1UsT0FBRCxDQUFVLGFBQVYsQ0FBTixDQUQ2Qix3QkFFN0JWLE1BQU0sQ0FBQ1MsR0FBRyxDQUFDRyxNQUFKLENBQWEsRUFBZCxDQUFOLENBRjZCLHdCQUc3QlosTUFBTSxDQUFDVSxPQUFPLENBQUNFLE1BQVIsRUFBa0IsVUFBbkIsQ0FBTixDQUVBLEtBQU1DLENBQUFBLEdBQUcsMEJBQUdDLE1BQU0sQ0FBQ0MsV0FBUCxDQUFtQixHQUFLTCxPQUFPLENBQUNFLE1BQWhDLENBQUgsQ0FBVCxDQUVBO0FBUDZCLHdCQVE3QkMsR0FBRyxDQUFDRyxhQUFKLENBQWtCLEtBQUtWLE9BQUwsQ0FBYVcsS0FBL0IsQ0FBc0MsQ0FBdEMsQ0FBeUMsSUFBekMsRUFFQTtBQVY2Qix3QkFXN0JKLEdBQUcsQ0FBQ0ssS0FBSixDQUFVVCxHQUFWLENBQWUsQ0FBZixDQUFrQixPQUFsQixFQVg2Qix5QkFhN0IsSUFBSyxHQUFJVSxDQUFBQSxDQUFDLDJCQUFHLEVBQUlWLEdBQUcsQ0FBQ0csTUFBWCxDQUFWLENBQTZCTyxDQUFDLENBQUcsRUFBakMsQ0FBcUNBLENBQUMsRUFBdEMsQ0FDRSwwQkFBQU4sR0FBRyxDQUFDTSxDQUFELENBQUgsQ0FBUyxDQUFULENBQVcsQ0FFYjtBQWhCNkIseUJBaUI3Qk4sR0FBRyxDQUFDRyxhQUFKLENBQWtCTixPQUFPLENBQUNFLE1BQTFCLENBQWtDLEVBQWxDLENBQXNDLElBQXRDLEVBakI2Qix5QkFtQjdCLEdBQUksQ0FBQ0QsUUFBTCxDQUNFLHFEQUFBQSxRQUFRLENBQUdSLE9BQU8sQ0FBQ2lCLE1BQVIsQ0FBZVYsT0FBZixDQUFYLENBQW1DLENBRHJDLGlDQUdBO0FBdEI2Qix5QkF1QjdCQyxRQUFRLENBQUNVLElBQVQsQ0FBY1IsR0FBZCxDQUFtQixFQUFuQixDQUF1QixDQUF2QixDQUEwQixDQUExQixFQXZCNkIseUJBeUI3QkgsT0FBTyxDQUFDVyxJQUFSLENBQWFSLEdBQWIsQ0FBa0IsRUFBbEIsRUF6QjZCLHlCQTJCN0IsTUFBT0EsQ0FBQUEsR0FBUCxDQUNELENBL0NVLENBa0RiO0FBQ0E7QUFDQSxHLHlCQUVBUyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJuQixNQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBmcmFtZXIuanMgLSBwYWNrZXQgZnJhbWVyIGZvciBiY29pblxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgRmVkb3IgSW5kdXRueSAoTUlUIExpY2Vuc2UpXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBDaHJpc3RvcGhlciBKZWZmcmV5IChNSVQgTGljZW5zZSkuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9iY29pbi1vcmcvYmNvaW5cclxuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdic2VydCcpO1xyXG5jb25zdCBOZXR3b3JrID0gcmVxdWlyZSgnLi4vcHJvdG9jb2wvbmV0d29yaycpO1xyXG5jb25zdCBoYXNoMjU2ID0gcmVxdWlyZSgnYmNyeXB0by9saWIvaGFzaDI1NicpO1xyXG5cclxuLyoqXHJcbiAqIFByb3RvY29sIE1lc3NhZ2UgRnJhbWVyXHJcbiAqIEBhbGlhcyBtb2R1bGU6bmV0LkZyYW1lclxyXG4gKi9cclxuXHJcbmNsYXNzIEZyYW1lciB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgZnJhbWVyLlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBwYXJhbSB7TmV0d29ya30gbmV0d29ya1xyXG4gICAqL1xyXG5cclxuICBjb25zdHJ1Y3RvcihuZXR3b3JrKSB7XHJcbiAgICB0aGlzLm5ldHdvcmsgPSBOZXR3b3JrLmdldChuZXR3b3JrKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZyYW1lIGEgcGF5bG9hZCB3aXRoIGEgaGVhZGVyLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjbWQgLSBQYWNrZXQgdHlwZS5cclxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gcGF5bG9hZFxyXG4gICAqIEBwYXJhbSB7QnVmZmVyP30gY2hlY2tzdW0gLSBQcmVjb21wdXRlZCBjaGVja3N1bS5cclxuICAgKiBAcmV0dXJucyB7QnVmZmVyfSBQYXlsb2FkIHdpdGggaGVhZGVyIHByZXBlbmRlZC5cclxuICAgKi9cclxuXHJcbiAgcGFja2V0KGNtZCwgcGF5bG9hZCwgY2hlY2tzdW0pIHtcclxuICAgIGFzc2VydChwYXlsb2FkLCAnTm8gcGF5bG9hZC4nKTtcclxuICAgIGFzc2VydChjbWQubGVuZ3RoIDwgMTIpO1xyXG4gICAgYXNzZXJ0KHBheWxvYWQubGVuZ3RoIDw9IDB4ZmZmZmZmZmYpO1xyXG5cclxuICAgIGNvbnN0IG1zZyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyNCArIHBheWxvYWQubGVuZ3RoKTtcclxuXHJcbiAgICAvLyBNYWdpYyB2YWx1ZVxyXG4gICAgbXNnLndyaXRlVUludDMyTEUodGhpcy5uZXR3b3JrLm1hZ2ljLCAwLCB0cnVlKTtcclxuXHJcbiAgICAvLyBDb21tYW5kXHJcbiAgICBtc2cud3JpdGUoY21kLCA0LCAnYXNjaWknKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gNCArIGNtZC5sZW5ndGg7IGkgPCAxNjsgaSsrKVxyXG4gICAgICBtc2dbaV0gPSAwO1xyXG5cclxuICAgIC8vIFBheWxvYWQgbGVuZ3RoXHJcbiAgICBtc2cud3JpdGVVSW50MzJMRShwYXlsb2FkLmxlbmd0aCwgMTYsIHRydWUpO1xyXG5cclxuICAgIGlmICghY2hlY2tzdW0pXHJcbiAgICAgIGNoZWNrc3VtID0gaGFzaDI1Ni5kaWdlc3QocGF5bG9hZCk7XHJcblxyXG4gICAgLy8gQ2hlY2tzdW1cclxuICAgIGNoZWNrc3VtLmNvcHkobXNnLCAyMCwgMCwgNCk7XHJcblxyXG4gICAgcGF5bG9hZC5jb3B5KG1zZywgMjQpO1xyXG5cclxuICAgIHJldHVybiBtc2c7XHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4gKiBFeHBvc2VcclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZyYW1lcjtcclxuIl19
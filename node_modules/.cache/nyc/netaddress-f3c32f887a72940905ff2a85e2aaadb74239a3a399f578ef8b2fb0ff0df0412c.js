/*!
 * netaddress.js - network address object for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_cqra83u3h(){var path="E:\\Projects\\Test\\bcoin\\lib\\net\\netaddress.js";var hash="42405953c94747fe8afec96ddc6698418ef59ffc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\net\\netaddress.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:12},end:{line:10,column:28}},"2":{start:{line:11,column:11},end:{line:11,column:27}},"3":{start:{line:12,column:16},end:{line:12,column:46}},"4":{start:{line:13,column:13},end:{line:13,column:37}},"5":{start:{line:14,column:15},end:{line:14,column:34}},"6":{start:{line:15,column:24},end:{line:15,column:43}},"7":{start:{line:39,column:4},end:{line:39,column:26}},"8":{start:{line:40,column:4},end:{line:40,column:18}},"9":{start:{line:41,column:4},end:{line:41,column:22}},"10":{start:{line:42,column:4},end:{line:42,column:18}},"11":{start:{line:43,column:4},end:{line:43,column:32}},"12":{start:{line:44,column:4},end:{line:44,column:26}},"13":{start:{line:46,column:4},end:{line:47,column:32}},"14":{start:{line:47,column:6},end:{line:47,column:32}},"15":{start:{line:57,column:4},end:{line:57,column:45}},"16":{start:{line:58,column:4},end:{line:58,column:45}},"17":{start:{line:60,column:4},end:{line:60,column:41}},"18":{start:{line:61,column:4},end:{line:61,column:38}},"19":{start:{line:62,column:4},end:{line:62,column:29}},"20":{start:{line:64,column:4},end:{line:67,column:5}},"21":{start:{line:65,column:6},end:{line:65,column:51}},"22":{start:{line:66,column:6},end:{line:66,column:39}},"23":{start:{line:69,column:4},end:{line:72,column:5}},"24":{start:{line:70,column:6},end:{line:70,column:47}},"25":{start:{line:71,column:6},end:{line:71,column:31}},"26":{start:{line:74,column:4},end:{line:74,column:56}},"27":{start:{line:76,column:4},end:{line:76,column:16}},"28":{start:{line:86,column:4},end:{line:86,column:43}},"29":{start:{line:96,column:4},end:{line:96,column:51}},"30":{start:{line:105,column:4},end:{line:105,column:31}},"31":{start:{line:114,column:4},end:{line:114,column:31}},"32":{start:{line:123,column:4},end:{line:123,column:31}},"33":{start:{line:132,column:4},end:{line:132,column:32}},"34":{start:{line:141,column:4},end:{line:141,column:32}},"35":{start:{line:150,column:4},end:{line:150,column:35}},"36":{start:{line:159,column:4},end:{line:159,column:32}},"37":{start:{line:168,column:4},end:{line:168,column:36}},"38":{start:{line:177,column:16},end:{line:177,column:42}},"39":{start:{line:179,column:4},end:{line:180,column:17}},"40":{start:{line:180,column:6},end:{line:180,column:17}},"41":{start:{line:182,column:4},end:{line:182,column:33}},"42":{start:{line:192,column:4},end:{line:192,column:50}},"43":{start:{line:200,column:4},end:{line:200,column:26}},"44":{start:{line:201,column:4},end:{line:201,column:26}},"45":{start:{line:202,column:4},end:{line:202,column:56}},"46":{start:{line:211,column:4},end:{line:211,column:33}},"47":{start:{line:212,column:4},end:{line:212,column:38}},"48":{start:{line:213,column:4},end:{line:213,column:56}},"49":{start:{line:222,column:4},end:{line:222,column:40}},"50":{start:{line:223,column:4},end:{line:223,column:21}},"51":{start:{line:224,column:4},end:{line:224,column:51}},"52":{start:{line:236,column:4},end:{line:236,column:35}},"53":{start:{line:238,column:4},end:{line:238,column:40}},"54":{start:{line:240,column:4},end:{line:240,column:33}},"55":{start:{line:241,column:4},end:{line:241,column:38}},"56":{start:{line:242,column:4},end:{line:242,column:21}},"57":{start:{line:243,column:4},end:{line:243,column:48}},"58":{start:{line:244,column:4},end:{line:244,column:30}},"59":{start:{line:246,column:4},end:{line:246,column:56}},"60":{start:{line:248,column:4},end:{line:248,column:16}},"61":{start:{line:261,column:4},end:{line:261,column:52}},"62":{start:{line:272,column:4},end:{line:272,column:35}},"63":{start:{line:274,column:17},end:{line:274,column:56}},"64":{start:{line:276,column:4},end:{line:276,column:56}},"65":{start:{line:288,column:4},end:{line:288,column:54}},"66":{start:{line:298,column:17},end:{line:298,column:37}},"67":{start:{line:299,column:17},end:{line:299,column:34}},"68":{start:{line:300,column:4},end:{line:300,column:37}},"69":{start:{line:301,column:4},end:{line:301,column:37}},"70":{start:{line:302,column:4},end:{line:302,column:60}},"71":{start:{line:313,column:4},end:{line:313,column:52}},"72":{start:{line:324,column:4},end:{line:324,column:40}},"73":{start:{line:325,column:4},end:{line:325,column:33}},"74":{start:{line:329,column:4},end:{line:329,column:17}},"75":{start:{line:331,column:4},end:{line:331,column:32}},"76":{start:{line:332,column:4},end:{line:332,column:38}},"77":{start:{line:333,column:4},end:{line:333,column:31}},"78":{start:{line:334,column:4},end:{line:334,column:56}},"79":{start:{line:336,column:4},end:{line:336,column:16}},"80":{start:{line:347,column:4},end:{line:347,column:49}},"81":{start:{line:358,column:4},end:{line:358,column:43}},"82":{start:{line:369,column:4},end:{line:369,column:42}},"83":{start:{line:380,column:4},end:{line:381,column:29}},"84":{start:{line:381,column:6},end:{line:381,column:29}},"85":{start:{line:383,column:4},end:{line:383,column:31}},"86":{start:{line:384,column:4},end:{line:384,column:19}},"87":{start:{line:385,column:4},end:{line:385,column:28}},"88":{start:{line:386,column:4},end:{line:386,column:29}},"89":{start:{line:388,column:4},end:{line:388,column:14}},"90":{start:{line:397,column:4},end:{line:397,column:31}},"91":{start:{line:407,column:17},end:{line:407,column:35}},"92":{start:{line:408,column:4},end:{line:408,column:57}},"93":{start:{line:417,column:4},end:{line:422,column:6}},"94":{start:{line:433,column:4},end:{line:433,column:47}},"95":{start:{line:434,column:4},end:{line:434,column:52}},"96":{start:{line:435,column:4},end:{line:435,column:44}},"97":{start:{line:436,column:4},end:{line:436,column:38}},"98":{start:{line:437,column:4},end:{line:437,column:26}},"99":{start:{line:438,column:4},end:{line:438,column:26}},"100":{start:{line:439,column:4},end:{line:439,column:34}},"101":{start:{line:440,column:4},end:{line:440,column:26}},"102":{start:{line:441,column:4},end:{line:441,column:56}},"103":{start:{line:442,column:4},end:{line:442,column:16}},"104":{start:{line:452,column:4},end:{line:452,column:37}},"105":{start:{line:461,column:4},end:{line:465,column:12}},"106":{start:{line:476,column:0},end:{line:479,column:26}},"107":{start:{line:485,column:0},end:{line:485,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:38,column:2},end:{line:38,column:3}},loc:{start:{line:38,column:23},end:{line:48,column:3}},line:38},"1":{name:"(anonymous_1)",decl:{start:{line:56,column:2},end:{line:56,column:3}},loc:{start:{line:56,column:23},end:{line:77,column:3}},line:56},"2":{name:"(anonymous_2)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:30},end:{line:87,column:3}},line:85},"3":{name:"(anonymous_3)",decl:{start:{line:95,column:2},end:{line:95,column:3}},loc:{start:{line:95,column:24},end:{line:97,column:3}},line:95},"4":{name:"(anonymous_4)",decl:{start:{line:104,column:2},end:{line:104,column:3}},loc:{start:{line:104,column:11},end:{line:106,column:3}},line:104},"5":{name:"(anonymous_5)",decl:{start:{line:113,column:2},end:{line:113,column:3}},loc:{start:{line:113,column:11},end:{line:115,column:3}},line:113},"6":{name:"(anonymous_6)",decl:{start:{line:122,column:2},end:{line:122,column:3}},loc:{start:{line:122,column:11},end:{line:124,column:3}},line:122},"7":{name:"(anonymous_7)",decl:{start:{line:131,column:2},end:{line:131,column:3}},loc:{start:{line:131,column:12},end:{line:133,column:3}},line:131},"8":{name:"(anonymous_8)",decl:{start:{line:140,column:2},end:{line:140,column:3}},loc:{start:{line:140,column:12},end:{line:142,column:3}},line:140},"9":{name:"(anonymous_9)",decl:{start:{line:149,column:2},end:{line:149,column:3}},loc:{start:{line:149,column:15},end:{line:151,column:3}},line:149},"10":{name:"(anonymous_10)",decl:{start:{line:158,column:2},end:{line:158,column:3}},loc:{start:{line:158,column:12},end:{line:160,column:3}},line:158},"11":{name:"(anonymous_11)",decl:{start:{line:167,column:2},end:{line:167,column:3}},loc:{start:{line:167,column:14},end:{line:169,column:3}},line:167},"12":{name:"(anonymous_12)",decl:{start:{line:176,column:2},end:{line:176,column:3}},loc:{start:{line:176,column:16},end:{line:183,column:3}},line:176},"13":{name:"(anonymous_13)",decl:{start:{line:191,column:2},end:{line:191,column:3}},loc:{start:{line:191,column:24},end:{line:193,column:3}},line:191},"14":{name:"(anonymous_14)",decl:{start:{line:199,column:2},end:{line:199,column:3}},loc:{start:{line:199,column:12},end:{line:203,column:3}},line:199},"15":{name:"(anonymous_15)",decl:{start:{line:210,column:2},end:{line:210,column:3}},loc:{start:{line:210,column:16},end:{line:214,column:3}},line:210},"16":{name:"(anonymous_16)",decl:{start:{line:221,column:2},end:{line:221,column:3}},loc:{start:{line:221,column:16},end:{line:225,column:3}},line:221},"17":{name:"(anonymous_17)",decl:{start:{line:235,column:2},end:{line:235,column:3}},loc:{start:{line:235,column:32},end:{line:249,column:3}},line:235},"18":{name:"(anonymous_18)",decl:{start:{line:260,column:2},end:{line:260,column:3}},loc:{start:{line:260,column:39},end:{line:262,column:3}},line:260},"19":{name:"(anonymous_19)",decl:{start:{line:271,column:2},end:{line:271,column:3}},loc:{start:{line:271,column:34},end:{line:277,column:3}},line:271},"20":{name:"(anonymous_20)",decl:{start:{line:287,column:2},end:{line:287,column:3}},loc:{start:{line:287,column:41},end:{line:289,column:3}},line:287},"21":{name:"(anonymous_21)",decl:{start:{line:297,column:2},end:{line:297,column:3}},loc:{start:{line:297,column:30},end:{line:303,column:3}},line:297},"22":{name:"(anonymous_22)",decl:{start:{line:312,column:2},end:{line:312,column:3}},loc:{start:{line:312,column:39},end:{line:314,column:3}},line:312},"23":{name:"(anonymous_23)",decl:{start:{line:323,column:2},end:{line:323,column:3}},loc:{start:{line:323,column:23},end:{line:337,column:3}},line:323},"24":{name:"(anonymous_24)",decl:{start:{line:346,column:2},end:{line:346,column:3}},loc:{start:{line:346,column:22},end:{line:348,column:3}},line:346},"25":{name:"(anonymous_25)",decl:{start:{line:357,column:2},end:{line:357,column:3}},loc:{start:{line:357,column:30},end:{line:359,column:3}},line:357},"26":{name:"(anonymous_26)",decl:{start:{line:368,column:2},end:{line:368,column:3}},loc:{start:{line:368,column:29},end:{line:370,column:3}},line:368},"27":{name:"(anonymous_27)",decl:{start:{line:379,column:2},end:{line:379,column:3}},loc:{start:{line:379,column:21},end:{line:389,column:3}},line:379},"28":{name:"(anonymous_28)",decl:{start:{line:396,column:2},end:{line:396,column:3}},loc:{start:{line:396,column:16},end:{line:398,column:3}},line:396},"29":{name:"(anonymous_29)",decl:{start:{line:406,column:2},end:{line:406,column:3}},loc:{start:{line:406,column:14},end:{line:409,column:3}},line:406},"30":{name:"(anonymous_30)",decl:{start:{line:416,column:2},end:{line:416,column:3}},loc:{start:{line:416,column:11},end:{line:423,column:3}},line:416},"31":{name:"(anonymous_31)",decl:{start:{line:432,column:2},end:{line:432,column:3}},loc:{start:{line:432,column:17},end:{line:443,column:3}},line:432},"32":{name:"(anonymous_32)",decl:{start:{line:451,column:2},end:{line:451,column:3}},loc:{start:{line:451,column:24},end:{line:453,column:3}},line:451},"33":{name:"(anonymous_33)",decl:{start:{line:460,column:2},end:{line:460,column:3}},loc:{start:{line:460,column:20},end:{line:466,column:3}},line:460}},branchMap:{"0":{loc:{start:{line:46,column:4},end:{line:47,column:32}},type:"if",locations:[{start:{line:46,column:4},end:{line:47,column:32}},{start:{line:46,column:4},end:{line:47,column:32}}],line:46},"1":{loc:{start:{line:64,column:4},end:{line:67,column:5}},type:"if",locations:[{start:{line:64,column:4},end:{line:67,column:5}},{start:{line:64,column:4},end:{line:67,column:5}}],line:64},"2":{loc:{start:{line:69,column:4},end:{line:72,column:5}},type:"if",locations:[{start:{line:69,column:4},end:{line:72,column:5}},{start:{line:69,column:4},end:{line:72,column:5}}],line:69},"3":{loc:{start:{line:179,column:4},end:{line:180,column:17}},type:"if",locations:[{start:{line:179,column:4},end:{line:180,column:17}},{start:{line:179,column:4},end:{line:180,column:17}}],line:179},"4":{loc:{start:{line:222,column:11},end:{line:222,column:38}},type:"binary-expr",locations:[{start:{line:222,column:11},end:{line:222,column:20}},{start:{line:222,column:24},end:{line:222,column:38}}],line:222},"5":{loc:{start:{line:238,column:11},end:{line:238,column:38}},type:"binary-expr",locations:[{start:{line:238,column:11},end:{line:238,column:20}},{start:{line:238,column:24},end:{line:238,column:38}}],line:238},"6":{loc:{start:{line:324,column:16},end:{line:324,column:39}},type:"cond-expr",locations:[{start:{line:324,column:23},end:{line:324,column:35}},{start:{line:324,column:38},end:{line:324,column:39}}],line:324},"7":{loc:{start:{line:380,column:4},end:{line:381,column:29}},type:"if",locations:[{start:{line:380,column:4},end:{line:381,column:29}},{start:{line:380,column:4},end:{line:381,column:29}}],line:380},"8":{loc:{start:{line:397,column:17},end:{line:397,column:29}},type:"cond-expr",locations:[{start:{line:397,column:24},end:{line:397,column:25}},{start:{line:397,column:28},end:{line:397,column:29}}],line:397}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"42405953c94747fe8afec96ddc6698418ef59ffc"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_cqra83u3h=function(){return actualCoverage;};}return actualCoverage;}cov_cqra83u3h();const assert=(cov_cqra83u3h().s[0]++,require('bsert'));const bio=(cov_cqra83u3h().s[1]++,require('bufio'));const IP=(cov_cqra83u3h().s[2]++,require('binet'));const Network=(cov_cqra83u3h().s[3]++,require('../protocol/network'));const util=(cov_cqra83u3h().s[4]++,require('../utils/util'));const common=(cov_cqra83u3h().s[5]++,require('./common'));const{inspectSymbol}=(cov_cqra83u3h().s[6]++,require('../utils'));/**
 * Net Address
 * Represents a network address.
 * @alias module:net.NetAddress
 * @property {Host} host
 * @property {Number} port
 * @property {Number} services
 * @property {Number} time
 */class NetAddress{/**
   * Create a network address.
   * @constructor
   * @param {Object} options
   * @param {Number?} options.time - Timestamp.
   * @param {Number?} options.services - Service bits.
   * @param {String?} options.host - IP address (IPv6 or IPv4).
   * @param {Number?} options.port - Port.
   */constructor(options){cov_cqra83u3h().f[0]++;cov_cqra83u3h().s[7]++;this.host='0.0.0.0';cov_cqra83u3h().s[8]++;this.port=0;cov_cqra83u3h().s[9]++;this.services=0;cov_cqra83u3h().s[10]++;this.time=0;cov_cqra83u3h().s[11]++;this.hostname='0.0.0.0:0';cov_cqra83u3h().s[12]++;this.raw=IP.ZERO_IP;cov_cqra83u3h().s[13]++;if(options){cov_cqra83u3h().b[0][0]++;cov_cqra83u3h().s[14]++;this.fromOptions(options);}else{cov_cqra83u3h().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_cqra83u3h().f[1]++;cov_cqra83u3h().s[15]++;assert(typeof options.host==='string');cov_cqra83u3h().s[16]++;assert(typeof options.port==='number');cov_cqra83u3h().s[17]++;this.raw=IP.toBuffer(options.host);cov_cqra83u3h().s[18]++;this.host=IP.toString(this.raw);cov_cqra83u3h().s[19]++;this.port=options.port;cov_cqra83u3h().s[20]++;if(options.services){cov_cqra83u3h().b[1][0]++;cov_cqra83u3h().s[21]++;assert(typeof options.services==='number');cov_cqra83u3h().s[22]++;this.services=options.services;}else{cov_cqra83u3h().b[1][1]++;}cov_cqra83u3h().s[23]++;if(options.time){cov_cqra83u3h().b[2][0]++;cov_cqra83u3h().s[24]++;assert(typeof options.time==='number');cov_cqra83u3h().s[25]++;this.time=options.time;}else{cov_cqra83u3h().b[2][1]++;}cov_cqra83u3h().s[26]++;this.hostname=IP.toHostname(this.host,this.port);cov_cqra83u3h().s[27]++;return this;}/**
   * Instantiate network address from options.
   * @param {Object} options
   * @returns {NetAddress}
   */static fromOptions(options){cov_cqra83u3h().f[2]++;cov_cqra83u3h().s[28]++;return new this().fromOptions(options);}/**
   * Test whether required services are available.
   * @param {Number} services
   * @returns {Boolean}
   */hasServices(services){cov_cqra83u3h().f[3]++;cov_cqra83u3h().s[29]++;return(this.services&services)===services;}/**
   * Test whether the address is IPv4.
   * @returns {Boolean}
   */isIPv4(){cov_cqra83u3h().f[4]++;cov_cqra83u3h().s[30]++;return IP.isIPv4(this.raw);}/**
   * Test whether the address is IPv6.
   * @returns {Boolean}
   */isIPv6(){cov_cqra83u3h().f[5]++;cov_cqra83u3h().s[31]++;return IP.isIPv6(this.raw);}/**
   * Test whether the host is null.
   * @returns {Boolean}
   */isNull(){cov_cqra83u3h().f[6]++;cov_cqra83u3h().s[32]++;return IP.isNull(this.raw);}/**
   * Test whether the host is a local address.
   * @returns {Boolean}
   */isLocal(){cov_cqra83u3h().f[7]++;cov_cqra83u3h().s[33]++;return IP.isLocal(this.raw);}/**
   * Test whether the host is valid.
   * @returns {Boolean}
   */isValid(){cov_cqra83u3h().f[8]++;cov_cqra83u3h().s[34]++;return IP.isValid(this.raw);}/**
   * Test whether the host is routable.
   * @returns {Boolean}
   */isRoutable(){cov_cqra83u3h().f[9]++;cov_cqra83u3h().s[35]++;return IP.isRoutable(this.raw);}/**
   * Test whether the host is an onion address.
   * @returns {Boolean}
   */isOnion(){cov_cqra83u3h().f[10]++;cov_cqra83u3h().s[36]++;return IP.isOnion(this.raw);}/**
   * Compare against another network address.
   * @returns {Boolean}
   */equal(addr){cov_cqra83u3h().f[11]++;cov_cqra83u3h().s[37]++;return this.compare(addr)===0;}/**
   * Compare against another network address.
   * @returns {Number}
   */compare(addr){cov_cqra83u3h().f[12]++;const cmp=(cov_cqra83u3h().s[38]++,this.raw.compare(addr.raw));cov_cqra83u3h().s[39]++;if(cmp!==0){cov_cqra83u3h().b[3][0]++;cov_cqra83u3h().s[40]++;return cmp;}else{cov_cqra83u3h().b[3][1]++;}cov_cqra83u3h().s[41]++;return this.port-addr.port;}/**
   * Get reachable score to destination.
   * @param {NetAddress} dest
   * @returns {Number}
   */getReachability(dest){cov_cqra83u3h().f[13]++;cov_cqra83u3h().s[42]++;return IP.getReachability(this.raw,dest.raw);}/**
   * Set null host.
   */setNull(){cov_cqra83u3h().f[14]++;cov_cqra83u3h().s[43]++;this.raw=IP.ZERO_IP;cov_cqra83u3h().s[44]++;this.host='0.0.0.0';cov_cqra83u3h().s[45]++;this.hostname=IP.toHostname(this.host,this.port);}/**
   * Set host.
   * @param {String} host
   */setHost(host){cov_cqra83u3h().f[15]++;cov_cqra83u3h().s[46]++;this.raw=IP.toBuffer(host);cov_cqra83u3h().s[47]++;this.host=IP.toString(this.raw);cov_cqra83u3h().s[48]++;this.hostname=IP.toHostname(this.host,this.port);}/**
   * Set port.
   * @param {Number} port
   */setPort(port){cov_cqra83u3h().f[16]++;cov_cqra83u3h().s[49]++;assert((cov_cqra83u3h().b[4][0]++,port>=0)&&(cov_cqra83u3h().b[4][1]++,port<=0xffff));cov_cqra83u3h().s[50]++;this.port=port;cov_cqra83u3h().s[51]++;this.hostname=IP.toHostname(this.host,port);}/**
   * Inject properties from host, port, and network.
   * @private
   * @param {String} host
   * @param {Number} port
   * @param {(Network|NetworkType)?} network
   */fromHost(host,port,network){cov_cqra83u3h().f[17]++;cov_cqra83u3h().s[52]++;network=Network.get(network);cov_cqra83u3h().s[53]++;assert((cov_cqra83u3h().b[5][0]++,port>=0)&&(cov_cqra83u3h().b[5][1]++,port<=0xffff));cov_cqra83u3h().s[54]++;this.raw=IP.toBuffer(host);cov_cqra83u3h().s[55]++;this.host=IP.toString(this.raw);cov_cqra83u3h().s[56]++;this.port=port;cov_cqra83u3h().s[57]++;this.services=NetAddress.DEFAULT_SERVICES;cov_cqra83u3h().s[58]++;this.time=network.now();cov_cqra83u3h().s[59]++;this.hostname=IP.toHostname(this.host,this.port);cov_cqra83u3h().s[60]++;return this;}/**
   * Instantiate a network address
   * from a host and port.
   * @param {String} host
   * @param {Number} port
   * @param {(Network|NetworkType)?} network
   * @returns {NetAddress}
   */static fromHost(host,port,network){cov_cqra83u3h().f[18]++;cov_cqra83u3h().s[61]++;return new this().fromHost(host,port,network);}/**
   * Inject properties from hostname and network.
   * @private
   * @param {String} hostname
   * @param {(Network|NetworkType)?} network
   */fromHostname(hostname,network){cov_cqra83u3h().f[19]++;cov_cqra83u3h().s[62]++;network=Network.get(network);const addr=(cov_cqra83u3h().s[63]++,IP.fromHostname(hostname,network.port));cov_cqra83u3h().s[64]++;return this.fromHost(addr.host,addr.port,network);}/**
   * Instantiate a network address
   * from a hostname (i.e. 127.0.0.1:8333).
   * @param {String} hostname
   * @param {(Network|NetworkType)?} network
   * @returns {NetAddress}
   */static fromHostname(hostname,network){cov_cqra83u3h().f[20]++;cov_cqra83u3h().s[65]++;return new this().fromHostname(hostname,network);}/**
   * Inject properties from socket.
   * @private
   * @param {net.Socket} socket
   */fromSocket(socket,network){cov_cqra83u3h().f[21]++;const host=(cov_cqra83u3h().s[66]++,socket.remoteAddress);const port=(cov_cqra83u3h().s[67]++,socket.remotePort);cov_cqra83u3h().s[68]++;assert(typeof host==='string');cov_cqra83u3h().s[69]++;assert(typeof port==='number');cov_cqra83u3h().s[70]++;return this.fromHost(IP.normalize(host),port,network);}/**
   * Instantiate a network address
   * from a socket.
   * @param {net.Socket} socket
   * @returns {NetAddress}
   */static fromSocket(hostname,network){cov_cqra83u3h().f[22]++;cov_cqra83u3h().s[71]++;return new this().fromSocket(hostname,network);}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   * @param {Boolean?} full - Include timestamp.
   */fromReader(br,full){cov_cqra83u3h().f[23]++;cov_cqra83u3h().s[72]++;this.time=full?(cov_cqra83u3h().b[6][0]++,br.readU32()):(cov_cqra83u3h().b[6][1]++,0);cov_cqra83u3h().s[73]++;this.services=br.readU32();// Note: hi service bits
// are currently unused.
cov_cqra83u3h().s[74]++;br.readU32();cov_cqra83u3h().s[75]++;this.raw=br.readBytes(16);cov_cqra83u3h().s[76]++;this.host=IP.toString(this.raw);cov_cqra83u3h().s[77]++;this.port=br.readU16BE();cov_cqra83u3h().s[78]++;this.hostname=IP.toHostname(this.host,this.port);cov_cqra83u3h().s[79]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @param {Boolean?} full - Include timestamp.
   */fromRaw(data,full){cov_cqra83u3h().f[24]++;cov_cqra83u3h().s[80]++;return this.fromReader(bio.read(data),full);}/**
   * Insantiate a network address from buffer reader.
   * @param {BufferReader} br
   * @param {Boolean?} full - Include timestamp.
   * @returns {NetAddress}
   */static fromReader(br,full){cov_cqra83u3h().f[25]++;cov_cqra83u3h().s[81]++;return new this().fromReader(br,full);}/**
   * Insantiate a network address from serialized data.
   * @param {Buffer} data
   * @param {Boolean?} full - Include timestamp.
   * @returns {NetAddress}
   */static fromRaw(data,full){cov_cqra83u3h().f[26]++;cov_cqra83u3h().s[82]++;return new this().fromRaw(data,full);}/**
   * Write network address to a buffer writer.
   * @param {BufferWriter} bw
   * @param {Boolean?} full - Include timestamp.
   * @returns {Buffer}
   */toWriter(bw,full){cov_cqra83u3h().f[27]++;cov_cqra83u3h().s[83]++;if(full){cov_cqra83u3h().b[7][0]++;cov_cqra83u3h().s[84]++;bw.writeU32(this.time);}else{cov_cqra83u3h().b[7][1]++;}cov_cqra83u3h().s[85]++;bw.writeU32(this.services);cov_cqra83u3h().s[86]++;bw.writeU32(0);cov_cqra83u3h().s[87]++;bw.writeBytes(this.raw);cov_cqra83u3h().s[88]++;bw.writeU16BE(this.port);cov_cqra83u3h().s[89]++;return bw;}/**
   * Calculate serialization size of address.
   * @returns {Number}
   */getSize(full){cov_cqra83u3h().f[28]++;cov_cqra83u3h().s[90]++;return 26+(full?(cov_cqra83u3h().b[8][0]++,4):(cov_cqra83u3h().b[8][1]++,0));}/**
   * Serialize network address.
   * @param {Boolean?} full - Include timestamp.
   * @returns {Buffer}
   */toRaw(full){cov_cqra83u3h().f[29]++;const size=(cov_cqra83u3h().s[91]++,this.getSize(full));cov_cqra83u3h().s[92]++;return this.toWriter(bio.write(size),full).render();}/**
   * Convert net address to json-friendly object.
   * @returns {Object}
   */toJSON(){cov_cqra83u3h().f[30]++;cov_cqra83u3h().s[93]++;return{host:this.host,port:this.port,services:this.services,time:this.time};}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   * @returns {NetAddress}
   */fromJSON(json){cov_cqra83u3h().f[31]++;cov_cqra83u3h().s[94]++;assert((json.port&0xffff)===json.port);cov_cqra83u3h().s[95]++;assert(json.services>>>0===json.services);cov_cqra83u3h().s[96]++;assert(json.time>>>0===json.time);cov_cqra83u3h().s[97]++;this.raw=IP.toBuffer(json.host);cov_cqra83u3h().s[98]++;this.host=json.host;cov_cqra83u3h().s[99]++;this.port=json.port;cov_cqra83u3h().s[100]++;this.services=json.services;cov_cqra83u3h().s[101]++;this.time=json.time;cov_cqra83u3h().s[102]++;this.hostname=IP.toHostname(this.host,this.port);cov_cqra83u3h().s[103]++;return this;}/**
   * Instantiate net address from json object.
   * @param {Object} json
   * @returns {NetAddress}
   */static fromJSON(json){cov_cqra83u3h().f[32]++;cov_cqra83u3h().s[104]++;return new this().fromJSON(json);}/**
   * Inspect the network address.
   * @returns {Object}
   */[inspectSymbol](){cov_cqra83u3h().f[33]++;cov_cqra83u3h().s[105]++;return'<NetAddress:'+` hostname=${this.hostname}`+` services=${this.services.toString(2)}`+` date=${util.date(this.time)}`+'>';}}/**
 * Default services for
 * unknown outbound peers.
 * @const {Number}
 * @default
 */cov_cqra83u3h().s[106]++;NetAddress.DEFAULT_SERVICES=0|common.services.NETWORK|common.services.WITNESS|common.services.BLOOM;/*
 * Expose
 */cov_cqra83u3h().s[107]++;module.exports=NetAddress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
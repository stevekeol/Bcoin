/*!
 * common.js - p2p constants for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';/**
 * @module net/common
 */function cov_i4ekybi4t(){var path="E:\\Projects\\Test\\bcoin\\lib\\net\\common.js";var hash="16a103157fae7544ec5db7d764e55b1458ecfb2c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\net\\common.js",statementMap:{"0":{start:{line:14,column:15},end:{line:14,column:44}},"1":{start:{line:15,column:12},end:{line:15,column:29}},"2":{start:{line:23,column:0},end:{line:23,column:33}},"3":{start:{line:31,column:0},end:{line:31,column:28}},"4":{start:{line:39,column:0},end:{line:39,column:32}},"5":{start:{line:47,column:0},end:{line:47,column:29}},"6":{start:{line:55,column:0},end:{line:55,column:30}},"7":{start:{line:63,column:0},end:{line:63,column:35}},"8":{start:{line:71,column:0},end:{line:71,column:32}},"9":{start:{line:79,column:0},end:{line:79,column:40}},"10":{start:{line:87,column:0},end:{line:111,column:2}},"11":{start:{line:119,column:0},end:{line:121,column:29}},"12":{start:{line:129,column:0},end:{line:130,column:29}},"13":{start:{line:138,column:0},end:{line:138,column:46}},"14":{start:{line:146,column:0},end:{line:146,column:38}},"15":{start:{line:154,column:0},end:{line:154,column:32}},"16":{start:{line:162,column:0},end:{line:162,column:24}},"17":{start:{line:169,column:0},end:{line:171,column:2}},"18":{start:{line:170,column:2},end:{line:170,column:31}},"19":{start:{line:179,column:0},end:{line:179,column:42}},"20":{start:{line:187,column:0},end:{line:187,column:42}},"21":{start:{line:195,column:0},end:{line:195,column:43}},"22":{start:{line:203,column:0},end:{line:203,column:24}},"23":{start:{line:211,column:0},end:{line:211,column:27}},"24":{start:{line:219,column:0},end:{line:219,column:41}},"25":{start:{line:227,column:0},end:{line:227,column:31}}},fnMap:{"0":{name:"nonce",decl:{start:{line:169,column:25},end:{line:169,column:30}},loc:{start:{line:169,column:33},end:{line:171,column:1}},line:169}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"16a103157fae7544ec5db7d764e55b1458ecfb2c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_i4ekybi4t=function(){return actualCoverage;};}return actualCoverage;}cov_i4ekybi4t();const random=(cov_i4ekybi4t().s[0]++,require('bcrypto/lib/random'));const pkg=(cov_i4ekybi4t().s[1]++,require('../pkg'));/**
 * Default protocol version.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[2]++;exports.PROTOCOL_VERSION=70015;/**
 * Minimum protocol version we're willing to talk to.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[3]++;exports.MIN_VERSION=70001;/**
 * Minimum version for getheaders.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[4]++;exports.HEADERS_VERSION=31800;/**
 * Minimum version for pong.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[5]++;exports.PONG_VERSION=60000;/**
 * Minimum version for bip37.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[6]++;exports.BLOOM_VERSION=70011;/**
 * Minimum version for bip152.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[7]++;exports.SENDHEADERS_VERSION=7012;/**
 * Minimum version for bip152.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[8]++;exports.COMPACT_VERSION=70014;/**
 * Minimum version for bip152+segwit.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[9]++;exports.COMPACT_WITNESS_VERSION=70015;/**
 * Service bits.
 * @enum {Number}
 * @default
 */cov_i4ekybi4t().s[10]++;exports.services={/**
   * Whether network services are enabled.
   */NETWORK:1<<0,/**
   * Whether the peer supports the getutxos packet.
   */GETUTXO:1<<1,/**
   * Whether the peer supports BIP37.
   */BLOOM:1<<2,/**
   * Whether the peer supports segregated witness.
   */WITNESS:1<<3};/**
 * Bcoin's services (we support everything).
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[11]++;exports.LOCAL_SERVICES=0|exports.services.NETWORK|exports.services.WITNESS;/**
 * Required services (network and segwit).
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[12]++;exports.REQUIRED_SERVICES=0|exports.services.NETWORK;/**
 * Default user agent: `/bcoin:[version]/`.
 * @const {String}
 * @default
 */cov_i4ekybi4t().s[13]++;exports.USER_AGENT=`/bcoin:${pkg.version}/`;/**
 * Max message size (~4mb with segwit, formerly 2mb)
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[14]++;exports.MAX_MESSAGE=4*1000*1000;/**
 * Amount of time to ban misbheaving peers.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[15]++;exports.BAN_TIME=24*60*60;/**
 * Ban score threshold before ban is placed in effect.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[16]++;exports.BAN_SCORE=100;/**
 * Create a nonce.
 * @returns {Buffer}
 */cov_i4ekybi4t().s[17]++;exports.nonce=function nonce(){cov_i4ekybi4t().f[0]++;cov_i4ekybi4t().s[18]++;return random.randomBytes(8);};/**
 * A compressed pubkey of all zeroes.
 * @const {Buffer}
 * @default
 */cov_i4ekybi4t().s[19]++;exports.ZERO_KEY=Buffer.alloc(33,0x00);/**
 * A 64 byte signature of all zeroes.
 * @const {Buffer}
 * @default
 */cov_i4ekybi4t().s[20]++;exports.ZERO_SIG=Buffer.alloc(64,0x00);/**
 * 8 zero bytes.
 * @const {Buffer}
 * @default
 */cov_i4ekybi4t().s[21]++;exports.ZERO_NONCE=Buffer.alloc(8,0x00);/**
 * Maximum inv/getdata size.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[22]++;exports.MAX_INV=50000;/**
 * Maximum number of requests.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[23]++;exports.MAX_REQUEST=5000;/**
 * Maximum number of block requests.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[24]++;exports.MAX_BLOCK_REQUEST=50000+1000;/**
 * Maximum number of tx requests.
 * @const {Number}
 * @default
 */cov_i4ekybi4t().s[25]++;exports.MAX_TX_REQUEST=10000;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi5qcyJdLCJuYW1lcyI6WyJyYW5kb20iLCJyZXF1aXJlIiwicGtnIiwiZXhwb3J0cyIsIlBST1RPQ09MX1ZFUlNJT04iLCJNSU5fVkVSU0lPTiIsIkhFQURFUlNfVkVSU0lPTiIsIlBPTkdfVkVSU0lPTiIsIkJMT09NX1ZFUlNJT04iLCJTRU5ESEVBREVSU19WRVJTSU9OIiwiQ09NUEFDVF9WRVJTSU9OIiwiQ09NUEFDVF9XSVRORVNTX1ZFUlNJT04iLCJzZXJ2aWNlcyIsIk5FVFdPUksiLCJHRVRVVFhPIiwiQkxPT00iLCJXSVRORVNTIiwiTE9DQUxfU0VSVklDRVMiLCJSRVFVSVJFRF9TRVJWSUNFUyIsIlVTRVJfQUdFTlQiLCJ2ZXJzaW9uIiwiTUFYX01FU1NBR0UiLCJCQU5fVElNRSIsIkJBTl9TQ09SRSIsIm5vbmNlIiwicmFuZG9tQnl0ZXMiLCJaRVJPX0tFWSIsIkJ1ZmZlciIsImFsbG9jIiwiWkVST19TSUciLCJaRVJPX05PTkNFIiwiTUFYX0lOViIsIk1BWF9SRVFVRVNUIiwiTUFYX0JMT0NLX1JFUVVFU1QiLCJNQVhfVFhfUkVRVUVTVCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBRUEsYUFFQTtBQUNBO0FBQ0EsRyw4MEVBSVk7eUZBRlosS0FBTUEsQ0FBQUEsTUFBTSx5QkFBR0MsT0FBTyxDQUFDLG9CQUFELENBQVYsQ0FBWixDQUNBLEtBQU1DLENBQUFBLEdBQUcseUJBQUdELE9BQU8sQ0FBQyxRQUFELENBQVYsQ0FBVCxDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRyx1QkFFQUUsT0FBTyxDQUFDQyxnQkFBUixDQUEyQixLQUEzQixDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRyx1QkFFQUQsT0FBTyxDQUFDRSxXQUFSLENBQXNCLEtBQXRCLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHLHVCQUVBRixPQUFPLENBQUNHLGVBQVIsQ0FBMEIsS0FBMUIsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtB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bi5qcyAtIHAycCBjb25zdGFudHMgZm9yIGJjb2luXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBGZWRvciBJbmR1dG55IChNSVQgTGljZW5zZSlcclxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIENocmlzdG9waGVyIEplZmZyZXkgKE1JVCBMaWNlbnNlKS5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2Jjb2luLW9yZy9iY29pblxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAbW9kdWxlIG5ldC9jb21tb25cclxuICovXHJcblxyXG5jb25zdCByYW5kb20gPSByZXF1aXJlKCdiY3J5cHRvL2xpYi9yYW5kb20nKTtcclxuY29uc3QgcGtnID0gcmVxdWlyZSgnLi4vcGtnJyk7XHJcblxyXG4vKipcclxuICogRGVmYXVsdCBwcm90b2NvbCB2ZXJzaW9uLlxyXG4gKiBAY29uc3Qge051bWJlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLlBST1RPQ09MX1ZFUlNJT04gPSA3MDAxNTtcclxuXHJcbi8qKlxyXG4gKiBNaW5pbXVtIHByb3RvY29sIHZlcnNpb24gd2UncmUgd2lsbGluZyB0byB0YWxrIHRvLlxyXG4gKiBAY29uc3Qge051bWJlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLk1JTl9WRVJTSU9OID0gNzAwMDE7XHJcblxyXG4vKipcclxuICogTWluaW11bSB2ZXJzaW9uIGZvciBnZXRoZWFkZXJzLlxyXG4gKiBAY29uc3Qge051bWJlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLkhFQURFUlNfVkVSU0lPTiA9IDMxODAwO1xyXG5cclxuLyoqXHJcbiAqIE1pbmltdW0gdmVyc2lvbiBmb3IgcG9uZy5cclxuICogQGNvbnN0IHtOdW1iZXJ9XHJcbiAqIEBkZWZhdWx0XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5QT05HX1ZFUlNJT04gPSA2MDAwMDtcclxuXHJcbi8qKlxyXG4gKiBNaW5pbXVtIHZlcnNpb24gZm9yIGJpcDM3LlxyXG4gKiBAY29uc3Qge051bWJlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLkJMT09NX1ZFUlNJT04gPSA3MDAxMTtcclxuXHJcbi8qKlxyXG4gKiBNaW5pbXVtIHZlcnNpb24gZm9yIGJpcDE1Mi5cclxuICogQGNvbnN0IHtOdW1iZXJ9XHJcbiAqIEBkZWZhdWx0XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5TRU5ESEVBREVSU19WRVJTSU9OID0gNzAxMjtcclxuXHJcbi8qKlxyXG4gKiBNaW5pbXVtIHZlcnNpb24gZm9yIGJpcDE1Mi5cclxuICogQGNvbnN0IHtOdW1iZXJ9XHJcbiAqIEBkZWZhdWx0XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5DT01QQUNUX1ZFUlNJT04gPSA3MDAxNDtcclxuXHJcbi8qKlxyXG4gKiBNaW5pbXVtIHZlcnNpb24gZm9yIGJpcDE1MitzZWd3aXQuXHJcbiAqIEBjb25zdCB7TnVtYmVyfVxyXG4gKiBAZGVmYXVsdFxyXG4gKi9cclxuXHJcbmV4cG9ydHMuQ09NUEFDVF9XSVRORVNTX1ZFUlNJT04gPSA3MDAxNTtcclxuXHJcbi8qKlxyXG4gKiBTZXJ2aWNlIGJpdHMuXHJcbiAqIEBlbnVtIHtOdW1iZXJ9XHJcbiAqIEBkZWZhdWx0XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5zZXJ2aWNlcyA9IHtcclxuICAvKipcclxuICAgKiBXaGV0aGVyIG5ldHdvcmsgc2VydmljZXMgYXJlIGVuYWJsZWQuXHJcbiAgICovXHJcblxyXG4gIE5FVFdPUks6IDEgPDwgMCxcclxuXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0aGUgcGVlciBzdXBwb3J0cyB0aGUgZ2V0dXR4b3MgcGFja2V0LlxyXG4gICAqL1xyXG5cclxuICBHRVRVVFhPOiAxIDw8IDEsXHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIHBlZXIgc3VwcG9ydHMgQklQMzcuXHJcbiAgICovXHJcblxyXG4gIEJMT09NOiAxIDw8IDIsXHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIHBlZXIgc3VwcG9ydHMgc2VncmVnYXRlZCB3aXRuZXNzLlxyXG4gICAqL1xyXG5cclxuICBXSVRORVNTOiAxIDw8IDNcclxufTtcclxuXHJcbi8qKlxyXG4gKiBCY29pbidzIHNlcnZpY2VzICh3ZSBzdXBwb3J0IGV2ZXJ5dGhpbmcpLlxyXG4gKiBAY29uc3Qge051bWJlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLkxPQ0FMX1NFUlZJQ0VTID0gMFxyXG4gIHwgZXhwb3J0cy5zZXJ2aWNlcy5ORVRXT1JLXHJcbiAgfCBleHBvcnRzLnNlcnZpY2VzLldJVE5FU1M7XHJcblxyXG4vKipcclxuICogUmVxdWlyZWQgc2VydmljZXMgKG5ldHdvcmsgYW5kIHNlZ3dpdCkuXHJcbiAqIEBjb25zdCB7TnVtYmVyfVxyXG4gKiBAZGVmYXVsdFxyXG4gKi9cclxuXHJcbmV4cG9ydHMuUkVRVUlSRURfU0VSVklDRVMgPSAwXHJcbiAgfCBleHBvcnRzLnNlcnZpY2VzLk5FVFdPUks7XHJcblxyXG4vKipcclxuICogRGVmYXVsdCB1c2VyIGFnZW50OiBgL2Jjb2luOlt2ZXJzaW9uXS9gLlxyXG4gKiBAY29uc3Qge1N0cmluZ31cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLlVTRVJfQUdFTlQgPSBgL2Jjb2luOiR7cGtnLnZlcnNpb259L2A7XHJcblxyXG4vKipcclxuICogTWF4IG1lc3NhZ2Ugc2l6ZSAofjRtYiB3aXRoIHNlZ3dpdCwgZm9ybWVybHkgMm1iKVxyXG4gKiBAY29uc3Qge051bWJlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLk1BWF9NRVNTQUdFID0gNCAqIDEwMDAgKiAxMDAwO1xyXG5cclxuLyoqXHJcbiAqIEFtb3VudCBvZiB0aW1lIHRvIGJhbiBtaXNiaGVhdmluZyBwZWVycy5cclxuICogQGNvbnN0IHtOdW1iZXJ9XHJcbiAqIEBkZWZhdWx0XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5CQU5fVElNRSA9IDI0ICogNjAgKiA2MDtcclxuXHJcbi8qKlxyXG4gKiBCYW4gc2NvcmUgdGhyZXNob2xkIGJlZm9yZSBiYW4gaXMgcGxhY2VkIGluIGVmZmVjdC5cclxuICogQGNvbnN0IHtOdW1iZXJ9XHJcbiAqIEBkZWZhdWx0XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5CQU5fU0NPUkUgPSAxMDA7XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgbm9uY2UuXHJcbiAqIEByZXR1cm5zIHtCdWZmZXJ9XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5ub25jZSA9IGZ1bmN0aW9uIG5vbmNlKCkge1xyXG4gIHJldHVybiByYW5kb20ucmFuZG9tQnl0ZXMoOCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQSBjb21wcmVzc2VkIHB1YmtleSBvZiBhbGwgemVyb2VzLlxyXG4gKiBAY29uc3Qge0J1ZmZlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLlpFUk9fS0VZID0gQnVmZmVyLmFsbG9jKDMzLCAweDAwKTtcclxuXHJcbi8qKlxyXG4gKiBBIDY0IGJ5dGUgc2lnbmF0dXJlIG9mIGFsbCB6ZXJvZXMuXHJcbiAqIEBjb25zdCB7QnVmZmVyfVxyXG4gKiBAZGVmYXVsdFxyXG4gKi9cclxuXHJcbmV4cG9ydHMuWkVST19TSUcgPSBCdWZmZXIuYWxsb2MoNjQsIDB4MDApO1xyXG5cclxuLyoqXHJcbiAqIDggemVybyBieXRlcy5cclxuICogQGNvbnN0IHtCdWZmZXJ9XHJcbiAqIEBkZWZhdWx0XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5aRVJPX05PTkNFID0gQnVmZmVyLmFsbG9jKDgsIDB4MDApO1xyXG5cclxuLyoqXHJcbiAqIE1heGltdW0gaW52L2dldGRhdGEgc2l6ZS5cclxuICogQGNvbnN0IHtOdW1iZXJ9XHJcbiAqIEBkZWZhdWx0XHJcbiAqL1xyXG5cclxuZXhwb3J0cy5NQVhfSU5WID0gNTAwMDA7XHJcblxyXG4vKipcclxuICogTWF4aW11bSBudW1iZXIgb2YgcmVxdWVzdHMuXHJcbiAqIEBjb25zdCB7TnVtYmVyfVxyXG4gKiBAZGVmYXVsdFxyXG4gKi9cclxuXHJcbmV4cG9ydHMuTUFYX1JFUVVFU1QgPSA1MDAwO1xyXG5cclxuLyoqXHJcbiAqIE1heGltdW0gbnVtYmVyIG9mIGJsb2NrIHJlcXVlc3RzLlxyXG4gKiBAY29uc3Qge051bWJlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLk1BWF9CTE9DS19SRVFVRVNUID0gNTAwMDAgKyAxMDAwO1xyXG5cclxuLyoqXHJcbiAqIE1heGltdW0gbnVtYmVyIG9mIHR4IHJlcXVlc3RzLlxyXG4gKiBAY29uc3Qge051bWJlcn1cclxuICogQGRlZmF1bHRcclxuICovXHJcblxyXG5leHBvcnRzLk1BWF9UWF9SRVFVRVNUID0gMTAwMDA7XHJcbiJdfQ==
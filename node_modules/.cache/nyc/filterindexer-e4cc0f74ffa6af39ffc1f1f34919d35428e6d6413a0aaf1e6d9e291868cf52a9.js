/*!
 * filterindexer.js - filter indexer
 * Copyright (c) 2018, the bcoin developers (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_2mj71udgty(){var path="E:\\Projects\\Test\\bcoin\\lib\\indexer\\filterindexer.js";var hash="8a692ebc41d773b705be3acd075ac8565c585119";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\indexer\\filterindexer.js",statementMap:{"0":{start:{line:9,column:12},end:{line:9,column:26}},"1":{start:{line:10,column:15},end:{line:10,column:31}},"2":{start:{line:11,column:16},end:{line:11,column:36}},"3":{start:{line:12,column:18},end:{line:12,column:50}},"4":{start:{line:13,column:15},end:{line:13,column:46}},"5":{start:{line:29,column:4},end:{line:29,column:29}},"6":{start:{line:31,column:4},end:{line:31,column:39}},"7":{start:{line:41,column:21},end:{line:41,column:51}},"8":{start:{line:44,column:19},end:{line:44,column:31}},"9":{start:{line:45,column:4},end:{line:45,column:40}},"10":{start:{line:46,column:4},end:{line:46,column:60}},"11":{start:{line:48,column:4},end:{line:48,column:30}},"12":{start:{line:60,column:17},end:{line:60,column:29}},"13":{start:{line:61,column:17},end:{line:61,column:60}},"14":{start:{line:62,column:18},end:{line:62,column:38}},"15":{start:{line:64,column:19},end:{line:64,column:31}},"16":{start:{line:65,column:4},end:{line:65,column:39}},"17":{start:{line:66,column:4},end:{line:66,column:34}},"18":{start:{line:67,column:4},end:{line:67,column:56}},"19":{start:{line:77,column:4},end:{line:77,column:45}},"20":{start:{line:88,column:4},end:{line:88,column:17}},"21":{start:{line:90,column:19},end:{line:90,column:53}},"22":{start:{line:91,column:4},end:{line:92,column:18}},"23":{start:{line:92,column:6},end:{line:92,column:18}},"24":{start:{line:94,column:4},end:{line:94,column:34}},"25":{start:{line:104,column:4},end:{line:104,column:17}},"26":{start:{line:106,column:4},end:{line:106,column:46}},"27":{start:{line:110,column:0},end:{line:110,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:23},end:{line:32,column:3}},line:28},"1":{name:"(anonymous_1)",decl:{start:{line:40,column:2},end:{line:40,column:3}},loc:{start:{line:40,column:22},end:{line:49,column:3}},line:40},"2":{name:"(anonymous_2)",decl:{start:{line:59,column:2},end:{line:59,column:3}},loc:{start:{line:59,column:38},end:{line:68,column:3}},line:59},"3":{name:"(anonymous_3)",decl:{start:{line:76,column:2},end:{line:76,column:3}},loc:{start:{line:76,column:25},end:{line:78,column:3}},line:76},"4":{name:"(anonymous_4)",decl:{start:{line:87,column:2},end:{line:87,column:3}},loc:{start:{line:87,column:24},end:{line:95,column:3}},line:87},"5":{name:"(anonymous_5)",decl:{start:{line:103,column:2},end:{line:103,column:3}},loc:{start:{line:103,column:30},end:{line:107,column:3}},line:103}},branchMap:{"0":{loc:{start:{line:91,column:4},end:{line:92,column:18}},type:"if",locations:[{start:{line:91,column:4},end:{line:92,column:18}},{start:{line:91,column:4},end:{line:92,column:18}}],line:91}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8a692ebc41d773b705be3acd075ac8565c585119"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2mj71udgty=function(){return actualCoverage;};}return actualCoverage;}cov_2mj71udgty();const bdb=(cov_2mj71udgty().s[0]++,require('bdb'));const assert=(cov_2mj71udgty().s[1]++,require('bsert'));const Indexer=(cov_2mj71udgty().s[2]++,require('./indexer'));const consensus=(cov_2mj71udgty().s[3]++,require('../protocol/consensus'));const Filter=(cov_2mj71udgty().s[4]++,require('../primitives/filter'));/**
 * FilterIndexer
 * @alias module:indexer.FilterIndexer
 * @extends Indexer
 */class FilterIndexer extends Indexer{/**
   * Create a indexer
   * @constructor
   * @param {Object} options
   */constructor(options){cov_2mj71udgty().f[0]++;cov_2mj71udgty().s[5]++;super('filter',options);cov_2mj71udgty().s[6]++;this.db=bdb.create(this.options);}/**
   * Store genesis previous filter header.
   * @private
   * @returns {Promise}
   */async saveGenesis(){cov_2mj71udgty().f[1]++;const prevHash=(cov_2mj71udgty().s[7]++,this.network.genesis.prevBlock);// Genesis prev filter headers are defined to be zero hashes
const filter=(cov_2mj71udgty().s[8]++,new Filter());cov_2mj71udgty().s[9]++;filter.header=consensus.ZERO_HASH;cov_2mj71udgty().s[10]++;await this.blocks.writeFilter(prevHash,filter.toRaw());cov_2mj71udgty().s[11]++;await super.saveGenesis();}/**
   * Index compact filters.
   * @private
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   */async indexBlock(meta,block,view){cov_2mj71udgty().f[2]++;const hash=(cov_2mj71udgty().s[12]++,block.hash());const prev=(cov_2mj71udgty().s[13]++,await this.getFilterHeader(block.prevBlock));const basic=(cov_2mj71udgty().s[14]++,block.toFilter(view));const filter=(cov_2mj71udgty().s[15]++,new Filter());cov_2mj71udgty().s[16]++;filter.header=basic.header(prev);cov_2mj71udgty().s[17]++;filter.filter=basic.toRaw();cov_2mj71udgty().s[18]++;await this.blocks.writeFilter(hash,filter.toRaw());}/**
   * Prune compact filters.
   * @private
   * @param {BlockMeta} meta
   */async pruneBlock(meta){cov_2mj71udgty().f[3]++;cov_2mj71udgty().s[19]++;await this.blocks.pruneFilter(meta.hash);}/**
   * Retrieve compact filter by hash.
   * @param {Hash} hash
   * @param {Number} type
   * @returns {Promise} - Returns {@link Filter}.
   */async getFilter(hash){cov_2mj71udgty().f[4]++;cov_2mj71udgty().s[20]++;assert(hash);const filter=(cov_2mj71udgty().s[21]++,await this.blocks.readFilter(hash));cov_2mj71udgty().s[22]++;if(!filter){cov_2mj71udgty().b[0][0]++;cov_2mj71udgty().s[23]++;return null;}else{cov_2mj71udgty().b[0][1]++;}cov_2mj71udgty().s[24]++;return Filter.fromRaw(filter);}/**
   * Retrieve compact filter header by hash.
   * @param {Hash} hash
   * @returns {Promise} - Returns {@link Hash}.
   */async getFilterHeader(hash){cov_2mj71udgty().f[5]++;cov_2mj71udgty().s[25]++;assert(hash);cov_2mj71udgty().s[26]++;return this.blocks.readFilterHeader(hash);}}cov_2mj71udgty().s[27]++;module.exports=FilterIndexer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlcmluZGV4ZXIuanMiXSwibmFtZXMiOlsiYmRiIiwicmVxdWlyZSIsImFzc2VydCIsIkluZGV4ZXIiLCJjb25zZW5zdXMiLCJGaWx0ZXIiLCJGaWx0ZXJJbmRleGVyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiZGIiLCJjcmVhdGUiLCJzYXZlR2VuZXNpcyIsInByZXZIYXNoIiwibmV0d29yayIsImdlbmVzaXMiLCJwcmV2QmxvY2siLCJmaWx0ZXIiLCJoZWFkZXIiLCJaRVJPX0hBU0giLCJibG9ja3MiLCJ3cml0ZUZpbHRlciIsInRvUmF3IiwiaW5kZXhCbG9jayIsIm1ldGEiLCJibG9jayIsInZpZXciLCJoYXNoIiwicHJldiIsImdldEZpbHRlckhlYWRlciIsImJhc2ljIiwidG9GaWx0ZXIiLCJwcnVuZUJsb2NrIiwicHJ1bmVGaWx0ZXIiLCJnZXRGaWx0ZXIiLCJyZWFkRmlsdGVyIiwiZnJvbVJhdyIsInJlYWRGaWx0ZXJIZWFkZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBRUEsYSxzNUdBU1k7MkZBUFosS0FBTUEsQ0FBQUEsR0FBRywwQkFBR0MsT0FBTyxDQUFDLEtBQUQsQ0FBVixDQUFULENBQ0EsS0FBTUMsQ0FBQUEsTUFBTSwwQkFBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBVixDQUFaLENBQ0EsS0FBTUUsQ0FBQUEsT0FBTywwQkFBR0YsT0FBTyxDQUFDLFdBQUQsQ0FBVixDQUFiLENBQ0EsS0FBTUcsQ0FBQUEsU0FBUywwQkFBR0gsT0FBTyxDQUFDLHVCQUFELENBQVYsQ0FBZixDQUNBLEtBQU1JLENBQUFBLE1BQU0sMEJBQUdKLE9BQU8sQ0FBQyxzQkFBRCxDQUFWLENBQVosQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBRUEsS0FBTUssQ0FBQUEsYUFBTixRQUE0QkgsQ0FBQUEsT0FBUSxDQUNsQztBQUNGO0FBQ0E7QUFDQTtBQUNBLEtBRUVJLFdBQVcsQ0FBQ0MsT0FBRCxDQUFVLGlEQUNuQixNQUFNLFFBQU4sQ0FBZ0JBLE9BQWhCLEVBRG1CLHdCQUduQixLQUFLQyxFQUFMLENBQVVULEdBQUcsQ0FBQ1UsTUFBSixDQUFXLEtBQUtGLE9BQWhCLENBQVYsQ0FDRCxDQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsS0FFRSxLQUFNRyxDQUFBQSxXQUFOLEVBQW9CLHlCQUNsQixLQUFNQyxDQUFBQSxRQUFRLDBCQUFHLEtBQUtDLE9BQUwsQ0FBYUMsT0FBYixDQUFxQkMsU0FBeEIsQ0FBZCxDQUVBO0FBQ0EsS0FBTUMsQ0FBQUEsTUFBTSwwQkFBRyxHQUFJWCxDQUFBQSxNQUFKLEVBQUgsQ0FBWixDQUprQix3QkFLbEJXLE1BQU0sQ0FBQ0MsTUFBUCxDQUFnQmIsU0FBUyxDQUFDYyxTQUExQixDQUxrQix5QkFNbEIsS0FBTSxNQUFLQyxNQUFMLENBQVlDLFdBQVosQ0FBd0JSLFFBQXhCLENBQWtDSSxNQUFNLENBQUNLLEtBQVAsRUFBbEMsQ0FBTixDQU5rQix5QkFRbEIsS0FBTSxPQUFNVixXQUFOLEVBQU4sQ0FDRCxDQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBRUUsS0FBTVcsQ0FBQUEsVUFBTixDQUFpQkMsSUFBakIsQ0FBdUJDLEtBQXZCLENBQThCQyxJQUE5QixDQUFvQyx5QkFDbEMsS0FBTUMsQ0FBQUEsSUFBSSwyQkFBR0YsS0FBSyxDQUFDRSxJQUFOLEVBQUgsQ0FBVixDQUNBLEtBQU1DLENBQUFBLElBQUksMkJBQUcsS0FBTSxNQUFLQyxlQUFMLENBQXFCSixLQUFLLENBQUNULFNBQTNCLENBQVQsQ0FBVixDQUNBLEtBQU1jLENBQUFBLEtBQUssMkJBQUdMLEtBQUssQ0FBQ00sUUFBTixDQUFlTCxJQUFmLENBQUgsQ0FBWCxDQUVBLEtBQU1ULENBQUFBLE1BQU0sMkJBQUcsR0FBSVgsQ0FBQUEsTUFBSixFQUFILENBQVosQ0FMa0MseUJBTWxDVyxNQUFNLENBQUNDLE1BQVAsQ0FBZ0JZLEtBQUssQ0FBQ1osTUFBTixDQUFhVSxJQUFiLENBQWhCLENBTmtDLHlCQU9sQ1gsTUFBTSxDQUFDQSxNQUFQLENBQWdCYSxLQUFLLENBQUNSLEtBQU4sRUFBaEIsQ0FQa0MseUJBUWxDLEtBQU0sTUFBS0YsTUFBTCxDQUFZQyxXQUFaLENBQXdCTSxJQUF4QixDQUE4QlYsTUFBTSxDQUFDSyxLQUFQLEVBQTlCLENBQU4sQ0FDRCxDQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsS0FFRSxLQUFNVSxDQUFBQSxVQUFOLENBQWlCUixJQUFqQixDQUF1QixrREFDckIsS0FBTSxNQUFLSixNQUFMLENBQVlhLFdBQVosQ0FBd0JULElBQUksQ0FBQ0csSUFBN0IsQ0FBTixDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBRUUsS0FBTU8sQ0FBQUEsU0FBTixDQUFnQlAsSUFBaEIsQ0FBc0Isa0RBQ3BCeEIsTUFBTSxDQUFDd0IsSUFBRCxDQUFOLENBRUEsS0FBTVYsQ0FBQUEsTUFBTSwyQkFBRyxLQUFNLE1BQUtHLE1BQUwsQ0FBWWUsVUFBWixDQUF1QlIsSUFBdkIsQ0FBVCxDQUFaLENBSG9CLHlCQUlwQixHQUFJLENBQUNWLE1BQUwsQ0FDRSwyREFBTyxLQUFQLENBQVksQ0FEZCxpQ0FKb0IseUJBT3BCLE1BQU9YLENBQUFBLE1BQU0sQ0FBQzhCLE9BQVAsQ0FBZW5CLE1BQWYsQ0FBUCxDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQSxLQUVFLEtBQU1ZLENBQUFBLGVBQU4sQ0FBc0JGLElBQXRCLENBQTRCLGtEQUMxQnhCLE1BQU0sQ0FBQ3dCLElBQUQsQ0FBTixDQUQwQix5QkFHMUIsTUFBTyxNQUFLUCxNQUFMLENBQVlpQixnQkFBWixDQUE2QlYsSUFBN0IsQ0FBUCxDQUNELENBdEZpQyxDLHlCQXlGcENXLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQmhDLGFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGZpbHRlcmluZGV4ZXIuanMgLSBmaWx0ZXIgaW5kZXhlclxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgsIHRoZSBiY29pbiBkZXZlbG9wZXJzIChNSVQgTGljZW5zZSkuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9iY29pbi1vcmcvYmNvaW5cclxuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBiZGIgPSByZXF1aXJlKCdiZGInKTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYnNlcnQnKTtcclxuY29uc3QgSW5kZXhlciA9IHJlcXVpcmUoJy4vaW5kZXhlcicpO1xyXG5jb25zdCBjb25zZW5zdXMgPSByZXF1aXJlKCcuLi9wcm90b2NvbC9jb25zZW5zdXMnKTtcclxuY29uc3QgRmlsdGVyID0gcmVxdWlyZSgnLi4vcHJpbWl0aXZlcy9maWx0ZXInKTtcclxuXHJcbi8qKlxyXG4gKiBGaWx0ZXJJbmRleGVyXHJcbiAqIEBhbGlhcyBtb2R1bGU6aW5kZXhlci5GaWx0ZXJJbmRleGVyXHJcbiAqIEBleHRlbmRzIEluZGV4ZXJcclxuICovXHJcblxyXG5jbGFzcyBGaWx0ZXJJbmRleGVyIGV4dGVuZHMgSW5kZXhlciB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgaW5kZXhlclxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAgICovXHJcblxyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgIHN1cGVyKCdmaWx0ZXInLCBvcHRpb25zKTtcclxuXHJcbiAgICB0aGlzLmRiID0gYmRiLmNyZWF0ZSh0aGlzLm9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcmUgZ2VuZXNpcyBwcmV2aW91cyBmaWx0ZXIgaGVhZGVyLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHJldHVybnMge1Byb21pc2V9XHJcbiAgICovXHJcblxyXG4gIGFzeW5jIHNhdmVHZW5lc2lzKCkge1xyXG4gICAgY29uc3QgcHJldkhhc2ggPSB0aGlzLm5ldHdvcmsuZ2VuZXNpcy5wcmV2QmxvY2s7XHJcblxyXG4gICAgLy8gR2VuZXNpcyBwcmV2IGZpbHRlciBoZWFkZXJzIGFyZSBkZWZpbmVkIHRvIGJlIHplcm8gaGFzaGVzXHJcbiAgICBjb25zdCBmaWx0ZXIgPSBuZXcgRmlsdGVyKCk7XHJcbiAgICBmaWx0ZXIuaGVhZGVyID0gY29uc2Vuc3VzLlpFUk9fSEFTSDtcclxuICAgIGF3YWl0IHRoaXMuYmxvY2tzLndyaXRlRmlsdGVyKHByZXZIYXNoLCBmaWx0ZXIudG9SYXcoKSk7XHJcblxyXG4gICAgYXdhaXQgc3VwZXIuc2F2ZUdlbmVzaXMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGV4IGNvbXBhY3QgZmlsdGVycy5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7QmxvY2tNZXRhfSBtZXRhXHJcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2tcclxuICAgKiBAcGFyYW0ge0NvaW5WaWV3fSB2aWV3XHJcbiAgICovXHJcblxyXG4gIGFzeW5jIGluZGV4QmxvY2sobWV0YSwgYmxvY2ssIHZpZXcpIHtcclxuICAgIGNvbnN0IGhhc2ggPSBibG9jay5oYXNoKCk7XHJcbiAgICBjb25zdCBwcmV2ID0gYXdhaXQgdGhpcy5nZXRGaWx0ZXJIZWFkZXIoYmxvY2sucHJldkJsb2NrKTtcclxuICAgIGNvbnN0IGJhc2ljID0gYmxvY2sudG9GaWx0ZXIodmlldyk7XHJcblxyXG4gICAgY29uc3QgZmlsdGVyID0gbmV3IEZpbHRlcigpO1xyXG4gICAgZmlsdGVyLmhlYWRlciA9IGJhc2ljLmhlYWRlcihwcmV2KTtcclxuICAgIGZpbHRlci5maWx0ZXIgPSBiYXNpYy50b1JhdygpO1xyXG4gICAgYXdhaXQgdGhpcy5ibG9ja3Mud3JpdGVGaWx0ZXIoaGFzaCwgZmlsdGVyLnRvUmF3KCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJ1bmUgY29tcGFjdCBmaWx0ZXJzLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtCbG9ja01ldGF9IG1ldGFcclxuICAgKi9cclxuXHJcbiAgYXN5bmMgcHJ1bmVCbG9jayhtZXRhKSB7XHJcbiAgICBhd2FpdCB0aGlzLmJsb2Nrcy5wcnVuZUZpbHRlcihtZXRhLmhhc2gpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmUgY29tcGFjdCBmaWx0ZXIgYnkgaGFzaC5cclxuICAgKiBAcGFyYW0ge0hhc2h9IGhhc2hcclxuICAgKiBAcGFyYW0ge051bWJlcn0gdHlwZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIFJldHVybnMge0BsaW5rIEZpbHRlcn0uXHJcbiAgICovXHJcblxyXG4gIGFzeW5jIGdldEZpbHRlcihoYXNoKSB7XHJcbiAgICBhc3NlcnQoaGFzaCk7XHJcblxyXG4gICAgY29uc3QgZmlsdGVyID0gYXdhaXQgdGhpcy5ibG9ja3MucmVhZEZpbHRlcihoYXNoKTtcclxuICAgIGlmICghZmlsdGVyKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICByZXR1cm4gRmlsdGVyLmZyb21SYXcoZmlsdGVyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIGNvbXBhY3QgZmlsdGVyIGhlYWRlciBieSBoYXNoLlxyXG4gICAqIEBwYXJhbSB7SGFzaH0gaGFzaFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIFJldHVybnMge0BsaW5rIEhhc2h9LlxyXG4gICAqL1xyXG5cclxuICBhc3luYyBnZXRGaWx0ZXJIZWFkZXIoaGFzaCkge1xyXG4gICAgYXNzZXJ0KGhhc2gpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmJsb2Nrcy5yZWFkRmlsdGVySGVhZGVyKGhhc2gpO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGaWx0ZXJJbmRleGVyO1xyXG4iXX0=
/*!
 * packets.js - packets for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';/**
 * @module net/packets
 */function cov_23a1ybjrqy(){var path="E:\\Projects\\Test\\bcoin\\lib\\net\\packets.js";var hash="93fc3bb89a32fee5493e968d5f0dfd09ce06dd0f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\net\\packets.js",statementMap:{"0":{start:{line:14,column:15},end:{line:14,column:31}},"1":{start:{line:15,column:12},end:{line:15,column:28}},"2":{start:{line:16,column:22},end:{line:16,column:40}},"3":{start:{line:17,column:15},end:{line:17,column:34}},"4":{start:{line:18,column:13},end:{line:18,column:37}},"5":{start:{line:19,column:15},end:{line:19,column:34}},"6":{start:{line:20,column:19},end:{line:20,column:42}},"7":{start:{line:21,column:18},end:{line:21,column:50}},"8":{start:{line:22,column:16},end:{line:22,column:48}},"9":{start:{line:23,column:16},end:{line:23,column:48}},"10":{start:{line:24,column:17},end:{line:24,column:50}},"11":{start:{line:25,column:20},end:{line:25,column:56}},"12":{start:{line:26,column:11},end:{line:26,column:38}},"13":{start:{line:27,column:19},end:{line:27,column:22}},"14":{start:{line:28,column:14},end:{line:28,column:29}},"15":{start:{line:29,column:24},end:{line:29,column:43}},"16":{start:{line:37,column:0},end:{line:68,column:2}},"17":{start:{line:76,column:0},end:{line:107,column:2}},"18":{start:{line:120,column:4},end:{line:120,column:19}},"19":{start:{line:121,column:4},end:{line:121,column:18}},"20":{start:{line:130,column:4},end:{line:130,column:13}},"21":{start:{line:139,column:4},end:{line:139,column:14}},"22":{start:{line:148,column:4},end:{line:148,column:17}},"23":{start:{line:157,column:4},end:{line:157,column:16}},"24":{start:{line:166,column:4},end:{line:166,column:16}},"25":{start:{line:203,column:4},end:{line:203,column:12}},"26":{start:{line:205,column:4},end:{line:205,column:25}},"27":{start:{line:206,column:4},end:{line:206,column:38}},"28":{start:{line:208,column:4},end:{line:208,column:43}},"29":{start:{line:209,column:4},end:{line:209,column:42}},"30":{start:{line:210,column:4},end:{line:210,column:27}},"31":{start:{line:211,column:4},end:{line:211,column:35}},"32":{start:{line:212,column:4},end:{line:212,column:34}},"33":{start:{line:213,column:4},end:{line:213,column:35}},"34":{start:{line:214,column:4},end:{line:214,column:35}},"35":{start:{line:215,column:4},end:{line:215,column:20}},"36":{start:{line:216,column:4},end:{line:216,column:25}},"37":{start:{line:218,column:4},end:{line:219,column:32}},"38":{start:{line:219,column:6},end:{line:219,column:32}},"39":{start:{line:229,column:4},end:{line:230,column:37}},"40":{start:{line:230,column:6},end:{line:230,column:37}},"41":{start:{line:232,column:4},end:{line:233,column:39}},"42":{start:{line:233,column:6},end:{line:233,column:39}},"43":{start:{line:235,column:4},end:{line:236,column:31}},"44":{start:{line:236,column:6},end:{line:236,column:31}},"45":{start:{line:238,column:4},end:{line:239,column:46}},"46":{start:{line:239,column:6},end:{line:239,column:46}},"47":{start:{line:241,column:4},end:{line:242,column:44}},"48":{start:{line:242,column:6},end:{line:242,column:44}},"49":{start:{line:244,column:4},end:{line:245,column:33}},"50":{start:{line:245,column:6},end:{line:245,column:33}},"51":{start:{line:247,column:4},end:{line:248,column:33}},"52":{start:{line:248,column:6},end:{line:248,column:33}},"53":{start:{line:250,column:4},end:{line:251,column:35}},"54":{start:{line:251,column:6},end:{line:251,column:35}},"55":{start:{line:253,column:4},end:{line:254,column:37}},"56":{start:{line:254,column:6},end:{line:254,column:37}},"57":{start:{line:256,column:4},end:{line:256,column:16}},"58":{start:{line:266,column:4},end:{line:266,column:43}},"59":{start:{line:275,column:15},end:{line:275,column:16}},"60":{start:{line:276,column:4},end:{line:276,column:15}},"61":{start:{line:277,column:4},end:{line:277,column:39}},"62":{start:{line:278,column:4},end:{line:278,column:38}},"63":{start:{line:279,column:4},end:{line:279,column:14}},"64":{start:{line:280,column:4},end:{line:280,column:56}},"65":{start:{line:281,column:4},end:{line:281,column:14}},"66":{start:{line:282,column:4},end:{line:282,column:16}},"67":{start:{line:291,column:4},end:{line:291,column:30}},"68":{start:{line:292,column:4},end:{line:292,column:31}},"69":{start:{line:293,column:4},end:{line:293,column:19}},"70":{start:{line:294,column:4},end:{line:294,column:27}},"71":{start:{line:295,column:4},end:{line:295,column:36}},"72":{start:{line:296,column:4},end:{line:296,column:35}},"73":{start:{line:297,column:4},end:{line:297,column:30}},"74":{start:{line:298,column:4},end:{line:298,column:43}},"75":{start:{line:299,column:4},end:{line:299,column:29}},"76":{start:{line:300,column:4},end:{line:300,column:37}},"77":{start:{line:301,column:4},end:{line:301,column:14}},"78":{start:{line:310,column:17},end:{line:310,column:31}},"79":{start:{line:311,column:4},end:{line:311,column:51}},"80":{start:{line:321,column:4},end:{line:321,column:32}},"81":{start:{line:322,column:4},end:{line:322,column:33}},"82":{start:{line:326,column:4},end:{line:326,column:17}},"83":{start:{line:328,column:4},end:{line:328,column:29}},"84":{start:{line:329,column:4},end:{line:329,column:38}},"85":{start:{line:331,column:4},end:{line:334,column:5}},"86":{start:{line:332,column:6},end:{line:332,column:39}},"87":{start:{line:333,column:6},end:{line:333,column:35}},"88":{start:{line:336,column:4},end:{line:337,column:50}},"89":{start:{line:337,column:6},end:{line:337,column:50}},"90":{start:{line:339,column:4},end:{line:340,column:33}},"91":{start:{line:340,column:6},end:{line:340,column:33}},"92":{start:{line:342,column:4},end:{line:343,column:39}},"93":{start:{line:343,column:6},end:{line:343,column:39}},"94":{start:{line:345,column:4},end:{line:346,column:25}},"95":{start:{line:346,column:6},end:{line:346,column:25}},"96":{start:{line:348,column:4},end:{line:348,column:54}},"97":{start:{line:349,column:4},end:{line:349,column:53}},"98":{start:{line:352,column:4},end:{line:353,column:22}},"99":{start:{line:353,column:6},end:{line:353,column:22}},"100":{start:{line:355,column:4},end:{line:355,column:16}},"101":{start:{line:365,column:4},end:{line:365,column:37}},"102":{start:{line:375,column:4},end:{line:375,column:43}},"103":{start:{line:386,column:4},end:{line:387,column:36}},"104":{start:{line:387,column:6},end:{line:387,column:36}},"105":{start:{line:388,column:4},end:{line:388,column:41}},"106":{start:{line:404,column:4},end:{line:404,column:12}},"107":{start:{line:405,column:4},end:{line:405,column:24}},"108":{start:{line:406,column:4},end:{line:406,column:37}},"109":{start:{line:416,column:4},end:{line:416,column:37}},"110":{start:{line:427,column:4},end:{line:428,column:36}},"111":{start:{line:428,column:6},end:{line:428,column:36}},"112":{start:{line:429,column:4},end:{line:429,column:36}},"113":{start:{line:447,column:4},end:{line:447,column:12}},"114":{start:{line:449,column:4},end:{line:449,column:22}},"115":{start:{line:450,column:4},end:{line:450,column:35}},"116":{start:{line:452,column:4},end:{line:452,column:31}},"117":{start:{line:461,column:4},end:{line:461,column:30}},"118":{start:{line:470,column:17},end:{line:470,column:31}},"119":{start:{line:471,column:4},end:{line:471,column:51}},"120":{start:{line:480,column:4},end:{line:481,column:32}},"121":{start:{line:481,column:6},end:{line:481,column:32}},"122":{start:{line:482,column:4},end:{line:482,column:14}},"123":{start:{line:492,column:4},end:{line:493,column:35}},"124":{start:{line:493,column:6},end:{line:493,column:35}},"125":{start:{line:494,column:4},end:{line:494,column:16}},"126":{start:{line:504,column:4},end:{line:504,column:43}},"127":{start:{line:514,column:4},end:{line:514,column:34}},"128":{start:{line:525,column:4},end:{line:526,column:36}},"129":{start:{line:526,column:6},end:{line:526,column:36}},"130":{start:{line:527,column:4},end:{line:527,column:36}},"131":{start:{line:545,column:4},end:{line:545,column:12}},"132":{start:{line:547,column:4},end:{line:547,column:22}},"133":{start:{line:548,column:4},end:{line:548,column:35}},"134":{start:{line:550,column:4},end:{line:550,column:44}},"135":{start:{line:559,column:4},end:{line:559,column:13}},"136":{start:{line:568,column:4},end:{line:568,column:30}},"137":{start:{line:569,column:4},end:{line:569,column:14}},"138":{start:{line:578,column:4},end:{line:578,column:48}},"139":{start:{line:588,column:4},end:{line:588,column:33}},"140":{start:{line:589,column:4},end:{line:589,column:16}},"141":{start:{line:599,column:4},end:{line:599,column:43}},"142":{start:{line:609,column:4},end:{line:609,column:37}},"143":{start:{line:620,column:4},end:{line:621,column:36}},"144":{start:{line:621,column:6},end:{line:621,column:36}},"145":{start:{line:622,column:4},end:{line:622,column:36}},"146":{start:{line:638,column:4},end:{line:638,column:12}},"147":{start:{line:639,column:4},end:{line:639,column:25}},"148":{start:{line:640,column:4},end:{line:640,column:38}},"149":{start:{line:650,column:4},end:{line:650,column:37}},"150":{start:{line:661,column:4},end:{line:662,column:36}},"151":{start:{line:662,column:6},end:{line:662,column:36}},"152":{start:{line:663,column:4},end:{line:663,column:36}},"153":{start:{line:681,column:4},end:{line:681,column:12}},"154":{start:{line:683,column:4},end:{line:683,column:22}},"155":{start:{line:684,column:4},end:{line:684,column:35}},"156":{start:{line:686,column:4},end:{line:686,column:29}},"157":{start:{line:695,column:15},end:{line:695,column:16}},"158":{start:{line:696,column:4},end:{line:696,column:51}},"159":{start:{line:697,column:4},end:{line:697,column:35}},"160":{start:{line:698,column:4},end:{line:698,column:16}},"161":{start:{line:707,column:4},end:{line:707,column:38}},"162":{start:{line:709,column:4},end:{line:710,column:30}},"163":{start:{line:710,column:6},end:{line:710,column:30}},"164":{start:{line:712,column:4},end:{line:712,column:14}},"165":{start:{line:721,column:17},end:{line:721,column:31}},"166":{start:{line:722,column:4},end:{line:722,column:51}},"167":{start:{line:732,column:15},end:{line:732,column:29}},"168":{start:{line:733,column:18},end:{line:733,column:33}},"169":{start:{line:735,column:4},end:{line:736,column:55}},"170":{start:{line:735,column:17},end:{line:735,column:18}},"171":{start:{line:736,column:6},end:{line:736,column:55}},"172":{start:{line:738,column:4},end:{line:738,column:16}},"173":{start:{line:748,column:4},end:{line:748,column:37}},"174":{start:{line:759,column:4},end:{line:760,column:36}},"175":{start:{line:760,column:6},end:{line:760,column:36}},"176":{start:{line:761,column:4},end:{line:761,column:36}},"177":{start:{line:779,column:4},end:{line:779,column:12}},"178":{start:{line:781,column:4},end:{line:781,column:21}},"179":{start:{line:782,column:4},end:{line:782,column:34}},"180":{start:{line:784,column:4},end:{line:784,column:29}},"181":{start:{line:793,column:15},end:{line:793,column:16}},"182":{start:{line:794,column:4},end:{line:794,column:51}},"183":{start:{line:795,column:4},end:{line:795,column:35}},"184":{start:{line:796,column:4},end:{line:796,column:16}},"185":{start:{line:805,column:4},end:{line:805,column:48}},"186":{start:{line:807,column:4},end:{line:807,column:38}},"187":{start:{line:809,column:4},end:{line:810,column:24}},"188":{start:{line:810,column:6},end:{line:810,column:24}},"189":{start:{line:812,column:4},end:{line:812,column:14}},"190":{start:{line:821,column:17},end:{line:821,column:31}},"191":{start:{line:822,column:4},end:{line:822,column:51}},"192":{start:{line:832,column:18},end:{line:832,column:33}},"193":{start:{line:834,column:4},end:{line:834,column:64}},"194":{start:{line:836,column:4},end:{line:837,column:46}},"195":{start:{line:836,column:17},end:{line:836,column:18}},"196":{start:{line:837,column:6},end:{line:837,column:46}},"197":{start:{line:839,column:4},end:{line:839,column:16}},"198":{start:{line:849,column:4},end:{line:849,column:43}},"199":{start:{line:859,column:4},end:{line:859,column:34}},"200":{start:{line:870,column:4},end:{line:871,column:36}},"201":{start:{line:871,column:6},end:{line:871,column:36}},"202":{start:{line:872,column:4},end:{line:872,column:36}},"203":{start:{line:889,column:4},end:{line:889,column:17}},"204":{start:{line:890,column:4},end:{line:890,column:25}},"205":{start:{line:891,column:4},end:{line:891,column:38}},"206":{start:{line:901,column:4},end:{line:901,column:37}},"207":{start:{line:912,column:4},end:{line:913,column:36}},"208":{start:{line:913,column:6},end:{line:913,column:36}},"209":{start:{line:914,column:4},end:{line:914,column:36}},"210":{start:{line:931,column:4},end:{line:931,column:17}},"211":{start:{line:932,column:4},end:{line:932,column:26}},"212":{start:{line:933,column:4},end:{line:933,column:39}},"213":{start:{line:943,column:4},end:{line:943,column:37}},"214":{start:{line:954,column:4},end:{line:955,column:36}},"215":{start:{line:955,column:6},end:{line:955,column:36}},"216":{start:{line:956,column:4},end:{line:956,column:36}},"217":{start:{line:976,column:4},end:{line:976,column:12}},"218":{start:{line:978,column:4},end:{line:978,column:27}},"219":{start:{line:979,column:4},end:{line:979,column:40}},"220":{start:{line:981,column:4},end:{line:981,column:43}},"221":{start:{line:982,column:4},end:{line:982,column:33}},"222":{start:{line:983,column:4},end:{line:983,column:29}},"223":{start:{line:992,column:15},end:{line:992,column:16}},"224":{start:{line:993,column:4},end:{line:993,column:14}},"225":{start:{line:994,column:4},end:{line:994,column:53}},"226":{start:{line:995,column:4},end:{line:995,column:37}},"227":{start:{line:996,column:4},end:{line:996,column:15}},"228":{start:{line:997,column:4},end:{line:997,column:16}},"229":{start:{line:1006,column:4},end:{line:1006,column:76}},"230":{start:{line:1008,column:4},end:{line:1008,column:30}},"231":{start:{line:1009,column:4},end:{line:1009,column:40}},"232":{start:{line:1011,column:4},end:{line:1012,column:25}},"233":{start:{line:1012,column:6},end:{line:1012,column:25}},"234":{start:{line:1014,column:4},end:{line:1014,column:51}},"235":{start:{line:1016,column:4},end:{line:1016,column:14}},"236":{start:{line:1025,column:17},end:{line:1025,column:31}},"237":{start:{line:1026,column:4},end:{line:1026,column:51}},"238":{start:{line:1036,column:4},end:{line:1036,column:32}},"239":{start:{line:1038,column:18},end:{line:1038,column:33}},"240":{start:{line:1040,column:4},end:{line:1040,column:62}},"241":{start:{line:1042,column:4},end:{line:1043,column:39}},"242":{start:{line:1042,column:17},end:{line:1042,column:18}},"243":{start:{line:1043,column:6},end:{line:1043,column:39}},"244":{start:{line:1045,column:4},end:{line:1045,column:30}},"245":{start:{line:1047,column:4},end:{line:1048,column:23}},"246":{start:{line:1048,column:6},end:{line:1048,column:23}},"247":{start:{line:1050,column:4},end:{line:1050,column:16}},"248":{start:{line:1060,column:4},end:{line:1060,column:43}},"249":{start:{line:1071,column:4},end:{line:1072,column:36}},"250":{start:{line:1072,column:6},end:{line:1072,column:36}},"251":{start:{line:1073,column:4},end:{line:1073,column:36}},"252":{start:{line:1091,column:4},end:{line:1091,column:25}},"253":{start:{line:1092,column:4},end:{line:1092,column:28}},"254":{start:{line:1093,column:4},end:{line:1093,column:41}},"255":{start:{line:1103,column:4},end:{line:1103,column:37}},"256":{start:{line:1114,column:4},end:{line:1115,column:36}},"257":{start:{line:1115,column:6},end:{line:1115,column:36}},"258":{start:{line:1116,column:4},end:{line:1116,column:36}},"259":{start:{line:1134,column:4},end:{line:1134,column:12}},"260":{start:{line:1136,column:4},end:{line:1136,column:25}},"261":{start:{line:1137,column:4},end:{line:1137,column:38}},"262":{start:{line:1139,column:4},end:{line:1139,column:29}},"263":{start:{line:1148,column:15},end:{line:1148,column:16}},"264":{start:{line:1150,column:4},end:{line:1150,column:51}},"265":{start:{line:1152,column:4},end:{line:1153,column:29}},"266":{start:{line:1153,column:6},end:{line:1153,column:29}},"267":{start:{line:1155,column:4},end:{line:1155,column:16}},"268":{start:{line:1164,column:4},end:{line:1164,column:59}},"269":{start:{line:1166,column:4},end:{line:1166,column:38}},"270":{start:{line:1168,column:4},end:{line:1169,column:24}},"271":{start:{line:1169,column:6},end:{line:1169,column:24}},"272":{start:{line:1171,column:4},end:{line:1171,column:14}},"273":{start:{line:1180,column:17},end:{line:1180,column:31}},"274":{start:{line:1181,column:4},end:{line:1181,column:51}},"275":{start:{line:1191,column:18},end:{line:1191,column:33}},"276":{start:{line:1193,column:4},end:{line:1193,column:47}},"277":{start:{line:1195,column:4},end:{line:1196,column:46}},"278":{start:{line:1195,column:17},end:{line:1195,column:18}},"279":{start:{line:1196,column:6},end:{line:1196,column:46}},"280":{start:{line:1198,column:4},end:{line:1198,column:16}},"281":{start:{line:1208,column:4},end:{line:1208,column:43}},"282":{start:{line:1219,column:4},end:{line:1220,column:36}},"283":{start:{line:1220,column:6},end:{line:1220,column:36}},"284":{start:{line:1221,column:4},end:{line:1221,column:36}},"285":{start:{line:1237,column:4},end:{line:1237,column:12}},"286":{start:{line:1238,column:4},end:{line:1238,column:29}},"287":{start:{line:1239,column:4},end:{line:1239,column:42}},"288":{start:{line:1249,column:4},end:{line:1249,column:37}},"289":{start:{line:1260,column:4},end:{line:1261,column:36}},"290":{start:{line:1261,column:6},end:{line:1261,column:36}},"291":{start:{line:1262,column:4},end:{line:1262,column:36}},"292":{start:{line:1282,column:4},end:{line:1282,column:12}},"293":{start:{line:1284,column:4},end:{line:1284,column:23}},"294":{start:{line:1285,column:4},end:{line:1285,column:36}},"295":{start:{line:1287,column:4},end:{line:1287,column:41}},"296":{start:{line:1288,column:4},end:{line:1288,column:36}},"297":{start:{line:1297,column:4},end:{line:1298,column:34}},"298":{start:{line:1298,column:6},end:{line:1298,column:34}},"299":{start:{line:1299,column:4},end:{line:1299,column:36}},"300":{start:{line:1308,column:4},end:{line:1309,column:37}},"301":{start:{line:1309,column:6},end:{line:1309,column:37}},"302":{start:{line:1310,column:4},end:{line:1310,column:41}},"303":{start:{line:1319,column:4},end:{line:1320,column:32}},"304":{start:{line:1320,column:6},end:{line:1320,column:32}},"305":{start:{line:1321,column:4},end:{line:1321,column:33}},"306":{start:{line:1331,column:4},end:{line:1331,column:30}},"307":{start:{line:1332,column:4},end:{line:1332,column:16}},"308":{start:{line:1342,column:4},end:{line:1342,column:29}},"309":{start:{line:1343,column:4},end:{line:1343,column:16}},"310":{start:{line:1353,column:4},end:{line:1353,column:37}},"311":{start:{line:1364,column:4},end:{line:1365,column:36}},"312":{start:{line:1365,column:6},end:{line:1365,column:36}},"313":{start:{line:1366,column:4},end:{line:1366,column:36}},"314":{start:{line:1386,column:4},end:{line:1386,column:12}},"315":{start:{line:1388,column:4},end:{line:1388,column:20}},"316":{start:{line:1389,column:4},end:{line:1389,column:33}},"317":{start:{line:1391,column:4},end:{line:1391,column:29}},"318":{start:{line:1392,column:4},end:{line:1392,column:36}},"319":{start:{line:1401,column:4},end:{line:1402,column:31}},"320":{start:{line:1402,column:6},end:{line:1402,column:31}},"321":{start:{line:1403,column:4},end:{line:1403,column:33}},"322":{start:{line:1412,column:4},end:{line:1413,column:34}},"323":{start:{line:1413,column:6},end:{line:1413,column:34}},"324":{start:{line:1414,column:4},end:{line:1414,column:38}},"325":{start:{line:1423,column:4},end:{line:1424,column:29}},"326":{start:{line:1424,column:6},end:{line:1424,column:29}},"327":{start:{line:1425,column:4},end:{line:1425,column:30}},"328":{start:{line:1435,column:4},end:{line:1435,column:24}},"329":{start:{line:1436,column:4},end:{line:1436,column:16}},"330":{start:{line:1446,column:4},end:{line:1446,column:26}},"331":{start:{line:1447,column:4},end:{line:1447,column:16}},"332":{start:{line:1457,column:4},end:{line:1457,column:37}},"333":{start:{line:1468,column:4},end:{line:1469,column:36}},"334":{start:{line:1469,column:6},end:{line:1469,column:36}},"335":{start:{line:1470,column:4},end:{line:1470,column:36}},"336":{start:{line:1491,column:4},end:{line:1491,column:12}},"337":{start:{line:1493,column:4},end:{line:1493,column:24}},"338":{start:{line:1494,column:4},end:{line:1494,column:37}},"339":{start:{line:1496,column:4},end:{line:1496,column:22}},"340":{start:{line:1497,column:4},end:{line:1497,column:43}},"341":{start:{line:1498,column:4},end:{line:1498,column:21}},"342":{start:{line:1499,column:4},end:{line:1499,column:21}},"343":{start:{line:1501,column:4},end:{line:1502,column:32}},"344":{start:{line:1502,column:6},end:{line:1502,column:32}},"345":{start:{line:1512,column:15},end:{line:1512,column:27}},"346":{start:{line:1514,column:4},end:{line:1515,column:37}},"347":{start:{line:1515,column:6},end:{line:1515,column:37}},"348":{start:{line:1517,column:4},end:{line:1525,column:5}},"349":{start:{line:1518,column:6},end:{line:1519,column:54}},"350":{start:{line:1519,column:8},end:{line:1519,column:54}},"351":{start:{line:1521,column:6},end:{line:1522,column:42}},"352":{start:{line:1522,column:8},end:{line:1522,column:42}},"353":{start:{line:1524,column:6},end:{line:1524,column:23}},"354":{start:{line:1527,column:4},end:{line:1528,column:35}},"355":{start:{line:1528,column:6},end:{line:1528,column:35}},"356":{start:{line:1530,column:4},end:{line:1531,column:31}},"357":{start:{line:1531,column:6},end:{line:1531,column:31}},"358":{start:{line:1533,column:4},end:{line:1533,column:16}},"359":{start:{line:1543,column:4},end:{line:1543,column:43}},"360":{start:{line:1552,column:4},end:{line:1552,column:53}},"361":{start:{line:1561,column:17},end:{line:1561,column:51}},"362":{start:{line:1563,column:4},end:{line:1564,column:36}},"363":{start:{line:1564,column:6},end:{line:1564,column:36}},"364":{start:{line:1566,column:4},end:{line:1566,column:30}},"365":{start:{line:1575,column:15},end:{line:1575,column:16}},"366":{start:{line:1577,column:4},end:{line:1577,column:58}},"367":{start:{line:1578,column:4},end:{line:1578,column:14}},"368":{start:{line:1579,column:4},end:{line:1579,column:57}},"369":{start:{line:1581,column:4},end:{line:1582,column:17}},"370":{start:{line:1582,column:6},end:{line:1582,column:17}},"371":{start:{line:1584,column:4},end:{line:1584,column:16}},"372":{start:{line:1593,column:4},end:{line:1593,column:38}},"373":{start:{line:1594,column:4},end:{line:1594,column:38}},"374":{start:{line:1596,column:4},end:{line:1596,column:45}},"375":{start:{line:1597,column:4},end:{line:1597,column:26}},"376":{start:{line:1598,column:4},end:{line:1598,column:44}},"377":{start:{line:1600,column:4},end:{line:1601,column:30}},"378":{start:{line:1601,column:6},end:{line:1601,column:30}},"379":{start:{line:1603,column:4},end:{line:1603,column:14}},"380":{start:{line:1612,column:17},end:{line:1612,column:31}},"381":{start:{line:1613,column:4},end:{line:1613,column:51}},"382":{start:{line:1623,column:4},end:{line:1623,column:49}},"383":{start:{line:1624,column:4},end:{line:1624,column:28}},"384":{start:{line:1625,column:4},end:{line:1625,column:49}},"385":{start:{line:1627,column:4},end:{line:1635,column:5}},"386":{start:{line:1630,column:8},end:{line:1630,column:34}},"387":{start:{line:1631,column:8},end:{line:1631,column:14}},"388":{start:{line:1633,column:8},end:{line:1633,column:25}},"389":{start:{line:1634,column:8},end:{line:1634,column:14}},"390":{start:{line:1637,column:4},end:{line:1637,column:16}},"391":{start:{line:1647,column:4},end:{line:1647,column:43}},"392":{start:{line:1657,column:4},end:{line:1657,column:37}},"393":{start:{line:1668,column:4},end:{line:1669,column:36}},"394":{start:{line:1669,column:6},end:{line:1669,column:36}},"395":{start:{line:1670,column:4},end:{line:1670,column:41}},"396":{start:{line:1683,column:4},end:{line:1684,column:52}},"397":{start:{line:1684,column:6},end:{line:1684,column:52}},"398":{start:{line:1686,column:4},end:{line:1687,column:40}},"399":{start:{line:1687,column:6},end:{line:1687,column:40}},"400":{start:{line:1689,column:4},end:{line:1690,column:40}},"401":{start:{line:1690,column:6},end:{line:1690,column:40}},"402":{start:{line:1692,column:4},end:{line:1692,column:22}},"403":{start:{line:1693,column:4},end:{line:1693,column:21}},"404":{start:{line:1694,column:4},end:{line:1694,column:25}},"405":{start:{line:1696,column:4},end:{line:1700,column:5}},"406":{start:{line:1697,column:6},end:{line:1697,column:19}},"407":{start:{line:1698,column:6},end:{line:1698,column:25}},"408":{start:{line:1699,column:6},end:{line:1699,column:23}},"409":{start:{line:1702,column:4},end:{line:1702,column:16}},"410":{start:{line:1715,column:4},end:{line:1715,column:58}},"411":{start:{line:1726,column:4},end:{line:1726,column:54}},"412":{start:{line:1735,column:17},end:{line:1735,column:64}},"413":{start:{line:1736,column:17},end:{line:1736,column:58}},"414":{start:{line:1737,column:4},end:{line:1742,column:12}},"415":{start:{line:1753,column:0},end:{line:1767,column:2}},"416":{start:{line:1774,column:0},end:{line:1788,column:2}},"417":{start:{line:1802,column:4},end:{line:1802,column:12}},"418":{start:{line:1803,column:4},end:{line:1803,column:25}},"419":{start:{line:1804,column:4},end:{line:1804,column:38}},"420":{start:{line:1814,column:4},end:{line:1814,column:37}},"421":{start:{line:1825,column:4},end:{line:1826,column:36}},"422":{start:{line:1826,column:6},end:{line:1826,column:36}},"423":{start:{line:1827,column:4},end:{line:1827,column:36}},"424":{start:{line:1844,column:4},end:{line:1844,column:12}},"425":{start:{line:1846,column:4},end:{line:1846,column:28}},"426":{start:{line:1847,column:4},end:{line:1847,column:41}},"427":{start:{line:1849,column:4},end:{line:1849,column:46}},"428":{start:{line:1858,column:4},end:{line:1858,column:33}},"429":{start:{line:1867,column:4},end:{line:1867,column:36}},"430":{start:{line:1876,column:4},end:{line:1876,column:31}},"431":{start:{line:1886,column:4},end:{line:1886,column:31}},"432":{start:{line:1887,column:4},end:{line:1887,column:16}},"433":{start:{line:1897,column:4},end:{line:1897,column:30}},"434":{start:{line:1898,column:4},end:{line:1898,column:16}},"435":{start:{line:1908,column:4},end:{line:1908,column:37}},"436":{start:{line:1919,column:4},end:{line:1920,column:36}},"437":{start:{line:1920,column:6},end:{line:1920,column:36}},"438":{start:{line:1921,column:4},end:{line:1921,column:36}},"439":{start:{line:1930,column:4},end:{line:1930,column:45}},"440":{start:{line:1948,column:4},end:{line:1948,column:12}},"441":{start:{line:1950,column:4},end:{line:1950,column:27}},"442":{start:{line:1951,column:4},end:{line:1951,column:40}},"443":{start:{line:1953,column:4},end:{line:1953,column:30}},"444":{start:{line:1962,column:4},end:{line:1962,column:44}},"445":{start:{line:1971,column:4},end:{line:1971,column:32}},"446":{start:{line:1972,column:4},end:{line:1972,column:14}},"447":{start:{line:1981,column:17},end:{line:1981,column:31}},"448":{start:{line:1982,column:4},end:{line:1982,column:51}},"449":{start:{line:1992,column:4},end:{line:1992,column:34}},"450":{start:{line:1993,column:4},end:{line:1993,column:16}},"451":{start:{line:2003,column:4},end:{line:2003,column:43}},"452":{start:{line:2014,column:4},end:{line:2015,column:36}},"453":{start:{line:2015,column:6},end:{line:2015,column:36}},"454":{start:{line:2016,column:4},end:{line:2016,column:36}},"455":{start:{line:2032,column:4},end:{line:2032,column:12}},"456":{start:{line:2033,column:4},end:{line:2033,column:29}},"457":{start:{line:2034,column:4},end:{line:2034,column:42}},"458":{start:{line:2045,column:4},end:{line:2046,column:36}},"459":{start:{line:2046,column:6},end:{line:2046,column:36}},"460":{start:{line:2047,column:4},end:{line:2047,column:36}},"461":{start:{line:2065,column:4},end:{line:2065,column:12}},"462":{start:{line:2067,column:4},end:{line:2067,column:29}},"463":{start:{line:2068,column:4},end:{line:2068,column:42}},"464":{start:{line:2070,column:4},end:{line:2070,column:44}},"465":{start:{line:2079,column:4},end:{line:2079,column:32}},"466":{start:{line:2088,column:4},end:{line:2088,column:35}},"467":{start:{line:2097,column:4},end:{line:2097,column:30}},"468":{start:{line:2107,column:4},end:{line:2107,column:30}},"469":{start:{line:2108,column:4},end:{line:2108,column:16}},"470":{start:{line:2118,column:4},end:{line:2118,column:29}},"471":{start:{line:2119,column:4},end:{line:2119,column:16}},"472":{start:{line:2130,column:4},end:{line:2131,column:36}},"473":{start:{line:2131,column:6},end:{line:2131,column:36}},"474":{start:{line:2132,column:4},end:{line:2132,column:36}},"475":{start:{line:2150,column:4},end:{line:2150,column:12}},"476":{start:{line:2152,column:4},end:{line:2152,column:27}},"477":{start:{line:2153,column:4},end:{line:2153,column:40}},"478":{start:{line:2155,column:4},end:{line:2155,column:26}},"479":{start:{line:2164,column:4},end:{line:2164,column:13}},"480":{start:{line:2173,column:4},end:{line:2173,column:27}},"481":{start:{line:2174,column:4},end:{line:2174,column:14}},"482":{start:{line:2183,column:4},end:{line:2183,column:48}},"483":{start:{line:2193,column:4},end:{line:2193,column:29}},"484":{start:{line:2194,column:4},end:{line:2194,column:16}},"485":{start:{line:2204,column:4},end:{line:2204,column:43}},"486":{start:{line:2214,column:4},end:{line:2214,column:37}},"487":{start:{line:2225,column:4},end:{line:2226,column:36}},"488":{start:{line:2226,column:6},end:{line:2226,column:36}},"489":{start:{line:2227,column:4},end:{line:2227,column:36}},"490":{start:{line:2247,column:4},end:{line:2247,column:12}},"491":{start:{line:2249,column:4},end:{line:2249,column:27}},"492":{start:{line:2250,column:4},end:{line:2250,column:40}},"493":{start:{line:2252,column:4},end:{line:2252,column:26}},"494":{start:{line:2253,column:4},end:{line:2253,column:32}},"495":{start:{line:2262,column:4},end:{line:2262,column:13}},"496":{start:{line:2271,column:4},end:{line:2271,column:26}},"497":{start:{line:2272,column:4},end:{line:2272,column:30}},"498":{start:{line:2273,column:4},end:{line:2273,column:14}},"499":{start:{line:2282,column:4},end:{line:2282,column:48}},"500":{start:{line:2292,column:4},end:{line:2292,column:28}},"501":{start:{line:2293,column:4},end:{line:2293,column:32}},"502":{start:{line:2294,column:4},end:{line:2294,column:16}},"503":{start:{line:2304,column:4},end:{line:2304,column:43}},"504":{start:{line:2314,column:4},end:{line:2314,column:37}},"505":{start:{line:2325,column:4},end:{line:2326,column:36}},"506":{start:{line:2326,column:6},end:{line:2326,column:36}},"507":{start:{line:2327,column:4},end:{line:2327,column:36}},"508":{start:{line:2347,column:4},end:{line:2347,column:12}},"509":{start:{line:2349,column:4},end:{line:2349,column:28}},"510":{start:{line:2350,column:4},end:{line:2350,column:41}},"511":{start:{line:2352,column:4},end:{line:2352,column:52}},"512":{start:{line:2353,column:4},end:{line:2353,column:36}},"513":{start:{line:2362,column:4},end:{line:2363,column:38}},"514":{start:{line:2363,column:6},end:{line:2363,column:38}},"515":{start:{line:2364,column:4},end:{line:2364,column:37}},"516":{start:{line:2373,column:4},end:{line:2374,column:37}},"517":{start:{line:2374,column:6},end:{line:2374,column:37}},"518":{start:{line:2375,column:4},end:{line:2375,column:41}},"519":{start:{line:2384,column:4},end:{line:2385,column:32}},"520":{start:{line:2385,column:6},end:{line:2385,column:32}},"521":{start:{line:2386,column:4},end:{line:2386,column:33}},"522":{start:{line:2396,column:4},end:{line:2396,column:30}},"523":{start:{line:2397,column:4},end:{line:2397,column:16}},"524":{start:{line:2407,column:4},end:{line:2407,column:29}},"525":{start:{line:2408,column:4},end:{line:2408,column:16}},"526":{start:{line:2418,column:4},end:{line:2418,column:34}},"527":{start:{line:2429,column:4},end:{line:2430,column:36}},"528":{start:{line:2430,column:6},end:{line:2430,column:36}},"529":{start:{line:2431,column:4},end:{line:2431,column:36}},"530":{start:{line:2449,column:4},end:{line:2449,column:12}},"531":{start:{line:2451,column:4},end:{line:2451,column:29}},"532":{start:{line:2452,column:4},end:{line:2452,column:42}},"533":{start:{line:2454,column:4},end:{line:2454,column:53}},"534":{start:{line:2463,column:4},end:{line:2463,column:34}},"535":{start:{line:2472,column:4},end:{line:2472,column:37}},"536":{start:{line:2481,column:4},end:{line:2481,column:32}},"537":{start:{line:2491,column:4},end:{line:2491,column:32}},"538":{start:{line:2492,column:4},end:{line:2492,column:16}},"539":{start:{line:2502,column:4},end:{line:2502,column:31}},"540":{start:{line:2503,column:4},end:{line:2503,column:16}},"541":{start:{line:2513,column:4},end:{line:2513,column:37}},"542":{start:{line:2524,column:4},end:{line:2525,column:36}},"543":{start:{line:2525,column:6},end:{line:2525,column:36}},"544":{start:{line:2526,column:4},end:{line:2526,column:36}},"545":{start:{line:2546,column:4},end:{line:2546,column:12}},"546":{start:{line:2548,column:4},end:{line:2548,column:26}},"547":{start:{line:2549,column:4},end:{line:2549,column:39}},"548":{start:{line:2551,column:4},end:{line:2551,column:56}},"549":{start:{line:2552,column:4},end:{line:2552,column:36}},"550":{start:{line:2561,column:4},end:{line:2562,column:41}},"551":{start:{line:2562,column:6},end:{line:2562,column:41}},"552":{start:{line:2563,column:4},end:{line:2563,column:40}},"553":{start:{line:2572,column:4},end:{line:2573,column:40}},"554":{start:{line:2573,column:6},end:{line:2573,column:40}},"555":{start:{line:2574,column:4},end:{line:2574,column:44}},"556":{start:{line:2583,column:4},end:{line:2584,column:35}},"557":{start:{line:2584,column:6},end:{line:2584,column:35}},"558":{start:{line:2585,column:4},end:{line:2585,column:36}},"559":{start:{line:2595,column:4},end:{line:2595,column:33}},"560":{start:{line:2596,column:4},end:{line:2596,column:16}},"561":{start:{line:2606,column:4},end:{line:2606,column:32}},"562":{start:{line:2607,column:4},end:{line:2607,column:16}},"563":{start:{line:2617,column:4},end:{line:2617,column:37}},"564":{start:{line:2628,column:4},end:{line:2629,column:36}},"565":{start:{line:2629,column:6},end:{line:2629,column:36}},"566":{start:{line:2630,column:4},end:{line:2630,column:36}},"567":{start:{line:2650,column:4},end:{line:2650,column:12}},"568":{start:{line:2652,column:4},end:{line:2652,column:19}},"569":{start:{line:2653,column:4},end:{line:2653,column:38}},"570":{start:{line:2654,column:4},end:{line:2654,column:21}},"571":{start:{line:2663,column:4},end:{line:2663,column:28}},"572":{start:{line:2672,column:4},end:{line:2672,column:29}},"573":{start:{line:2673,column:4},end:{line:2673,column:14}},"574":{start:{line:2682,column:4},end:{line:2682,column:21}},"575":{start:{line:2692,column:4},end:{line:2692,column:34}},"576":{start:{line:2693,column:4},end:{line:2693,column:19}},"577":{start:{line:2694,column:4},end:{line:2694,column:21}},"578":{start:{line:2695,column:4},end:{line:2695,column:16}},"579":{start:{line:2706,column:4},end:{line:2707,column:36}},"580":{start:{line:2707,column:6},end:{line:2707,column:36}},"581":{start:{line:2708,column:4},end:{line:2708,column:41}},"582":{start:{line:2719,column:0},end:{line:2776,column:2}},"583":{start:{line:2720,column:2},end:{line:2775,column:3}},"584":{start:{line:2722,column:6},end:{line:2722,column:41}},"585":{start:{line:2724,column:6},end:{line:2724,column:40}},"586":{start:{line:2726,column:6},end:{line:2726,column:38}},"587":{start:{line:2728,column:6},end:{line:2728,column:38}},"588":{start:{line:2730,column:6},end:{line:2730,column:41}},"589":{start:{line:2732,column:6},end:{line:2732,column:38}},"590":{start:{line:2734,column:6},end:{line:2734,column:37}},"591":{start:{line:2736,column:6},end:{line:2736,column:41}},"592":{start:{line:2738,column:6},end:{line:2738,column:42}},"593":{start:{line:2740,column:6},end:{line:2740,column:43}},"594":{start:{line:2742,column:6},end:{line:2742,column:44}},"595":{start:{line:2744,column:6},end:{line:2744,column:41}},"596":{start:{line:2746,column:6},end:{line:2746,column:45}},"597":{start:{line:2748,column:6},end:{line:2748,column:39}},"598":{start:{line:2750,column:6},end:{line:2750,column:36}},"599":{start:{line:2752,column:6},end:{line:2752,column:40}},"600":{start:{line:2754,column:6},end:{line:2754,column:41}},"601":{start:{line:2756,column:6},end:{line:2756,column:44}},"602":{start:{line:2758,column:6},end:{line:2758,column:43}},"603":{start:{line:2760,column:6},end:{line:2760,column:45}},"604":{start:{line:2762,column:6},end:{line:2762,column:45}},"605":{start:{line:2764,column:6},end:{line:2764,column:43}},"606":{start:{line:2766,column:6},end:{line:2766,column:43}},"607":{start:{line:2768,column:6},end:{line:2768,column:44}},"608":{start:{line:2770,column:6},end:{line:2770,column:45}},"609":{start:{line:2772,column:6},end:{line:2772,column:42}},"610":{start:{line:2774,column:6},end:{line:2774,column:46}},"611":{start:{line:2782,column:0},end:{line:2782,column:24}},"612":{start:{line:2783,column:0},end:{line:2783,column:38}},"613":{start:{line:2784,column:0},end:{line:2784,column:36}},"614":{start:{line:2785,column:0},end:{line:2785,column:32}},"615":{start:{line:2786,column:0},end:{line:2786,column:32}},"616":{start:{line:2787,column:0},end:{line:2787,column:38}},"617":{start:{line:2788,column:0},end:{line:2788,column:32}},"618":{start:{line:2789,column:0},end:{line:2789,column:30}},"619":{start:{line:2790,column:0},end:{line:2790,column:38}},"620":{start:{line:2791,column:0},end:{line:2791,column:40}},"621":{start:{line:2792,column:0},end:{line:2792,column:42}},"622":{start:{line:2793,column:0},end:{line:2793,column:44}},"623":{start:{line:2794,column:0},end:{line:2794,column:38}},"624":{start:{line:2795,column:0},end:{line:2795,column:46}},"625":{start:{line:2796,column:0},end:{line:2796,column:34}},"626":{start:{line:2797,column:0},end:{line:2797,column:28}},"627":{start:{line:2798,column:0},end:{line:2798,column:36}},"628":{start:{line:2799,column:0},end:{line:2799,column:38}},"629":{start:{line:2800,column:0},end:{line:2800,column:44}},"630":{start:{line:2801,column:0},end:{line:2801,column:42}},"631":{start:{line:2802,column:0},end:{line:2802,column:46}},"632":{start:{line:2803,column:0},end:{line:2803,column:46}},"633":{start:{line:2804,column:0},end:{line:2804,column:42}},"634":{start:{line:2805,column:0},end:{line:2805,column:42}},"635":{start:{line:2806,column:0},end:{line:2806,column:44}},"636":{start:{line:2807,column:0},end:{line:2807,column:46}},"637":{start:{line:2808,column:0},end:{line:2808,column:40}},"638":{start:{line:2809,column:0},end:{line:2809,column:38}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:119,column:2},end:{line:119,column:3}},loc:{start:{line:119,column:16},end:{line:122,column:3}},line:119},"1":{name:"(anonymous_1)",decl:{start:{line:129,column:2},end:{line:129,column:3}},loc:{start:{line:129,column:12},end:{line:131,column:3}},line:129},"2":{name:"(anonymous_2)",decl:{start:{line:138,column:2},end:{line:138,column:3}},loc:{start:{line:138,column:15},end:{line:140,column:3}},line:138},"3":{name:"(anonymous_3)",decl:{start:{line:147,column:2},end:{line:147,column:3}},loc:{start:{line:147,column:10},end:{line:149,column:3}},line:147},"4":{name:"(anonymous_4)",decl:{start:{line:156,column:2},end:{line:156,column:3}},loc:{start:{line:156,column:17},end:{line:158,column:3}},line:156},"5":{name:"(anonymous_5)",decl:{start:{line:165,column:2},end:{line:165,column:3}},loc:{start:{line:165,column:16},end:{line:167,column:3}},line:165},"6":{name:"(anonymous_6)",decl:{start:{line:202,column:2},end:{line:202,column:3}},loc:{start:{line:202,column:23},end:{line:220,column:3}},line:202},"7":{name:"(anonymous_7)",decl:{start:{line:228,column:2},end:{line:228,column:3}},loc:{start:{line:228,column:23},end:{line:257,column:3}},line:228},"8":{name:"(anonymous_8)",decl:{start:{line:265,column:2},end:{line:265,column:3}},loc:{start:{line:265,column:30},end:{line:267,column:3}},line:265},"9":{name:"(anonymous_9)",decl:{start:{line:274,column:2},end:{line:274,column:3}},loc:{start:{line:274,column:12},end:{line:283,column:3}},line:274},"10":{name:"(anonymous_10)",decl:{start:{line:290,column:2},end:{line:290,column:3}},loc:{start:{line:290,column:15},end:{line:302,column:3}},line:290},"11":{name:"(anonymous_11)",decl:{start:{line:309,column:2},end:{line:309,column:3}},loc:{start:{line:309,column:10},end:{line:312,column:3}},line:309},"12":{name:"(anonymous_12)",decl:{start:{line:320,column:2},end:{line:320,column:3}},loc:{start:{line:320,column:17},end:{line:356,column:3}},line:320},"13":{name:"(anonymous_13)",decl:{start:{line:364,column:2},end:{line:364,column:3}},loc:{start:{line:364,column:24},end:{line:366,column:3}},line:364},"14":{name:"(anonymous_14)",decl:{start:{line:374,column:2},end:{line:374,column:3}},loc:{start:{line:374,column:16},end:{line:376,column:3}},line:374},"15":{name:"(anonymous_15)",decl:{start:{line:385,column:2},end:{line:385,column:3}},loc:{start:{line:385,column:28},end:{line:389,column:3}},line:385},"16":{name:"(anonymous_16)",decl:{start:{line:403,column:2},end:{line:403,column:3}},loc:{start:{line:403,column:16},end:{line:407,column:3}},line:403},"17":{name:"(anonymous_17)",decl:{start:{line:415,column:2},end:{line:415,column:3}},loc:{start:{line:415,column:24},end:{line:417,column:3}},line:415},"18":{name:"(anonymous_18)",decl:{start:{line:426,column:2},end:{line:426,column:3}},loc:{start:{line:426,column:28},end:{line:430,column:3}},line:426},"19":{name:"(anonymous_19)",decl:{start:{line:446,column:2},end:{line:446,column:3}},loc:{start:{line:446,column:21},end:{line:453,column:3}},line:446},"20":{name:"(anonymous_20)",decl:{start:{line:460,column:2},end:{line:460,column:3}},loc:{start:{line:460,column:12},end:{line:462,column:3}},line:460},"21":{name:"(anonymous_21)",decl:{start:{line:469,column:2},end:{line:469,column:3}},loc:{start:{line:469,column:10},end:{line:472,column:3}},line:469},"22":{name:"(anonymous_22)",decl:{start:{line:479,column:2},end:{line:479,column:3}},loc:{start:{line:479,column:15},end:{line:483,column:3}},line:479},"23":{name:"(anonymous_23)",decl:{start:{line:491,column:2},end:{line:491,column:3}},loc:{start:{line:491,column:17},end:{line:495,column:3}},line:491},"24":{name:"(anonymous_24)",decl:{start:{line:503,column:2},end:{line:503,column:3}},loc:{start:{line:503,column:16},end:{line:505,column:3}},line:503},"25":{name:"(anonymous_25)",decl:{start:{line:513,column:2},end:{line:513,column:3}},loc:{start:{line:513,column:24},end:{line:515,column:3}},line:513},"26":{name:"(anonymous_26)",decl:{start:{line:524,column:2},end:{line:524,column:3}},loc:{start:{line:524,column:28},end:{line:528,column:3}},line:524},"27":{name:"(anonymous_27)",decl:{start:{line:544,column:2},end:{line:544,column:3}},loc:{start:{line:544,column:21},end:{line:551,column:3}},line:544},"28":{name:"(anonymous_28)",decl:{start:{line:558,column:2},end:{line:558,column:3}},loc:{start:{line:558,column:12},end:{line:560,column:3}},line:558},"29":{name:"(anonymous_29)",decl:{start:{line:567,column:2},end:{line:567,column:3}},loc:{start:{line:567,column:15},end:{line:570,column:3}},line:567},"30":{name:"(anonymous_30)",decl:{start:{line:577,column:2},end:{line:577,column:3}},loc:{start:{line:577,column:10},end:{line:579,column:3}},line:577},"31":{name:"(anonymous_31)",decl:{start:{line:587,column:2},end:{line:587,column:3}},loc:{start:{line:587,column:17},end:{line:590,column:3}},line:587},"32":{name:"(anonymous_32)",decl:{start:{line:598,column:2},end:{line:598,column:3}},loc:{start:{line:598,column:16},end:{line:600,column:3}},line:598},"33":{name:"(anonymous_33)",decl:{start:{line:608,column:2},end:{line:608,column:3}},loc:{start:{line:608,column:24},end:{line:610,column:3}},line:608},"34":{name:"(anonymous_34)",decl:{start:{line:619,column:2},end:{line:619,column:3}},loc:{start:{line:619,column:28},end:{line:623,column:3}},line:619},"35":{name:"(anonymous_35)",decl:{start:{line:637,column:2},end:{line:637,column:3}},loc:{start:{line:637,column:16},end:{line:641,column:3}},line:637},"36":{name:"(anonymous_36)",decl:{start:{line:649,column:2},end:{line:649,column:3}},loc:{start:{line:649,column:24},end:{line:651,column:3}},line:649},"37":{name:"(anonymous_37)",decl:{start:{line:660,column:2},end:{line:660,column:3}},loc:{start:{line:660,column:28},end:{line:664,column:3}},line:660},"38":{name:"(anonymous_38)",decl:{start:{line:680,column:2},end:{line:680,column:3}},loc:{start:{line:680,column:21},end:{line:687,column:3}},line:680},"39":{name:"(anonymous_39)",decl:{start:{line:694,column:2},end:{line:694,column:3}},loc:{start:{line:694,column:12},end:{line:699,column:3}},line:694},"40":{name:"(anonymous_40)",decl:{start:{line:706,column:2},end:{line:706,column:3}},loc:{start:{line:706,column:15},end:{line:713,column:3}},line:706},"41":{name:"(anonymous_41)",decl:{start:{line:720,column:2},end:{line:720,column:3}},loc:{start:{line:720,column:10},end:{line:723,column:3}},line:720},"42":{name:"(anonymous_42)",decl:{start:{line:731,column:2},end:{line:731,column:3}},loc:{start:{line:731,column:16},end:{line:739,column:3}},line:731},"43":{name:"(anonymous_43)",decl:{start:{line:747,column:2},end:{line:747,column:3}},loc:{start:{line:747,column:24},end:{line:749,column:3}},line:747},"44":{name:"(anonymous_44)",decl:{start:{line:758,column:2},end:{line:758,column:3}},loc:{start:{line:758,column:28},end:{line:762,column:3}},line:758},"45":{name:"(anonymous_45)",decl:{start:{line:778,column:2},end:{line:778,column:3}},loc:{start:{line:778,column:21},end:{line:785,column:3}},line:778},"46":{name:"(anonymous_46)",decl:{start:{line:792,column:2},end:{line:792,column:3}},loc:{start:{line:792,column:12},end:{line:797,column:3}},line:792},"47":{name:"(anonymous_47)",decl:{start:{line:804,column:2},end:{line:804,column:3}},loc:{start:{line:804,column:15},end:{line:813,column:3}},line:804},"48":{name:"(anonymous_48)",decl:{start:{line:820,column:2},end:{line:820,column:3}},loc:{start:{line:820,column:10},end:{line:823,column:3}},line:820},"49":{name:"(anonymous_49)",decl:{start:{line:831,column:2},end:{line:831,column:3}},loc:{start:{line:831,column:17},end:{line:840,column:3}},line:831},"50":{name:"(anonymous_50)",decl:{start:{line:848,column:2},end:{line:848,column:3}},loc:{start:{line:848,column:16},end:{line:850,column:3}},line:848},"51":{name:"(anonymous_51)",decl:{start:{line:858,column:2},end:{line:858,column:3}},loc:{start:{line:858,column:24},end:{line:860,column:3}},line:858},"52":{name:"(anonymous_52)",decl:{start:{line:869,column:2},end:{line:869,column:3}},loc:{start:{line:869,column:28},end:{line:873,column:3}},line:869},"53":{name:"(anonymous_53)",decl:{start:{line:888,column:2},end:{line:888,column:3}},loc:{start:{line:888,column:21},end:{line:892,column:3}},line:888},"54":{name:"(anonymous_54)",decl:{start:{line:900,column:2},end:{line:900,column:3}},loc:{start:{line:900,column:24},end:{line:902,column:3}},line:900},"55":{name:"(anonymous_55)",decl:{start:{line:911,column:2},end:{line:911,column:3}},loc:{start:{line:911,column:28},end:{line:915,column:3}},line:911},"56":{name:"(anonymous_56)",decl:{start:{line:930,column:2},end:{line:930,column:3}},loc:{start:{line:930,column:21},end:{line:934,column:3}},line:930},"57":{name:"(anonymous_57)",decl:{start:{line:942,column:2},end:{line:942,column:3}},loc:{start:{line:942,column:24},end:{line:944,column:3}},line:942},"58":{name:"(anonymous_58)",decl:{start:{line:953,column:2},end:{line:953,column:3}},loc:{start:{line:953,column:28},end:{line:957,column:3}},line:953},"59":{name:"(anonymous_59)",decl:{start:{line:975,column:2},end:{line:975,column:3}},loc:{start:{line:975,column:29},end:{line:984,column:3}},line:975},"60":{name:"(anonymous_60)",decl:{start:{line:991,column:2},end:{line:991,column:3}},loc:{start:{line:991,column:12},end:{line:998,column:3}},line:991},"61":{name:"(anonymous_61)",decl:{start:{line:1005,column:2},end:{line:1005,column:3}},loc:{start:{line:1005,column:15},end:{line:1017,column:3}},line:1005},"62":{name:"(anonymous_62)",decl:{start:{line:1024,column:2},end:{line:1024,column:3}},loc:{start:{line:1024,column:10},end:{line:1027,column:3}},line:1024},"63":{name:"(anonymous_63)",decl:{start:{line:1035,column:2},end:{line:1035,column:3}},loc:{start:{line:1035,column:17},end:{line:1051,column:3}},line:1035},"64":{name:"(anonymous_64)",decl:{start:{line:1059,column:2},end:{line:1059,column:3}},loc:{start:{line:1059,column:16},end:{line:1061,column:3}},line:1059},"65":{name:"(anonymous_65)",decl:{start:{line:1070,column:2},end:{line:1070,column:3}},loc:{start:{line:1070,column:28},end:{line:1074,column:3}},line:1070},"66":{name:"(anonymous_66)",decl:{start:{line:1090,column:2},end:{line:1090,column:3}},loc:{start:{line:1090,column:29},end:{line:1094,column:3}},line:1090},"67":{name:"(anonymous_67)",decl:{start:{line:1102,column:2},end:{line:1102,column:3}},loc:{start:{line:1102,column:24},end:{line:1104,column:3}},line:1102},"68":{name:"(anonymous_68)",decl:{start:{line:1113,column:2},end:{line:1113,column:3}},loc:{start:{line:1113,column:28},end:{line:1117,column:3}},line:1113},"69":{name:"(anonymous_69)",decl:{start:{line:1133,column:2},end:{line:1133,column:3}},loc:{start:{line:1133,column:21},end:{line:1140,column:3}},line:1133},"70":{name:"(anonymous_70)",decl:{start:{line:1147,column:2},end:{line:1147,column:3}},loc:{start:{line:1147,column:12},end:{line:1156,column:3}},line:1147},"71":{name:"(anonymous_71)",decl:{start:{line:1163,column:2},end:{line:1163,column:3}},loc:{start:{line:1163,column:15},end:{line:1172,column:3}},line:1163},"72":{name:"(anonymous_72)",decl:{start:{line:1179,column:2},end:{line:1179,column:3}},loc:{start:{line:1179,column:10},end:{line:1182,column:3}},line:1179},"73":{name:"(anonymous_73)",decl:{start:{line:1190,column:2},end:{line:1190,column:3}},loc:{start:{line:1190,column:17},end:{line:1199,column:3}},line:1190},"74":{name:"(anonymous_74)",decl:{start:{line:1207,column:2},end:{line:1207,column:3}},loc:{start:{line:1207,column:16},end:{line:1209,column:3}},line:1207},"75":{name:"(anonymous_75)",decl:{start:{line:1218,column:2},end:{line:1218,column:3}},loc:{start:{line:1218,column:28},end:{line:1222,column:3}},line:1218},"76":{name:"(anonymous_76)",decl:{start:{line:1236,column:2},end:{line:1236,column:3}},loc:{start:{line:1236,column:16},end:{line:1240,column:3}},line:1236},"77":{name:"(anonymous_77)",decl:{start:{line:1248,column:2},end:{line:1248,column:3}},loc:{start:{line:1248,column:24},end:{line:1250,column:3}},line:1248},"78":{name:"(anonymous_78)",decl:{start:{line:1259,column:2},end:{line:1259,column:3}},loc:{start:{line:1259,column:28},end:{line:1263,column:3}},line:1259},"79":{name:"(anonymous_79)",decl:{start:{line:1281,column:2},end:{line:1281,column:3}},loc:{start:{line:1281,column:30},end:{line:1289,column:3}},line:1281},"80":{name:"(anonymous_80)",decl:{start:{line:1296,column:2},end:{line:1296,column:3}},loc:{start:{line:1296,column:12},end:{line:1300,column:3}},line:1296},"81":{name:"(anonymous_81)",decl:{start:{line:1307,column:2},end:{line:1307,column:3}},loc:{start:{line:1307,column:15},end:{line:1311,column:3}},line:1307},"82":{name:"(anonymous_82)",decl:{start:{line:1318,column:2},end:{line:1318,column:3}},loc:{start:{line:1318,column:10},end:{line:1322,column:3}},line:1318},"83":{name:"(anonymous_83)",decl:{start:{line:1330,column:2},end:{line:1330,column:3}},loc:{start:{line:1330,column:17},end:{line:1333,column:3}},line:1330},"84":{name:"(anonymous_84)",decl:{start:{line:1341,column:2},end:{line:1341,column:3}},loc:{start:{line:1341,column:16},end:{line:1344,column:3}},line:1341},"85":{name:"(anonymous_85)",decl:{start:{line:1352,column:2},end:{line:1352,column:3}},loc:{start:{line:1352,column:24},end:{line:1354,column:3}},line:1352},"86":{name:"(anonymous_86)",decl:{start:{line:1363,column:2},end:{line:1363,column:3}},loc:{start:{line:1363,column:28},end:{line:1367,column:3}},line:1363},"87":{name:"(anonymous_87)",decl:{start:{line:1385,column:2},end:{line:1385,column:3}},loc:{start:{line:1385,column:27},end:{line:1393,column:3}},line:1385},"88":{name:"(anonymous_88)",decl:{start:{line:1400,column:2},end:{line:1400,column:3}},loc:{start:{line:1400,column:12},end:{line:1404,column:3}},line:1400},"89":{name:"(anonymous_89)",decl:{start:{line:1411,column:2},end:{line:1411,column:3}},loc:{start:{line:1411,column:15},end:{line:1415,column:3}},line:1411},"90":{name:"(anonymous_90)",decl:{start:{line:1422,column:2},end:{line:1422,column:3}},loc:{start:{line:1422,column:10},end:{line:1426,column:3}},line:1422},"91":{name:"(anonymous_91)",decl:{start:{line:1434,column:2},end:{line:1434,column:3}},loc:{start:{line:1434,column:17},end:{line:1437,column:3}},line:1434},"92":{name:"(anonymous_92)",decl:{start:{line:1445,column:2},end:{line:1445,column:3}},loc:{start:{line:1445,column:16},end:{line:1448,column:3}},line:1445},"93":{name:"(anonymous_93)",decl:{start:{line:1456,column:2},end:{line:1456,column:3}},loc:{start:{line:1456,column:24},end:{line:1458,column:3}},line:1456},"94":{name:"(anonymous_94)",decl:{start:{line:1467,column:2},end:{line:1467,column:3}},loc:{start:{line:1467,column:28},end:{line:1471,column:3}},line:1467},"95":{name:"(anonymous_95)",decl:{start:{line:1490,column:2},end:{line:1490,column:3}},loc:{start:{line:1490,column:23},end:{line:1503,column:3}},line:1490},"96":{name:"(anonymous_96)",decl:{start:{line:1511,column:2},end:{line:1511,column:3}},loc:{start:{line:1511,column:23},end:{line:1534,column:3}},line:1511},"97":{name:"(anonymous_97)",decl:{start:{line:1542,column:2},end:{line:1542,column:3}},loc:{start:{line:1542,column:30},end:{line:1544,column:3}},line:1542},"98":{name:"(anonymous_98)",decl:{start:{line:1551,column:2},end:{line:1551,column:3}},loc:{start:{line:1551,column:10},end:{line:1553,column:3}},line:1551},"99":{name:"(anonymous_99)",decl:{start:{line:1560,column:2},end:{line:1560,column:3}},loc:{start:{line:1560,column:12},end:{line:1567,column:3}},line:1560},"100":{name:"(anonymous_100)",decl:{start:{line:1574,column:2},end:{line:1574,column:3}},loc:{start:{line:1574,column:12},end:{line:1585,column:3}},line:1574},"101":{name:"(anonymous_101)",decl:{start:{line:1592,column:2},end:{line:1592,column:3}},loc:{start:{line:1592,column:15},end:{line:1604,column:3}},line:1592},"102":{name:"(anonymous_102)",decl:{start:{line:1611,column:2},end:{line:1611,column:3}},loc:{start:{line:1611,column:10},end:{line:1614,column:3}},line:1611},"103":{name:"(anonymous_103)",decl:{start:{line:1622,column:2},end:{line:1622,column:3}},loc:{start:{line:1622,column:17},end:{line:1638,column:3}},line:1622},"104":{name:"(anonymous_104)",decl:{start:{line:1646,column:2},end:{line:1646,column:3}},loc:{start:{line:1646,column:16},end:{line:1648,column:3}},line:1646},"105":{name:"(anonymous_105)",decl:{start:{line:1656,column:2},end:{line:1656,column:3}},loc:{start:{line:1656,column:24},end:{line:1658,column:3}},line:1656},"106":{name:"(anonymous_106)",decl:{start:{line:1667,column:2},end:{line:1667,column:3}},loc:{start:{line:1667,column:28},end:{line:1671,column:3}},line:1667},"107":{name:"(anonymous_107)",decl:{start:{line:1682,column:2},end:{line:1682,column:3}},loc:{start:{line:1682,column:38},end:{line:1703,column:3}},line:1682},"108":{name:"(anonymous_108)",decl:{start:{line:1714,column:2},end:{line:1714,column:3}},loc:{start:{line:1714,column:45},end:{line:1716,column:3}},line:1714},"109":{name:"(anonymous_109)",decl:{start:{line:1725,column:2},end:{line:1725,column:3}},loc:{start:{line:1725,column:29},end:{line:1727,column:3}},line:1725},"110":{name:"(anonymous_110)",decl:{start:{line:1734,column:2},end:{line:1734,column:3}},loc:{start:{line:1734,column:20},end:{line:1743,column:3}},line:1734},"111":{name:"(anonymous_111)",decl:{start:{line:1801,column:2},end:{line:1801,column:3}},loc:{start:{line:1801,column:16},end:{line:1805,column:3}},line:1801},"112":{name:"(anonymous_112)",decl:{start:{line:1813,column:2},end:{line:1813,column:3}},loc:{start:{line:1813,column:24},end:{line:1815,column:3}},line:1813},"113":{name:"(anonymous_113)",decl:{start:{line:1824,column:2},end:{line:1824,column:3}},loc:{start:{line:1824,column:28},end:{line:1828,column:3}},line:1824},"114":{name:"(anonymous_114)",decl:{start:{line:1843,column:2},end:{line:1843,column:3}},loc:{start:{line:1843,column:22},end:{line:1850,column:3}},line:1843},"115":{name:"(anonymous_115)",decl:{start:{line:1857,column:2},end:{line:1857,column:3}},loc:{start:{line:1857,column:12},end:{line:1859,column:3}},line:1857},"116":{name:"(anonymous_116)",decl:{start:{line:1866,column:2},end:{line:1866,column:3}},loc:{start:{line:1866,column:15},end:{line:1868,column:3}},line:1866},"117":{name:"(anonymous_117)",decl:{start:{line:1875,column:2},end:{line:1875,column:3}},loc:{start:{line:1875,column:10},end:{line:1877,column:3}},line:1875},"118":{name:"(anonymous_118)",decl:{start:{line:1885,column:2},end:{line:1885,column:3}},loc:{start:{line:1885,column:17},end:{line:1888,column:3}},line:1885},"119":{name:"(anonymous_119)",decl:{start:{line:1896,column:2},end:{line:1896,column:3}},loc:{start:{line:1896,column:16},end:{line:1899,column:3}},line:1896},"120":{name:"(anonymous_120)",decl:{start:{line:1907,column:2},end:{line:1907,column:3}},loc:{start:{line:1907,column:24},end:{line:1909,column:3}},line:1907},"121":{name:"(anonymous_121)",decl:{start:{line:1918,column:2},end:{line:1918,column:3}},loc:{start:{line:1918,column:28},end:{line:1922,column:3}},line:1918},"122":{name:"(anonymous_122)",decl:{start:{line:1929,column:2},end:{line:1929,column:3}},loc:{start:{line:1929,column:24},end:{line:1931,column:3}},line:1929},"123":{name:"(anonymous_123)",decl:{start:{line:1947,column:2},end:{line:1947,column:3}},loc:{start:{line:1947,column:20},end:{line:1954,column:3}},line:1947},"124":{name:"(anonymous_124)",decl:{start:{line:1961,column:2},end:{line:1961,column:3}},loc:{start:{line:1961,column:12},end:{line:1963,column:3}},line:1961},"125":{name:"(anonymous_125)",decl:{start:{line:1970,column:2},end:{line:1970,column:3}},loc:{start:{line:1970,column:15},end:{line:1973,column:3}},line:1970},"126":{name:"(anonymous_126)",decl:{start:{line:1980,column:2},end:{line:1980,column:3}},loc:{start:{line:1980,column:10},end:{line:1983,column:3}},line:1980},"127":{name:"(anonymous_127)",decl:{start:{line:1991,column:2},end:{line:1991,column:3}},loc:{start:{line:1991,column:17},end:{line:1994,column:3}},line:1991},"128":{name:"(anonymous_128)",decl:{start:{line:2002,column:2},end:{line:2002,column:3}},loc:{start:{line:2002,column:16},end:{line:2004,column:3}},line:2002},"129":{name:"(anonymous_129)",decl:{start:{line:2013,column:2},end:{line:2013,column:3}},loc:{start:{line:2013,column:28},end:{line:2017,column:3}},line:2013},"130":{name:"(anonymous_130)",decl:{start:{line:2031,column:2},end:{line:2031,column:3}},loc:{start:{line:2031,column:16},end:{line:2035,column:3}},line:2031},"131":{name:"(anonymous_131)",decl:{start:{line:2044,column:2},end:{line:2044,column:3}},loc:{start:{line:2044,column:28},end:{line:2048,column:3}},line:2044},"132":{name:"(anonymous_132)",decl:{start:{line:2064,column:2},end:{line:2064,column:3}},loc:{start:{line:2064,column:21},end:{line:2071,column:3}},line:2064},"133":{name:"(anonymous_133)",decl:{start:{line:2078,column:2},end:{line:2078,column:3}},loc:{start:{line:2078,column:12},end:{line:2080,column:3}},line:2078},"134":{name:"(anonymous_134)",decl:{start:{line:2087,column:2},end:{line:2087,column:3}},loc:{start:{line:2087,column:15},end:{line:2089,column:3}},line:2087},"135":{name:"(anonymous_135)",decl:{start:{line:2096,column:2},end:{line:2096,column:3}},loc:{start:{line:2096,column:10},end:{line:2098,column:3}},line:2096},"136":{name:"(anonymous_136)",decl:{start:{line:2106,column:2},end:{line:2106,column:3}},loc:{start:{line:2106,column:17},end:{line:2109,column:3}},line:2106},"137":{name:"(anonymous_137)",decl:{start:{line:2117,column:2},end:{line:2117,column:3}},loc:{start:{line:2117,column:16},end:{line:2120,column:3}},line:2117},"138":{name:"(anonymous_138)",decl:{start:{line:2129,column:2},end:{line:2129,column:3}},loc:{start:{line:2129,column:28},end:{line:2133,column:3}},line:2129},"139":{name:"(anonymous_139)",decl:{start:{line:2149,column:2},end:{line:2149,column:3}},loc:{start:{line:2149,column:20},end:{line:2156,column:3}},line:2149},"140":{name:"(anonymous_140)",decl:{start:{line:2163,column:2},end:{line:2163,column:3}},loc:{start:{line:2163,column:12},end:{line:2165,column:3}},line:2163},"141":{name:"(anonymous_141)",decl:{start:{line:2172,column:2},end:{line:2172,column:3}},loc:{start:{line:2172,column:15},end:{line:2175,column:3}},line:2172},"142":{name:"(anonymous_142)",decl:{start:{line:2182,column:2},end:{line:2182,column:3}},loc:{start:{line:2182,column:10},end:{line:2184,column:3}},line:2182},"143":{name:"(anonymous_143)",decl:{start:{line:2192,column:2},end:{line:2192,column:3}},loc:{start:{line:2192,column:17},end:{line:2195,column:3}},line:2192},"144":{name:"(anonymous_144)",decl:{start:{line:2203,column:2},end:{line:2203,column:3}},loc:{start:{line:2203,column:16},end:{line:2205,column:3}},line:2203},"145":{name:"(anonymous_145)",decl:{start:{line:2213,column:2},end:{line:2213,column:3}},loc:{start:{line:2213,column:24},end:{line:2215,column:3}},line:2213},"146":{name:"(anonymous_146)",decl:{start:{line:2224,column:2},end:{line:2224,column:3}},loc:{start:{line:2224,column:28},end:{line:2228,column:3}},line:2224},"147":{name:"(anonymous_147)",decl:{start:{line:2246,column:2},end:{line:2246,column:3}},loc:{start:{line:2246,column:29},end:{line:2254,column:3}},line:2246},"148":{name:"(anonymous_148)",decl:{start:{line:2261,column:2},end:{line:2261,column:3}},loc:{start:{line:2261,column:12},end:{line:2263,column:3}},line:2261},"149":{name:"(anonymous_149)",decl:{start:{line:2270,column:2},end:{line:2270,column:3}},loc:{start:{line:2270,column:15},end:{line:2274,column:3}},line:2270},"150":{name:"(anonymous_150)",decl:{start:{line:2281,column:2},end:{line:2281,column:3}},loc:{start:{line:2281,column:10},end:{line:2283,column:3}},line:2281},"151":{name:"(anonymous_151)",decl:{start:{line:2291,column:2},end:{line:2291,column:3}},loc:{start:{line:2291,column:17},end:{line:2295,column:3}},line:2291},"152":{name:"(anonymous_152)",decl:{start:{line:2303,column:2},end:{line:2303,column:3}},loc:{start:{line:2303,column:16},end:{line:2305,column:3}},line:2303},"153":{name:"(anonymous_153)",decl:{start:{line:2313,column:2},end:{line:2313,column:3}},loc:{start:{line:2313,column:24},end:{line:2315,column:3}},line:2313},"154":{name:"(anonymous_154)",decl:{start:{line:2324,column:2},end:{line:2324,column:3}},loc:{start:{line:2324,column:28},end:{line:2328,column:3}},line:2324},"155":{name:"(anonymous_155)",decl:{start:{line:2346,column:2},end:{line:2346,column:3}},loc:{start:{line:2346,column:30},end:{line:2354,column:3}},line:2346},"156":{name:"(anonymous_156)",decl:{start:{line:2361,column:2},end:{line:2361,column:3}},loc:{start:{line:2361,column:12},end:{line:2365,column:3}},line:2361},"157":{name:"(anonymous_157)",decl:{start:{line:2372,column:2},end:{line:2372,column:3}},loc:{start:{line:2372,column:15},end:{line:2376,column:3}},line:2372},"158":{name:"(anonymous_158)",decl:{start:{line:2383,column:2},end:{line:2383,column:3}},loc:{start:{line:2383,column:10},end:{line:2387,column:3}},line:2383},"159":{name:"(anonymous_159)",decl:{start:{line:2395,column:2},end:{line:2395,column:3}},loc:{start:{line:2395,column:17},end:{line:2398,column:3}},line:2395},"160":{name:"(anonymous_160)",decl:{start:{line:2406,column:2},end:{line:2406,column:3}},loc:{start:{line:2406,column:16},end:{line:2409,column:3}},line:2406},"161":{name:"(anonymous_161)",decl:{start:{line:2417,column:2},end:{line:2417,column:3}},loc:{start:{line:2417,column:24},end:{line:2419,column:3}},line:2417},"162":{name:"(anonymous_162)",decl:{start:{line:2428,column:2},end:{line:2428,column:3}},loc:{start:{line:2428,column:28},end:{line:2432,column:3}},line:2428},"163":{name:"(anonymous_163)",decl:{start:{line:2448,column:2},end:{line:2448,column:3}},loc:{start:{line:2448,column:23},end:{line:2455,column:3}},line:2448},"164":{name:"(anonymous_164)",decl:{start:{line:2462,column:2},end:{line:2462,column:3}},loc:{start:{line:2462,column:12},end:{line:2464,column:3}},line:2462},"165":{name:"(anonymous_165)",decl:{start:{line:2471,column:2},end:{line:2471,column:3}},loc:{start:{line:2471,column:15},end:{line:2473,column:3}},line:2471},"166":{name:"(anonymous_166)",decl:{start:{line:2480,column:2},end:{line:2480,column:3}},loc:{start:{line:2480,column:10},end:{line:2482,column:3}},line:2480},"167":{name:"(anonymous_167)",decl:{start:{line:2490,column:2},end:{line:2490,column:3}},loc:{start:{line:2490,column:17},end:{line:2493,column:3}},line:2490},"168":{name:"(anonymous_168)",decl:{start:{line:2501,column:2},end:{line:2501,column:3}},loc:{start:{line:2501,column:16},end:{line:2504,column:3}},line:2501},"169":{name:"(anonymous_169)",decl:{start:{line:2512,column:2},end:{line:2512,column:3}},loc:{start:{line:2512,column:24},end:{line:2514,column:3}},line:2512},"170":{name:"(anonymous_170)",decl:{start:{line:2523,column:2},end:{line:2523,column:3}},loc:{start:{line:2523,column:28},end:{line:2527,column:3}},line:2523},"171":{name:"(anonymous_171)",decl:{start:{line:2545,column:2},end:{line:2545,column:3}},loc:{start:{line:2545,column:33},end:{line:2553,column:3}},line:2545},"172":{name:"(anonymous_172)",decl:{start:{line:2560,column:2},end:{line:2560,column:3}},loc:{start:{line:2560,column:12},end:{line:2564,column:3}},line:2560},"173":{name:"(anonymous_173)",decl:{start:{line:2571,column:2},end:{line:2571,column:3}},loc:{start:{line:2571,column:15},end:{line:2575,column:3}},line:2571},"174":{name:"(anonymous_174)",decl:{start:{line:2582,column:2},end:{line:2582,column:3}},loc:{start:{line:2582,column:10},end:{line:2586,column:3}},line:2582},"175":{name:"(anonymous_175)",decl:{start:{line:2594,column:2},end:{line:2594,column:3}},loc:{start:{line:2594,column:17},end:{line:2597,column:3}},line:2594},"176":{name:"(anonymous_176)",decl:{start:{line:2605,column:2},end:{line:2605,column:3}},loc:{start:{line:2605,column:16},end:{line:2608,column:3}},line:2605},"177":{name:"(anonymous_177)",decl:{start:{line:2616,column:2},end:{line:2616,column:3}},loc:{start:{line:2616,column:24},end:{line:2618,column:3}},line:2616},"178":{name:"(anonymous_178)",decl:{start:{line:2627,column:2},end:{line:2627,column:3}},loc:{start:{line:2627,column:28},end:{line:2631,column:3}},line:2627},"179":{name:"(anonymous_179)",decl:{start:{line:2649,column:2},end:{line:2649,column:3}},loc:{start:{line:2649,column:25},end:{line:2655,column:3}},line:2649},"180":{name:"(anonymous_180)",decl:{start:{line:2662,column:2},end:{line:2662,column:3}},loc:{start:{line:2662,column:12},end:{line:2664,column:3}},line:2662},"181":{name:"(anonymous_181)",decl:{start:{line:2671,column:2},end:{line:2671,column:3}},loc:{start:{line:2671,column:15},end:{line:2674,column:3}},line:2671},"182":{name:"(anonymous_182)",decl:{start:{line:2681,column:2},end:{line:2681,column:3}},loc:{start:{line:2681,column:10},end:{line:2683,column:3}},line:2681},"183":{name:"(anonymous_183)",decl:{start:{line:2691,column:2},end:{line:2691,column:3}},loc:{start:{line:2691,column:21},end:{line:2696,column:3}},line:2691},"184":{name:"(anonymous_184)",decl:{start:{line:2705,column:2},end:{line:2705,column:3}},loc:{start:{line:2705,column:33},end:{line:2709,column:3}},line:2705},"185":{name:"fromRaw",decl:{start:{line:2719,column:27},end:{line:2719,column:34}},loc:{start:{line:2719,column:46},end:{line:2776,column:1}},line:2719}},branchMap:{"0":{loc:{start:{line:218,column:4},end:{line:219,column:32}},type:"if",locations:[{start:{line:218,column:4},end:{line:219,column:32}},{start:{line:218,column:4},end:{line:219,column:32}}],line:218},"1":{loc:{start:{line:229,column:4},end:{line:230,column:37}},type:"if",locations:[{start:{line:229,column:4},end:{line:230,column:37}},{start:{line:229,column:4},end:{line:230,column:37}}],line:229},"2":{loc:{start:{line:232,column:4},end:{line:233,column:39}},type:"if",locations:[{start:{line:232,column:4},end:{line:233,column:39}},{start:{line:232,column:4},end:{line:233,column:39}}],line:232},"3":{loc:{start:{line:235,column:4},end:{line:236,column:31}},type:"if",locations:[{start:{line:235,column:4},end:{line:236,column:31}},{start:{line:235,column:4},end:{line:236,column:31}}],line:235},"4":{loc:{start:{line:238,column:4},end:{line:239,column:46}},type:"if",locations:[{start:{line:238,column:4},end:{line:239,column:46}},{start:{line:238,column:4},end:{line:239,column:46}}],line:238},"5":{loc:{start:{line:241,column:4},end:{line:242,column:44}},type:"if",locations:[{start:{line:241,column:4},end:{line:242,column:44}},{start:{line:241,column:4},end:{line:242,column:44}}],line:241},"6":{loc:{start:{line:244,column:4},end:{line:245,column:33}},type:"if",locations:[{start:{line:244,column:4},end:{line:245,column:33}},{start:{line:244,column:4},end:{line:245,column:33}}],line:244},"7":{loc:{start:{line:247,column:4},end:{line:248,column:33}},type:"if",locations:[{start:{line:247,column:4},end:{line:248,column:33}},{start:{line:247,column:4},end:{line:248,column:33}}],line:247},"8":{loc:{start:{line:250,column:4},end:{line:251,column:35}},type:"if",locations:[{start:{line:250,column:4},end:{line:251,column:35}},{start:{line:250,column:4},end:{line:251,column:35}}],line:250},"9":{loc:{start:{line:253,column:4},end:{line:254,column:37}},type:"if",locations:[{start:{line:253,column:4},end:{line:254,column:37}},{start:{line:253,column:4},end:{line:254,column:37}}],line:253},"10":{loc:{start:{line:300,column:15},end:{line:300,column:35}},type:"cond-expr",locations:[{start:{line:300,column:30},end:{line:300,column:31}},{start:{line:300,column:34},end:{line:300,column:35}}],line:300},"11":{loc:{start:{line:331,column:4},end:{line:334,column:5}},type:"if",locations:[{start:{line:331,column:4},end:{line:334,column:5}},{start:{line:331,column:4},end:{line:334,column:5}}],line:331},"12":{loc:{start:{line:336,column:4},end:{line:337,column:50}},type:"if",locations:[{start:{line:336,column:4},end:{line:337,column:50}},{start:{line:336,column:4},end:{line:337,column:50}}],line:336},"13":{loc:{start:{line:339,column:4},end:{line:340,column:33}},type:"if",locations:[{start:{line:339,column:4},end:{line:340,column:33}},{start:{line:339,column:4},end:{line:340,column:33}}],line:339},"14":{loc:{start:{line:342,column:4},end:{line:343,column:39}},type:"if",locations:[{start:{line:342,column:4},end:{line:343,column:39}},{start:{line:342,column:4},end:{line:343,column:39}}],line:342},"15":{loc:{start:{line:345,column:4},end:{line:346,column:25}},type:"if",locations:[{start:{line:345,column:4},end:{line:346,column:25}},{start:{line:345,column:4},end:{line:346,column:25}}],line:345},"16":{loc:{start:{line:352,column:4},end:{line:353,column:22}},type:"if",locations:[{start:{line:352,column:4},end:{line:353,column:22}},{start:{line:352,column:4},end:{line:353,column:22}}],line:352},"17":{loc:{start:{line:386,column:4},end:{line:387,column:36}},type:"if",locations:[{start:{line:386,column:4},end:{line:387,column:36}},{start:{line:386,column:4},end:{line:387,column:36}}],line:386},"18":{loc:{start:{line:427,column:4},end:{line:428,column:36}},type:"if",locations:[{start:{line:427,column:4},end:{line:428,column:36}},{start:{line:427,column:4},end:{line:428,column:36}}],line:427},"19":{loc:{start:{line:452,column:17},end:{line:452,column:30}},type:"binary-expr",locations:[{start:{line:452,column:17},end:{line:452,column:22}},{start:{line:452,column:26},end:{line:452,column:30}}],line:452},"20":{loc:{start:{line:461,column:11},end:{line:461,column:29}},type:"cond-expr",locations:[{start:{line:461,column:24},end:{line:461,column:25}},{start:{line:461,column:28},end:{line:461,column:29}}],line:461},"21":{loc:{start:{line:480,column:4},end:{line:481,column:32}},type:"if",locations:[{start:{line:480,column:4},end:{line:481,column:32}},{start:{line:480,column:4},end:{line:481,column:32}}],line:480},"22":{loc:{start:{line:492,column:4},end:{line:493,column:35}},type:"if",locations:[{start:{line:492,column:4},end:{line:493,column:35}},{start:{line:492,column:4},end:{line:493,column:35}}],line:492},"23":{loc:{start:{line:525,column:4},end:{line:526,column:36}},type:"if",locations:[{start:{line:525,column:4},end:{line:526,column:36}},{start:{line:525,column:4},end:{line:526,column:36}}],line:525},"24":{loc:{start:{line:550,column:17},end:{line:550,column:43}},type:"binary-expr",locations:[{start:{line:550,column:17},end:{line:550,column:22}},{start:{line:550,column:26},end:{line:550,column:43}}],line:550},"25":{loc:{start:{line:620,column:4},end:{line:621,column:36}},type:"if",locations:[{start:{line:620,column:4},end:{line:621,column:36}},{start:{line:620,column:4},end:{line:621,column:36}}],line:620},"26":{loc:{start:{line:661,column:4},end:{line:662,column:36}},type:"if",locations:[{start:{line:661,column:4},end:{line:662,column:36}},{start:{line:661,column:4},end:{line:662,column:36}}],line:661},"27":{loc:{start:{line:686,column:17},end:{line:686,column:28}},type:"binary-expr",locations:[{start:{line:686,column:17},end:{line:686,column:22}},{start:{line:686,column:26},end:{line:686,column:28}}],line:686},"28":{loc:{start:{line:759,column:4},end:{line:760,column:36}},type:"if",locations:[{start:{line:759,column:4},end:{line:760,column:36}},{start:{line:759,column:4},end:{line:760,column:36}}],line:759},"29":{loc:{start:{line:784,column:17},end:{line:784,column:28}},type:"binary-expr",locations:[{start:{line:784,column:17},end:{line:784,column:22}},{start:{line:784,column:26},end:{line:784,column:28}}],line:784},"30":{loc:{start:{line:870,column:4},end:{line:871,column:36}},type:"if",locations:[{start:{line:870,column:4},end:{line:871,column:36}},{start:{line:870,column:4},end:{line:871,column:36}}],line:870},"31":{loc:{start:{line:912,column:4},end:{line:913,column:36}},type:"if",locations:[{start:{line:912,column:4},end:{line:913,column:36}},{start:{line:912,column:4},end:{line:913,column:36}}],line:912},"32":{loc:{start:{line:954,column:4},end:{line:955,column:36}},type:"if",locations:[{start:{line:954,column:4},end:{line:955,column:36}},{start:{line:954,column:4},end:{line:955,column:36}}],line:954},"33":{loc:{start:{line:982,column:19},end:{line:982,column:32}},type:"binary-expr",locations:[{start:{line:982,column:19},end:{line:982,column:26}},{start:{line:982,column:30},end:{line:982,column:32}}],line:982},"34":{loc:{start:{line:983,column:16},end:{line:983,column:28}},type:"binary-expr",locations:[{start:{line:983,column:16},end:{line:983,column:20}},{start:{line:983,column:24},end:{line:983,column:28}}],line:983},"35":{loc:{start:{line:1014,column:17},end:{line:1014,column:49}},type:"binary-expr",locations:[{start:{line:1014,column:17},end:{line:1014,column:26}},{start:{line:1014,column:30},end:{line:1014,column:49}}],line:1014},"36":{loc:{start:{line:1047,column:4},end:{line:1048,column:23}},type:"if",locations:[{start:{line:1047,column:4},end:{line:1048,column:23}},{start:{line:1047,column:4},end:{line:1048,column:23}}],line:1047},"37":{loc:{start:{line:1071,column:4},end:{line:1072,column:36}},type:"if",locations:[{start:{line:1071,column:4},end:{line:1072,column:36}},{start:{line:1071,column:4},end:{line:1072,column:36}}],line:1071},"38":{loc:{start:{line:1114,column:4},end:{line:1115,column:36}},type:"if",locations:[{start:{line:1114,column:4},end:{line:1115,column:36}},{start:{line:1114,column:4},end:{line:1115,column:36}}],line:1114},"39":{loc:{start:{line:1139,column:17},end:{line:1139,column:28}},type:"binary-expr",locations:[{start:{line:1139,column:17},end:{line:1139,column:22}},{start:{line:1139,column:26},end:{line:1139,column:28}}],line:1139},"40":{loc:{start:{line:1219,column:4},end:{line:1220,column:36}},type:"if",locations:[{start:{line:1219,column:4},end:{line:1220,column:36}},{start:{line:1219,column:4},end:{line:1220,column:36}}],line:1219},"41":{loc:{start:{line:1260,column:4},end:{line:1261,column:36}},type:"if",locations:[{start:{line:1260,column:4},end:{line:1261,column:36}},{start:{line:1260,column:4},end:{line:1261,column:36}}],line:1260},"42":{loc:{start:{line:1287,column:17},end:{line:1287,column:40}},type:"binary-expr",locations:[{start:{line:1287,column:17},end:{line:1287,column:22}},{start:{line:1287,column:26},end:{line:1287,column:40}}],line:1287},"43":{loc:{start:{line:1288,column:19},end:{line:1288,column:35}},type:"binary-expr",locations:[{start:{line:1288,column:19},end:{line:1288,column:26}},{start:{line:1288,column:30},end:{line:1288,column:35}}],line:1288},"44":{loc:{start:{line:1297,column:4},end:{line:1298,column:34}},type:"if",locations:[{start:{line:1297,column:4},end:{line:1298,column:34}},{start:{line:1297,column:4},end:{line:1298,column:34}}],line:1297},"45":{loc:{start:{line:1308,column:4},end:{line:1309,column:37}},type:"if",locations:[{start:{line:1308,column:4},end:{line:1309,column:37}},{start:{line:1308,column:4},end:{line:1309,column:37}}],line:1308},"46":{loc:{start:{line:1319,column:4},end:{line:1320,column:32}},type:"if",locations:[{start:{line:1319,column:4},end:{line:1320,column:32}},{start:{line:1319,column:4},end:{line:1320,column:32}}],line:1319},"47":{loc:{start:{line:1364,column:4},end:{line:1365,column:36}},type:"if",locations:[{start:{line:1364,column:4},end:{line:1365,column:36}},{start:{line:1364,column:4},end:{line:1365,column:36}}],line:1364},"48":{loc:{start:{line:1391,column:14},end:{line:1391,column:28}},type:"binary-expr",locations:[{start:{line:1391,column:14},end:{line:1391,column:16}},{start:{line:1391,column:20},end:{line:1391,column:28}}],line:1391},"49":{loc:{start:{line:1392,column:19},end:{line:1392,column:35}},type:"binary-expr",locations:[{start:{line:1392,column:19},end:{line:1392,column:26}},{start:{line:1392,column:30},end:{line:1392,column:35}}],line:1392},"50":{loc:{start:{line:1401,column:4},end:{line:1402,column:31}},type:"if",locations:[{start:{line:1401,column:4},end:{line:1402,column:31}},{start:{line:1401,column:4},end:{line:1402,column:31}}],line:1401},"51":{loc:{start:{line:1412,column:4},end:{line:1413,column:34}},type:"if",locations:[{start:{line:1412,column:4},end:{line:1413,column:34}},{start:{line:1412,column:4},end:{line:1413,column:34}}],line:1412},"52":{loc:{start:{line:1423,column:4},end:{line:1424,column:29}},type:"if",locations:[{start:{line:1423,column:4},end:{line:1424,column:29}},{start:{line:1423,column:4},end:{line:1424,column:29}}],line:1423},"53":{loc:{start:{line:1468,column:4},end:{line:1469,column:36}},type:"if",locations:[{start:{line:1468,column:4},end:{line:1469,column:36}},{start:{line:1468,column:4},end:{line:1469,column:36}}],line:1468},"54":{loc:{start:{line:1501,column:4},end:{line:1502,column:32}},type:"if",locations:[{start:{line:1501,column:4},end:{line:1502,column:32}},{start:{line:1501,column:4},end:{line:1502,column:32}}],line:1501},"55":{loc:{start:{line:1514,column:4},end:{line:1515,column:37}},type:"if",locations:[{start:{line:1514,column:4},end:{line:1515,column:37}},{start:{line:1514,column:4},end:{line:1515,column:37}}],line:1514},"56":{loc:{start:{line:1517,column:4},end:{line:1525,column:5}},type:"if",locations:[{start:{line:1517,column:4},end:{line:1525,column:5}},{start:{line:1517,column:4},end:{line:1525,column:5}}],line:1517},"57":{loc:{start:{line:1518,column:6},end:{line:1519,column:54}},type:"if",locations:[{start:{line:1518,column:6},end:{line:1519,column:54}},{start:{line:1518,column:6},end:{line:1519,column:54}}],line:1518},"58":{loc:{start:{line:1521,column:6},end:{line:1522,column:42}},type:"if",locations:[{start:{line:1521,column:6},end:{line:1522,column:42}},{start:{line:1521,column:6},end:{line:1522,column:42}}],line:1521},"59":{loc:{start:{line:1527,column:4},end:{line:1528,column:35}},type:"if",locations:[{start:{line:1527,column:4},end:{line:1528,column:35}},{start:{line:1527,column:4},end:{line:1528,column:35}}],line:1527},"60":{loc:{start:{line:1530,column:4},end:{line:1531,column:31}},type:"if",locations:[{start:{line:1530,column:4},end:{line:1531,column:31}},{start:{line:1530,column:4},end:{line:1531,column:31}}],line:1530},"61":{loc:{start:{line:1552,column:11},end:{line:1552,column:52}},type:"cond-expr",locations:[{start:{line:1552,column:23},end:{line:1552,column:45}},{start:{line:1552,column:48},end:{line:1552,column:52}}],line:1552},"62":{loc:{start:{line:1563,column:4},end:{line:1564,column:36}},type:"if",locations:[{start:{line:1563,column:4},end:{line:1564,column:36}},{start:{line:1563,column:4},end:{line:1564,column:36}}],line:1563},"63":{loc:{start:{line:1581,column:4},end:{line:1582,column:17}},type:"if",locations:[{start:{line:1581,column:4},end:{line:1582,column:17}},{start:{line:1581,column:4},end:{line:1582,column:17}}],line:1581},"64":{loc:{start:{line:1600,column:4},end:{line:1601,column:30}},type:"if",locations:[{start:{line:1600,column:4},end:{line:1601,column:30}},{start:{line:1600,column:4},end:{line:1601,column:30}}],line:1600},"65":{loc:{start:{line:1627,column:4},end:{line:1635,column:5}},type:"switch",locations:[{start:{line:1628,column:6},end:{line:1628,column:19}},{start:{line:1629,column:6},end:{line:1631,column:14}},{start:{line:1632,column:6},end:{line:1634,column:14}}],line:1627},"66":{loc:{start:{line:1668,column:4},end:{line:1669,column:36}},type:"if",locations:[{start:{line:1668,column:4},end:{line:1669,column:36}},{start:{line:1668,column:4},end:{line:1669,column:36}}],line:1668},"67":{loc:{start:{line:1683,column:4},end:{line:1684,column:52}},type:"if",locations:[{start:{line:1683,column:4},end:{line:1684,column:52}},{start:{line:1683,column:4},end:{line:1684,column:52}}],line:1683},"68":{loc:{start:{line:1686,column:4},end:{line:1687,column:40}},type:"if",locations:[{start:{line:1686,column:4},end:{line:1687,column:40}},{start:{line:1686,column:4},end:{line:1687,column:40}}],line:1686},"69":{loc:{start:{line:1689,column:4},end:{line:1690,column:40}},type:"if",locations:[{start:{line:1689,column:4},end:{line:1690,column:40}},{start:{line:1689,column:4},end:{line:1690,column:40}}],line:1689},"70":{loc:{start:{line:1696,column:4},end:{line:1700,column:5}},type:"if",locations:[{start:{line:1696,column:4},end:{line:1700,column:5}},{start:{line:1696,column:4},end:{line:1700,column:5}}],line:1696},"71":{loc:{start:{line:1735,column:17},end:{line:1735,column:64}},type:"binary-expr",locations:[{start:{line:1735,column:17},end:{line:1735,column:51}},{start:{line:1735,column:55},end:{line:1735,column:64}}],line:1735},"72":{loc:{start:{line:1736,column:17},end:{line:1736,column:58}},type:"cond-expr",locations:[{start:{line:1736,column:29},end:{line:1736,column:51}},{start:{line:1736,column:54},end:{line:1736,column:58}}],line:1736},"73":{loc:{start:{line:1825,column:4},end:{line:1826,column:36}},type:"if",locations:[{start:{line:1825,column:4},end:{line:1826,column:36}},{start:{line:1825,column:4},end:{line:1826,column:36}}],line:1825},"74":{loc:{start:{line:1849,column:18},end:{line:1849,column:45}},type:"binary-expr",locations:[{start:{line:1849,column:18},end:{line:1849,column:24}},{start:{line:1849,column:28},end:{line:1849,column:45}}],line:1849},"75":{loc:{start:{line:1919,column:4},end:{line:1920,column:36}},type:"if",locations:[{start:{line:1919,column:4},end:{line:1920,column:36}},{start:{line:1919,column:4},end:{line:1920,column:36}}],line:1919},"76":{loc:{start:{line:1953,column:16},end:{line:1953,column:29}},type:"binary-expr",locations:[{start:{line:1953,column:16},end:{line:1953,column:20}},{start:{line:1953,column:24},end:{line:1953,column:29}}],line:1953},"77":{loc:{start:{line:2014,column:4},end:{line:2015,column:36}},type:"if",locations:[{start:{line:2014,column:4},end:{line:2015,column:36}},{start:{line:2014,column:4},end:{line:2015,column:36}}],line:2014},"78":{loc:{start:{line:2045,column:4},end:{line:2046,column:36}},type:"if",locations:[{start:{line:2045,column:4},end:{line:2046,column:36}},{start:{line:2045,column:4},end:{line:2046,column:36}}],line:2045},"79":{loc:{start:{line:2070,column:17},end:{line:2070,column:43}},type:"binary-expr",locations:[{start:{line:2070,column:17},end:{line:2070,column:22}},{start:{line:2070,column:26},end:{line:2070,column:43}}],line:2070},"80":{loc:{start:{line:2130,column:4},end:{line:2131,column:36}},type:"if",locations:[{start:{line:2130,column:4},end:{line:2131,column:36}},{start:{line:2130,column:4},end:{line:2131,column:36}}],line:2130},"81":{loc:{start:{line:2155,column:16},end:{line:2155,column:25}},type:"binary-expr",locations:[{start:{line:2155,column:16},end:{line:2155,column:20}},{start:{line:2155,column:24},end:{line:2155,column:25}}],line:2155},"82":{loc:{start:{line:2225,column:4},end:{line:2226,column:36}},type:"if",locations:[{start:{line:2225,column:4},end:{line:2226,column:36}},{start:{line:2225,column:4},end:{line:2226,column:36}}],line:2225},"83":{loc:{start:{line:2252,column:16},end:{line:2252,column:25}},type:"binary-expr",locations:[{start:{line:2252,column:16},end:{line:2252,column:20}},{start:{line:2252,column:24},end:{line:2252,column:25}}],line:2252},"84":{loc:{start:{line:2253,column:19},end:{line:2253,column:31}},type:"binary-expr",locations:[{start:{line:2253,column:19},end:{line:2253,column:26}},{start:{line:2253,column:30},end:{line:2253,column:31}}],line:2253},"85":{loc:{start:{line:2325,column:4},end:{line:2326,column:36}},type:"if",locations:[{start:{line:2325,column:4},end:{line:2326,column:36}},{start:{line:2325,column:4},end:{line:2326,column:36}}],line:2325},"86":{loc:{start:{line:2352,column:17},end:{line:2352,column:51}},type:"binary-expr",locations:[{start:{line:2352,column:17},end:{line:2352,column:22}},{start:{line:2352,column:26},end:{line:2352,column:51}}],line:2352},"87":{loc:{start:{line:2353,column:19},end:{line:2353,column:35}},type:"binary-expr",locations:[{start:{line:2353,column:19},end:{line:2353,column:26}},{start:{line:2353,column:30},end:{line:2353,column:35}}],line:2353},"88":{loc:{start:{line:2362,column:4},end:{line:2363,column:38}},type:"if",locations:[{start:{line:2362,column:4},end:{line:2363,column:38}},{start:{line:2362,column:4},end:{line:2363,column:38}}],line:2362},"89":{loc:{start:{line:2373,column:4},end:{line:2374,column:37}},type:"if",locations:[{start:{line:2373,column:4},end:{line:2374,column:37}},{start:{line:2373,column:4},end:{line:2374,column:37}}],line:2373},"90":{loc:{start:{line:2384,column:4},end:{line:2385,column:32}},type:"if",locations:[{start:{line:2384,column:4},end:{line:2385,column:32}},{start:{line:2384,column:4},end:{line:2385,column:32}}],line:2384},"91":{loc:{start:{line:2429,column:4},end:{line:2430,column:36}},type:"if",locations:[{start:{line:2429,column:4},end:{line:2430,column:36}},{start:{line:2429,column:4},end:{line:2430,column:36}}],line:2429},"92":{loc:{start:{line:2454,column:19},end:{line:2454,column:52}},type:"binary-expr",locations:[{start:{line:2454,column:19},end:{line:2454,column:26}},{start:{line:2454,column:30},end:{line:2454,column:52}}],line:2454},"93":{loc:{start:{line:2524,column:4},end:{line:2525,column:36}},type:"if",locations:[{start:{line:2524,column:4},end:{line:2525,column:36}},{start:{line:2524,column:4},end:{line:2525,column:36}}],line:2524},"94":{loc:{start:{line:2551,column:20},end:{line:2551,column:55}},type:"binary-expr",locations:[{start:{line:2551,column:20},end:{line:2551,column:28}},{start:{line:2551,column:32},end:{line:2551,column:55}}],line:2551},"95":{loc:{start:{line:2552,column:19},end:{line:2552,column:35}},type:"binary-expr",locations:[{start:{line:2552,column:19},end:{line:2552,column:26}},{start:{line:2552,column:30},end:{line:2552,column:35}}],line:2552},"96":{loc:{start:{line:2561,column:4},end:{line:2562,column:41}},type:"if",locations:[{start:{line:2561,column:4},end:{line:2562,column:41}},{start:{line:2561,column:4},end:{line:2562,column:41}}],line:2561},"97":{loc:{start:{line:2572,column:4},end:{line:2573,column:40}},type:"if",locations:[{start:{line:2572,column:4},end:{line:2573,column:40}},{start:{line:2572,column:4},end:{line:2573,column:40}}],line:2572},"98":{loc:{start:{line:2583,column:4},end:{line:2584,column:35}},type:"if",locations:[{start:{line:2583,column:4},end:{line:2584,column:35}},{start:{line:2583,column:4},end:{line:2584,column:35}}],line:2583},"99":{loc:{start:{line:2628,column:4},end:{line:2629,column:36}},type:"if",locations:[{start:{line:2628,column:4},end:{line:2629,column:36}},{start:{line:2628,column:4},end:{line:2629,column:36}}],line:2628},"100":{loc:{start:{line:2706,column:4},end:{line:2707,column:36}},type:"if",locations:[{start:{line:2706,column:4},end:{line:2707,column:36}},{start:{line:2706,column:4},end:{line:2707,column:36}}],line:2706},"101":{loc:{start:{line:2720,column:2},end:{line:2775,column:3}},type:"switch",locations:[{start:{line:2721,column:4},end:{line:2722,column:41}},{start:{line:2723,column:4},end:{line:2724,column:40}},{start:{line:2725,column:4},end:{line:2726,column:38}},{start:{line:2727,column:4},end:{line:2728,column:38}},{start:{line:2729,column:4},end:{line:2730,column:41}},{start:{line:2731,column:4},end:{line:2732,column:38}},{start:{line:2733,column:4},end:{line:2734,column:37}},{start:{line:2735,column:4},end:{line:2736,column:41}},{start:{line:2737,column:4},end:{line:2738,column:42}},{start:{line:2739,column:4},end:{line:2740,column:43}},{start:{line:2741,column:4},end:{line:2742,column:44}},{start:{line:2743,column:4},end:{line:2744,column:41}},{start:{line:2745,column:4},end:{line:2746,column:45}},{start:{line:2747,column:4},end:{line:2748,column:39}},{start:{line:2749,column:4},end:{line:2750,column:36}},{start:{line:2751,column:4},end:{line:2752,column:40}},{start:{line:2753,column:4},end:{line:2754,column:41}},{start:{line:2755,column:4},end:{line:2756,column:44}},{start:{line:2757,column:4},end:{line:2758,column:43}},{start:{line:2759,column:4},end:{line:2760,column:45}},{start:{line:2761,column:4},end:{line:2762,column:45}},{start:{line:2763,column:4},end:{line:2764,column:43}},{start:{line:2765,column:4},end:{line:2766,column:43}},{start:{line:2767,column:4},end:{line:2768,column:44}},{start:{line:2769,column:4},end:{line:2770,column:45}},{start:{line:2771,column:4},end:{line:2772,column:42}},{start:{line:2773,column:4},end:{line:2774,column:46}}],line:2720}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":0,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"93fc3bb89a32fee5493e968d5f0dfd09ce06dd0f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23a1ybjrqy=function(){return actualCoverage;};}return actualCoverage;}cov_23a1ybjrqy();const assert=(cov_23a1ybjrqy().s[0]++,require('bsert'));const bio=(cov_23a1ybjrqy().s[1]++,require('bufio'));const{BloomFilter}=(cov_23a1ybjrqy().s[2]++,require('bfilter'));const common=(cov_23a1ybjrqy().s[3]++,require('./common'));const util=(cov_23a1ybjrqy().s[4]++,require('../utils/util'));const bip152=(cov_23a1ybjrqy().s[5]++,require('./bip152'));const NetAddress=(cov_23a1ybjrqy().s[6]++,require('./netaddress'));const consensus=(cov_23a1ybjrqy().s[7]++,require('../protocol/consensus'));const Headers=(cov_23a1ybjrqy().s[8]++,require('../primitives/headers'));const InvItem=(cov_23a1ybjrqy().s[9]++,require('../primitives/invitem'));const MemBlock=(cov_23a1ybjrqy().s[10]++,require('../primitives/memblock'));const MerkleBlock=(cov_23a1ybjrqy().s[11]++,require('../primitives/merkleblock'));const TX=(cov_23a1ybjrqy().s[12]++,require('../primitives/tx'));const{encoding}=(cov_23a1ybjrqy().s[13]++,bio);const DUMMY=(cov_23a1ybjrqy().s[14]++,Buffer.alloc(0));const{inspectSymbol}=(cov_23a1ybjrqy().s[15]++,require('../utils'));/**
 * Packet types.
 * @enum {Number}
 * @default
 */cov_23a1ybjrqy().s[16]++;exports.types={VERSION:0,VERACK:1,PING:2,PONG:3,GETADDR:4,ADDR:5,INV:6,GETDATA:7,NOTFOUND:8,GETBLOCKS:9,GETHEADERS:10,HEADERS:11,SENDHEADERS:12,BLOCK:13,TX:14,REJECT:15,MEMPOOL:16,FILTERLOAD:17,FILTERADD:18,FILTERCLEAR:19,MERKLEBLOCK:20,FEEFILTER:21,SENDCMPCT:22,CMPCTBLOCK:23,GETBLOCKTXN:24,BLOCKTXN:25,UNKNOWN:26,// Internal
INTERNAL:27,DATA:28};/**
 * Packet types by value.
 * @const {Object}
 * @default
 */cov_23a1ybjrqy().s[17]++;exports.typesByVal=['VERSION','VERACK','PING','PONG','GETADDR','ADDR','INV','GETDATA','NOTFOUND','GETBLOCKS','GETHEADERS','HEADERS','SENDHEADERS','BLOCK','TX','REJECT','MEMPOOL','FILTERLOAD','FILTERADD','FILTERCLEAR','MERKLEBLOCK','FEEFILTER','SENDCMPCT','CMPCTBLOCK','GETBLOCKTXN','BLOCKTXN','UNKNOWN',// Internal
'INTERNAL','DATA'];/**
 * Base Packet
 */class Packet{/**
   * Create a base packet.
   * @constructor
   */constructor(){cov_23a1ybjrqy().f[0]++;cov_23a1ybjrqy().s[18]++;this.type=-1;cov_23a1ybjrqy().s[19]++;this.cmd='';}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[1]++;cov_23a1ybjrqy().s[20]++;return 0;}/**
   * Serialize packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[2]++;cov_23a1ybjrqy().s[21]++;return bw;}/**
   * Serialize packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[3]++;cov_23a1ybjrqy().s[22]++;return DUMMY;}/**
   * Inject properties from buffer reader.
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[4]++;cov_23a1ybjrqy().s[23]++;return this;}/**
   * Inject properties from serialized data.
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[5]++;cov_23a1ybjrqy().s[24]++;return this;}}/**
 * Version Packet
 * @extends Packet
 * @property {Number} version - Protocol version.
 * @property {Number} services - Service bits.
 * @property {Number} time - Timestamp of discovery.
 * @property {NetAddress} local - Our address.
 * @property {NetAddress} remote - Their address.
 * @property {Buffer} nonce
 * @property {String} agent - User agent string.
 * @property {Number} height - Chain height.
 * @property {Boolean} noRelay - Whether transactions
 * should be relayed immediately.
 */class VersionPacket extends Packet{/**
   * Create a version packet.
   * @constructor
   * @param {Object?} options
   * @param {Number} options.version - Protocol version.
   * @param {Number} options.services - Service bits.
   * @param {Number} options.time - Timestamp of discovery.
   * @param {NetAddress} options.local - Our address.
   * @param {NetAddress} options.remote - Their address.
   * @param {Buffer} options.nonce
   * @param {String} options.agent - User agent string.
   * @param {Number} options.height - Chain height.
   * @param {Boolean} options.noRelay - Whether transactions
   * should be relayed immediately.
   */constructor(options){cov_23a1ybjrqy().f[6]++;cov_23a1ybjrqy().s[25]++;super();cov_23a1ybjrqy().s[26]++;this.cmd='version';cov_23a1ybjrqy().s[27]++;this.type=exports.types.VERSION;cov_23a1ybjrqy().s[28]++;this.version=common.PROTOCOL_VERSION;cov_23a1ybjrqy().s[29]++;this.services=common.LOCAL_SERVICES;cov_23a1ybjrqy().s[30]++;this.time=util.now();cov_23a1ybjrqy().s[31]++;this.remote=new NetAddress();cov_23a1ybjrqy().s[32]++;this.local=new NetAddress();cov_23a1ybjrqy().s[33]++;this.nonce=common.ZERO_NONCE;cov_23a1ybjrqy().s[34]++;this.agent=common.USER_AGENT;cov_23a1ybjrqy().s[35]++;this.height=0;cov_23a1ybjrqy().s[36]++;this.noRelay=false;cov_23a1ybjrqy().s[37]++;if(options){cov_23a1ybjrqy().b[0][0]++;cov_23a1ybjrqy().s[38]++;this.fromOptions(options);}else{cov_23a1ybjrqy().b[0][1]++;}}/**
   * Inject properties from options.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_23a1ybjrqy().f[7]++;cov_23a1ybjrqy().s[39]++;if(options.version!=null){cov_23a1ybjrqy().b[1][0]++;cov_23a1ybjrqy().s[40]++;this.version=options.version;}else{cov_23a1ybjrqy().b[1][1]++;}cov_23a1ybjrqy().s[41]++;if(options.services!=null){cov_23a1ybjrqy().b[2][0]++;cov_23a1ybjrqy().s[42]++;this.services=options.services;}else{cov_23a1ybjrqy().b[2][1]++;}cov_23a1ybjrqy().s[43]++;if(options.time!=null){cov_23a1ybjrqy().b[3][0]++;cov_23a1ybjrqy().s[44]++;this.time=options.time;}else{cov_23a1ybjrqy().b[3][1]++;}cov_23a1ybjrqy().s[45]++;if(options.remote){cov_23a1ybjrqy().b[4][0]++;cov_23a1ybjrqy().s[46]++;this.remote.fromOptions(options.remote);}else{cov_23a1ybjrqy().b[4][1]++;}cov_23a1ybjrqy().s[47]++;if(options.local){cov_23a1ybjrqy().b[5][0]++;cov_23a1ybjrqy().s[48]++;this.local.fromOptions(options.local);}else{cov_23a1ybjrqy().b[5][1]++;}cov_23a1ybjrqy().s[49]++;if(options.nonce){cov_23a1ybjrqy().b[6][0]++;cov_23a1ybjrqy().s[50]++;this.nonce=options.nonce;}else{cov_23a1ybjrqy().b[6][1]++;}cov_23a1ybjrqy().s[51]++;if(options.agent){cov_23a1ybjrqy().b[7][0]++;cov_23a1ybjrqy().s[52]++;this.agent=options.agent;}else{cov_23a1ybjrqy().b[7][1]++;}cov_23a1ybjrqy().s[53]++;if(options.height!=null){cov_23a1ybjrqy().b[8][0]++;cov_23a1ybjrqy().s[54]++;this.height=options.height;}else{cov_23a1ybjrqy().b[8][1]++;}cov_23a1ybjrqy().s[55]++;if(options.noRelay!=null){cov_23a1ybjrqy().b[9][0]++;cov_23a1ybjrqy().s[56]++;this.noRelay=options.noRelay;}else{cov_23a1ybjrqy().b[9][1]++;}cov_23a1ybjrqy().s[57]++;return this;}/**
   * Instantiate version packet from options.
   * @param {Object} options
   * @returns {VersionPacket}
   */static fromOptions(options){cov_23a1ybjrqy().f[8]++;cov_23a1ybjrqy().s[58]++;return new this().fromOptions(options);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[9]++;let size=(cov_23a1ybjrqy().s[59]++,0);cov_23a1ybjrqy().s[60]++;size+=20;cov_23a1ybjrqy().s[61]++;size+=this.remote.getSize(false);cov_23a1ybjrqy().s[62]++;size+=this.local.getSize(false);cov_23a1ybjrqy().s[63]++;size+=8;cov_23a1ybjrqy().s[64]++;size+=encoding.sizeVarString(this.agent,'ascii');cov_23a1ybjrqy().s[65]++;size+=5;cov_23a1ybjrqy().s[66]++;return size;}/**
   * Write version packet to buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[10]++;cov_23a1ybjrqy().s[67]++;bw.writeI32(this.version);cov_23a1ybjrqy().s[68]++;bw.writeU32(this.services);cov_23a1ybjrqy().s[69]++;bw.writeU32(0);cov_23a1ybjrqy().s[70]++;bw.writeI64(this.time);cov_23a1ybjrqy().s[71]++;this.remote.toWriter(bw,false);cov_23a1ybjrqy().s[72]++;this.local.toWriter(bw,false);cov_23a1ybjrqy().s[73]++;bw.writeBytes(this.nonce);cov_23a1ybjrqy().s[74]++;bw.writeVarString(this.agent,'ascii');cov_23a1ybjrqy().s[75]++;bw.writeI32(this.height);cov_23a1ybjrqy().s[76]++;bw.writeU8(this.noRelay?(cov_23a1ybjrqy().b[10][0]++,0):(cov_23a1ybjrqy().b[10][1]++,1));cov_23a1ybjrqy().s[77]++;return bw;}/**
   * Serialize version packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[11]++;const size=(cov_23a1ybjrqy().s[78]++,this.getSize());cov_23a1ybjrqy().s[79]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[12]++;cov_23a1ybjrqy().s[80]++;this.version=br.readI32();cov_23a1ybjrqy().s[81]++;this.services=br.readU32();// Note: hi service bits
// are currently unused.
cov_23a1ybjrqy().s[82]++;br.readU32();cov_23a1ybjrqy().s[83]++;this.time=br.readI64();cov_23a1ybjrqy().s[84]++;this.remote.fromReader(br,false);cov_23a1ybjrqy().s[85]++;if(br.left()>0){cov_23a1ybjrqy().b[11][0]++;cov_23a1ybjrqy().s[86]++;this.local.fromReader(br,false);cov_23a1ybjrqy().s[87]++;this.nonce=br.readBytes(8);}else{cov_23a1ybjrqy().b[11][1]++;}cov_23a1ybjrqy().s[88]++;if(br.left()>0){cov_23a1ybjrqy().b[12][0]++;cov_23a1ybjrqy().s[89]++;this.agent=br.readVarString('ascii',256);}else{cov_23a1ybjrqy().b[12][1]++;}cov_23a1ybjrqy().s[90]++;if(br.left()>0){cov_23a1ybjrqy().b[13][0]++;cov_23a1ybjrqy().s[91]++;this.height=br.readI32();}else{cov_23a1ybjrqy().b[13][1]++;}cov_23a1ybjrqy().s[92]++;if(br.left()>0){cov_23a1ybjrqy().b[14][0]++;cov_23a1ybjrqy().s[93]++;this.noRelay=br.readU8()===0;}else{cov_23a1ybjrqy().b[14][1]++;}cov_23a1ybjrqy().s[94]++;if(this.version===10300){cov_23a1ybjrqy().b[15][0]++;cov_23a1ybjrqy().s[95]++;this.version=300;}else{cov_23a1ybjrqy().b[15][1]++;}cov_23a1ybjrqy().s[96]++;assert(this.version>=0,'Version is negative.');cov_23a1ybjrqy().s[97]++;assert(this.time>=0,'Timestamp is negative.');// No idea why so many peers do this.
cov_23a1ybjrqy().s[98]++;if(this.height<0){cov_23a1ybjrqy().b[16][0]++;cov_23a1ybjrqy().s[99]++;this.height=0;}else{cov_23a1ybjrqy().b[16][1]++;}cov_23a1ybjrqy().s[100]++;return this;}/**
   * Instantiate version packet from buffer reader.
   * @param {BufferReader} br
   * @returns {VersionPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[13]++;cov_23a1ybjrqy().s[101]++;return new this().fromReader(br);}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[14]++;cov_23a1ybjrqy().s[102]++;return this.fromReader(bio.read(data));}/**
   * Instantiate version packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {VersionPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[15]++;cov_23a1ybjrqy().s[103]++;if(typeof data==='string'){cov_23a1ybjrqy().b[17][0]++;cov_23a1ybjrqy().s[104]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[17][1]++;}cov_23a1ybjrqy().s[105]++;return new this().fromRaw(data,enc);}}/**
 * Verack Packet
 * @extends Packet
 */class VerackPacket extends Packet{/**
   * Create a `verack` packet.
   * @constructor
   */constructor(){cov_23a1ybjrqy().f[16]++;cov_23a1ybjrqy().s[106]++;super();cov_23a1ybjrqy().s[107]++;this.cmd='verack';cov_23a1ybjrqy().s[108]++;this.type=exports.types.VERACK;}/**
   * Instantiate verack packet from serialized data.
   * @param {BufferReader} br
   * @returns {VerackPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[17]++;cov_23a1ybjrqy().s[109]++;return new this().fromReader(br);}/**
   * Instantiate verack packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {VerackPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[18]++;cov_23a1ybjrqy().s[110]++;if(typeof data==='string'){cov_23a1ybjrqy().b[18][0]++;cov_23a1ybjrqy().s[111]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[18][1]++;}cov_23a1ybjrqy().s[112]++;return new this().fromRaw(data);}}/**
 * Ping Packet
 * @extends Packet
 * @property {Buffer|null} nonce
 */class PingPacket extends Packet{/**
   * Create a `ping` packet.
   * @constructor
   * @param {Buffer?} nonce
   */constructor(nonce){cov_23a1ybjrqy().f[19]++;cov_23a1ybjrqy().s[113]++;super();cov_23a1ybjrqy().s[114]++;this.cmd='ping';cov_23a1ybjrqy().s[115]++;this.type=exports.types.PING;cov_23a1ybjrqy().s[116]++;this.nonce=(cov_23a1ybjrqy().b[19][0]++,nonce)||(cov_23a1ybjrqy().b[19][1]++,null);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[20]++;cov_23a1ybjrqy().s[117]++;return this.nonce?(cov_23a1ybjrqy().b[20][0]++,8):(cov_23a1ybjrqy().b[20][1]++,0);}/**
   * Serialize ping packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[21]++;const size=(cov_23a1ybjrqy().s[118]++,this.getSize());cov_23a1ybjrqy().s[119]++;return this.toWriter(bio.write(size)).render();}/**
   * Serialize ping packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[22]++;cov_23a1ybjrqy().s[120]++;if(this.nonce){cov_23a1ybjrqy().b[21][0]++;cov_23a1ybjrqy().s[121]++;bw.writeBytes(this.nonce);}else{cov_23a1ybjrqy().b[21][1]++;}cov_23a1ybjrqy().s[122]++;return bw;}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[23]++;cov_23a1ybjrqy().s[123]++;if(br.left()>=8){cov_23a1ybjrqy().b[22][0]++;cov_23a1ybjrqy().s[124]++;this.nonce=br.readBytes(8);}else{cov_23a1ybjrqy().b[22][1]++;}cov_23a1ybjrqy().s[125]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[24]++;cov_23a1ybjrqy().s[126]++;return this.fromReader(bio.read(data));}/**
   * Instantiate ping packet from serialized data.
   * @param {BufferReader} br
   * @returns {PingPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[25]++;cov_23a1ybjrqy().s[127]++;return new this().fromRaw(br);}/**
   * Instantiate ping packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {PingPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[26]++;cov_23a1ybjrqy().s[128]++;if(typeof data==='string'){cov_23a1ybjrqy().b[23][0]++;cov_23a1ybjrqy().s[129]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[23][1]++;}cov_23a1ybjrqy().s[130]++;return new this().fromRaw(data);}}/**
 * Pong Packet
 * @extends Packet
 * @property {BN} nonce
 */class PongPacket extends Packet{/**
   * Create a `pong` packet.
   * @constructor
   * @param {BN?} nonce
   */constructor(nonce){cov_23a1ybjrqy().f[27]++;cov_23a1ybjrqy().s[131]++;super();cov_23a1ybjrqy().s[132]++;this.cmd='pong';cov_23a1ybjrqy().s[133]++;this.type=exports.types.PONG;cov_23a1ybjrqy().s[134]++;this.nonce=(cov_23a1ybjrqy().b[24][0]++,nonce)||(cov_23a1ybjrqy().b[24][1]++,common.ZERO_NONCE);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[28]++;cov_23a1ybjrqy().s[135]++;return 8;}/**
   * Serialize pong packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[29]++;cov_23a1ybjrqy().s[136]++;bw.writeBytes(this.nonce);cov_23a1ybjrqy().s[137]++;return bw;}/**
   * Serialize pong packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[30]++;cov_23a1ybjrqy().s[138]++;return this.toWriter(bio.write(8)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[31]++;cov_23a1ybjrqy().s[139]++;this.nonce=br.readBytes(8);cov_23a1ybjrqy().s[140]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[32]++;cov_23a1ybjrqy().s[141]++;return this.fromReader(bio.read(data));}/**
   * Instantiate pong packet from buffer reader.
   * @param {BufferReader} br
   * @returns {VerackPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[33]++;cov_23a1ybjrqy().s[142]++;return new this().fromReader(br);}/**
   * Instantiate pong packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {VerackPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[34]++;cov_23a1ybjrqy().s[143]++;if(typeof data==='string'){cov_23a1ybjrqy().b[25][0]++;cov_23a1ybjrqy().s[144]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[25][1]++;}cov_23a1ybjrqy().s[145]++;return new this().fromRaw(data);}}/**
 * GetAddr Packet
 * @extends Packet
 */class GetAddrPacket extends Packet{/**
   * Create a `getaddr` packet.
   * @constructor
   */constructor(){cov_23a1ybjrqy().f[35]++;cov_23a1ybjrqy().s[146]++;super();cov_23a1ybjrqy().s[147]++;this.cmd='getaddr';cov_23a1ybjrqy().s[148]++;this.type=exports.types.GETADDR;}/**
   * Instantiate getaddr packet from buffer reader.
   * @param {BufferReader} br
   * @returns {GetAddrPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[36]++;cov_23a1ybjrqy().s[149]++;return new this().fromReader(br);}/**
   * Instantiate getaddr packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {GetAddrPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[37]++;cov_23a1ybjrqy().s[150]++;if(typeof data==='string'){cov_23a1ybjrqy().b[26][0]++;cov_23a1ybjrqy().s[151]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[26][1]++;}cov_23a1ybjrqy().s[152]++;return new this().fromRaw(data);}}/**
 * Addr Packet
 * @extends Packet
 * @property {NetAddress[]} items
 */class AddrPacket extends Packet{/**
   * Create a `addr` packet.
   * @constructor
   * @param {(NetAddress[])?} items
   */constructor(items){cov_23a1ybjrqy().f[38]++;cov_23a1ybjrqy().s[153]++;super();cov_23a1ybjrqy().s[154]++;this.cmd='addr';cov_23a1ybjrqy().s[155]++;this.type=exports.types.ADDR;cov_23a1ybjrqy().s[156]++;this.items=(cov_23a1ybjrqy().b[27][0]++,items)||(cov_23a1ybjrqy().b[27][1]++,[]);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[39]++;let size=(cov_23a1ybjrqy().s[157]++,0);cov_23a1ybjrqy().s[158]++;size+=encoding.sizeVarint(this.items.length);cov_23a1ybjrqy().s[159]++;size+=30*this.items.length;cov_23a1ybjrqy().s[160]++;return size;}/**
   * Serialize addr packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[40]++;cov_23a1ybjrqy().s[161]++;bw.writeVarint(this.items.length);cov_23a1ybjrqy().s[162]++;for(const item of this.items){cov_23a1ybjrqy().s[163]++;item.toWriter(bw,true);}cov_23a1ybjrqy().s[164]++;return bw;}/**
   * Serialize addr packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[41]++;const size=(cov_23a1ybjrqy().s[165]++,this.getSize());cov_23a1ybjrqy().s[166]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[42]++;const br=(cov_23a1ybjrqy().s[167]++,bio.read(data));const count=(cov_23a1ybjrqy().s[168]++,br.readVarint());cov_23a1ybjrqy().s[169]++;for(let i=(cov_23a1ybjrqy().s[170]++,0);i<count;i++){cov_23a1ybjrqy().s[171]++;this.items.push(NetAddress.fromReader(br,true));}cov_23a1ybjrqy().s[172]++;return this;}/**
   * Instantiate addr packet from Buffer reader.
   * @param {BufferReader} br
   * @returns {AddrPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[43]++;cov_23a1ybjrqy().s[173]++;return new this().fromReader(br);}/**
   * Instantiate addr packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {AddrPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[44]++;cov_23a1ybjrqy().s[174]++;if(typeof data==='string'){cov_23a1ybjrqy().b[28][0]++;cov_23a1ybjrqy().s[175]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[28][1]++;}cov_23a1ybjrqy().s[176]++;return new this().fromRaw(data);}}/**
 * Inv Packet
 * @extends Packet
 * @property {InvItem[]} items
 */class InvPacket extends Packet{/**
   * Create a `inv` packet.
   * @constructor
   * @param {(InvItem[])?} items
   */constructor(items){cov_23a1ybjrqy().f[45]++;cov_23a1ybjrqy().s[177]++;super();cov_23a1ybjrqy().s[178]++;this.cmd='inv';cov_23a1ybjrqy().s[179]++;this.type=exports.types.INV;cov_23a1ybjrqy().s[180]++;this.items=(cov_23a1ybjrqy().b[29][0]++,items)||(cov_23a1ybjrqy().b[29][1]++,[]);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[46]++;let size=(cov_23a1ybjrqy().s[181]++,0);cov_23a1ybjrqy().s[182]++;size+=encoding.sizeVarint(this.items.length);cov_23a1ybjrqy().s[183]++;size+=36*this.items.length;cov_23a1ybjrqy().s[184]++;return size;}/**
   * Serialize inv packet to writer.
   * @param {Buffer} bw
   */toWriter(bw){cov_23a1ybjrqy().f[47]++;cov_23a1ybjrqy().s[185]++;assert(this.items.length<=common.MAX_INV);cov_23a1ybjrqy().s[186]++;bw.writeVarint(this.items.length);cov_23a1ybjrqy().s[187]++;for(const item of this.items){cov_23a1ybjrqy().s[188]++;item.toWriter(bw);}cov_23a1ybjrqy().s[189]++;return bw;}/**
   * Serialize inv packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[48]++;const size=(cov_23a1ybjrqy().s[190]++,this.getSize());cov_23a1ybjrqy().s[191]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[49]++;const count=(cov_23a1ybjrqy().s[192]++,br.readVarint());cov_23a1ybjrqy().s[193]++;assert(count<=common.MAX_INV,'Inv item count too high.');cov_23a1ybjrqy().s[194]++;for(let i=(cov_23a1ybjrqy().s[195]++,0);i<count;i++){cov_23a1ybjrqy().s[196]++;this.items.push(InvItem.fromReader(br));}cov_23a1ybjrqy().s[197]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[50]++;cov_23a1ybjrqy().s[198]++;return this.fromReader(bio.read(data));}/**
   * Instantiate inv packet from buffer reader.
   * @param {BufferReader} br
   * @returns {InvPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[51]++;cov_23a1ybjrqy().s[199]++;return new this().fromRaw(br);}/**
   * Instantiate inv packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {InvPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[52]++;cov_23a1ybjrqy().s[200]++;if(typeof data==='string'){cov_23a1ybjrqy().b[30][0]++;cov_23a1ybjrqy().s[201]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[30][1]++;}cov_23a1ybjrqy().s[202]++;return new this().fromRaw(data);}}/**
 * GetData Packet
 * @extends InvPacket
 */class GetDataPacket extends InvPacket{/**
   * Create a `getdata` packet.
   * @constructor
   * @param {(InvItem[])?} items
   */constructor(items){cov_23a1ybjrqy().f[53]++;cov_23a1ybjrqy().s[203]++;super(items);cov_23a1ybjrqy().s[204]++;this.cmd='getdata';cov_23a1ybjrqy().s[205]++;this.type=exports.types.GETDATA;}/**
   * Instantiate getdata packet from buffer reader.
   * @param {BufferReader} br
   * @returns {GetDataPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[54]++;cov_23a1ybjrqy().s[206]++;return new this().fromReader(br);}/**
   * Instantiate getdata packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {GetDataPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[55]++;cov_23a1ybjrqy().s[207]++;if(typeof data==='string'){cov_23a1ybjrqy().b[31][0]++;cov_23a1ybjrqy().s[208]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[31][1]++;}cov_23a1ybjrqy().s[209]++;return new this().fromRaw(data);}}/**
 * NotFound Packet
 * @extends InvPacket
 */class NotFoundPacket extends InvPacket{/**
   * Create a `notfound` packet.
   * @constructor
   * @param {(InvItem[])?} items
   */constructor(items){cov_23a1ybjrqy().f[56]++;cov_23a1ybjrqy().s[210]++;super(items);cov_23a1ybjrqy().s[211]++;this.cmd='notfound';cov_23a1ybjrqy().s[212]++;this.type=exports.types.NOTFOUND;}/**
   * Instantiate notfound packet from buffer reader.
   * @param {BufferReader} br
   * @returns {NotFoundPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[57]++;cov_23a1ybjrqy().s[213]++;return new this().fromReader(br);}/**
   * Instantiate notfound packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {NotFoundPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[58]++;cov_23a1ybjrqy().s[214]++;if(typeof data==='string'){cov_23a1ybjrqy().b[32][0]++;cov_23a1ybjrqy().s[215]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[32][1]++;}cov_23a1ybjrqy().s[216]++;return new this().fromRaw(data);}}/**
 * GetBlocks Packet
 * @extends Packet
 * @property {Hash[]} locator
 * @property {Hash|null} stop
 */class GetBlocksPacket extends Packet{/**
   * Create a `getblocks` packet.
   * @constructor
   * @param {Hash[]} locator
   * @param {Hash?} stop
   */constructor(locator,stop){cov_23a1ybjrqy().f[59]++;cov_23a1ybjrqy().s[217]++;super();cov_23a1ybjrqy().s[218]++;this.cmd='getblocks';cov_23a1ybjrqy().s[219]++;this.type=exports.types.GETBLOCKS;cov_23a1ybjrqy().s[220]++;this.version=common.PROTOCOL_VERSION;cov_23a1ybjrqy().s[221]++;this.locator=(cov_23a1ybjrqy().b[33][0]++,locator)||(cov_23a1ybjrqy().b[33][1]++,[]);cov_23a1ybjrqy().s[222]++;this.stop=(cov_23a1ybjrqy().b[34][0]++,stop)||(cov_23a1ybjrqy().b[34][1]++,null);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[60]++;let size=(cov_23a1ybjrqy().s[223]++,0);cov_23a1ybjrqy().s[224]++;size+=4;cov_23a1ybjrqy().s[225]++;size+=encoding.sizeVarint(this.locator.length);cov_23a1ybjrqy().s[226]++;size+=32*this.locator.length;cov_23a1ybjrqy().s[227]++;size+=32;cov_23a1ybjrqy().s[228]++;return size;}/**
   * Serialize getblocks packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[61]++;cov_23a1ybjrqy().s[229]++;assert(this.locator.length<=common.MAX_INV,'Too many block hashes.');cov_23a1ybjrqy().s[230]++;bw.writeU32(this.version);cov_23a1ybjrqy().s[231]++;bw.writeVarint(this.locator.length);cov_23a1ybjrqy().s[232]++;for(const hash of this.locator){cov_23a1ybjrqy().s[233]++;bw.writeHash(hash);}cov_23a1ybjrqy().s[234]++;bw.writeHash((cov_23a1ybjrqy().b[35][0]++,this.stop)||(cov_23a1ybjrqy().b[35][1]++,consensus.ZERO_HASH));cov_23a1ybjrqy().s[235]++;return bw;}/**
   * Serialize getblocks packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[62]++;const size=(cov_23a1ybjrqy().s[236]++,this.getSize());cov_23a1ybjrqy().s[237]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[63]++;cov_23a1ybjrqy().s[238]++;this.version=br.readU32();const count=(cov_23a1ybjrqy().s[239]++,br.readVarint());cov_23a1ybjrqy().s[240]++;assert(count<=common.MAX_INV,'Too many block hashes.');cov_23a1ybjrqy().s[241]++;for(let i=(cov_23a1ybjrqy().s[242]++,0);i<count;i++){cov_23a1ybjrqy().s[243]++;this.locator.push(br.readHash());}cov_23a1ybjrqy().s[244]++;this.stop=br.readHash();cov_23a1ybjrqy().s[245]++;if(this.stop.equals(consensus.ZERO_HASH)){cov_23a1ybjrqy().b[36][0]++;cov_23a1ybjrqy().s[246]++;this.stop=null;}else{cov_23a1ybjrqy().b[36][1]++;}cov_23a1ybjrqy().s[247]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[64]++;cov_23a1ybjrqy().s[248]++;return this.fromReader(bio.read(data));}/**
   * Instantiate getblocks packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {GetBlocksPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[65]++;cov_23a1ybjrqy().s[249]++;if(typeof data==='string'){cov_23a1ybjrqy().b[37][0]++;cov_23a1ybjrqy().s[250]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[37][1]++;}cov_23a1ybjrqy().s[251]++;return new this().fromRaw(data);}}/**
 * GetHeader Packets
 * @extends GetBlocksPacket
 */class GetHeadersPacket extends GetBlocksPacket{/**
   * Create a `getheaders` packet.
   * @constructor
   * @param {Hash[]} locator
   * @param {Hash?} stop
   */constructor(locator,stop){cov_23a1ybjrqy().f[66]++;cov_23a1ybjrqy().s[252]++;super(locator,stop);cov_23a1ybjrqy().s[253]++;this.cmd='getheaders';cov_23a1ybjrqy().s[254]++;this.type=exports.types.GETHEADERS;}/**
   * Instantiate getheaders packet from buffer reader.
   * @param {BufferReader} br
   * @returns {GetHeadersPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[67]++;cov_23a1ybjrqy().s[255]++;return new this().fromReader(br);}/**
   * Instantiate getheaders packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {GetHeadersPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[68]++;cov_23a1ybjrqy().s[256]++;if(typeof data==='string'){cov_23a1ybjrqy().b[38][0]++;cov_23a1ybjrqy().s[257]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[38][1]++;}cov_23a1ybjrqy().s[258]++;return new this().fromRaw(data);}}/**
 * Headers Packet
 * @extends Packet
 * @property {Headers[]} items
 */class HeadersPacket extends Packet{/**
   * Create a `headers` packet.
   * @constructor
   * @param {(Headers[])?} items
   */constructor(items){cov_23a1ybjrqy().f[69]++;cov_23a1ybjrqy().s[259]++;super();cov_23a1ybjrqy().s[260]++;this.cmd='headers';cov_23a1ybjrqy().s[261]++;this.type=exports.types.HEADERS;cov_23a1ybjrqy().s[262]++;this.items=(cov_23a1ybjrqy().b[39][0]++,items)||(cov_23a1ybjrqy().b[39][1]++,[]);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[70]++;let size=(cov_23a1ybjrqy().s[263]++,0);cov_23a1ybjrqy().s[264]++;size+=encoding.sizeVarint(this.items.length);cov_23a1ybjrqy().s[265]++;for(const item of this.items){cov_23a1ybjrqy().s[266]++;size+=item.getSize();}cov_23a1ybjrqy().s[267]++;return size;}/**
   * Serialize headers packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[71]++;cov_23a1ybjrqy().s[268]++;assert(this.items.length<=2000,'Too many headers.');cov_23a1ybjrqy().s[269]++;bw.writeVarint(this.items.length);cov_23a1ybjrqy().s[270]++;for(const item of this.items){cov_23a1ybjrqy().s[271]++;item.toWriter(bw);}cov_23a1ybjrqy().s[272]++;return bw;}/**
   * Serialize headers packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[72]++;const size=(cov_23a1ybjrqy().s[273]++,this.getSize());cov_23a1ybjrqy().s[274]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[73]++;const count=(cov_23a1ybjrqy().s[275]++,br.readVarint());cov_23a1ybjrqy().s[276]++;assert(count<=2000,'Too many headers.');cov_23a1ybjrqy().s[277]++;for(let i=(cov_23a1ybjrqy().s[278]++,0);i<count;i++){cov_23a1ybjrqy().s[279]++;this.items.push(Headers.fromReader(br));}cov_23a1ybjrqy().s[280]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[74]++;cov_23a1ybjrqy().s[281]++;return this.fromReader(bio.read(data));}/**
   * Instantiate headers packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {VerackPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[75]++;cov_23a1ybjrqy().s[282]++;if(typeof data==='string'){cov_23a1ybjrqy().b[40][0]++;cov_23a1ybjrqy().s[283]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[40][1]++;}cov_23a1ybjrqy().s[284]++;return new this().fromRaw(data);}}/**
 * SendHeaders Packet
 * @extends Packet
 */class SendHeadersPacket extends Packet{/**
   * Create a `sendheaders` packet.
   * @constructor
   */constructor(){cov_23a1ybjrqy().f[76]++;cov_23a1ybjrqy().s[285]++;super();cov_23a1ybjrqy().s[286]++;this.cmd='sendheaders';cov_23a1ybjrqy().s[287]++;this.type=exports.types.SENDHEADERS;}/**
   * Instantiate sendheaders packet from buffer reader.
   * @param {BufferReader} br
   * @returns {SendHeadersPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[77]++;cov_23a1ybjrqy().s[288]++;return new this().fromReader(br);}/**
   * Instantiate sendheaders packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {SendHeadersPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[78]++;cov_23a1ybjrqy().s[289]++;if(typeof data==='string'){cov_23a1ybjrqy().b[41][0]++;cov_23a1ybjrqy().s[290]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[41][1]++;}cov_23a1ybjrqy().s[291]++;return new this().fromRaw(data);}}/**
 * Block Packet
 * @extends Packet
 * @property {Block} block
 * @property {Boolean} witness
 */class BlockPacket extends Packet{/**
   * Create a `block` packet.
   * @constructor
   * @param {Block|null} block
   * @param {Boolean?} witness
   */constructor(block,witness){cov_23a1ybjrqy().f[79]++;cov_23a1ybjrqy().s[292]++;super();cov_23a1ybjrqy().s[293]++;this.cmd='block';cov_23a1ybjrqy().s[294]++;this.type=exports.types.BLOCK;cov_23a1ybjrqy().s[295]++;this.block=(cov_23a1ybjrqy().b[42][0]++,block)||(cov_23a1ybjrqy().b[42][1]++,new MemBlock());cov_23a1ybjrqy().s[296]++;this.witness=(cov_23a1ybjrqy().b[43][0]++,witness)||(cov_23a1ybjrqy().b[43][1]++,false);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[80]++;cov_23a1ybjrqy().s[297]++;if(this.witness){cov_23a1ybjrqy().b[44][0]++;cov_23a1ybjrqy().s[298]++;return this.block.getSize();}else{cov_23a1ybjrqy().b[44][1]++;}cov_23a1ybjrqy().s[299]++;return this.block.getBaseSize();}/**
   * Serialize block packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[81]++;cov_23a1ybjrqy().s[300]++;if(this.witness){cov_23a1ybjrqy().b[45][0]++;cov_23a1ybjrqy().s[301]++;return this.block.toWriter(bw);}else{cov_23a1ybjrqy().b[45][1]++;}cov_23a1ybjrqy().s[302]++;return this.block.toNormalWriter(bw);}/**
   * Serialize block packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[82]++;cov_23a1ybjrqy().s[303]++;if(this.witness){cov_23a1ybjrqy().b[46][0]++;cov_23a1ybjrqy().s[304]++;return this.block.toRaw();}else{cov_23a1ybjrqy().b[46][1]++;}cov_23a1ybjrqy().s[305]++;return this.block.toNormal();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[83]++;cov_23a1ybjrqy().s[306]++;this.block.fromReader(br);cov_23a1ybjrqy().s[307]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[84]++;cov_23a1ybjrqy().s[308]++;this.block.fromRaw(data);cov_23a1ybjrqy().s[309]++;return this;}/**
   * Instantiate block packet from buffer reader.
   * @param {BufferReader} br
   * @returns {BlockPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[85]++;cov_23a1ybjrqy().s[310]++;return new this().fromReader(br);}/**
   * Instantiate block packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {BlockPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[86]++;cov_23a1ybjrqy().s[311]++;if(typeof data==='string'){cov_23a1ybjrqy().b[47][0]++;cov_23a1ybjrqy().s[312]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[47][1]++;}cov_23a1ybjrqy().s[313]++;return new this().fromRaw(data);}}/**
 * TX Packet
 * @extends Packet
 * @property {TX} block
 * @property {Boolean} witness
 */class TXPacket extends Packet{/**
   * Create a `tx` packet.
   * @constructor
   * @param {TX|null} tx
   * @param {Boolean?} witness
   */constructor(tx,witness){cov_23a1ybjrqy().f[87]++;cov_23a1ybjrqy().s[314]++;super();cov_23a1ybjrqy().s[315]++;this.cmd='tx';cov_23a1ybjrqy().s[316]++;this.type=exports.types.TX;cov_23a1ybjrqy().s[317]++;this.tx=(cov_23a1ybjrqy().b[48][0]++,tx)||(cov_23a1ybjrqy().b[48][1]++,new TX());cov_23a1ybjrqy().s[318]++;this.witness=(cov_23a1ybjrqy().b[49][0]++,witness)||(cov_23a1ybjrqy().b[49][1]++,false);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[88]++;cov_23a1ybjrqy().s[319]++;if(this.witness){cov_23a1ybjrqy().b[50][0]++;cov_23a1ybjrqy().s[320]++;return this.tx.getSize();}else{cov_23a1ybjrqy().b[50][1]++;}cov_23a1ybjrqy().s[321]++;return this.tx.getBaseSize();}/**
   * Serialize tx packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[89]++;cov_23a1ybjrqy().s[322]++;if(this.witness){cov_23a1ybjrqy().b[51][0]++;cov_23a1ybjrqy().s[323]++;return this.tx.toWriter(bw);}else{cov_23a1ybjrqy().b[51][1]++;}cov_23a1ybjrqy().s[324]++;return this.tx.toNormalWriter(bw);}/**
   * Serialize tx packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[90]++;cov_23a1ybjrqy().s[325]++;if(this.witness){cov_23a1ybjrqy().b[52][0]++;cov_23a1ybjrqy().s[326]++;return this.tx.toRaw();}else{cov_23a1ybjrqy().b[52][1]++;}cov_23a1ybjrqy().s[327]++;return this.tx.toNormal();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[91]++;cov_23a1ybjrqy().s[328]++;this.tx.fromRaw(br);cov_23a1ybjrqy().s[329]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[92]++;cov_23a1ybjrqy().s[330]++;this.tx.fromRaw(data);cov_23a1ybjrqy().s[331]++;return this;}/**
   * Instantiate tx packet from buffer reader.
   * @param {BufferReader} br
   * @returns {TXPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[93]++;cov_23a1ybjrqy().s[332]++;return new this().fromReader(br);}/**
   * Instantiate tx packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {TXPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[94]++;cov_23a1ybjrqy().s[333]++;if(typeof data==='string'){cov_23a1ybjrqy().b[53][0]++;cov_23a1ybjrqy().s[334]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[53][1]++;}cov_23a1ybjrqy().s[335]++;return new this().fromRaw(data);}}/**
 * Reject Packet
 * @extends Packet
 * @property {(Number|String)?} code - Code
 * (see {@link RejectPacket.codes}).
 * @property {String?} msg - Message.
 * @property {String?} reason - Reason.
 * @property {(Hash|Buffer)?} data - Transaction or block hash.
 */class RejectPacket extends Packet{/**
   * Create reject packet.
   * @constructor
   */constructor(options){cov_23a1ybjrqy().f[95]++;cov_23a1ybjrqy().s[336]++;super();cov_23a1ybjrqy().s[337]++;this.cmd='reject';cov_23a1ybjrqy().s[338]++;this.type=exports.types.REJECT;cov_23a1ybjrqy().s[339]++;this.message='';cov_23a1ybjrqy().s[340]++;this.code=RejectPacket.codes.INVALID;cov_23a1ybjrqy().s[341]++;this.reason='';cov_23a1ybjrqy().s[342]++;this.hash=null;cov_23a1ybjrqy().s[343]++;if(options){cov_23a1ybjrqy().b[54][0]++;cov_23a1ybjrqy().s[344]++;this.fromOptions(options);}else{cov_23a1ybjrqy().b[54][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_23a1ybjrqy().f[96]++;let code=(cov_23a1ybjrqy().s[345]++,options.code);cov_23a1ybjrqy().s[346]++;if(options.message){cov_23a1ybjrqy().b[55][0]++;cov_23a1ybjrqy().s[347]++;this.message=options.message;}else{cov_23a1ybjrqy().b[55][1]++;}cov_23a1ybjrqy().s[348]++;if(code!=null){cov_23a1ybjrqy().b[56][0]++;cov_23a1ybjrqy().s[349]++;if(typeof code==='string'){cov_23a1ybjrqy().b[57][0]++;cov_23a1ybjrqy().s[350]++;code=RejectPacket.codes[code.toUpperCase()];}else{cov_23a1ybjrqy().b[57][1]++;}cov_23a1ybjrqy().s[351]++;if(code>=RejectPacket.codes.INTERNAL){cov_23a1ybjrqy().b[58][0]++;cov_23a1ybjrqy().s[352]++;code=RejectPacket.codes.INVALID;}else{cov_23a1ybjrqy().b[58][1]++;}cov_23a1ybjrqy().s[353]++;this.code=code;}else{cov_23a1ybjrqy().b[56][1]++;}cov_23a1ybjrqy().s[354]++;if(options.reason){cov_23a1ybjrqy().b[59][0]++;cov_23a1ybjrqy().s[355]++;this.reason=options.reason;}else{cov_23a1ybjrqy().b[59][1]++;}cov_23a1ybjrqy().s[356]++;if(options.hash){cov_23a1ybjrqy().b[60][0]++;cov_23a1ybjrqy().s[357]++;this.hash=options.hash;}else{cov_23a1ybjrqy().b[60][1]++;}cov_23a1ybjrqy().s[358]++;return this;}/**
   * Instantiate reject packet from options.
   * @param {Object} options
   * @returns {RejectPacket}
   */static fromOptions(options){cov_23a1ybjrqy().f[97]++;cov_23a1ybjrqy().s[359]++;return new this().fromOptions(options);}/**
   * Get uint256le hash if present.
   * @returns {Hash}
   */rhash(){cov_23a1ybjrqy().f[98]++;cov_23a1ybjrqy().s[360]++;return this.hash?(cov_23a1ybjrqy().b[61][0]++,util.revHex(this.hash)):(cov_23a1ybjrqy().b[61][1]++,null);}/**
   * Get symbolic code.
   * @returns {String}
   */getCode(){cov_23a1ybjrqy().f[99]++;const code=(cov_23a1ybjrqy().s[361]++,RejectPacket.codesByVal[this.code]);cov_23a1ybjrqy().s[362]++;if(!code){cov_23a1ybjrqy().b[62][0]++;cov_23a1ybjrqy().s[363]++;return this.code.toString(10);}else{cov_23a1ybjrqy().b[62][1]++;}cov_23a1ybjrqy().s[364]++;return code.toLowerCase();}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[100]++;let size=(cov_23a1ybjrqy().s[365]++,0);cov_23a1ybjrqy().s[366]++;size+=encoding.sizeVarString(this.message,'ascii');cov_23a1ybjrqy().s[367]++;size+=1;cov_23a1ybjrqy().s[368]++;size+=encoding.sizeVarString(this.reason,'ascii');cov_23a1ybjrqy().s[369]++;if(this.hash){cov_23a1ybjrqy().b[63][0]++;cov_23a1ybjrqy().s[370]++;size+=32;}else{cov_23a1ybjrqy().b[63][1]++;}cov_23a1ybjrqy().s[371]++;return size;}/**
   * Serialize reject packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[101]++;cov_23a1ybjrqy().s[372]++;assert(this.message.length<=12);cov_23a1ybjrqy().s[373]++;assert(this.reason.length<=111);cov_23a1ybjrqy().s[374]++;bw.writeVarString(this.message,'ascii');cov_23a1ybjrqy().s[375]++;bw.writeU8(this.code);cov_23a1ybjrqy().s[376]++;bw.writeVarString(this.reason,'ascii');cov_23a1ybjrqy().s[377]++;if(this.hash){cov_23a1ybjrqy().b[64][0]++;cov_23a1ybjrqy().s[378]++;bw.writeHash(this.hash);}else{cov_23a1ybjrqy().b[64][1]++;}cov_23a1ybjrqy().s[379]++;return bw;}/**
   * Serialize reject packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[102]++;const size=(cov_23a1ybjrqy().s[380]++,this.getSize());cov_23a1ybjrqy().s[381]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[103]++;cov_23a1ybjrqy().s[382]++;this.message=br.readVarString('ascii',12);cov_23a1ybjrqy().s[383]++;this.code=br.readU8();cov_23a1ybjrqy().s[384]++;this.reason=br.readVarString('ascii',111);cov_23a1ybjrqy().s[385]++;switch(this.message){case'block':cov_23a1ybjrqy().b[65][0]++;case'tx':cov_23a1ybjrqy().b[65][1]++;cov_23a1ybjrqy().s[386]++;this.hash=br.readHash();cov_23a1ybjrqy().s[387]++;break;default:cov_23a1ybjrqy().b[65][2]++;cov_23a1ybjrqy().s[388]++;this.hash=null;cov_23a1ybjrqy().s[389]++;break;}cov_23a1ybjrqy().s[390]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[104]++;cov_23a1ybjrqy().s[391]++;return this.fromReader(bio.read(data));}/**
   * Instantiate reject packet from buffer reader.
   * @param {BufferReader} br
   * @returns {RejectPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[105]++;cov_23a1ybjrqy().s[392]++;return new this().fromReader(br);}/**
   * Instantiate reject packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {RejectPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[106]++;cov_23a1ybjrqy().s[393]++;if(typeof data==='string'){cov_23a1ybjrqy().b[66][0]++;cov_23a1ybjrqy().s[394]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[66][1]++;}cov_23a1ybjrqy().s[395]++;return new this().fromRaw(data,enc);}/**
   * Inject properties from reason message and object.
   * @private
   * @param {Number|String} code
   * @param {String} reason
   * @param {String?} msg
   * @param {Hash?} hash
   */fromReason(code,reason,msg,hash){cov_23a1ybjrqy().f[107]++;cov_23a1ybjrqy().s[396]++;if(typeof code==='string'){cov_23a1ybjrqy().b[67][0]++;cov_23a1ybjrqy().s[397]++;code=RejectPacket.codes[code.toUpperCase()];}else{cov_23a1ybjrqy().b[67][1]++;}cov_23a1ybjrqy().s[398]++;if(!code){cov_23a1ybjrqy().b[68][0]++;cov_23a1ybjrqy().s[399]++;code=RejectPacket.codes.INVALID;}else{cov_23a1ybjrqy().b[68][1]++;}cov_23a1ybjrqy().s[400]++;if(code>=RejectPacket.codes.INTERNAL){cov_23a1ybjrqy().b[69][0]++;cov_23a1ybjrqy().s[401]++;code=RejectPacket.codes.INVALID;}else{cov_23a1ybjrqy().b[69][1]++;}cov_23a1ybjrqy().s[402]++;this.message='';cov_23a1ybjrqy().s[403]++;this.code=code;cov_23a1ybjrqy().s[404]++;this.reason=reason;cov_23a1ybjrqy().s[405]++;if(msg){cov_23a1ybjrqy().b[70][0]++;cov_23a1ybjrqy().s[406]++;assert(hash);cov_23a1ybjrqy().s[407]++;this.message=msg;cov_23a1ybjrqy().s[408]++;this.hash=hash;}else{cov_23a1ybjrqy().b[70][1]++;}cov_23a1ybjrqy().s[409]++;return this;}/**
   * Instantiate reject packet from reason message.
   * @param {Number} code
   * @param {String} reason
   * @param {String?} msg
   * @param {Hash?} hash
   * @returns {RejectPacket}
   */static fromReason(code,reason,msg,hash){cov_23a1ybjrqy().f[108]++;cov_23a1ybjrqy().s[410]++;return new this().fromReason(code,reason,msg,hash);}/**
   * Instantiate reject packet from verify error.
   * @param {VerifyError} err
   * @param {(TX|Block)?} obj
   * @returns {RejectPacket}
   */static fromError(err,obj){cov_23a1ybjrqy().f[109]++;cov_23a1ybjrqy().s[411]++;return this.fromReason(err.code,err.reason,obj);}/**
   * Inspect reject packet.
   * @returns {String}
   */[inspectSymbol](){cov_23a1ybjrqy().f[110]++;const code=(cov_23a1ybjrqy().s[412]++,(cov_23a1ybjrqy().b[71][0]++,RejectPacket.codesByVal[this.code])||(cov_23a1ybjrqy().b[71][1]++,this.code));const hash=(cov_23a1ybjrqy().s[413]++,this.hash?(cov_23a1ybjrqy().b[72][0]++,util.revHex(this.hash)):(cov_23a1ybjrqy().b[72][1]++,null));cov_23a1ybjrqy().s[414]++;return'<Reject:'+` msg=${this.message}`+` code=${code}`+` reason=${this.reason}`+` hash=${hash}`+'>';}}/**
 * Reject codes. Note that `internal` and higher
 * are not meant for use on the p2p network.
 * @enum {Number}
 * @default
 */cov_23a1ybjrqy().s[415]++;RejectPacket.codes={MALFORMED:0x01,INVALID:0x10,OBSOLETE:0x11,DUPLICATE:0x12,NONSTANDARD:0x40,DUST:0x41,INSUFFICIENTFEE:0x42,CHECKPOINT:0x43,// Internal codes (NOT FOR USE ON NETWORK)
INTERNAL:0x100,HIGHFEE:0x101,ALREADYKNOWN:0x102,CONFLICT:0x103};/**
 * Reject codes by value.
 * @const {Object}
 */cov_23a1ybjrqy().s[416]++;RejectPacket.codesByVal={0x01:'MALFORMED',0x10:'INVALID',0x11:'OBSOLETE',0x12:'DUPLICATE',0x40:'NONSTANDARD',0x41:'DUST',0x42:'INSUFFICIENTFEE',0x43:'CHECKPOINT',// Internal codes (NOT FOR USE ON NETWORK)
0x100:'INTERNAL',0x101:'HIGHFEE',0x102:'ALREADYKNOWN',0x103:'CONFLICT'};/**
 * Mempool Packet
 * @extends Packet
 */class MempoolPacket extends Packet{/**
   * Create a `mempool` packet.
   * @constructor
   */constructor(){cov_23a1ybjrqy().f[111]++;cov_23a1ybjrqy().s[417]++;super();cov_23a1ybjrqy().s[418]++;this.cmd='mempool';cov_23a1ybjrqy().s[419]++;this.type=exports.types.MEMPOOL;}/**
   * Instantiate mempool packet from buffer reader.
   * @param {BufferReader} br
   * @returns {VerackPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[112]++;cov_23a1ybjrqy().s[420]++;return new this().fromReader(br);}/**
   * Instantiate mempool packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {VerackPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[113]++;cov_23a1ybjrqy().s[421]++;if(typeof data==='string'){cov_23a1ybjrqy().b[73][0]++;cov_23a1ybjrqy().s[422]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[73][1]++;}cov_23a1ybjrqy().s[423]++;return new this().fromRaw(data);}}/**
 * FilterLoad Packet
 * @extends Packet
 */class FilterLoadPacket extends Packet{/**
   * Create a `filterload` packet.
   * @constructor
   * @param {BloomFilter|null} filter
   */constructor(filter){cov_23a1ybjrqy().f[114]++;cov_23a1ybjrqy().s[424]++;super();cov_23a1ybjrqy().s[425]++;this.cmd='filterload';cov_23a1ybjrqy().s[426]++;this.type=exports.types.FILTERLOAD;cov_23a1ybjrqy().s[427]++;this.filter=(cov_23a1ybjrqy().b[74][0]++,filter)||(cov_23a1ybjrqy().b[74][1]++,new BloomFilter());}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[115]++;cov_23a1ybjrqy().s[428]++;return this.filter.getSize();}/**
   * Serialize filterload packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[116]++;cov_23a1ybjrqy().s[429]++;return this.filter.toWriter(bw);}/**
   * Serialize filterload packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[117]++;cov_23a1ybjrqy().s[430]++;return this.filter.toRaw();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[118]++;cov_23a1ybjrqy().s[431]++;this.filter.fromReader(br);cov_23a1ybjrqy().s[432]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[119]++;cov_23a1ybjrqy().s[433]++;this.filter.fromRaw(data);cov_23a1ybjrqy().s[434]++;return this;}/**
   * Instantiate filterload packet from buffer reader.
   * @param {BufferReader} br
   * @returns {FilterLoadPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[120]++;cov_23a1ybjrqy().s[435]++;return new this().fromReader(br);}/**
   * Instantiate filterload packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {FilterLoadPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[121]++;cov_23a1ybjrqy().s[436]++;if(typeof data==='string'){cov_23a1ybjrqy().b[75][0]++;cov_23a1ybjrqy().s[437]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[75][1]++;}cov_23a1ybjrqy().s[438]++;return new this().fromRaw(data);}/**
   * Ensure the filter is within the size limits.
   * @returns {Boolean}
   */isWithinConstraints(){cov_23a1ybjrqy().f[122]++;cov_23a1ybjrqy().s[439]++;return this.filter.isWithinConstraints();}}/**
 * FilterAdd Packet
 * @extends Packet
 * @property {Buffer} data
 */class FilterAddPacket extends Packet{/**
   * Create a `filteradd` packet.
   * @constructor
   * @param {Buffer?} data
   */constructor(data){cov_23a1ybjrqy().f[123]++;cov_23a1ybjrqy().s[440]++;super();cov_23a1ybjrqy().s[441]++;this.cmd='filteradd';cov_23a1ybjrqy().s[442]++;this.type=exports.types.FILTERADD;cov_23a1ybjrqy().s[443]++;this.data=(cov_23a1ybjrqy().b[76][0]++,data)||(cov_23a1ybjrqy().b[76][1]++,DUMMY);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[124]++;cov_23a1ybjrqy().s[444]++;return encoding.sizeVarBytes(this.data);}/**
   * Serialize filteradd packet to writer.
   * @returns {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[125]++;cov_23a1ybjrqy().s[445]++;bw.writeVarBytes(this.data);cov_23a1ybjrqy().s[446]++;return bw;}/**
   * Serialize filteradd packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[126]++;const size=(cov_23a1ybjrqy().s[447]++,this.getSize());cov_23a1ybjrqy().s[448]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[127]++;cov_23a1ybjrqy().s[449]++;this.data=br.readVarBytes();cov_23a1ybjrqy().s[450]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[128]++;cov_23a1ybjrqy().s[451]++;return this.fromReader(bio.read(data));}/**
   * Instantiate filteradd packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {FilterAddPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[129]++;cov_23a1ybjrqy().s[452]++;if(typeof data==='string'){cov_23a1ybjrqy().b[77][0]++;cov_23a1ybjrqy().s[453]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[77][1]++;}cov_23a1ybjrqy().s[454]++;return new this().fromRaw(data);}}/**
 * FilterClear Packet
 * @extends Packet
 */class FilterClearPacket extends Packet{/**
   * Create a `filterclear` packet.
   * @constructor
   */constructor(){cov_23a1ybjrqy().f[130]++;cov_23a1ybjrqy().s[455]++;super();cov_23a1ybjrqy().s[456]++;this.cmd='filterclear';cov_23a1ybjrqy().s[457]++;this.type=exports.types.FILTERCLEAR;}/**
   * Instantiate filterclear packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {FilterClearPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[131]++;cov_23a1ybjrqy().s[458]++;if(typeof data==='string'){cov_23a1ybjrqy().b[78][0]++;cov_23a1ybjrqy().s[459]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[78][1]++;}cov_23a1ybjrqy().s[460]++;return new this().fromRaw(data);}}/**
 * MerkleBlock Packet
 * @extends Packet
 * @property {MerkleBlock} block
 */class MerkleBlockPacket extends Packet{/**
   * Create a `merkleblock` packet.
   * @constructor
   * @param {MerkleBlock?} block
   */constructor(block){cov_23a1ybjrqy().f[132]++;cov_23a1ybjrqy().s[461]++;super();cov_23a1ybjrqy().s[462]++;this.cmd='merkleblock';cov_23a1ybjrqy().s[463]++;this.type=exports.types.MERKLEBLOCK;cov_23a1ybjrqy().s[464]++;this.block=(cov_23a1ybjrqy().b[79][0]++,block)||(cov_23a1ybjrqy().b[79][1]++,new MerkleBlock());}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[133]++;cov_23a1ybjrqy().s[465]++;return this.block.getSize();}/**
   * Serialize merkleblock packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[134]++;cov_23a1ybjrqy().s[466]++;return this.block.toWriter(bw);}/**
   * Serialize merkleblock packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[135]++;cov_23a1ybjrqy().s[467]++;return this.block.toRaw();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[136]++;cov_23a1ybjrqy().s[468]++;this.block.fromReader(br);cov_23a1ybjrqy().s[469]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[137]++;cov_23a1ybjrqy().s[470]++;this.block.fromRaw(data);cov_23a1ybjrqy().s[471]++;return this;}/**
   * Instantiate merkleblock packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {MerkleBlockPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[138]++;cov_23a1ybjrqy().s[472]++;if(typeof data==='string'){cov_23a1ybjrqy().b[80][0]++;cov_23a1ybjrqy().s[473]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[80][1]++;}cov_23a1ybjrqy().s[474]++;return new this().fromRaw(data);}}/**
 * FeeFilter Packet
 * @extends Packet
 * @property {Rate} rate
 */class FeeFilterPacket extends Packet{/**
   * Create a `feefilter` packet.
   * @constructor
   * @param {Rate?} rate
   */constructor(rate){cov_23a1ybjrqy().f[139]++;cov_23a1ybjrqy().s[475]++;super();cov_23a1ybjrqy().s[476]++;this.cmd='feefilter';cov_23a1ybjrqy().s[477]++;this.type=exports.types.FEEFILTER;cov_23a1ybjrqy().s[478]++;this.rate=(cov_23a1ybjrqy().b[81][0]++,rate)||(cov_23a1ybjrqy().b[81][1]++,0);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[140]++;cov_23a1ybjrqy().s[479]++;return 8;}/**
   * Serialize feefilter packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[141]++;cov_23a1ybjrqy().s[480]++;bw.writeI64(this.rate);cov_23a1ybjrqy().s[481]++;return bw;}/**
   * Serialize feefilter packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[142]++;cov_23a1ybjrqy().s[482]++;return this.toWriter(bio.write(8)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[143]++;cov_23a1ybjrqy().s[483]++;this.rate=br.readI64();cov_23a1ybjrqy().s[484]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[144]++;cov_23a1ybjrqy().s[485]++;return this.fromReader(bio.read(data));}/**
   * Instantiate feefilter packet from buffer reader.
   * @param {BufferReader} br
   * @returns {FeeFilterPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[145]++;cov_23a1ybjrqy().s[486]++;return new this().fromReader(br);}/**
   * Instantiate feefilter packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {FeeFilterPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[146]++;cov_23a1ybjrqy().s[487]++;if(typeof data==='string'){cov_23a1ybjrqy().b[82][0]++;cov_23a1ybjrqy().s[488]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[82][1]++;}cov_23a1ybjrqy().s[489]++;return new this().fromRaw(data);}}/**
 * SendCmpct Packet
 * @extends Packet
 * @property {Number} mode
 * @property {Number} version
 */class SendCmpctPacket extends Packet{/**
   * Create a `sendcmpct` packet.
   * @constructor
   * @param {Number|null} mode
   * @param {Number|null} version
   */constructor(mode,version){cov_23a1ybjrqy().f[147]++;cov_23a1ybjrqy().s[490]++;super();cov_23a1ybjrqy().s[491]++;this.cmd='sendcmpct';cov_23a1ybjrqy().s[492]++;this.type=exports.types.SENDCMPCT;cov_23a1ybjrqy().s[493]++;this.mode=(cov_23a1ybjrqy().b[83][0]++,mode)||(cov_23a1ybjrqy().b[83][1]++,0);cov_23a1ybjrqy().s[494]++;this.version=(cov_23a1ybjrqy().b[84][0]++,version)||(cov_23a1ybjrqy().b[84][1]++,1);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[148]++;cov_23a1ybjrqy().s[495]++;return 9;}/**
   * Serialize sendcmpct packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[149]++;cov_23a1ybjrqy().s[496]++;bw.writeU8(this.mode);cov_23a1ybjrqy().s[497]++;bw.writeU64(this.version);cov_23a1ybjrqy().s[498]++;return bw;}/**
   * Serialize sendcmpct packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[150]++;cov_23a1ybjrqy().s[499]++;return this.toWriter(bio.write(9)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[151]++;cov_23a1ybjrqy().s[500]++;this.mode=br.readU8();cov_23a1ybjrqy().s[501]++;this.version=br.readU64();cov_23a1ybjrqy().s[502]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[152]++;cov_23a1ybjrqy().s[503]++;return this.fromReader(bio.read(data));}/**
   * Instantiate sendcmpct packet from buffer reader.
   * @param {BufferReader} br
   * @returns {SendCmpctPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[153]++;cov_23a1ybjrqy().s[504]++;return new this().fromReader(br);}/**
   * Instantiate sendcmpct packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {SendCmpctPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[154]++;cov_23a1ybjrqy().s[505]++;if(typeof data==='string'){cov_23a1ybjrqy().b[85][0]++;cov_23a1ybjrqy().s[506]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[85][1]++;}cov_23a1ybjrqy().s[507]++;return new this().fromRaw(data);}}/**
 * CmpctBlock Packet
 * @extends Packet
 * @property {Block} block
 * @property {Boolean} witness
 */class CmpctBlockPacket extends Packet{/**
   * Create a `cmpctblock` packet.
   * @constructor
   * @param {Block|null} block
   * @param {Boolean|null} witness
   */constructor(block,witness){cov_23a1ybjrqy().f[155]++;cov_23a1ybjrqy().s[508]++;super();cov_23a1ybjrqy().s[509]++;this.cmd='cmpctblock';cov_23a1ybjrqy().s[510]++;this.type=exports.types.CMPCTBLOCK;cov_23a1ybjrqy().s[511]++;this.block=(cov_23a1ybjrqy().b[86][0]++,block)||(cov_23a1ybjrqy().b[86][1]++,new bip152.CompactBlock());cov_23a1ybjrqy().s[512]++;this.witness=(cov_23a1ybjrqy().b[87][0]++,witness)||(cov_23a1ybjrqy().b[87][1]++,false);}/**
   * Serialize cmpctblock packet.
   * @returns {Buffer}
   */getSize(){cov_23a1ybjrqy().f[156]++;cov_23a1ybjrqy().s[513]++;if(this.witness){cov_23a1ybjrqy().b[88][0]++;cov_23a1ybjrqy().s[514]++;return this.block.getSize(true);}else{cov_23a1ybjrqy().b[88][1]++;}cov_23a1ybjrqy().s[515]++;return this.block.getSize(false);}/**
   * Serialize cmpctblock packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[157]++;cov_23a1ybjrqy().s[516]++;if(this.witness){cov_23a1ybjrqy().b[89][0]++;cov_23a1ybjrqy().s[517]++;return this.block.toWriter(bw);}else{cov_23a1ybjrqy().b[89][1]++;}cov_23a1ybjrqy().s[518]++;return this.block.toNormalWriter(bw);}/**
   * Serialize cmpctblock packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[158]++;cov_23a1ybjrqy().s[519]++;if(this.witness){cov_23a1ybjrqy().b[90][0]++;cov_23a1ybjrqy().s[520]++;return this.block.toRaw();}else{cov_23a1ybjrqy().b[90][1]++;}cov_23a1ybjrqy().s[521]++;return this.block.toNormal();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[159]++;cov_23a1ybjrqy().s[522]++;this.block.fromReader(br);cov_23a1ybjrqy().s[523]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[160]++;cov_23a1ybjrqy().s[524]++;this.block.fromRaw(data);cov_23a1ybjrqy().s[525]++;return this;}/**
   * Instantiate cmpctblock packet from buffer reader.
   * @param {BufferReader} br
   * @returns {CmpctBlockPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[161]++;cov_23a1ybjrqy().s[526]++;return new this().fromRaw(br);}/**
   * Instantiate cmpctblock packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {CmpctBlockPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[162]++;cov_23a1ybjrqy().s[527]++;if(typeof data==='string'){cov_23a1ybjrqy().b[91][0]++;cov_23a1ybjrqy().s[528]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[91][1]++;}cov_23a1ybjrqy().s[529]++;return new this().fromRaw(data);}}/**
 * GetBlockTxn Packet
 * @extends Packet
 * @property {TXRequest} request
 */class GetBlockTxnPacket extends Packet{/**
   * Create a `getblocktxn` packet.
   * @constructor
   * @param {TXRequest?} request
   */constructor(request){cov_23a1ybjrqy().f[163]++;cov_23a1ybjrqy().s[530]++;super();cov_23a1ybjrqy().s[531]++;this.cmd='getblocktxn';cov_23a1ybjrqy().s[532]++;this.type=exports.types.GETBLOCKTXN;cov_23a1ybjrqy().s[533]++;this.request=(cov_23a1ybjrqy().b[92][0]++,request)||(cov_23a1ybjrqy().b[92][1]++,new bip152.TXRequest());}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[164]++;cov_23a1ybjrqy().s[534]++;return this.request.getSize();}/**
   * Serialize getblocktxn packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[165]++;cov_23a1ybjrqy().s[535]++;return this.request.toWriter(bw);}/**
   * Serialize getblocktxn packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[166]++;cov_23a1ybjrqy().s[536]++;return this.request.toRaw();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[167]++;cov_23a1ybjrqy().s[537]++;this.request.fromReader(br);cov_23a1ybjrqy().s[538]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[168]++;cov_23a1ybjrqy().s[539]++;this.request.fromRaw(data);cov_23a1ybjrqy().s[540]++;return this;}/**
   * Instantiate getblocktxn packet from buffer reader.
   * @param {BufferReader} br
   * @returns {GetBlockTxnPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[169]++;cov_23a1ybjrqy().s[541]++;return new this().fromReader(br);}/**
   * Instantiate getblocktxn packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {GetBlockTxnPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[170]++;cov_23a1ybjrqy().s[542]++;if(typeof data==='string'){cov_23a1ybjrqy().b[93][0]++;cov_23a1ybjrqy().s[543]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[93][1]++;}cov_23a1ybjrqy().s[544]++;return new this().fromRaw(data);}}/**
 * BlockTxn Packet
 * @extends Packet
 * @property {TXResponse} response
 * @property {Boolean} witness
 */class BlockTxnPacket extends Packet{/**
   * Create a `blocktxn` packet.
   * @constructor
   * @param {TXResponse?} response
   * @param {Boolean?} witness
   */constructor(response,witness){cov_23a1ybjrqy().f[171]++;cov_23a1ybjrqy().s[545]++;super();cov_23a1ybjrqy().s[546]++;this.cmd='blocktxn';cov_23a1ybjrqy().s[547]++;this.type=exports.types.BLOCKTXN;cov_23a1ybjrqy().s[548]++;this.response=(cov_23a1ybjrqy().b[94][0]++,response)||(cov_23a1ybjrqy().b[94][1]++,new bip152.TXResponse());cov_23a1ybjrqy().s[549]++;this.witness=(cov_23a1ybjrqy().b[95][0]++,witness)||(cov_23a1ybjrqy().b[95][1]++,false);}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[172]++;cov_23a1ybjrqy().s[550]++;if(this.witness){cov_23a1ybjrqy().b[96][0]++;cov_23a1ybjrqy().s[551]++;return this.response.getSize(true);}else{cov_23a1ybjrqy().b[96][1]++;}cov_23a1ybjrqy().s[552]++;return this.response.getSize(false);}/**
   * Serialize blocktxn packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[173]++;cov_23a1ybjrqy().s[553]++;if(this.witness){cov_23a1ybjrqy().b[97][0]++;cov_23a1ybjrqy().s[554]++;return this.response.toWriter(bw);}else{cov_23a1ybjrqy().b[97][1]++;}cov_23a1ybjrqy().s[555]++;return this.response.toNormalWriter(bw);}/**
   * Serialize blocktxn packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[174]++;cov_23a1ybjrqy().s[556]++;if(this.witness){cov_23a1ybjrqy().b[98][0]++;cov_23a1ybjrqy().s[557]++;return this.response.toRaw();}else{cov_23a1ybjrqy().b[98][1]++;}cov_23a1ybjrqy().s[558]++;return this.response.toNormal();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_23a1ybjrqy().f[175]++;cov_23a1ybjrqy().s[559]++;this.response.fromReader(br);cov_23a1ybjrqy().s[560]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_23a1ybjrqy().f[176]++;cov_23a1ybjrqy().s[561]++;this.response.fromRaw(data);cov_23a1ybjrqy().s[562]++;return this;}/**
   * Instantiate blocktxn packet from buffer reader.
   * @param {BufferReader} br
   * @returns {BlockTxnPacket}
   */static fromReader(br){cov_23a1ybjrqy().f[177]++;cov_23a1ybjrqy().s[563]++;return new this().fromReader(br);}/**
   * Instantiate blocktxn packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {BlockTxnPacket}
   */static fromRaw(data,enc){cov_23a1ybjrqy().f[178]++;cov_23a1ybjrqy().s[564]++;if(typeof data==='string'){cov_23a1ybjrqy().b[99][0]++;cov_23a1ybjrqy().s[565]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[99][1]++;}cov_23a1ybjrqy().s[566]++;return new this().fromRaw(data);}}/**
 * Unknown Packet
 * @extends Packet
 * @property {String} cmd
 * @property {Buffer} data
 */class UnknownPacket extends Packet{/**
   * Create an unknown packet.
   * @constructor
   * @param {String|null} cmd
   * @param {Buffer|null} data
   */constructor(cmd,data){cov_23a1ybjrqy().f[179]++;cov_23a1ybjrqy().s[567]++;super();cov_23a1ybjrqy().s[568]++;this.cmd=cmd;cov_23a1ybjrqy().s[569]++;this.type=exports.types.UNKNOWN;cov_23a1ybjrqy().s[570]++;this.data=data;}/**
   * Get serialization size.
   * @returns {Number}
   */getSize(){cov_23a1ybjrqy().f[180]++;cov_23a1ybjrqy().s[571]++;return this.data.length;}/**
   * Serialize unknown packet to writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_23a1ybjrqy().f[181]++;cov_23a1ybjrqy().s[572]++;bw.writeBytes(this.data);cov_23a1ybjrqy().s[573]++;return bw;}/**
   * Serialize unknown packet.
   * @returns {Buffer}
   */toRaw(){cov_23a1ybjrqy().f[182]++;cov_23a1ybjrqy().s[574]++;return this.data;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(cmd,data){cov_23a1ybjrqy().f[183]++;cov_23a1ybjrqy().s[575]++;assert(Buffer.isBuffer(data));cov_23a1ybjrqy().s[576]++;this.cmd=cmd;cov_23a1ybjrqy().s[577]++;this.data=data;cov_23a1ybjrqy().s[578]++;return this;}/**
   * Instantiate unknown packet from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {UnknownPacket}
   */static fromRaw(cmd,data,enc){cov_23a1ybjrqy().f[184]++;cov_23a1ybjrqy().s[579]++;if(typeof data==='string'){cov_23a1ybjrqy().b[100][0]++;cov_23a1ybjrqy().s[580]++;data=Buffer.from(data,enc);}else{cov_23a1ybjrqy().b[100][1]++;}cov_23a1ybjrqy().s[581]++;return new this().fromRaw(cmd,data);}}/**
 * Parse a payload.
 * @param {String} cmd
 * @param {Buffer} data
 * @returns {Packet}
 */cov_23a1ybjrqy().s[582]++;exports.fromRaw=function fromRaw(cmd,data){cov_23a1ybjrqy().f[185]++;cov_23a1ybjrqy().s[583]++;switch(cmd){case'version':cov_23a1ybjrqy().b[101][0]++;cov_23a1ybjrqy().s[584]++;return VersionPacket.fromRaw(data);case'verack':cov_23a1ybjrqy().b[101][1]++;cov_23a1ybjrqy().s[585]++;return VerackPacket.fromRaw(data);case'ping':cov_23a1ybjrqy().b[101][2]++;cov_23a1ybjrqy().s[586]++;return PingPacket.fromRaw(data);case'pong':cov_23a1ybjrqy().b[101][3]++;cov_23a1ybjrqy().s[587]++;return PongPacket.fromRaw(data);case'getaddr':cov_23a1ybjrqy().b[101][4]++;cov_23a1ybjrqy().s[588]++;return GetAddrPacket.fromRaw(data);case'addr':cov_23a1ybjrqy().b[101][5]++;cov_23a1ybjrqy().s[589]++;return AddrPacket.fromRaw(data);case'inv':cov_23a1ybjrqy().b[101][6]++;cov_23a1ybjrqy().s[590]++;return InvPacket.fromRaw(data);case'getdata':cov_23a1ybjrqy().b[101][7]++;cov_23a1ybjrqy().s[591]++;return GetDataPacket.fromRaw(data);case'notfound':cov_23a1ybjrqy().b[101][8]++;cov_23a1ybjrqy().s[592]++;return NotFoundPacket.fromRaw(data);case'getblocks':cov_23a1ybjrqy().b[101][9]++;cov_23a1ybjrqy().s[593]++;return GetBlocksPacket.fromRaw(data);case'getheaders':cov_23a1ybjrqy().b[101][10]++;cov_23a1ybjrqy().s[594]++;return GetHeadersPacket.fromRaw(data);case'headers':cov_23a1ybjrqy().b[101][11]++;cov_23a1ybjrqy().s[595]++;return HeadersPacket.fromRaw(data);case'sendheaders':cov_23a1ybjrqy().b[101][12]++;cov_23a1ybjrqy().s[596]++;return SendHeadersPacket.fromRaw(data);case'block':cov_23a1ybjrqy().b[101][13]++;cov_23a1ybjrqy().s[597]++;return BlockPacket.fromRaw(data);case'tx':cov_23a1ybjrqy().b[101][14]++;cov_23a1ybjrqy().s[598]++;return TXPacket.fromRaw(data);case'reject':cov_23a1ybjrqy().b[101][15]++;cov_23a1ybjrqy().s[599]++;return RejectPacket.fromRaw(data);case'mempool':cov_23a1ybjrqy().b[101][16]++;cov_23a1ybjrqy().s[600]++;return MempoolPacket.fromRaw(data);case'filterload':cov_23a1ybjrqy().b[101][17]++;cov_23a1ybjrqy().s[601]++;return FilterLoadPacket.fromRaw(data);case'filteradd':cov_23a1ybjrqy().b[101][18]++;cov_23a1ybjrqy().s[602]++;return FilterAddPacket.fromRaw(data);case'filterclear':cov_23a1ybjrqy().b[101][19]++;cov_23a1ybjrqy().s[603]++;return FilterClearPacket.fromRaw(data);case'merkleblock':cov_23a1ybjrqy().b[101][20]++;cov_23a1ybjrqy().s[604]++;return MerkleBlockPacket.fromRaw(data);case'feefilter':cov_23a1ybjrqy().b[101][21]++;cov_23a1ybjrqy().s[605]++;return FeeFilterPacket.fromRaw(data);case'sendcmpct':cov_23a1ybjrqy().b[101][22]++;cov_23a1ybjrqy().s[606]++;return SendCmpctPacket.fromRaw(data);case'cmpctblock':cov_23a1ybjrqy().b[101][23]++;cov_23a1ybjrqy().s[607]++;return CmpctBlockPacket.fromRaw(data);case'getblocktxn':cov_23a1ybjrqy().b[101][24]++;cov_23a1ybjrqy().s[608]++;return GetBlockTxnPacket.fromRaw(data);case'blocktxn':cov_23a1ybjrqy().b[101][25]++;cov_23a1ybjrqy().s[609]++;return BlockTxnPacket.fromRaw(data);default:cov_23a1ybjrqy().b[101][26]++;cov_23a1ybjrqy().s[610]++;return UnknownPacket.fromRaw(cmd,data);}};/*
 * Expose
 */cov_23a1ybjrqy().s[611]++;exports.Packet=Packet;cov_23a1ybjrqy().s[612]++;exports.VersionPacket=VersionPacket;cov_23a1ybjrqy().s[613]++;exports.VerackPacket=VerackPacket;cov_23a1ybjrqy().s[614]++;exports.PingPacket=PingPacket;cov_23a1ybjrqy().s[615]++;exports.PongPacket=PongPacket;cov_23a1ybjrqy().s[616]++;exports.GetAddrPacket=GetAddrPacket;cov_23a1ybjrqy().s[617]++;exports.AddrPacket=AddrPacket;cov_23a1ybjrqy().s[618]++;exports.InvPacket=InvPacket;cov_23a1ybjrqy().s[619]++;exports.GetDataPacket=GetDataPacket;cov_23a1ybjrqy().s[620]++;exports.NotFoundPacket=NotFoundPacket;cov_23a1ybjrqy().s[621]++;exports.GetBlocksPacket=GetBlocksPacket;cov_23a1ybjrqy().s[622]++;exports.GetHeadersPacket=GetHeadersPacket;cov_23a1ybjrqy().s[623]++;exports.HeadersPacket=HeadersPacket;cov_23a1ybjrqy().s[624]++;exports.SendHeadersPacket=SendHeadersPacket;cov_23a1ybjrqy().s[625]++;exports.BlockPacket=BlockPacket;cov_23a1ybjrqy().s[626]++;exports.TXPacket=TXPacket;cov_23a1ybjrqy().s[627]++;exports.RejectPacket=RejectPacket;cov_23a1ybjrqy().s[628]++;exports.MempoolPacket=MempoolPacket;cov_23a1ybjrqy().s[629]++;exports.FilterLoadPacket=FilterLoadPacket;cov_23a1ybjrqy().s[630]++;exports.FilterAddPacket=FilterAddPacket;cov_23a1ybjrqy().s[631]++;exports.FilterClearPacket=FilterClearPacket;cov_23a1ybjrqy().s[632]++;exports.MerkleBlockPacket=MerkleBlockPacket;cov_23a1ybjrqy().s[633]++;exports.FeeFilterPacket=FeeFilterPacket;cov_23a1ybjrqy().s[634]++;exports.SendCmpctPacket=SendCmpctPacket;cov_23a1ybjrqy().s[635]++;exports.CmpctBlockPacket=CmpctBlockPacket;cov_23a1ybjrqy().s[636]++;exports.GetBlockTxnPacket=GetBlockTxnPacket;cov_23a1ybjrqy().s[637]++;exports.BlockTxnPacket=BlockTxnPacket;cov_23a1ybjrqy().s[638]++;exports.UnknownPacket=UnknownPacket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/*!
 * message.js - message signing utilities.
 * Copyright (c) 2019, The Bcoin Developers (MIT License).
 */'use strict';function cov_1571zakc1w(){var path="E:\\Projects\\Test\\bcoin\\lib\\utils\\message.js";var hash="5714ec5c6f8774ca31fea1a501ebc12a8fc2ed9f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\utils\\message.js",statementMap:{"0":{start:{line:8,column:15},end:{line:8,column:31}},"1":{start:{line:9,column:14},end:{line:9,column:30}},"2":{start:{line:10,column:16},end:{line:10,column:46}},"3":{start:{line:11,column:18},end:{line:11,column:50}},"4":{start:{line:17,column:16},end:{line:17,column:23}},"5":{start:{line:25,column:0},end:{line:25,column:51}},"6":{start:{line:34,column:0},end:{line:44,column:2}},"7":{start:{line:35,column:2},end:{line:35,column:65}},"8":{start:{line:36,column:2},end:{line:36,column:62}},"9":{start:{line:38,column:13},end:{line:38,column:26}},"10":{start:{line:40,column:2},end:{line:40,column:28}},"11":{start:{line:41,column:2},end:{line:41,column:33}},"12":{start:{line:43,column:2},end:{line:43,column:37}},"13":{start:{line:54,column:0},end:{line:70,column:2}},"14":{start:{line:55,column:2},end:{line:55,column:67}},"15":{start:{line:57,column:15},end:{line:57,column:45}},"16":{start:{line:58,column:19},end:{line:58,column:59}},"17":{start:{line:62,column:6},end:{line:62,column:59}},"18":{start:{line:64,column:13},end:{line:64,column:26}},"19":{start:{line:66,column:2},end:{line:66,column:49}},"20":{start:{line:67,column:2},end:{line:67,column:27}},"21":{start:{line:69,column:2},end:{line:69,column:21}},"22":{start:{line:79,column:0},end:{line:95,column:2}},"23":{start:{line:80,column:2},end:{line:80,column:58}},"24":{start:{line:81,column:2},end:{line:81,column:61}},"25":{start:{line:83,column:15},end:{line:83,column:45}},"26":{start:{line:85,column:2},end:{line:85,column:71}},"27":{start:{line:87,column:19},end:{line:87,column:46}},"28":{start:{line:89,column:2},end:{line:89,column:54}},"29":{start:{line:91,column:21},end:{line:91,column:42}},"30":{start:{line:92,column:19},end:{line:92,column:31}},"31":{start:{line:94,column:2},end:{line:94,column:75}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:20},end:{line:34,column:21}},loc:{start:{line:34,column:60},end:{line:44,column:1}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:54,column:15},end:{line:54,column:16}},loc:{start:{line:54,column:38},end:{line:70,column:1}},line:54},"2":{name:"(anonymous_2)",decl:{start:{line:79,column:18},end:{line:79,column:19}},loc:{start:{line:79,column:46},end:{line:95,column:1}},line:79}},branchMap:{"0":{loc:{start:{line:34,column:26},end:{line:34,column:55}},type:"default-arg",locations:[{start:{line:34,column:35},end:{line:34,column:55}}],line:34},"1":{loc:{start:{line:66,column:30},end:{line:66,column:46}},type:"cond-expr",locations:[{start:{line:66,column:41},end:{line:66,column:42}},{start:{line:66,column:45},end:{line:66,column:46}}],line:66}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},f:{"0":0,"1":0,"2":0},b:{"0":[0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5714ec5c6f8774ca31fea1a501ebc12a8fc2ed9f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1571zakc1w=function(){return actualCoverage;};}return actualCoverage;}cov_1571zakc1w();const assert=(cov_1571zakc1w().s[0]++,require('bsert'));const bufio=(cov_1571zakc1w().s[1]++,require('bufio'));const hash256=(cov_1571zakc1w().s[2]++,require('bcrypto/lib/hash256'));const secp256k1=(cov_1571zakc1w().s[3]++,require('bcrypto/lib/secp256k1'));/**
 * @exports utils/message
 */const message=(cov_1571zakc1w().s[4]++,exports);/**
 * Bitcoin signing magic string.
 * @const {String}
 * @default
 */cov_1571zakc1w().s[5]++;message.MAGIC_STRING='Bitcoin Signed Message:\n';/**
 * Hash message with magic string.
 * @param {String} message
 * @param {String} [prefix = message.MAGIC_STRING]
 * @returns {Hash}
 */cov_1571zakc1w().s[6]++;message.magicHash=(msg,prefix=(cov_1571zakc1w().b[0][0]++,message.MAGIC_STRING))=>{cov_1571zakc1w().f[0]++;cov_1571zakc1w().s[7]++;assert(typeof prefix==='string','prefix must be a string.');cov_1571zakc1w().s[8]++;assert(typeof msg==='string','message must be a string');const bw=(cov_1571zakc1w().s[9]++,bufio.write());cov_1571zakc1w().s[10]++;bw.writeVarString(prefix);cov_1571zakc1w().s[11]++;bw.writeVarString(msg,'utf8');cov_1571zakc1w().s[12]++;return hash256.digest(bw.render());};/**
 * Sign message with key.
 * @param {String} msg
 * @param {KeyRing} ring
 * @param {String} [prefix = message.MAGIC_STRING]
 * @returns {Buffer}
 */cov_1571zakc1w().s[13]++;message.sign=(msg,ring,prefix)=>{cov_1571zakc1w().f[1]++;cov_1571zakc1w().s[14]++;assert(ring.getPrivateKey(),'Cannot sign without private key.');const hash=(cov_1571zakc1w().s[15]++,message.magicHash(msg,prefix));const compress=(cov_1571zakc1w().s[16]++,0x04!==ring.getPublicKey().readInt8(0));const[signature,recovery]=(cov_1571zakc1w().s[17]++,secp256k1.signRecoverable(hash,ring.getPrivateKey()));const bw=(cov_1571zakc1w().s[18]++,bufio.write());cov_1571zakc1w().s[19]++;bw.writeI8(recovery+27+(compress?(cov_1571zakc1w().b[1][0]++,4):(cov_1571zakc1w().b[1][1]++,0)));cov_1571zakc1w().s[20]++;bw.writeBytes(signature);cov_1571zakc1w().s[21]++;return bw.render();};/**
 * Recover raw public key from message and signature.
 * @param {String} msg
 * @param {Buffer} signature
 * @param {String} [prefix = MAGIC_STRING]
 */cov_1571zakc1w().s[22]++;message.recover=(msg,signature,prefix)=>{cov_1571zakc1w().f[2]++;cov_1571zakc1w().s[23]++;assert(typeof msg==='string','msg must be a string');cov_1571zakc1w().s[24]++;assert(Buffer.isBuffer(signature),'sig must be a buffer');const hash=(cov_1571zakc1w().s[25]++,message.magicHash(msg,prefix));cov_1571zakc1w().s[26]++;assert.strictEqual(signature.length,65,'Invalid signature length');const flagByte=(cov_1571zakc1w().s[27]++,signature.readUInt8(0)-27);cov_1571zakc1w().s[28]++;assert(flagByte<8,'Invalid signature parameter');const compressed=(cov_1571zakc1w().s[29]++,Boolean(flagByte&4));const recovery=(cov_1571zakc1w().s[30]++,flagByte&3);cov_1571zakc1w().s[31]++;return secp256k1.recover(hash,signature.slice(1),recovery,compressed);};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc3NhZ2UuanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsImJ1ZmlvIiwiaGFzaDI1NiIsInNlY3AyNTZrMSIsIm1lc3NhZ2UiLCJleHBvcnRzIiwiTUFHSUNfU1RSSU5HIiwibWFnaWNIYXNoIiwibXNnIiwicHJlZml4IiwiYnciLCJ3cml0ZSIsIndyaXRlVmFyU3RyaW5nIiwiZGlnZXN0IiwicmVuZGVyIiwic2lnbiIsInJpbmciLCJnZXRQcml2YXRlS2V5IiwiaGFzaCIsImNvbXByZXNzIiwiZ2V0UHVibGljS2V5IiwicmVhZEludDgiLCJzaWduYXR1cmUiLCJyZWNvdmVyeSIsInNpZ25SZWNvdmVyYWJsZSIsIndyaXRlSTgiLCJ3cml0ZUJ5dGVzIiwicmVjb3ZlciIsIkJ1ZmZlciIsImlzQnVmZmVyIiwic3RyaWN0RXF1YWwiLCJsZW5ndGgiLCJmbGFnQnl0ZSIsInJlYWRVSW50OCIsImNvbXByZXNzZWQiLCJCb29sZWFuIiwic2xpY2UiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEdBRUEsYSwrMUdBVVk7MkZBUlosS0FBTUEsQ0FBQUEsTUFBTSwwQkFBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBVixDQUFaLENBQ0EsS0FBTUMsQ0FBQUEsS0FBSywwQkFBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBVixDQUFYLENBQ0EsS0FBTUUsQ0FBQUEsT0FBTywwQkFBR0YsT0FBTyxDQUFDLHFCQUFELENBQVYsQ0FBYixDQUNBLEtBQU1HLENBQUFBLFNBQVMsMEJBQUdILE9BQU8sQ0FBQyx1QkFBRCxDQUFWLENBQWYsQ0FFQTtBQUNBO0FBQ0EsR0FFQSxLQUFNSSxDQUFBQSxPQUFPLDBCQUFHQyxPQUFILENBQWIsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEcsd0JBRUFELE9BQU8sQ0FBQ0UsWUFBUixDQUF1QiwyQkFBdkIsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRyx3QkFFQUYsT0FBTyxDQUFDRyxTQUFSLENBQW9CLENBQUND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d0IsT0FBVixDQUFrQlQsSUFBbEIsQ0FBd0JJLFNBQVMsQ0FBQ2MsS0FBVixDQUFnQixDQUFoQixDQUF4QixDQUE0Q2IsUUFBNUMsQ0FBc0RXLFVBQXRELENBQVAsQ0FDRCxDQWhCRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBtZXNzYWdlLmpzIC0gbWVzc2FnZSBzaWduaW5nIHV0aWxpdGllcy5cclxuICogQ29weXJpZ2h0IChjKSAyMDE5LCBUaGUgQmNvaW4gRGV2ZWxvcGVycyAoTUlUIExpY2Vuc2UpLlxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2JzZXJ0Jyk7XHJcbmNvbnN0IGJ1ZmlvID0gcmVxdWlyZSgnYnVmaW8nKTtcclxuY29uc3QgaGFzaDI1NiA9IHJlcXVpcmUoJ2JjcnlwdG8vbGliL2hhc2gyNTYnKTtcclxuY29uc3Qgc2VjcDI1NmsxID0gcmVxdWlyZSgnYmNyeXB0by9saWIvc2VjcDI1NmsxJyk7XHJcblxyXG4vKipcclxuICogQGV4cG9ydHMgdXRpbHMvbWVzc2FnZVxyXG4gKi9cclxuXHJcbmNvbnN0IG1lc3NhZ2UgPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIEJpdGNvaW4gc2lnbmluZyBtYWdpYyBzdHJpbmcuXHJcbiAqIEBjb25zdCB7U3RyaW5nfVxyXG4gKiBAZGVmYXVsdFxyXG4gKi9cclxuXHJcbm1lc3NhZ2UuTUFHSUNfU1RSSU5HID0gJ0JpdGNvaW4gU2lnbmVkIE1lc3NhZ2U6XFxuJztcclxuXHJcbi8qKlxyXG4gKiBIYXNoIG1lc3NhZ2Ugd2l0aCBtYWdpYyBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbcHJlZml4ID0gbWVzc2FnZS5NQUdJQ19TVFJJTkddXHJcbiAqIEByZXR1cm5zIHtIYXNofVxyXG4gKi9cclxuXHJcbm1lc3NhZ2UubWFnaWNIYXNoID0gKG1zZywgcHJlZml4ID0gbWVzc2FnZS5NQUdJQ19TVFJJTkcpID0+IHtcclxuICBhc3NlcnQodHlwZW9mIHByZWZpeCA9PT0gJ3N0cmluZycsICdwcmVmaXggbXVzdCBiZSBhIHN0cmluZy4nKTtcclxuICBhc3NlcnQodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycsICdtZXNzYWdlIG11c3QgYmUgYSBzdHJpbmcnKTtcclxuXHJcbiAgY29uc3QgYncgPSBidWZpby53cml0ZSgpO1xyXG5cclxuICBidy53cml0ZVZhclN0cmluZyhwcmVmaXgpO1xyXG4gIGJ3LndyaXRlVmFyU3RyaW5nKG1zZywgJ3V0ZjgnKTtcclxuXHJcbiAgcmV0dXJuIGhhc2gyNTYuZGlnZXN0KGJ3LnJlbmRlcigpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTaWduIG1lc3NhZ2Ugd2l0aCBrZXkuXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2dcclxuICogQHBhcmFtIHtLZXlSaW5nfSByaW5nXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBbcHJlZml4ID0gbWVzc2FnZS5NQUdJQ19TVFJJTkddXHJcbiAqIEByZXR1cm5zIHtCdWZmZXJ9XHJcbiAqL1xyXG5cclxubWVzc2FnZS5zaWduID0gKG1zZywgcmluZywgcHJlZml4KSA9PiB7XHJcbiAgYXNzZXJ0KHJpbmcuZ2V0UHJpdmF0ZUtleSgpLCAnQ2Fubm90IHNpZ24gd2l0aG91dCBwcml2YXRlIGtleS4nKTtcclxuXHJcbiAgY29uc3QgaGFzaCA9IG1lc3NhZ2UubWFnaWNIYXNoKG1zZywgcHJlZml4KTtcclxuICBjb25zdCBjb21wcmVzcyA9IDB4MDQgIT09IHJpbmcuZ2V0UHVibGljS2V5KCkucmVhZEludDgoMCk7XHJcbiAgY29uc3QgW1xyXG4gICAgc2lnbmF0dXJlLFxyXG4gICAgcmVjb3ZlcnlcclxuICBdID0gc2VjcDI1NmsxLnNpZ25SZWNvdmVyYWJsZShoYXNoLCByaW5nLmdldFByaXZhdGVLZXkoKSk7XHJcblxyXG4gIGNvbnN0IGJ3ID0gYnVmaW8ud3JpdGUoKTtcclxuXHJcbiAgYncud3JpdGVJOChyZWNvdmVyeSArIDI3ICsgKGNvbXByZXNzID8gNCA6IDApKTtcclxuICBidy53cml0ZUJ5dGVzKHNpZ25hdHVyZSk7XHJcblxyXG4gIHJldHVybiBidy5yZW5kZXIoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWNvdmVyIHJhdyBwdWJsaWMga2V5IGZyb20gbWVzc2FnZSBhbmQgc2lnbmF0dXJlLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzaWduYXR1cmVcclxuICogQHBhcmFtIHtTdHJpbmd9IFtwcmVmaXggPSBNQUdJQ19TVFJJTkddXHJcbiAqL1xyXG5cclxubWVzc2FnZS5yZWNvdmVyID0gKG1zZywgc2lnbmF0dXJlLCBwcmVmaXgpID0+IHtcclxuICBhc3NlcnQodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycsICdtc2cgbXVzdCBiZSBhIHN0cmluZycpO1xyXG4gIGFzc2VydChCdWZmZXIuaXNCdWZmZXIoc2lnbmF0dXJlKSwgJ3NpZyBtdXN0IGJlIGEgYnVmZmVyJyk7XHJcblxyXG4gIGNvbnN0IGhhc2ggPSBtZXNzYWdlLm1hZ2ljSGFzaChtc2csIHByZWZpeCk7XHJcblxyXG4gIGFzc2VydC5zdHJpY3RFcXVhbChzaWduYXR1cmUubGVuZ3RoLCA2NSwgJ0ludmFsaWQgc2lnbmF0dXJlIGxlbmd0aCcpO1xyXG5cclxuICBjb25zdCBmbGFnQnl0ZSA9IHNpZ25hdHVyZS5yZWFkVUludDgoMCkgLSAyNztcclxuXHJcbiAgYXNzZXJ0KGZsYWdCeXRlIDwgOCwgJ0ludmFsaWQgc2lnbmF0dXJlIHBhcmFtZXRlcicpO1xyXG5cclxuICBjb25zdCBjb21wcmVzc2VkID0gQm9vbGVhbihmbGFnQnl0ZSAmIDQpO1xyXG4gIGNvbnN0IHJlY292ZXJ5ID0gZmxhZ0J5dGUgJiAzO1xyXG5cclxuICByZXR1cm4gc2VjcDI1NmsxLnJlY292ZXIoaGFzaCwgc2lnbmF0dXJlLnNsaWNlKDEpLCByZWNvdmVyeSwgY29tcHJlc3NlZCk7XHJcbn07XHJcbiJdfQ==
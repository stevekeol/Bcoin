/*!
 * bip152.js - compact block object for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';/**
 * @module net/bip152
 */function cov_137xvemg64(){var path="E:\\Projects\\Test\\bcoin\\lib\\net\\bip152.js";var hash="a2adddf51b3ba990a0bc3e361b179e79998ad15d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\net\\bip152.js",statementMap:{"0":{start:{line:13,column:15},end:{line:13,column:31}},"1":{start:{line:14,column:12},end:{line:14,column:28}},"2":{start:{line:15,column:18},end:{line:15,column:50}},"3":{start:{line:16,column:15},end:{line:16,column:44}},"4":{start:{line:17,column:18},end:{line:17,column:48}},"5":{start:{line:18,column:22},end:{line:18,column:60}},"6":{start:{line:19,column:11},end:{line:19,column:38}},"7":{start:{line:20,column:16},end:{line:20,column:48}},"8":{start:{line:21,column:14},end:{line:21,column:44}},"9":{start:{line:22,column:15},end:{line:22,column:34}},"10":{start:{line:23,column:19},end:{line:23,column:22}},"11":{start:{line:47,column:4},end:{line:47,column:12}},"12":{start:{line:49,column:4},end:{line:49,column:25}},"13":{start:{line:50,column:4},end:{line:50,column:18}},"14":{start:{line:51,column:4},end:{line:51,column:18}},"15":{start:{line:53,column:4},end:{line:53,column:24}},"16":{start:{line:54,column:4},end:{line:54,column:27}},"17":{start:{line:55,column:4},end:{line:55,column:19}},"18":{start:{line:56,column:4},end:{line:56,column:23}},"19":{start:{line:57,column:4},end:{line:57,column:21}},"20":{start:{line:58,column:4},end:{line:58,column:17}},"21":{start:{line:60,column:4},end:{line:61,column:32}},"22":{start:{line:61,column:6},end:{line:61,column:32}},"23":{start:{line:71,column:4},end:{line:71,column:31}},"24":{start:{line:73,column:4},end:{line:73,column:46}},"25":{start:{line:74,column:4},end:{line:74,column:39}},"26":{start:{line:75,column:4},end:{line:75,column:39}},"27":{start:{line:77,column:4},end:{line:77,column:37}},"28":{start:{line:78,column:4},end:{line:78,column:27}},"29":{start:{line:79,column:4},end:{line:79,column:27}},"30":{start:{line:81,column:4},end:{line:82,column:41}},"31":{start:{line:82,column:6},end:{line:82,column:41}},"32":{start:{line:84,column:4},end:{line:85,column:33}},"33":{start:{line:85,column:6},end:{line:85,column:33}},"34":{start:{line:87,column:4},end:{line:88,column:33}},"35":{start:{line:88,column:6},end:{line:88,column:33}},"36":{start:{line:90,column:4},end:{line:91,column:37}},"37":{start:{line:91,column:6},end:{line:91,column:37}},"38":{start:{line:93,column:4},end:{line:93,column:32}},"39":{start:{line:95,column:4},end:{line:95,column:16}},"40":{start:{line:105,column:4},end:{line:105,column:43}},"41":{start:{line:114,column:4},end:{line:114,column:16}},"42":{start:{line:124,column:15},end:{line:124,column:29}},"43":{start:{line:126,column:4},end:{line:126,column:22}},"44":{start:{line:128,column:4},end:{line:128,column:36}},"45":{start:{line:129,column:4},end:{line:129,column:32}},"46":{start:{line:131,column:20},end:{line:131,column:35}},"47":{start:{line:133,column:4},end:{line:133,column:28}},"48":{start:{line:135,column:4},end:{line:139,column:5}},"49":{start:{line:135,column:17},end:{line:135,column:18}},"50":{start:{line:136,column:17},end:{line:136,column:29}},"51":{start:{line:137,column:17},end:{line:137,column:29}},"52":{start:{line:138,column:6},end:{line:138,column:43}},"53":{start:{line:141,column:20},end:{line:141,column:35}},"54":{start:{line:143,column:4},end:{line:143,column:28}},"55":{start:{line:145,column:4},end:{line:154,column:5}},"56":{start:{line:145,column:17},end:{line:145,column:18}},"57":{start:{line:146,column:20},end:{line:146,column:35}},"58":{start:{line:148,column:6},end:{line:148,column:30}},"59":{start:{line:149,column:6},end:{line:149,column:35}},"60":{start:{line:151,column:17},end:{line:151,column:34}},"61":{start:{line:153,column:6},end:{line:153,column:33}},"62":{start:{line:156,column:4},end:{line:156,column:16}},"63":{start:{line:167,column:4},end:{line:168,column:36}},"64":{start:{line:168,column:6},end:{line:168,column:36}},"65":{start:{line:169,column:4},end:{line:169,column:36}},"66":{start:{line:178,column:4},end:{line:178,column:31}},"67":{start:{line:187,column:4},end:{line:187,column:32}},"68":{start:{line:197,column:4},end:{line:197,column:35}},"69":{start:{line:207,column:4},end:{line:207,column:36}},"70":{start:{line:218,column:17},end:{line:218,column:38}},"71":{start:{line:219,column:4},end:{line:219,column:60}},"72":{start:{line:229,column:15},end:{line:229,column:16}},"73":{start:{line:231,column:4},end:{line:231,column:15}},"74":{start:{line:232,column:4},end:{line:232,column:14}},"75":{start:{line:233,column:4},end:{line:233,column:49}},"76":{start:{line:234,column:4},end:{line:234,column:32}},"77":{start:{line:235,column:4},end:{line:235,column:49}},"78":{start:{line:237,column:4},end:{line:244,column:5}},"79":{start:{line:238,column:6},end:{line:238,column:41}},"80":{start:{line:240,column:6},end:{line:243,column:33}},"81":{start:{line:241,column:8},end:{line:241,column:29}},"82":{start:{line:243,column:8},end:{line:243,column:33}},"83":{start:{line:246,column:4},end:{line:246,column:16}},"84":{start:{line:257,column:4},end:{line:257,column:23}},"85":{start:{line:259,column:4},end:{line:259,column:33}},"86":{start:{line:261,column:4},end:{line:261,column:36}},"87":{start:{line:263,column:4},end:{line:269,column:5}},"88":{start:{line:264,column:17},end:{line:264,column:33}},"89":{start:{line:265,column:17},end:{line:265,column:40}},"90":{start:{line:266,column:6},end:{line:266,column:27}},"91":{start:{line:267,column:6},end:{line:267,column:22}},"92":{start:{line:268,column:6},end:{line:268,column:22}},"93":{start:{line:271,column:4},end:{line:271,column:36}},"94":{start:{line:273,column:4},end:{line:280,column:5}},"95":{start:{line:274,column:6},end:{line:274,column:28}},"96":{start:{line:276,column:6},end:{line:279,column:30}},"97":{start:{line:277,column:8},end:{line:277,column:24}},"98":{start:{line:279,column:8},end:{line:279,column:30}},"99":{start:{line:282,column:4},end:{line:282,column:14}},"100":{start:{line:292,column:4},end:{line:292,column:39}},"101":{start:{line:303,column:4},end:{line:304,column:18}},"102":{start:{line:304,column:6},end:{line:304,column:18}},"103":{start:{line:306,column:16},end:{line:306,column:25}},"104":{start:{line:308,column:4},end:{line:335,column:5}},"105":{start:{line:309,column:17},end:{line:309,column:26}},"106":{start:{line:311,column:6},end:{line:312,column:32}},"107":{start:{line:312,column:8},end:{line:312,column:32}},"108":{start:{line:314,column:17},end:{line:314,column:31}},"109":{start:{line:315,column:20},end:{line:315,column:38}},"110":{start:{line:317,column:6},end:{line:318,column:17}},"111":{start:{line:318,column:8},end:{line:318,column:17}},"112":{start:{line:320,column:6},end:{line:325,column:7}},"113":{start:{line:322,column:8},end:{line:322,column:37}},"114":{start:{line:323,column:8},end:{line:323,column:24}},"115":{start:{line:324,column:8},end:{line:324,column:17}},"116":{start:{line:327,column:6},end:{line:327,column:33}},"117":{start:{line:328,column:6},end:{line:328,column:21}},"118":{start:{line:329,column:6},end:{line:329,column:22}},"119":{start:{line:333,column:6},end:{line:334,column:20}},"120":{start:{line:334,column:8},end:{line:334,column:20}},"121":{start:{line:337,column:4},end:{line:337,column:17}},"122":{start:{line:347,column:17},end:{line:347,column:18}},"123":{start:{line:349,column:4},end:{line:357,column:5}},"124":{start:{line:349,column:17},end:{line:349,column:18}},"125":{start:{line:350,column:6},end:{line:351,column:17}},"126":{start:{line:351,column:8},end:{line:351,column:17}},"127":{start:{line:353,column:6},end:{line:354,column:21}},"128":{start:{line:354,column:8},end:{line:354,column:21}},"129":{start:{line:356,column:6},end:{line:356,column:44}},"130":{start:{line:359,column:4},end:{line:359,column:37}},"131":{start:{line:369,column:21},end:{line:369,column:47}},"132":{start:{line:370,column:4},end:{line:370,column:52}},"133":{start:{line:380,column:4},end:{line:380,column:41}},"134":{start:{line:390,column:17},end:{line:390,column:62}},"135":{start:{line:391,column:17},end:{line:391,column:36}},"136":{start:{line:392,column:4},end:{line:392,column:29}},"137":{start:{line:401,column:4},end:{line:402,column:40}},"138":{start:{line:402,column:6},end:{line:402,column:40}},"139":{start:{line:404,column:4},end:{line:405,column:48}},"140":{start:{line:405,column:6},end:{line:405,column:48}},"141":{start:{line:411,column:4},end:{line:412,column:48}},"142":{start:{line:412,column:6},end:{line:412,column:48}},"143":{start:{line:415,column:4},end:{line:416,column:32}},"144":{start:{line:415,column:17},end:{line:415,column:18}},"145":{start:{line:416,column:6},end:{line:416,column:32}},"146":{start:{line:418,column:15},end:{line:418,column:17}},"147":{start:{line:419,column:17},end:{line:419,column:18}},"148":{start:{line:421,column:4},end:{line:428,column:5}},"149":{start:{line:421,column:17},end:{line:421,column:18}},"150":{start:{line:422,column:26},end:{line:422,column:37}},"151":{start:{line:423,column:6},end:{line:423,column:24}},"152":{start:{line:424,column:6},end:{line:424,column:29}},"153":{start:{line:425,column:6},end:{line:425,column:42}},"154":{start:{line:426,column:6},end:{line:426,column:32}},"155":{start:{line:427,column:6},end:{line:427,column:22}},"156":{start:{line:430,column:4},end:{line:441,column:5}},"157":{start:{line:430,column:17},end:{line:430,column:18}},"158":{start:{line:431,column:17},end:{line:431,column:28}},"159":{start:{line:433,column:6},end:{line:434,column:20}},"160":{start:{line:434,column:8},end:{line:434,column:20}},"161":{start:{line:437,column:6},end:{line:438,column:21}},"162":{start:{line:438,column:8},end:{line:438,column:21}},"163":{start:{line:440,column:6},end:{line:440,column:37}},"164":{start:{line:443,column:4},end:{line:443,column:16}},"165":{start:{line:453,column:18},end:{line:453,column:29}},"166":{start:{line:455,column:4},end:{line:455,column:33}},"167":{start:{line:456,column:4},end:{line:456,column:37}},"168":{start:{line:457,column:4},end:{line:457,column:39}},"169":{start:{line:458,column:4},end:{line:458,column:27}},"170":{start:{line:459,column:4},end:{line:459,column:27}},"171":{start:{line:460,column:4},end:{line:460,column:29}},"172":{start:{line:461,column:4},end:{line:461,column:29}},"173":{start:{line:462,column:4},end:{line:462,column:31}},"174":{start:{line:464,column:4},end:{line:467,column:5}},"175":{start:{line:465,column:6},end:{line:465,column:47}},"176":{start:{line:466,column:6},end:{line:466,column:25}},"177":{start:{line:469,column:4},end:{line:469,column:17}},"178":{start:{line:482,column:4},end:{line:482,column:33}},"179":{start:{line:483,column:4},end:{line:483,column:37}},"180":{start:{line:484,column:4},end:{line:484,column:39}},"181":{start:{line:485,column:4},end:{line:485,column:27}},"182":{start:{line:486,column:4},end:{line:486,column:27}},"183":{start:{line:487,column:4},end:{line:487,column:29}},"184":{start:{line:488,column:4},end:{line:488,column:36}},"185":{start:{line:489,column:4},end:{line:489,column:29}},"186":{start:{line:490,column:4},end:{line:490,column:31}},"187":{start:{line:492,column:4},end:{line:493,column:29}},"188":{start:{line:493,column:6},end:{line:493,column:29}},"189":{start:{line:495,column:4},end:{line:495,column:26}},"190":{start:{line:496,column:4},end:{line:496,column:32}},"191":{start:{line:498,column:4},end:{line:508,column:5}},"192":{start:{line:498,column:17},end:{line:498,column:18}},"193":{start:{line:499,column:17},end:{line:499,column:29}},"194":{start:{line:500,column:17},end:{line:500,column:26}},"195":{start:{line:502,column:6},end:{line:503,column:32}},"196":{start:{line:503,column:8},end:{line:503,column:32}},"197":{start:{line:505,column:17},end:{line:505,column:31}},"198":{start:{line:507,column:6},end:{line:507,column:24}},"199":{start:{line:510,column:4},end:{line:510,column:37}},"200":{start:{line:512,column:4},end:{line:512,column:16}},"201":{start:{line:524,column:4},end:{line:524,column:55}},"202":{start:{line:533,column:4},end:{line:533,column:35}},"203":{start:{line:553,column:4},end:{line:553,column:36}},"204":{start:{line:554,column:4},end:{line:554,column:22}},"205":{start:{line:556,column:4},end:{line:557,column:32}},"206":{start:{line:557,column:6},end:{line:557,column:32}},"207":{start:{line:568,column:4},end:{line:568,column:29}},"208":{start:{line:570,column:4},end:{line:571,column:37}},"209":{start:{line:571,column:6},end:{line:571,column:37}},"210":{start:{line:573,column:4},end:{line:573,column:16}},"211":{start:{line:583,column:4},end:{line:583,column:43}},"212":{start:{line:594,column:4},end:{line:594,column:29}},"213":{start:{line:596,column:4},end:{line:599,column:5}},"214":{start:{line:596,column:17},end:{line:596,column:18}},"215":{start:{line:597,column:6},end:{line:598,column:29}},"216":{start:{line:598,column:8},end:{line:598,column:29}},"217":{start:{line:601,column:4},end:{line:601,column:16}},"218":{start:{line:611,column:4},end:{line:611,column:41}},"219":{start:{line:622,column:4},end:{line:622,column:30}},"220":{start:{line:624,column:18},end:{line:624,column:33}},"221":{start:{line:626,column:4},end:{line:630,column:5}},"222":{start:{line:626,column:17},end:{line:626,column:18}},"223":{start:{line:627,column:20},end:{line:627,column:35}},"224":{start:{line:628,column:6},end:{line:628,column:30}},"225":{start:{line:629,column:6},end:{line:629,column:31}},"226":{start:{line:632,column:17},end:{line:632,column:18}},"227":{start:{line:634,column:4},end:{line:640,column:5}},"228":{start:{line:634,column:17},end:{line:634,column:18}},"229":{start:{line:635,column:18},end:{line:635,column:33}},"230":{start:{line:636,column:6},end:{line:636,column:22}},"231":{start:{line:637,column:6},end:{line:637,column:30}},"232":{start:{line:638,column:6},end:{line:638,column:30}},"233":{start:{line:639,column:6},end:{line:639,column:25}},"234":{start:{line:642,column:4},end:{line:642,column:16}},"235":{start:{line:653,column:4},end:{line:653,column:43}},"236":{start:{line:663,column:4},end:{line:663,column:37}},"237":{start:{line:673,column:4},end:{line:673,column:36}},"238":{start:{line:682,column:15},end:{line:682,column:16}},"239":{start:{line:684,column:4},end:{line:684,column:15}},"240":{start:{line:685,column:4},end:{line:685,column:53}},"241":{start:{line:687,column:4},end:{line:694,column:5}},"242":{start:{line:687,column:17},end:{line:687,column:18}},"243":{start:{line:688,column:18},end:{line:688,column:33}},"244":{start:{line:690,column:6},end:{line:691,column:41}},"245":{start:{line:691,column:8},end:{line:691,column:41}},"246":{start:{line:693,column:6},end:{line:693,column:41}},"247":{start:{line:696,column:4},end:{line:696,column:16}},"248":{start:{line:705,column:4},end:{line:705,column:28}},"249":{start:{line:707,column:4},end:{line:707,column:40}},"250":{start:{line:709,column:4},end:{line:716,column:5}},"251":{start:{line:709,column:17},end:{line:709,column:18}},"252":{start:{line:710,column:18},end:{line:710,column:33}},"253":{start:{line:712,column:6},end:{line:713,column:41}},"254":{start:{line:713,column:8},end:{line:713,column:41}},"255":{start:{line:715,column:6},end:{line:715,column:28}},"256":{start:{line:718,column:4},end:{line:718,column:14}},"257":{start:{line:727,column:17},end:{line:727,column:31}},"258":{start:{line:728,column:4},end:{line:728,column:51}},"259":{start:{line:748,column:4},end:{line:748,column:36}},"260":{start:{line:749,column:4},end:{line:749,column:18}},"261":{start:{line:751,column:4},end:{line:752,column:32}},"262":{start:{line:752,column:6},end:{line:752,column:32}},"263":{start:{line:763,column:4},end:{line:763,column:29}},"264":{start:{line:765,column:4},end:{line:766,column:29}},"265":{start:{line:766,column:6},end:{line:766,column:29}},"266":{start:{line:768,column:4},end:{line:768,column:16}},"267":{start:{line:778,column:4},end:{line:778,column:43}},"268":{start:{line:789,column:4},end:{line:789,column:30}},"269":{start:{line:791,column:18},end:{line:791,column:33}},"270":{start:{line:793,column:4},end:{line:794,column:39}},"271":{start:{line:793,column:17},end:{line:793,column:18}},"272":{start:{line:794,column:6},end:{line:794,column:39}},"273":{start:{line:796,column:4},end:{line:796,column:16}},"274":{start:{line:807,column:4},end:{line:807,column:43}},"275":{start:{line:817,column:4},end:{line:817,column:37}},"276":{start:{line:827,column:4},end:{line:827,column:36}},"277":{start:{line:838,column:4},end:{line:838,column:25}},"278":{start:{line:840,column:4},end:{line:845,column:5}},"279":{start:{line:841,column:6},end:{line:842,column:14}},"280":{start:{line:842,column:8},end:{line:842,column:14}},"281":{start:{line:844,column:6},end:{line:844,column:38}},"282":{start:{line:847,column:4},end:{line:847,column:16}},"283":{start:{line:857,column:4},end:{line:857,column:44}},"284":{start:{line:866,column:4},end:{line:866,column:31}},"285":{start:{line:875,column:4},end:{line:875,column:32}},"286":{start:{line:885,column:4},end:{line:885,column:35}},"287":{start:{line:895,column:4},end:{line:895,column:36}},"288":{start:{line:904,column:15},end:{line:904,column:16}},"289":{start:{line:906,column:4},end:{line:906,column:15}},"290":{start:{line:907,column:4},end:{line:907,column:49}},"291":{start:{line:909,column:4},end:{line:914,column:5}},"292":{start:{line:910,column:6},end:{line:913,column:33}},"293":{start:{line:911,column:8},end:{line:911,column:29}},"294":{start:{line:913,column:8},end:{line:913,column:33}},"295":{start:{line:916,column:4},end:{line:916,column:16}},"296":{start:{line:927,column:4},end:{line:927,column:28}},"297":{start:{line:929,column:4},end:{line:929,column:36}},"298":{start:{line:931,column:4},end:{line:936,column:5}},"299":{start:{line:932,column:6},end:{line:935,column:30}},"300":{start:{line:933,column:8},end:{line:933,column:24}},"301":{start:{line:935,column:8},end:{line:935,column:30}},"302":{start:{line:938,column:4},end:{line:938,column:14}},"303":{start:{line:949,column:17},end:{line:949,column:38}},"304":{start:{line:950,column:4},end:{line:950,column:60}},"305":{start:{line:958,column:0},end:{line:958,column:36}},"306":{start:{line:959,column:0},end:{line:959,column:30}},"307":{start:{line:960,column:0},end:{line:960,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:46,column:2},end:{line:46,column:3}},loc:{start:{line:46,column:23},end:{line:62,column:3}},line:46},"1":{name:"(anonymous_1)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:23},end:{line:96,column:3}},line:70},"2":{name:"(anonymous_2)",decl:{start:{line:104,column:2},end:{line:104,column:3}},loc:{start:{line:104,column:30},end:{line:106,column:3}},line:104},"3":{name:"(anonymous_3)",decl:{start:{line:113,column:2},end:{line:113,column:3}},loc:{start:{line:113,column:15},end:{line:115,column:3}},line:113},"4":{name:"(anonymous_4)",decl:{start:{line:123,column:2},end:{line:123,column:3}},loc:{start:{line:123,column:16},end:{line:157,column:3}},line:123},"5":{name:"(anonymous_5)",decl:{start:{line:166,column:2},end:{line:166,column:3}},loc:{start:{line:166,column:28},end:{line:170,column:3}},line:166},"6":{name:"(anonymous_6)",decl:{start:{line:177,column:2},end:{line:177,column:3}},loc:{start:{line:177,column:10},end:{line:179,column:3}},line:177},"7":{name:"(anonymous_7)",decl:{start:{line:186,column:2},end:{line:186,column:3}},loc:{start:{line:186,column:13},end:{line:188,column:3}},line:186},"8":{name:"(anonymous_8)",decl:{start:{line:196,column:2},end:{line:196,column:3}},loc:{start:{line:196,column:15},end:{line:198,column:3}},line:196},"9":{name:"(anonymous_9)",decl:{start:{line:206,column:2},end:{line:206,column:3}},loc:{start:{line:206,column:21},end:{line:208,column:3}},line:206},"10":{name:"(anonymous_10)",decl:{start:{line:217,column:2},end:{line:217,column:3}},loc:{start:{line:217,column:20},end:{line:220,column:3}},line:217},"11":{name:"(anonymous_11)",decl:{start:{line:228,column:2},end:{line:228,column:3}},loc:{start:{line:228,column:19},end:{line:247,column:3}},line:228},"12":{name:"(anonymous_12)",decl:{start:{line:256,column:2},end:{line:256,column:3}},loc:{start:{line:256,column:24},end:{line:283,column:3}},line:256},"13":{name:"(anonymous_13)",decl:{start:{line:291,column:2},end:{line:291,column:3}},loc:{start:{line:291,column:14},end:{line:293,column:3}},line:291},"14":{name:"(anonymous_14)",decl:{start:{line:302,column:2},end:{line:302,column:3}},loc:{start:{line:302,column:32},end:{line:338,column:3}},line:302},"15":{name:"(anonymous_15)",decl:{start:{line:346,column:2},end:{line:346,column:3}},loc:{start:{line:346,column:19},end:{line:360,column:3}},line:346},"16":{name:"(anonymous_16)",decl:{start:{line:368,column:2},end:{line:368,column:3}},loc:{start:{line:368,column:12},end:{line:371,column:3}},line:368},"17":{name:"(anonymous_17)",decl:{start:{line:379,column:2},end:{line:379,column:3}},loc:{start:{line:379,column:18},end:{line:381,column:3}},line:379},"18":{name:"(anonymous_18)",decl:{start:{line:389,column:2},end:{line:389,column:3}},loc:{start:{line:389,column:11},end:{line:393,column:3}},line:389},"19":{name:"(anonymous_19)",decl:{start:{line:400,column:2},end:{line:400,column:3}},loc:{start:{line:400,column:9},end:{line:444,column:3}},line:400},"20":{name:"(anonymous_20)",decl:{start:{line:452,column:2},end:{line:452,column:3}},loc:{start:{line:452,column:12},end:{line:470,column:3}},line:452},"21":{name:"(anonymous_21)",decl:{start:{line:481,column:2},end:{line:481,column:3}},loc:{start:{line:481,column:35},end:{line:513,column:3}},line:481},"22":{name:"(anonymous_22)",decl:{start:{line:523,column:2},end:{line:523,column:3}},loc:{start:{line:523,column:42},end:{line:525,column:3}},line:523},"23":{name:"(anonymous_23)",decl:{start:{line:532,column:2},end:{line:532,column:3}},loc:{start:{line:532,column:14},end:{line:534,column:3}},line:532},"24":{name:"(anonymous_24)",decl:{start:{line:552,column:2},end:{line:552,column:3}},loc:{start:{line:552,column:23},end:{line:558,column:3}},line:552},"25":{name:"(anonymous_25)",decl:{start:{line:567,column:2},end:{line:567,column:3}},loc:{start:{line:567,column:23},end:{line:574,column:3}},line:567},"26":{name:"(anonymous_26)",decl:{start:{line:582,column:2},end:{line:582,column:3}},loc:{start:{line:582,column:30},end:{line:584,column:3}},line:582},"27":{name:"(anonymous_27)",decl:{start:{line:593,column:2},end:{line:593,column:3}},loc:{start:{line:593,column:21},end:{line:602,column:3}},line:593},"28":{name:"(anonymous_28)",decl:{start:{line:610,column:2},end:{line:610,column:3}},loc:{start:{line:610,column:28},end:{line:612,column:3}},line:610},"29":{name:"(anonymous_29)",decl:{start:{line:621,column:2},end:{line:621,column:3}},loc:{start:{line:621,column:17},end:{line:643,column:3}},line:621},"30":{name:"(anonymous_30)",decl:{start:{line:652,column:2},end:{line:652,column:3}},loc:{start:{line:652,column:16},end:{line:654,column:3}},line:652},"31":{name:"(anonymous_31)",decl:{start:{line:662,column:2},end:{line:662,column:3}},loc:{start:{line:662,column:24},end:{line:664,column:3}},line:662},"32":{name:"(anonymous_32)",decl:{start:{line:672,column:2},end:{line:672,column:3}},loc:{start:{line:672,column:23},end:{line:674,column:3}},line:672},"33":{name:"(anonymous_33)",decl:{start:{line:681,column:2},end:{line:681,column:3}},loc:{start:{line:681,column:12},end:{line:697,column:3}},line:681},"34":{name:"(anonymous_34)",decl:{start:{line:704,column:2},end:{line:704,column:3}},loc:{start:{line:704,column:15},end:{line:719,column:3}},line:704},"35":{name:"(anonymous_35)",decl:{start:{line:726,column:2},end:{line:726,column:3}},loc:{start:{line:726,column:10},end:{line:729,column:3}},line:726},"36":{name:"(anonymous_36)",decl:{start:{line:747,column:2},end:{line:747,column:3}},loc:{start:{line:747,column:23},end:{line:753,column:3}},line:747},"37":{name:"(anonymous_37)",decl:{start:{line:762,column:2},end:{line:762,column:3}},loc:{start:{line:762,column:23},end:{line:769,column:3}},line:762},"38":{name:"(anonymous_38)",decl:{start:{line:777,column:2},end:{line:777,column:3}},loc:{start:{line:777,column:30},end:{line:779,column:3}},line:777},"39":{name:"(anonymous_39)",decl:{start:{line:788,column:2},end:{line:788,column:3}},loc:{start:{line:788,column:17},end:{line:797,column:3}},line:788},"40":{name:"(anonymous_40)",decl:{start:{line:806,column:2},end:{line:806,column:3}},loc:{start:{line:806,column:16},end:{line:808,column:3}},line:806},"41":{name:"(anonymous_41)",decl:{start:{line:816,column:2},end:{line:816,column:3}},loc:{start:{line:816,column:24},end:{line:818,column:3}},line:816},"42":{name:"(anonymous_42)",decl:{start:{line:826,column:2},end:{line:826,column:3}},loc:{start:{line:826,column:23},end:{line:828,column:3}},line:826},"43":{name:"(anonymous_43)",decl:{start:{line:837,column:2},end:{line:837,column:3}},loc:{start:{line:837,column:24},end:{line:848,column:3}},line:837},"44":{name:"(anonymous_44)",decl:{start:{line:856,column:2},end:{line:856,column:3}},loc:{start:{line:856,column:31},end:{line:858,column:3}},line:856},"45":{name:"(anonymous_45)",decl:{start:{line:865,column:2},end:{line:865,column:3}},loc:{start:{line:865,column:10},end:{line:867,column:3}},line:865},"46":{name:"(anonymous_46)",decl:{start:{line:874,column:2},end:{line:874,column:3}},loc:{start:{line:874,column:13},end:{line:876,column:3}},line:874},"47":{name:"(anonymous_47)",decl:{start:{line:884,column:2},end:{line:884,column:3}},loc:{start:{line:884,column:15},end:{line:886,column:3}},line:884},"48":{name:"(anonymous_48)",decl:{start:{line:894,column:2},end:{line:894,column:3}},loc:{start:{line:894,column:21},end:{line:896,column:3}},line:894},"49":{name:"(anonymous_49)",decl:{start:{line:903,column:2},end:{line:903,column:3}},loc:{start:{line:903,column:19},end:{line:917,column:3}},line:903},"50":{name:"(anonymous_50)",decl:{start:{line:926,column:2},end:{line:926,column:3}},loc:{start:{line:926,column:24},end:{line:939,column:3}},line:926},"51":{name:"(anonymous_51)",decl:{start:{line:948,column:2},end:{line:948,column:3}},loc:{start:{line:948,column:20},end:{line:951,column:3}},line:948}},branchMap:{"0":{loc:{start:{line:60,column:4},end:{line:61,column:32}},type:"if",locations:[{start:{line:60,column:4},end:{line:61,column:32}},{start:{line:60,column:4},end:{line:61,column:32}}],line:60},"1":{loc:{start:{line:81,column:4},end:{line:82,column:41}},type:"if",locations:[{start:{line:81,column:4},end:{line:82,column:41}},{start:{line:81,column:4},end:{line:82,column:41}}],line:81},"2":{loc:{start:{line:84,column:4},end:{line:85,column:33}},type:"if",locations:[{start:{line:84,column:4},end:{line:85,column:33}},{start:{line:84,column:4},end:{line:85,column:33}}],line:84},"3":{loc:{start:{line:87,column:4},end:{line:88,column:33}},type:"if",locations:[{start:{line:87,column:4},end:{line:88,column:33}},{start:{line:87,column:4},end:{line:88,column:33}}],line:87},"4":{loc:{start:{line:90,column:4},end:{line:91,column:37}},type:"if",locations:[{start:{line:90,column:4},end:{line:91,column:37}},{start:{line:90,column:4},end:{line:91,column:37}}],line:90},"5":{loc:{start:{line:167,column:4},end:{line:168,column:36}},type:"if",locations:[{start:{line:167,column:4},end:{line:168,column:36}},{start:{line:167,column:4},end:{line:168,column:36}}],line:167},"6":{loc:{start:{line:240,column:6},end:{line:243,column:33}},type:"if",locations:[{start:{line:240,column:6},end:{line:243,column:33}},{start:{line:240,column:6},end:{line:243,column:33}}],line:240},"7":{loc:{start:{line:276,column:6},end:{line:279,column:30}},type:"if",locations:[{start:{line:276,column:6},end:{line:279,column:30}},{start:{line:276,column:6},end:{line:279,column:30}}],line:276},"8":{loc:{start:{line:303,column:4},end:{line:304,column:18}},type:"if",locations:[{start:{line:303,column:4},end:{line:304,column:18}},{start:{line:303,column:4},end:{line:304,column:18}}],line:303},"9":{loc:{start:{line:311,column:6},end:{line:312,column:32}},type:"if",locations:[{start:{line:311,column:6},end:{line:312,column:32}},{start:{line:311,column:6},end:{line:312,column:32}}],line:311},"10":{loc:{start:{line:317,column:6},end:{line:318,column:17}},type:"if",locations:[{start:{line:317,column:6},end:{line:318,column:17}},{start:{line:317,column:6},end:{line:318,column:17}}],line:317},"11":{loc:{start:{line:320,column:6},end:{line:325,column:7}},type:"if",locations:[{start:{line:320,column:6},end:{line:325,column:7}},{start:{line:320,column:6},end:{line:325,column:7}}],line:320},"12":{loc:{start:{line:333,column:6},end:{line:334,column:20}},type:"if",locations:[{start:{line:333,column:6},end:{line:334,column:20}},{start:{line:333,column:6},end:{line:334,column:20}}],line:333},"13":{loc:{start:{line:350,column:6},end:{line:351,column:17}},type:"if",locations:[{start:{line:350,column:6},end:{line:351,column:17}},{start:{line:350,column:6},end:{line:351,column:17}}],line:350},"14":{loc:{start:{line:353,column:6},end:{line:354,column:21}},type:"if",locations:[{start:{line:353,column:6},end:{line:354,column:21}},{start:{line:353,column:6},end:{line:354,column:21}}],line:353},"15":{loc:{start:{line:401,column:4},end:{line:402,column:40}},type:"if",locations:[{start:{line:401,column:4},end:{line:402,column:40}},{start:{line:401,column:4},end:{line:402,column:40}}],line:401},"16":{loc:{start:{line:404,column:4},end:{line:405,column:48}},type:"if",locations:[{start:{line:404,column:4},end:{line:405,column:48}},{start:{line:404,column:4},end:{line:405,column:48}}],line:404},"17":{loc:{start:{line:411,column:4},end:{line:412,column:48}},type:"if",locations:[{start:{line:411,column:4},end:{line:412,column:48}},{start:{line:411,column:4},end:{line:412,column:48}}],line:411},"18":{loc:{start:{line:437,column:6},end:{line:438,column:21}},type:"if",locations:[{start:{line:437,column:6},end:{line:438,column:21}},{start:{line:437,column:6},end:{line:438,column:21}}],line:437},"19":{loc:{start:{line:492,column:4},end:{line:493,column:29}},type:"if",locations:[{start:{line:492,column:4},end:{line:493,column:29}},{start:{line:492,column:4},end:{line:493,column:29}}],line:492},"20":{loc:{start:{line:502,column:6},end:{line:503,column:32}},type:"if",locations:[{start:{line:502,column:6},end:{line:503,column:32}},{start:{line:502,column:6},end:{line:503,column:32}}],line:502},"21":{loc:{start:{line:556,column:4},end:{line:557,column:32}},type:"if",locations:[{start:{line:556,column:4},end:{line:557,column:32}},{start:{line:556,column:4},end:{line:557,column:32}}],line:556},"22":{loc:{start:{line:570,column:4},end:{line:571,column:37}},type:"if",locations:[{start:{line:570,column:4},end:{line:571,column:37}},{start:{line:570,column:4},end:{line:571,column:37}}],line:570},"23":{loc:{start:{line:597,column:6},end:{line:598,column:29}},type:"if",locations:[{start:{line:597,column:6},end:{line:598,column:29}},{start:{line:597,column:6},end:{line:598,column:29}}],line:597},"24":{loc:{start:{line:690,column:6},end:{line:691,column:41}},type:"if",locations:[{start:{line:690,column:6},end:{line:691,column:41}},{start:{line:690,column:6},end:{line:691,column:41}}],line:690},"25":{loc:{start:{line:712,column:6},end:{line:713,column:41}},type:"if",locations:[{start:{line:712,column:6},end:{line:713,column:41}},{start:{line:712,column:6},end:{line:713,column:41}}],line:712},"26":{loc:{start:{line:751,column:4},end:{line:752,column:32}},type:"if",locations:[{start:{line:751,column:4},end:{line:752,column:32}},{start:{line:751,column:4},end:{line:752,column:32}}],line:751},"27":{loc:{start:{line:765,column:4},end:{line:766,column:29}},type:"if",locations:[{start:{line:765,column:4},end:{line:766,column:29}},{start:{line:765,column:4},end:{line:766,column:29}}],line:765},"28":{loc:{start:{line:841,column:6},end:{line:842,column:14}},type:"if",locations:[{start:{line:841,column:6},end:{line:842,column:14}},{start:{line:841,column:6},end:{line:842,column:14}}],line:841},"29":{loc:{start:{line:910,column:6},end:{line:913,column:33}},type:"if",locations:[{start:{line:910,column:6},end:{line:913,column:33}},{start:{line:910,column:6},end:{line:913,column:33}}],line:910},"30":{loc:{start:{line:932,column:6},end:{line:935,column:30}},type:"if",locations:[{start:{line:932,column:6},end:{line:935,column:30}},{start:{line:932,column:6},end:{line:935,column:30}}],line:932}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a2adddf51b3ba990a0bc3e361b179e79998ad15d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_137xvemg64=function(){return actualCoverage;};}return actualCoverage;}cov_137xvemg64();const assert=(cov_137xvemg64().s[0]++,require('bsert'));const bio=(cov_137xvemg64().s[1]++,require('bufio'));const consensus=(cov_137xvemg64().s[2]++,require('../protocol/consensus'));const sha256=(cov_137xvemg64().s[3]++,require('bcrypto/lib/sha256'));const{siphash}=(cov_137xvemg64().s[4]++,require('bcrypto/lib/siphash'));const AbstractBlock=(cov_137xvemg64().s[5]++,require('../primitives/abstractblock'));const TX=(cov_137xvemg64().s[6]++,require('../primitives/tx'));const Headers=(cov_137xvemg64().s[7]++,require('../primitives/headers'));const Block=(cov_137xvemg64().s[8]++,require('../primitives/block'));const common=(cov_137xvemg64().s[9]++,require('./common'));const{encoding}=(cov_137xvemg64().s[10]++,bio);/**
 * Compact Block
 * Represents a compact block (bip152): `cmpctblock` packet.
 * @see https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki
 * @extends AbstractBlock
 * @property {Buffer|null} keyNonce - Nonce for siphash key.
 * @property {Number[]} ids - Short IDs.
 * @property {Object[]} ptx - Prefilled transactions.
 * @property {TX[]} available - Available transaction vector.
 * @property {Object} idMap - Map of short ids to indexes.
 * @property {Number} count - Transactions resolved.
 * @property {Buffer|null} sipKey - Siphash key.
 */class CompactBlock extends AbstractBlock{/**
   * Create a compact block.
   * @constructor
   * @param {Object?} options
   */constructor(options){cov_137xvemg64().f[0]++;cov_137xvemg64().s[11]++;super();cov_137xvemg64().s[12]++;this.keyNonce=null;cov_137xvemg64().s[13]++;this.ids=[];cov_137xvemg64().s[14]++;this.ptx=[];cov_137xvemg64().s[15]++;this.available=[];cov_137xvemg64().s[16]++;this.idMap=new Map();cov_137xvemg64().s[17]++;this.count=0;cov_137xvemg64().s[18]++;this.sipKey=null;cov_137xvemg64().s[19]++;this.totalTX=0;cov_137xvemg64().s[20]++;this.now=0;cov_137xvemg64().s[21]++;if(options){cov_137xvemg64().b[0][0]++;cov_137xvemg64().s[22]++;this.fromOptions(options);}else{cov_137xvemg64().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_137xvemg64().f[1]++;cov_137xvemg64().s[23]++;this.parseOptions(options);cov_137xvemg64().s[24]++;assert(Buffer.isBuffer(options.keyNonce));cov_137xvemg64().s[25]++;assert(Array.isArray(options.ids));cov_137xvemg64().s[26]++;assert(Array.isArray(options.ptx));cov_137xvemg64().s[27]++;this.keyNonce=options.keyNonce;cov_137xvemg64().s[28]++;this.ids=options.ids;cov_137xvemg64().s[29]++;this.ptx=options.ptx;cov_137xvemg64().s[30]++;if(options.available){cov_137xvemg64().b[1][0]++;cov_137xvemg64().s[31]++;this.available=options.available;}else{cov_137xvemg64().b[1][1]++;}cov_137xvemg64().s[32]++;if(options.idMap){cov_137xvemg64().b[2][0]++;cov_137xvemg64().s[33]++;this.idMap=options.idMap;}else{cov_137xvemg64().b[2][1]++;}cov_137xvemg64().s[34]++;if(options.count){cov_137xvemg64().b[3][0]++;cov_137xvemg64().s[35]++;this.count=options.count;}else{cov_137xvemg64().b[3][1]++;}cov_137xvemg64().s[36]++;if(options.totalTX!=null){cov_137xvemg64().b[4][0]++;cov_137xvemg64().s[37]++;this.totalTX=options.totalTX;}else{cov_137xvemg64().b[4][1]++;}cov_137xvemg64().s[38]++;this.sipKey=this.getKey();cov_137xvemg64().s[39]++;return this;}/**
   * Instantiate compact block from options.
   * @param {Object} options
   * @returns {CompactBlock}
   */static fromOptions(options){cov_137xvemg64().f[2]++;cov_137xvemg64().s[40]++;return new this().fromOptions(options);}/**
   * Verify the block.
   * @returns {Boolean}
   */verifyBody(){cov_137xvemg64().f[3]++;cov_137xvemg64().s[41]++;return true;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_137xvemg64().f[4]++;const br=(cov_137xvemg64().s[42]++,bio.read(data));cov_137xvemg64().s[43]++;this.readHead(br);cov_137xvemg64().s[44]++;this.keyNonce=br.readBytes(8);cov_137xvemg64().s[45]++;this.sipKey=this.getKey();const idCount=(cov_137xvemg64().s[46]++,br.readVarint());cov_137xvemg64().s[47]++;this.totalTX+=idCount;cov_137xvemg64().s[48]++;for(let i=(cov_137xvemg64().s[49]++,0);i<idCount;i++){const lo=(cov_137xvemg64().s[50]++,br.readU32());const hi=(cov_137xvemg64().s[51]++,br.readU16());cov_137xvemg64().s[52]++;this.ids.push(hi*0x100000000+lo);}const txCount=(cov_137xvemg64().s[53]++,br.readVarint());cov_137xvemg64().s[54]++;this.totalTX+=txCount;cov_137xvemg64().s[55]++;for(let i=(cov_137xvemg64().s[56]++,0);i<txCount;i++){const index=(cov_137xvemg64().s[57]++,br.readVarint());cov_137xvemg64().s[58]++;assert(index<=0xffff);cov_137xvemg64().s[59]++;assert(index<this.totalTX);const tx=(cov_137xvemg64().s[60]++,TX.fromReader(br));cov_137xvemg64().s[61]++;this.ptx.push([index,tx]);}cov_137xvemg64().s[62]++;return this;}/**
   * Instantiate a block from serialized data.
   * @param {Buffer} data
   * @param {String?} enc
   * @returns {CompactBlock}
   */static fromRaw(data,enc){cov_137xvemg64().f[5]++;cov_137xvemg64().s[63]++;if(typeof data==='string'){cov_137xvemg64().b[5][0]++;cov_137xvemg64().s[64]++;data=Buffer.from(data,enc);}else{cov_137xvemg64().b[5][1]++;}cov_137xvemg64().s[65]++;return new this().fromRaw(data);}/**
   * Serialize compact block with witness data.
   * @returns {Buffer}
   */toRaw(){cov_137xvemg64().f[6]++;cov_137xvemg64().s[66]++;return this.frameRaw(true);}/**
   * Serialize compact block without witness data.
   * @returns {Buffer}
   */toNormal(){cov_137xvemg64().f[7]++;cov_137xvemg64().s[67]++;return this.frameRaw(false);}/**
   * Write serialized block to a buffer
   * writer (includes witness data).
   * @param {BufferWriter} bw
   */toWriter(bw){cov_137xvemg64().f[8]++;cov_137xvemg64().s[68]++;return this.writeRaw(bw,true);}/**
   * Write serialized block to a buffer
   * writer (excludes witness data).
   * @param {BufferWriter} bw
   */toNormalWriter(bw){cov_137xvemg64().f[9]++;cov_137xvemg64().s[69]++;return this.writeRaw(bw,false);}/**
   * Serialize compact block.
   * @private
   * @param {Boolean} witness
   * @returns {Buffer}
   */frameRaw(witness){cov_137xvemg64().f[10]++;const size=(cov_137xvemg64().s[70]++,this.getSize(witness));cov_137xvemg64().s[71]++;return this.writeRaw(bio.write(size),witness).render();}/**
   * Calculate block serialization size.
   * @param {Boolean} witness
   * @returns {Number}
   */getSize(witness){cov_137xvemg64().f[11]++;let size=(cov_137xvemg64().s[72]++,0);cov_137xvemg64().s[73]++;size+=80;cov_137xvemg64().s[74]++;size+=8;cov_137xvemg64().s[75]++;size+=encoding.sizeVarint(this.ids.length);cov_137xvemg64().s[76]++;size+=this.ids.length*6;cov_137xvemg64().s[77]++;size+=encoding.sizeVarint(this.ptx.length);cov_137xvemg64().s[78]++;for(const[index,tx]of this.ptx){cov_137xvemg64().s[79]++;size+=encoding.sizeVarint(index);cov_137xvemg64().s[80]++;if(witness){cov_137xvemg64().b[6][0]++;cov_137xvemg64().s[81]++;size+=tx.getSize();}else{cov_137xvemg64().b[6][1]++;cov_137xvemg64().s[82]++;size+=tx.getBaseSize();}}cov_137xvemg64().s[83]++;return size;}/**
   * Serialize block to buffer writer.
   * @private
   * @param {BufferWriter} bw
   * @param {Boolean} witness
   */writeRaw(bw,witness){cov_137xvemg64().f[12]++;cov_137xvemg64().s[84]++;this.writeHead(bw);cov_137xvemg64().s[85]++;bw.writeBytes(this.keyNonce);cov_137xvemg64().s[86]++;bw.writeVarint(this.ids.length);cov_137xvemg64().s[87]++;for(const id of this.ids){const lo=(cov_137xvemg64().s[88]++,id%0x100000000);const hi=(cov_137xvemg64().s[89]++,(id-lo)/0x100000000);cov_137xvemg64().s[90]++;assert(hi<=0xffff);cov_137xvemg64().s[91]++;bw.writeU32(lo);cov_137xvemg64().s[92]++;bw.writeU16(hi);}cov_137xvemg64().s[93]++;bw.writeVarint(this.ptx.length);cov_137xvemg64().s[94]++;for(const[index,tx]of this.ptx){cov_137xvemg64().s[95]++;bw.writeVarint(index);cov_137xvemg64().s[96]++;if(witness){cov_137xvemg64().b[7][0]++;cov_137xvemg64().s[97]++;tx.toWriter(bw);}else{cov_137xvemg64().b[7][1]++;cov_137xvemg64().s[98]++;tx.toNormalWriter(bw);}}cov_137xvemg64().s[99]++;return bw;}/**
   * Convert block to a TXRequest
   * containing missing indexes.
   * @returns {TXRequest}
   */toRequest(){cov_137xvemg64().f[13]++;cov_137xvemg64().s[100]++;return TXRequest.fromCompact(this);}/**
   * Attempt to fill missing transactions from mempool.
   * @param {Boolean} witness
   * @param {Mempool} mempool
   * @returns {Boolean}
   */fillMempool(witness,mempool){cov_137xvemg64().f[14]++;cov_137xvemg64().s[101]++;if(this.count===this.totalTX){cov_137xvemg64().b[8][0]++;cov_137xvemg64().s[102]++;return true;}else{cov_137xvemg64().b[8][1]++;}const set=(cov_137xvemg64().s[103]++,new Set());cov_137xvemg64().s[104]++;for(const{tx}of mempool.map.values()){let hash=(cov_137xvemg64().s[105]++,tx.hash());cov_137xvemg64().s[106]++;if(witness){cov_137xvemg64().b[9][0]++;cov_137xvemg64().s[107]++;hash=tx.witnessHash();}else{cov_137xvemg64().b[9][1]++;}const id=(cov_137xvemg64().s[108]++,this.sid(hash));const index=(cov_137xvemg64().s[109]++,this.idMap.get(id));cov_137xvemg64().s[110]++;if(index==null){cov_137xvemg64().b[10][0]++;cov_137xvemg64().s[111]++;continue;}else{cov_137xvemg64().b[10][1]++;}cov_137xvemg64().s[112]++;if(set.has(index)){cov_137xvemg64().b[11][0]++;cov_137xvemg64().s[113]++;// Siphash collision, just request it.
this.available[index]=null;cov_137xvemg64().s[114]++;this.count-=1;cov_137xvemg64().s[115]++;continue;}else{cov_137xvemg64().b[11][1]++;}cov_137xvemg64().s[116]++;this.available[index]=tx;cov_137xvemg64().s[117]++;set.add(index);cov_137xvemg64().s[118]++;this.count+=1;// We actually may have a siphash collision
// here, but exit early anyway for perf.
cov_137xvemg64().s[119]++;if(this.count===this.totalTX){cov_137xvemg64().b[12][0]++;cov_137xvemg64().s[120]++;return true;}else{cov_137xvemg64().b[12][1]++;}}cov_137xvemg64().s[121]++;return false;}/**
   * Attempt to fill missing transactions from TXResponse.
   * @param {TXResponse} res
   * @returns {Boolean}
   */fillMissing(res){cov_137xvemg64().f[15]++;let offset=(cov_137xvemg64().s[122]++,0);cov_137xvemg64().s[123]++;for(let i=(cov_137xvemg64().s[124]++,0);i<this.available.length;i++){cov_137xvemg64().s[125]++;if(this.available[i]){cov_137xvemg64().b[13][0]++;cov_137xvemg64().s[126]++;continue;}else{cov_137xvemg64().b[13][1]++;}cov_137xvemg64().s[127]++;if(offset>=res.txs.length){cov_137xvemg64().b[14][0]++;cov_137xvemg64().s[128]++;return false;}else{cov_137xvemg64().b[14][1]++;}cov_137xvemg64().s[129]++;this.available[i]=res.txs[offset++];}cov_137xvemg64().s[130]++;return offset===res.txs.length;}/**
   * Calculate a transaction short ID.
   * @param {Hash} hash
   * @returns {Number}
   */sid(hash){cov_137xvemg64().f[16]++;const[hi,lo]=(cov_137xvemg64().s[131]++,siphash(hash,this.sipKey));cov_137xvemg64().s[132]++;return(hi&0xffff)*0x100000000+(lo>>>0);}/**
   * Test whether an index is available.
   * @param {Number} index
   * @returns {Boolean}
   */hasIndex(index){cov_137xvemg64().f[17]++;cov_137xvemg64().s[133]++;return this.available[index]!=null;}/**
   * Initialize the siphash key.
   * @private
   * @returns {Buffer}
   */getKey(){cov_137xvemg64().f[18]++;const data=(cov_137xvemg64().s[134]++,Buffer.concat([this.toHead(),this.keyNonce]));const hash=(cov_137xvemg64().s[135]++,sha256.digest(data));cov_137xvemg64().s[136]++;return hash.slice(0,16);}/**
   * Initialize compact block and short id map.
   * @private
   */init(){cov_137xvemg64().f[19]++;cov_137xvemg64().s[137]++;if(this.totalTX===0){cov_137xvemg64().b[15][0]++;cov_137xvemg64().s[138]++;throw new Error('Empty vectors.');}else{cov_137xvemg64().b[15][1]++;}cov_137xvemg64().s[139]++;if(this.totalTX>consensus.MAX_BLOCK_SIZE/10){cov_137xvemg64().b[16][0]++;cov_137xvemg64().s[140]++;throw new Error('Compact block too big.');}else{cov_137xvemg64().b[16][1]++;}// Custom limit to avoid a hashdos.
// Min valid tx size: (4 + 1 + 41 + 1 + 9 + 4) = 60
// Min block header size: 81
// Max number of transactions: (1000000 - 81) / 60 = 16665
cov_137xvemg64().s[141]++;if(this.totalTX>(consensus.MAX_BLOCK_SIZE-81)/60){cov_137xvemg64().b[17][0]++;cov_137xvemg64().s[142]++;throw new Error('Compact block too big.');}else{cov_137xvemg64().b[17][1]++;}// No sparse arrays here, v8.
cov_137xvemg64().s[143]++;for(let i=(cov_137xvemg64().s[144]++,0);i<this.totalTX;i++){cov_137xvemg64().s[145]++;this.available.push(null);}let last=(cov_137xvemg64().s[146]++,-1);let offset=(cov_137xvemg64().s[147]++,0);cov_137xvemg64().s[148]++;for(let i=(cov_137xvemg64().s[149]++,0);i<this.ptx.length;i++){const[index,tx]=(cov_137xvemg64().s[150]++,this.ptx[i]);cov_137xvemg64().s[151]++;last+=index+1;cov_137xvemg64().s[152]++;assert(last<=0xffff);cov_137xvemg64().s[153]++;assert(last<=this.ids.length+i);cov_137xvemg64().s[154]++;this.available[last]=tx;cov_137xvemg64().s[155]++;this.count+=1;}cov_137xvemg64().s[156]++;for(let i=(cov_137xvemg64().s[157]++,0);i<this.ids.length;i++){const id=(cov_137xvemg64().s[158]++,this.ids[i]);cov_137xvemg64().s[159]++;while(this.available[i+offset]){cov_137xvemg64().s[160]++;offset+=1;}// Fails on siphash collision.
cov_137xvemg64().s[161]++;if(this.idMap.has(id)){cov_137xvemg64().b[18][0]++;cov_137xvemg64().s[162]++;return false;}else{cov_137xvemg64().b[18][1]++;}cov_137xvemg64().s[163]++;this.idMap.set(id,i+offset);}cov_137xvemg64().s[164]++;return true;}/**
   * Convert completely filled compact
   * block to a regular block.
   * @returns {Block}
   */toBlock(){cov_137xvemg64().f[20]++;const block=(cov_137xvemg64().s[165]++,new Block());cov_137xvemg64().s[166]++;block.version=this.version;cov_137xvemg64().s[167]++;block.prevBlock=this.prevBlock;cov_137xvemg64().s[168]++;block.merkleRoot=this.merkleRoot;cov_137xvemg64().s[169]++;block.time=this.time;cov_137xvemg64().s[170]++;block.bits=this.bits;cov_137xvemg64().s[171]++;block.nonce=this.nonce;cov_137xvemg64().s[172]++;block._hash=this._hash;cov_137xvemg64().s[173]++;block._hhash=this._hhash;cov_137xvemg64().s[174]++;for(const tx of this.available){cov_137xvemg64().s[175]++;assert(tx,'Compact block is not full.');cov_137xvemg64().s[176]++;block.txs.push(tx);}cov_137xvemg64().s[177]++;return block;}/**
   * Inject properties from block.
   * @private
   * @param {Block} block
   * @param {Boolean} witness
   * @param {Buffer?} nonce
   * @returns {CompactBlock}
   */fromBlock(block,witness,nonce){cov_137xvemg64().f[21]++;cov_137xvemg64().s[178]++;this.version=block.version;cov_137xvemg64().s[179]++;this.prevBlock=block.prevBlock;cov_137xvemg64().s[180]++;this.merkleRoot=block.merkleRoot;cov_137xvemg64().s[181]++;this.time=block.time;cov_137xvemg64().s[182]++;this.bits=block.bits;cov_137xvemg64().s[183]++;this.nonce=block.nonce;cov_137xvemg64().s[184]++;this.totalTX=block.txs.length;cov_137xvemg64().s[185]++;this._hash=block._hash;cov_137xvemg64().s[186]++;this._hhash=block._hhash;cov_137xvemg64().s[187]++;if(!nonce){cov_137xvemg64().b[19][0]++;cov_137xvemg64().s[188]++;nonce=common.nonce();}else{cov_137xvemg64().b[19][1]++;}cov_137xvemg64().s[189]++;this.keyNonce=nonce;cov_137xvemg64().s[190]++;this.sipKey=this.getKey();cov_137xvemg64().s[191]++;for(let i=(cov_137xvemg64().s[192]++,1);i<block.txs.length;i++){const tx=(cov_137xvemg64().s[193]++,block.txs[i]);let hash=(cov_137xvemg64().s[194]++,tx.hash());cov_137xvemg64().s[195]++;if(witness){cov_137xvemg64().b[20][0]++;cov_137xvemg64().s[196]++;hash=tx.witnessHash();}else{cov_137xvemg64().b[20][1]++;}const id=(cov_137xvemg64().s[197]++,this.sid(hash));cov_137xvemg64().s[198]++;this.ids.push(id);}cov_137xvemg64().s[199]++;this.ptx.push([0,block.txs[0]]);cov_137xvemg64().s[200]++;return this;}/**
   * Instantiate compact block from a block.
   * @param {Block} block
   * @param {Boolean} witness
   * @param {Buffer?} nonce
   * @returns {CompactBlock}
   */static fromBlock(block,witness,nonce){cov_137xvemg64().f[22]++;cov_137xvemg64().s[201]++;return new this().fromBlock(block,witness,nonce);}/**
   * Convert block to headers.
   * @returns {Headers}
   */toHeaders(){cov_137xvemg64().f[23]++;cov_137xvemg64().s[202]++;return Headers.fromBlock(this);}}/**
 * TX Request
 * Represents a BlockTransactionsRequest (bip152): `getblocktxn` packet.
 * @see https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki
 * @property {Hash} hash
 * @property {Number[]} indexes
 */class TXRequest{/**
   * TX Request
   * @constructor
   * @param {Object?} options
   */constructor(options){cov_137xvemg64().f[24]++;cov_137xvemg64().s[203]++;this.hash=consensus.ZERO_HASH;cov_137xvemg64().s[204]++;this.indexes=[];cov_137xvemg64().s[205]++;if(options){cov_137xvemg64().b[21][0]++;cov_137xvemg64().s[206]++;this.fromOptions(options);}else{cov_137xvemg64().b[21][1]++;}}/**
   * Inject properties from options.
   * @private
   * @param {Object} options
   * @returns {TXRequest}
   */fromOptions(options){cov_137xvemg64().f[25]++;cov_137xvemg64().s[207]++;this.hash=options.hash;cov_137xvemg64().s[208]++;if(options.indexes){cov_137xvemg64().b[22][0]++;cov_137xvemg64().s[209]++;this.indexes=options.indexes;}else{cov_137xvemg64().b[22][1]++;}cov_137xvemg64().s[210]++;return this;}/**
   * Instantiate request from options.
   * @param {Object} options
   * @returns {TXRequest}
   */static fromOptions(options){cov_137xvemg64().f[26]++;cov_137xvemg64().s[211]++;return new this().fromOptions(options);}/**
   * Inject properties from compact block.
   * @private
   * @param {CompactBlock} block
   * @returns {TXRequest}
   */fromCompact(block){cov_137xvemg64().f[27]++;cov_137xvemg64().s[212]++;this.hash=block.hash();cov_137xvemg64().s[213]++;for(let i=(cov_137xvemg64().s[214]++,0);i<block.available.length;i++){cov_137xvemg64().s[215]++;if(!block.available[i]){cov_137xvemg64().b[23][0]++;cov_137xvemg64().s[216]++;this.indexes.push(i);}else{cov_137xvemg64().b[23][1]++;}}cov_137xvemg64().s[217]++;return this;}/**
   * Instantiate request from compact block.
   * @param {CompactBlock} block
   * @returns {TXRequest}
   */static fromCompact(block){cov_137xvemg64().f[28]++;cov_137xvemg64().s[218]++;return new this().fromCompact(block);}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   * @returns {TXRequest}
   */fromReader(br){cov_137xvemg64().f[29]++;cov_137xvemg64().s[219]++;this.hash=br.readHash();const count=(cov_137xvemg64().s[220]++,br.readVarint());cov_137xvemg64().s[221]++;for(let i=(cov_137xvemg64().s[222]++,0);i<count;i++){const index=(cov_137xvemg64().s[223]++,br.readVarint());cov_137xvemg64().s[224]++;assert(index<=0xffff);cov_137xvemg64().s[225]++;this.indexes.push(index);}let offset=(cov_137xvemg64().s[226]++,0);cov_137xvemg64().s[227]++;for(let i=(cov_137xvemg64().s[228]++,0);i<count;i++){let index=(cov_137xvemg64().s[229]++,this.indexes[i]);cov_137xvemg64().s[230]++;index+=offset;cov_137xvemg64().s[231]++;assert(index<=0xffff);cov_137xvemg64().s[232]++;this.indexes[i]=index;cov_137xvemg64().s[233]++;offset=index+1;}cov_137xvemg64().s[234]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @returns {TXRequest}
   */fromRaw(data){cov_137xvemg64().f[30]++;cov_137xvemg64().s[235]++;return this.fromReader(bio.read(data));}/**
   * Instantiate request from buffer reader.
   * @param {BufferReader} br
   * @returns {TXRequest}
   */static fromReader(br){cov_137xvemg64().f[31]++;cov_137xvemg64().s[236]++;return new this().fromReader(br);}/**
   * Instantiate request from serialized data.
   * @param {Buffer} data
   * @returns {TXRequest}
   */static fromRaw(data){cov_137xvemg64().f[32]++;cov_137xvemg64().s[237]++;return new this().fromRaw(data);}/**
   * Calculate request serialization size.
   * @returns {Number}
   */getSize(){cov_137xvemg64().f[33]++;let size=(cov_137xvemg64().s[238]++,0);cov_137xvemg64().s[239]++;size+=32;cov_137xvemg64().s[240]++;size+=encoding.sizeVarint(this.indexes.length);cov_137xvemg64().s[241]++;for(let i=(cov_137xvemg64().s[242]++,0);i<this.indexes.length;i++){let index=(cov_137xvemg64().s[243]++,this.indexes[i]);cov_137xvemg64().s[244]++;if(i>0){cov_137xvemg64().b[24][0]++;cov_137xvemg64().s[245]++;index-=this.indexes[i-1]+1;}else{cov_137xvemg64().b[24][1]++;}cov_137xvemg64().s[246]++;size+=encoding.sizeVarint(index);}cov_137xvemg64().s[247]++;return size;}/**
   * Write serialized request to buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_137xvemg64().f[34]++;cov_137xvemg64().s[248]++;bw.writeHash(this.hash);cov_137xvemg64().s[249]++;bw.writeVarint(this.indexes.length);cov_137xvemg64().s[250]++;for(let i=(cov_137xvemg64().s[251]++,0);i<this.indexes.length;i++){let index=(cov_137xvemg64().s[252]++,this.indexes[i]);cov_137xvemg64().s[253]++;if(i>0){cov_137xvemg64().b[25][0]++;cov_137xvemg64().s[254]++;index-=this.indexes[i-1]+1;}else{cov_137xvemg64().b[25][1]++;}cov_137xvemg64().s[255]++;bw.writeVarint(index);}cov_137xvemg64().s[256]++;return bw;}/**
   * Serialize request.
   * @returns {Buffer}
   */toRaw(){cov_137xvemg64().f[35]++;const size=(cov_137xvemg64().s[257]++,this.getSize());cov_137xvemg64().s[258]++;return this.toWriter(bio.write(size)).render();}}/**
 * TX Response
 * Represents BlockTransactions (bip152): `blocktxn` packet.
 * @see https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki
 * @property {Hash} hash
 * @property {TX[]} txs
 */class TXResponse{/**
   * Create a tx response.
   * @constructor
   * @param {Object?} options
   */constructor(options){cov_137xvemg64().f[36]++;cov_137xvemg64().s[259]++;this.hash=consensus.ZERO_HASH;cov_137xvemg64().s[260]++;this.txs=[];cov_137xvemg64().s[261]++;if(options){cov_137xvemg64().b[26][0]++;cov_137xvemg64().s[262]++;this.fromOptions(options);}else{cov_137xvemg64().b[26][1]++;}}/**
   * Inject properties from options.
   * @private
   * @param {Object} options
   * @returns {TXResponse}
   */fromOptions(options){cov_137xvemg64().f[37]++;cov_137xvemg64().s[263]++;this.hash=options.hash;cov_137xvemg64().s[264]++;if(options.txs){cov_137xvemg64().b[27][0]++;cov_137xvemg64().s[265]++;this.txs=options.txs;}else{cov_137xvemg64().b[27][1]++;}cov_137xvemg64().s[266]++;return this;}/**
   * Instantiate response from options.
   * @param {Object} options
   * @returns {TXResponse}
   */static fromOptions(options){cov_137xvemg64().f[38]++;cov_137xvemg64().s[267]++;return new this().fromOptions(options);}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   * @returns {TXResponse}
   */fromReader(br){cov_137xvemg64().f[39]++;cov_137xvemg64().s[268]++;this.hash=br.readHash();const count=(cov_137xvemg64().s[269]++,br.readVarint());cov_137xvemg64().s[270]++;for(let i=(cov_137xvemg64().s[271]++,0);i<count;i++){cov_137xvemg64().s[272]++;this.txs.push(TX.fromReader(br));}cov_137xvemg64().s[273]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @returns {TXResponse}
   */fromRaw(data){cov_137xvemg64().f[40]++;cov_137xvemg64().s[274]++;return this.fromReader(bio.read(data));}/**
   * Instantiate response from buffer reader.
   * @param {BufferReader} br
   * @returns {TXResponse}
   */static fromReader(br){cov_137xvemg64().f[41]++;cov_137xvemg64().s[275]++;return new this().fromReader(br);}/**
   * Instantiate response from serialized data.
   * @param {Buffer} data
   * @returns {TXResponse}
   */static fromRaw(data){cov_137xvemg64().f[42]++;cov_137xvemg64().s[276]++;return new this().fromRaw(data);}/**
   * Inject properties from block.
   * @private
   * @param {Block} block
   * @returns {TXResponse}
   */fromBlock(block,req){cov_137xvemg64().f[43]++;cov_137xvemg64().s[277]++;this.hash=req.hash;cov_137xvemg64().s[278]++;for(const index of req.indexes){cov_137xvemg64().s[279]++;if(index>=block.txs.length){cov_137xvemg64().b[28][0]++;cov_137xvemg64().s[280]++;break;}else{cov_137xvemg64().b[28][1]++;}cov_137xvemg64().s[281]++;this.txs.push(block.txs[index]);}cov_137xvemg64().s[282]++;return this;}/**
   * Instantiate response from block.
   * @param {Block} block
   * @returns {TXResponse}
   */static fromBlock(block,req){cov_137xvemg64().f[44]++;cov_137xvemg64().s[283]++;return new this().fromBlock(block,req);}/**
   * Serialize response with witness data.
   * @returns {Buffer}
   */toRaw(){cov_137xvemg64().f[45]++;cov_137xvemg64().s[284]++;return this.frameRaw(true);}/**
   * Serialize response without witness data.
   * @returns {Buffer}
   */toNormal(){cov_137xvemg64().f[46]++;cov_137xvemg64().s[285]++;return this.frameRaw(false);}/**
   * Write serialized response to a buffer
   * writer (includes witness data).
   * @param {BufferWriter} bw
   */toWriter(bw){cov_137xvemg64().f[47]++;cov_137xvemg64().s[286]++;return this.writeRaw(bw,true);}/**
   * Write serialized response to a buffer
   * writer (excludes witness data).
   * @param {BufferWriter} bw
   */toNormalWriter(bw){cov_137xvemg64().f[48]++;cov_137xvemg64().s[287]++;return this.writeRaw(bw,false);}/**
   * Calculate request serialization size.
   * @returns {Number}
   */getSize(witness){cov_137xvemg64().f[49]++;let size=(cov_137xvemg64().s[288]++,0);cov_137xvemg64().s[289]++;size+=32;cov_137xvemg64().s[290]++;size+=encoding.sizeVarint(this.txs.length);cov_137xvemg64().s[291]++;for(const tx of this.txs){cov_137xvemg64().s[292]++;if(witness){cov_137xvemg64().b[29][0]++;cov_137xvemg64().s[293]++;size+=tx.getSize();}else{cov_137xvemg64().b[29][1]++;cov_137xvemg64().s[294]++;size+=tx.getBaseSize();}}cov_137xvemg64().s[295]++;return size;}/**
   * Write serialized response to buffer writer.
   * @private
   * @param {BufferWriter} bw
   * @param {Boolean} witness
   */writeRaw(bw,witness){cov_137xvemg64().f[50]++;cov_137xvemg64().s[296]++;bw.writeHash(this.hash);cov_137xvemg64().s[297]++;bw.writeVarint(this.txs.length);cov_137xvemg64().s[298]++;for(const tx of this.txs){cov_137xvemg64().s[299]++;if(witness){cov_137xvemg64().b[30][0]++;cov_137xvemg64().s[300]++;tx.toWriter(bw);}else{cov_137xvemg64().b[30][1]++;cov_137xvemg64().s[301]++;tx.toNormalWriter(bw);}}cov_137xvemg64().s[302]++;return bw;}/**
   * Serialize response with witness data.
   * @private
   * @param {Boolean} witness
   * @returns {Buffer}
   */frameRaw(witness){cov_137xvemg64().f[51]++;const size=(cov_137xvemg64().s[303]++,this.getSize(witness));cov_137xvemg64().s[304]++;return this.writeRaw(bio.write(size),witness).render();}}/*
 * Expose
 */cov_137xvemg64().s[305]++;exports.CompactBlock=CompactBlock;cov_137xvemg64().s[306]++;exports.TXRequest=TXRequest;cov_137xvemg64().s[307]++;exports.TXResponse=TXResponse;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpcDE1Mi5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiYmlvIiwiY29uc2Vuc3VzIiwic2hhMjU2Iiwic2lwaGFzaCIsIkFic3RyYWN0QmxvY2siLCJUWCIsIkhlYWRlcnMiLCJCbG9jayIsImNvbW1vbiIsImVuY29kaW5nIiwiQ29tcGFjdEJsb2NrIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwia2V5Tm9uY2UiLCJpZHMiLCJwdHgiLCJhdmFpbGFibGUiLCJpZE1hcCIsIk1hcCIsImNvdW50Iiwic2lwS2V5IiwidG90YWxUWCIsIm5vdyIsImZyb21PcHRpb25zIiwicGFyc2VPcHRpb25zIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJBcnJheSIsImlzQXJyYXkiLCJnZXRLZXkiLCJ2ZXJpZnlCb2R5IiwiZnJvbVJhdyIsImRhdGEiLCJiciIsInJlYWQiLCJyZWFkSGVhZCIsInJlYWRCeXRlcyIsImlkQ291bnQiLCJyZWFkVmFyaW50IiwiaSIsImxvIiwicmVhZFUzMiIsImhpIiwicmVhZFUxNiIsInB1c2giLCJ0eENvdW50IiwiaW5kZXgiLCJ0eCIsImZyb21SZWFkZXIiLCJlbmMiLCJmcm9tIiwidG9SYXciLCJmcmFtZVJhdyIsInRvTm9ybWFsIiwidG9Xcml0ZXIiLCJidyIsIndyaXRlUmF3IiwidG9Ob3JtYWxXcml0ZXIiLCJ3aXRuZXNzIiwic2l6ZSIsImdldFNpemUiLCJ3cml0ZSIsInJlbmRlciIsInNpemVWYXJpbnQiLCJsZW5ndGgiLCJnZXRCYXNlU2l6ZSIsIndyaXRlSGVhZCIsIndyaXRlQnl0ZXMiLCJ3cml0ZVZhcmludCIsImlkIiwid3JpdGVVMzIiLCJ3cml0ZVUxNiIsInRvUmVxdWVzdCIsIlRYUmVxdWVzdCIsImZyb21Db21wYWN0IiwiZmlsbE1lbXBvb2wiLCJtZW1wb29sIiwic2V0IiwiU2V0IiwibWFwIiwidmFsdWVzIiwiaGFzaCIsIndpdG5lc3NIYXNoIiwic2lkIiwiZ2V0IiwiaGFzIiwiYWRkIiwiZmlsbE1pc3NpbmciLCJyZXMiLCJvZmZzZXQiLCJ0eHMiLCJoYXNJbmRleCIsImNvbmNhdCIsInRvSGVhZCIsImRpZ2VzdCIsInNsaWNlIiwiaW5pdCIsIkVycm9yIiwiTUFYX0JMT0NLX1NJWkUiLCJsYXN0IiwidG9CbG9jayIsImJsb2NrIiwidmVyc2lvbiIsInByZXZCbG9jayIsIm1lcmtsZVJvb3QiLCJ0aW1lIiwiYml0cyIsIm5vbmNlIiwiX2hhc2giLCJfaGhhc2giLCJmcm9tQmxvY2siLCJ0b0hlYWRlcnMiLCJaRVJPX0hBU0giLCJpbmRleGVzIiwicmVhZEhhc2giLCJ3cml0ZUhhc2giLCJUWFJlc3BvbnNlIiwicmVxIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUVBLGFBRUE7QUFDQTtBQUNBLEcscTNsQ0FLWTsyRkFIWixLQUFNQSxDQUFBQSxNQUFNLDBCQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFWLENBQVosQ0FDQSxLQUFNQyxDQUFBQSxHQUFHLDBCQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFWLENBQVQsQ0FDQSxLQUFNRSxDQUFBQSxTQUFTLDBCQUFHRixPQUFPLENBQUMsdUJBQUQsQ0FBVixDQUFmLENBQ0EsS0FBTUcsQ0FBQUEsTUFBTSwwQkFBR0gsT0FBTyxDQUFDLG9CQUFELENBQVYsQ0FBWixDQUNBLEtBQU0sQ0FBQ0ksT0FBRCwyQkFBWUosT0FBTyxDQUFDLHFCQUFELENBQW5CLENBQU4sQ0FDQSxLQUFNSyxDQUFBQSxhQUFhLDBCQUFHTCxPQUFPLENBQUMsNkJBQUQsQ0FBVixDQUFuQixDQUNBLEtBQU1NLENBQUFBLEVBQUUsMEJBQUdOLE9BQU8sQ0FBQyxrQkFBRCxDQUFWLENBQVIsQ0FDQSxLQUFNTyxDQUFBQSxPQUFPLDBCQUFHUCxPQUFPLENBQUMsdUJBQUQsQ0FBVixDQUFiLENBQ0EsS0FBTVEsQ0FBQUEsS0FBSywwQkFBR1IsT0FBTyxDQUFDLHFCQUFELENBQVYsQ0FBWCxDQUNBLEtBQU1TLENBQUFBLE1BQU0sMEJBQUdULE9BQU8sQ0FB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S0FBTUMsQ0FBQUEsSUFBSSw0QkFBRyxLQUFLQyxPQUFMLENBQWFGLE9BQWIsQ0FBSCxDQUFWLENBRGdCLDBCQUVoQixNQUFPLE1BQUtGLFFBQUwsQ0FBY3hELEdBQUcsQ0FBQzZELEtBQUosQ0FBVUYsSUFBVixDQUFkLENBQStCRCxPQUEvQixFQUF3Q0ksTUFBeEMsRUFBUCxDQUNELENBbk5jLENBc05qQjtBQUNBO0FBQ0EsRywwQkFFQXdELE9BQU8sQ0FBQzVHLFlBQVIsQ0FBdUJBLFlBQXZCLEMsMEJBQ0E0RyxPQUFPLENBQUM3QyxTQUFSLENBQW9CQSxTQUFwQixDLDBCQUNBNkMsT0FBTyxDQUFDRixVQUFSLENBQXFCQSxVQUFyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBiaXAxNTIuanMgLSBjb21wYWN0IGJsb2NrIG9iamVjdCBmb3IgYmNvaW5cclxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIENocmlzdG9waGVyIEplZmZyZXkgKE1JVCBMaWNlbnNlKS5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2Jjb2luLW9yZy9iY29pblxyXG4gKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAbW9kdWxlIG5ldC9iaXAxNTJcclxuICovXHJcblxyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdic2VydCcpO1xyXG5jb25zdCBiaW8gPSByZXF1aXJlKCdidWZpbycpO1xyXG5jb25zdCBjb25zZW5zdXMgPSByZXF1aXJlKCcuLi9wcm90b2NvbC9jb25zZW5zdXMnKTtcclxuY29uc3Qgc2hhMjU2ID0gcmVxdWlyZSgnYmNyeXB0by9saWIvc2hhMjU2Jyk7XHJcbmNvbnN0IHtzaXBoYXNofSA9IHJlcXVpcmUoJ2JjcnlwdG8vbGliL3NpcGhhc2gnKTtcclxuY29uc3QgQWJzdHJhY3RCbG9jayA9IHJlcXVpcmUoJy4uL3ByaW1pdGl2ZXMvYWJzdHJhY3RibG9jaycpO1xyXG5jb25zdCBUWCA9IHJlcXVpcmUoJy4uL3ByaW1pdGl2ZXMvdHgnKTtcclxuY29uc3QgSGVhZGVycyA9IHJlcXVpcmUoJy4uL3ByaW1pdGl2ZXMvaGVhZGVycycpO1xyXG5jb25zdCBCbG9jayA9IHJlcXVpcmUoJy4uL3ByaW1pdGl2ZXMvYmxvY2snKTtcclxuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcclxuY29uc3Qge2VuY29kaW5nfSA9IGJpbztcclxuXHJcbi8qKlxyXG4gKiBDb21wYWN0IEJsb2NrXHJcbiAqIFJlcHJlc2VudHMgYSBjb21wYWN0IGJsb2NrIChiaXAxNTIpOiBgY21wY3RibG9ja2AgcGFja2V0LlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAxNTIubWVkaWF3aWtpXHJcbiAqIEBleHRlbmRzIEFic3RyYWN0QmxvY2tcclxuICogQHByb3BlcnR5IHtCdWZmZXJ8bnVsbH0ga2V5Tm9uY2UgLSBOb25jZSBmb3Igc2lwaGFzaCBrZXkuXHJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyW119IGlkcyAtIFNob3J0IElEcy5cclxuICogQHByb3BlcnR5IHtPYmplY3RbXX0gcHR4IC0gUHJlZmlsbGVkIHRyYW5zYWN0aW9ucy5cclxuICogQHByb3BlcnR5IHtUWFtdfSBhdmFpbGFibGUgLSBBdmFpbGFibGUgdHJhbnNhY3Rpb24gdmVjdG9yLlxyXG4gKiBAcHJvcGVydHkge09iamVjdH0gaWRNYXAgLSBNYXAgb2Ygc2hvcnQgaWRzIHRvIGluZGV4ZXMuXHJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBjb3VudCAtIFRyYW5zYWN0aW9ucyByZXNvbHZlZC5cclxuICogQHByb3BlcnR5IHtCdWZmZXJ8bnVsbH0gc2lwS2V5IC0gU2lwaGFzaCBrZXkuXHJcbiAqL1xyXG5cclxuY2xhc3MgQ29tcGFjdEJsb2NrIGV4dGVuZHMgQWJzdHJhY3RCbG9jayB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgY29tcGFjdCBibG9jay5cclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKiBAcGFyYW0ge09iamVjdD99IG9wdGlvbnNcclxuICAgKi9cclxuXHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLmtleU5vbmNlID0gbnVsbDtcclxuICAgIHRoaXMuaWRzID0gW107XHJcbiAgICB0aGlzLnB0eCA9IFtdO1xyXG5cclxuICAgIHRoaXMuYXZhaWxhYmxlID0gW107XHJcbiAgICB0aGlzLmlkTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5jb3VudCA9IDA7XHJcbiAgICB0aGlzLnNpcEtleSA9IG51bGw7XHJcbiAgICB0aGlzLnRvdGFsVFggPSAwO1xyXG4gICAgdGhpcy5ub3cgPSAwO1xyXG5cclxuICAgIGlmIChvcHRpb25zKVxyXG4gICAgICB0aGlzLmZyb21PcHRpb25zKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5qZWN0IHByb3BlcnRpZXMgZnJvbSBvcHRpb25zIG9iamVjdC5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAgICovXHJcblxyXG4gIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIHRoaXMucGFyc2VPcHRpb25zKG9wdGlvbnMpO1xyXG5cclxuICAgIGFzc2VydChCdWZmZXIuaXNCdWZmZXIob3B0aW9ucy5rZXlOb25jZSkpO1xyXG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkob3B0aW9ucy5pZHMpKTtcclxuICAgIGFzc2VydChBcnJheS5pc0FycmF5KG9wdGlvbnMucHR4KSk7XHJcblxyXG4gICAgdGhpcy5rZXlOb25jZSA9IG9wdGlvbnMua2V5Tm9uY2U7XHJcbiAgICB0aGlzLmlkcyA9IG9wdGlvbnMuaWRzO1xyXG4gICAgdGhpcy5wdHggPSBvcHRpb25zLnB0eDtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5hdmFpbGFibGUpXHJcbiAgICAgIHRoaXMuYXZhaWxhYmxlID0gb3B0aW9ucy5hdmFpbGFibGU7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuaWRNYXApXHJcbiAgICAgIHRoaXMuaWRNYXAgPSBvcHRpb25zLmlkTWFwO1xyXG5cclxuICAgIGlmIChvcHRpb25zLmNvdW50KVxyXG4gICAgICB0aGlzLmNvdW50ID0gb3B0aW9ucy5jb3VudDtcclxuXHJcbiAgICBpZiAob3B0aW9ucy50b3RhbFRYICE9IG51bGwpXHJcbiAgICAgIHRoaXMudG90YWxUWCA9IG9wdGlvbnMudG90YWxUWDtcclxuXHJcbiAgICB0aGlzLnNpcEtleSA9IHRoaXMuZ2V0S2V5KCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnN0YW50aWF0ZSBjb21wYWN0IGJsb2NrIGZyb20gb3B0aW9ucy5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAqIEByZXR1cm5zIHtDb21wYWN0QmxvY2t9XHJcbiAgICovXHJcblxyXG4gIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tT3B0aW9ucyhvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmeSB0aGUgYmxvY2suXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICovXHJcblxyXG4gIHZlcmlmeUJvZHkoKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluamVjdCBwcm9wZXJ0aWVzIGZyb20gc2VyaWFsaXplZCBkYXRhLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGFcclxuICAgKi9cclxuXHJcbiAgZnJvbVJhdyhkYXRhKSB7XHJcbiAgICBjb25zdCBiciA9IGJpby5yZWFkKGRhdGEpO1xyXG5cclxuICAgIHRoaXMucmVhZEhlYWQoYnIpO1xyXG5cclxuICAgIHRoaXMua2V5Tm9uY2UgPSBici5yZWFkQnl0ZXMoOCk7XHJcbiAgICB0aGlzLnNpcEtleSA9IHRoaXMuZ2V0S2V5KCk7XHJcblxyXG4gICAgY29uc3QgaWRDb3VudCA9IGJyLnJlYWRWYXJpbnQoKTtcclxuXHJcbiAgICB0aGlzLnRvdGFsVFggKz0gaWRDb3VudDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkQ291bnQ7IGkrKykge1xyXG4gICAgICBjb25zdCBsbyA9IGJyLnJlYWRVMzIoKTtcclxuICAgICAgY29uc3QgaGkgPSBici5yZWFkVTE2KCk7XHJcbiAgICAgIHRoaXMuaWRzLnB1c2goaGkgKiAweDEwMDAwMDAwMCArIGxvKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0eENvdW50ID0gYnIucmVhZFZhcmludCgpO1xyXG5cclxuICAgIHRoaXMudG90YWxUWCArPSB0eENvdW50O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHhDb3VudDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gYnIucmVhZFZhcmludCgpO1xyXG5cclxuICAgICAgYXNzZXJ0KGluZGV4IDw9IDB4ZmZmZik7XHJcbiAgICAgIGFzc2VydChpbmRleCA8IHRoaXMudG90YWxUWCk7XHJcblxyXG4gICAgICBjb25zdCB0eCA9IFRYLmZyb21SZWFkZXIoYnIpO1xyXG5cclxuICAgICAgdGhpcy5wdHgucHVzaChbaW5kZXgsIHR4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnN0YW50aWF0ZSBhIGJsb2NrIGZyb20gc2VyaWFsaXplZCBkYXRhLlxyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhXHJcbiAgICogQHBhcmFtIHtTdHJpbmc/fSBlbmNcclxuICAgKiBAcmV0dXJucyB7Q29tcGFjdEJsb2NrfVxyXG4gICAqL1xyXG5cclxuICBzdGF0aWMgZnJvbVJhdyhkYXRhLCBlbmMpIHtcclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpXHJcbiAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmMpO1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVJhdyhkYXRhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlcmlhbGl6ZSBjb21wYWN0IGJsb2NrIHdpdGggd2l0bmVzcyBkYXRhLlxyXG4gICAqIEByZXR1cm5zIHtCdWZmZXJ9XHJcbiAgICovXHJcblxyXG4gIHRvUmF3KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVSYXcodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXJpYWxpemUgY29tcGFjdCBibG9jayB3aXRob3V0IHdpdG5lc3MgZGF0YS5cclxuICAgKiBAcmV0dXJucyB7QnVmZmVyfVxyXG4gICAqL1xyXG5cclxuICB0b05vcm1hbCgpIHtcclxuICAgIHJldHVybiB0aGlzLmZyYW1lUmF3KGZhbHNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdyaXRlIHNlcmlhbGl6ZWQgYmxvY2sgdG8gYSBidWZmZXJcclxuICAgKiB3cml0ZXIgKGluY2x1ZGVzIHdpdG5lc3MgZGF0YSkuXHJcbiAgICogQHBhcmFtIHtCdWZmZXJXcml0ZXJ9IGJ3XHJcbiAgICovXHJcblxyXG4gIHRvV3JpdGVyKGJ3KSB7XHJcbiAgICByZXR1cm4gdGhpcy53cml0ZVJhdyhidywgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXcml0ZSBzZXJpYWxpemVkIGJsb2NrIHRvIGEgYnVmZmVyXHJcbiAgICogd3JpdGVyIChleGNsdWRlcyB3aXRuZXNzIGRhdGEpLlxyXG4gICAqIEBwYXJhbSB7QnVmZmVyV3JpdGVyfSBid1xyXG4gICAqL1xyXG5cclxuICB0b05vcm1hbFdyaXRlcihidykge1xyXG4gICAgcmV0dXJuIHRoaXMud3JpdGVSYXcoYncsIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlcmlhbGl6ZSBjb21wYWN0IGJsb2NrLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSB3aXRuZXNzXHJcbiAgICogQHJldHVybnMge0J1ZmZlcn1cclxuICAgKi9cclxuXHJcbiAgZnJhbWVSYXcod2l0bmVzcykge1xyXG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSh3aXRuZXNzKTtcclxuICAgIHJldHVybiB0aGlzLndyaXRlUmF3KGJpby53cml0ZShzaXplKSwgd2l0bmVzcykucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhdGUgYmxvY2sgc2VyaWFsaXphdGlvbiBzaXplLlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gd2l0bmVzc1xyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICovXHJcblxyXG4gIGdldFNpemUod2l0bmVzcykge1xyXG4gICAgbGV0IHNpemUgPSAwO1xyXG5cclxuICAgIHNpemUgKz0gODA7XHJcbiAgICBzaXplICs9IDg7XHJcbiAgICBzaXplICs9IGVuY29kaW5nLnNpemVWYXJpbnQodGhpcy5pZHMubGVuZ3RoKTtcclxuICAgIHNpemUgKz0gdGhpcy5pZHMubGVuZ3RoICogNjtcclxuICAgIHNpemUgKz0gZW5jb2Rpbmcuc2l6ZVZhcmludCh0aGlzLnB0eC5sZW5ndGgpO1xyXG5cclxuICAgIGZvciAoY29uc3QgW2luZGV4LCB0eF0gb2YgdGhpcy5wdHgpIHtcclxuICAgICAgc2l6ZSArPSBlbmNvZGluZy5zaXplVmFyaW50KGluZGV4KTtcclxuXHJcbiAgICAgIGlmICh3aXRuZXNzKVxyXG4gICAgICAgIHNpemUgKz0gdHguZ2V0U2l6ZSgpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgc2l6ZSArPSB0eC5nZXRCYXNlU2l6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaXplO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VyaWFsaXplIGJsb2NrIHRvIGJ1ZmZlciB3cml0ZXIuXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge0J1ZmZlcldyaXRlcn0gYndcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdpdG5lc3NcclxuICAgKi9cclxuXHJcbiAgd3JpdGVSYXcoYncsIHdpdG5lc3MpIHtcclxuICAgIHRoaXMud3JpdGVIZWFkKGJ3KTtcclxuXHJcbiAgICBidy53cml0ZUJ5dGVzKHRoaXMua2V5Tm9uY2UpO1xyXG5cclxuICAgIGJ3LndyaXRlVmFyaW50KHRoaXMuaWRzLmxlbmd0aCk7XHJcblxyXG4gICAgZm9yIChjb25zdCBpZCBvZiB0aGlzLmlkcykge1xyXG4gICAgICBjb25zdCBsbyA9IGlkICUgMHgxMDAwMDAwMDA7XHJcbiAgICAgIGNvbnN0IGhpID0gKGlkIC0gbG8pIC8gMHgxMDAwMDAwMDA7XHJcbiAgICAgIGFzc2VydChoaSA8PSAweGZmZmYpO1xyXG4gICAgICBidy53cml0ZVUzMihsbyk7XHJcbiAgICAgIGJ3LndyaXRlVTE2KGhpKTtcclxuICAgIH1cclxuXHJcbiAgICBidy53cml0ZVZhcmludCh0aGlzLnB0eC5sZW5ndGgpO1xyXG5cclxuICAgIGZvciAoY29uc3QgW2luZGV4LCB0eF0gb2YgdGhpcy5wdHgpIHtcclxuICAgICAgYncud3JpdGVWYXJpbnQoaW5kZXgpO1xyXG5cclxuICAgICAgaWYgKHdpdG5lc3MpXHJcbiAgICAgICAgdHgudG9Xcml0ZXIoYncpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgdHgudG9Ob3JtYWxXcml0ZXIoYncpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBidztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnQgYmxvY2sgdG8gYSBUWFJlcXVlc3RcclxuICAgKiBjb250YWluaW5nIG1pc3NpbmcgaW5kZXhlcy5cclxuICAgKiBAcmV0dXJucyB7VFhSZXF1ZXN0fVxyXG4gICAqL1xyXG5cclxuICB0b1JlcXVlc3QoKSB7XHJcbiAgICByZXR1cm4gVFhSZXF1ZXN0LmZyb21Db21wYWN0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXR0ZW1wdCB0byBmaWxsIG1pc3NpbmcgdHJhbnNhY3Rpb25zIGZyb20gbWVtcG9vbC5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdpdG5lc3NcclxuICAgKiBAcGFyYW0ge01lbXBvb2x9IG1lbXBvb2xcclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgKi9cclxuXHJcbiAgZmlsbE1lbXBvb2wod2l0bmVzcywgbWVtcG9vbCkge1xyXG4gICAgaWYgKHRoaXMuY291bnQgPT09IHRoaXMudG90YWxUWClcclxuICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xyXG5cclxuICAgIGZvciAoY29uc3Qge3R4fSBvZiBtZW1wb29sLm1hcC52YWx1ZXMoKSkge1xyXG4gICAgICBsZXQgaGFzaCA9IHR4Lmhhc2goKTtcclxuXHJcbiAgICAgIGlmICh3aXRuZXNzKVxyXG4gICAgICAgIGhhc2ggPSB0eC53aXRuZXNzSGFzaCgpO1xyXG5cclxuICAgICAgY29uc3QgaWQgPSB0aGlzLnNpZChoYXNoKTtcclxuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmlkTWFwLmdldChpZCk7XHJcblxyXG4gICAgICBpZiAoaW5kZXggPT0gbnVsbClcclxuICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgIGlmIChzZXQuaGFzKGluZGV4KSkge1xyXG4gICAgICAgIC8vIFNpcGhhc2ggY29sbGlzaW9uLCBqdXN0IHJlcXVlc3QgaXQuXHJcbiAgICAgICAgdGhpcy5hdmFpbGFibGVbaW5kZXhdID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvdW50IC09IDE7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYXZhaWxhYmxlW2luZGV4XSA9IHR4O1xyXG4gICAgICBzZXQuYWRkKGluZGV4KTtcclxuICAgICAgdGhpcy5jb3VudCArPSAxO1xyXG5cclxuICAgICAgLy8gV2UgYWN0dWFsbHkgbWF5IGhhdmUgYSBzaXBoYXNoIGNvbGxpc2lvblxyXG4gICAgICAvLyBoZXJlLCBidXQgZXhpdCBlYXJseSBhbnl3YXkgZm9yIHBlcmYuXHJcbiAgICAgIGlmICh0aGlzLmNvdW50ID09PSB0aGlzLnRvdGFsVFgpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXR0ZW1wdCB0byBmaWxsIG1pc3NpbmcgdHJhbnNhY3Rpb25zIGZyb20gVFhSZXNwb25zZS5cclxuICAgKiBAcGFyYW0ge1RYUmVzcG9uc2V9IHJlc1xyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAqL1xyXG5cclxuICBmaWxsTWlzc2luZyhyZXMpIHtcclxuICAgIGxldCBvZmZzZXQgPSAwO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hdmFpbGFibGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMuYXZhaWxhYmxlW2ldKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgaWYgKG9mZnNldCA+PSByZXMudHhzLmxlbmd0aClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLmF2YWlsYWJsZVtpXSA9IHJlcy50eHNbb2Zmc2V0KytdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvZmZzZXQgPT09IHJlcy50eHMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlIGEgdHJhbnNhY3Rpb24gc2hvcnQgSUQuXHJcbiAgICogQHBhcmFtIHtIYXNofSBoYXNoXHJcbiAgICogQHJldHVybnMge051bWJlcn1cclxuICAgKi9cclxuXHJcbiAgc2lkKGhhc2gpIHtcclxuICAgIGNvbnN0IFtoaSwgbG9dID0gc2lwaGFzaChoYXNoLCB0aGlzLnNpcEtleSk7XHJcbiAgICByZXR1cm4gKGhpICYgMHhmZmZmKSAqIDB4MTAwMDAwMDAwICsgKGxvID4+PiAwKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRlc3Qgd2hldGhlciBhbiBpbmRleCBpcyBhdmFpbGFibGUuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICovXHJcblxyXG4gIGhhc0luZGV4KGluZGV4KSB7XHJcbiAgICByZXR1cm4gdGhpcy5hdmFpbGFibGVbaW5kZXhdICE9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBzaXBoYXNoIGtleS5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEByZXR1cm5zIHtCdWZmZXJ9XHJcbiAgICovXHJcblxyXG4gIGdldEtleSgpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBCdWZmZXIuY29uY2F0KFt0aGlzLnRvSGVhZCgpLCB0aGlzLmtleU5vbmNlXSk7XHJcbiAgICBjb25zdCBoYXNoID0gc2hhMjU2LmRpZ2VzdChkYXRhKTtcclxuICAgIHJldHVybiBoYXNoLnNsaWNlKDAsIDE2KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgY29tcGFjdCBibG9jayBhbmQgc2hvcnQgaWQgbWFwLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICBpZiAodGhpcy50b3RhbFRYID09PSAwKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VtcHR5IHZlY3RvcnMuJyk7XHJcblxyXG4gICAgaWYgKHRoaXMudG90YWxUWCA+IGNvbnNlbnN1cy5NQVhfQkxPQ0tfU0laRSAvIDEwKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBhY3QgYmxvY2sgdG9vIGJpZy4nKTtcclxuXHJcbiAgICAvLyBDdXN0b20gbGltaXQgdG8gYXZvaWQgYSBoYXNoZG9zLlxyXG4gICAgLy8gTWluIHZhbGlkIHR4IHNpemU6ICg0ICsgMSArIDQxICsgMSArIDkgKyA0KSA9IDYwXHJcbiAgICAvLyBNaW4gYmxvY2sgaGVhZGVyIHNpemU6IDgxXHJcbiAgICAvLyBNYXggbnVtYmVyIG9mIHRyYW5zYWN0aW9uczogKDEwMDAwMDAgLSA4MSkgLyA2MCA9IDE2NjY1XHJcbiAgICBpZiAodGhpcy50b3RhbFRYID4gKGNvbnNlbnN1cy5NQVhfQkxPQ0tfU0laRSAtIDgxKSAvIDYwKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBhY3QgYmxvY2sgdG9vIGJpZy4nKTtcclxuXHJcbiAgICAvLyBObyBzcGFyc2UgYXJyYXlzIGhlcmUsIHY4LlxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRvdGFsVFg7IGkrKylcclxuICAgICAgdGhpcy5hdmFpbGFibGUucHVzaChudWxsKTtcclxuXHJcbiAgICBsZXQgbGFzdCA9IC0xO1xyXG4gICAgbGV0IG9mZnNldCA9IDA7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnB0eC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBbaW5kZXgsIHR4XSA9IHRoaXMucHR4W2ldO1xyXG4gICAgICBsYXN0ICs9IGluZGV4ICsgMTtcclxuICAgICAgYXNzZXJ0KGxhc3QgPD0gMHhmZmZmKTtcclxuICAgICAgYXNzZXJ0KGxhc3QgPD0gdGhpcy5pZHMubGVuZ3RoICsgaSk7XHJcbiAgICAgIHRoaXMuYXZhaWxhYmxlW2xhc3RdID0gdHg7XHJcbiAgICAgIHRoaXMuY291bnQgKz0gMTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGlkID0gdGhpcy5pZHNbaV07XHJcblxyXG4gICAgICB3aGlsZSAodGhpcy5hdmFpbGFibGVbaSArIG9mZnNldF0pXHJcbiAgICAgICAgb2Zmc2V0ICs9IDE7XHJcblxyXG4gICAgICAvLyBGYWlscyBvbiBzaXBoYXNoIGNvbGxpc2lvbi5cclxuICAgICAgaWYgKHRoaXMuaWRNYXAuaGFzKGlkKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLmlkTWFwLnNldChpZCwgaSArIG9mZnNldCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0IGNvbXBsZXRlbHkgZmlsbGVkIGNvbXBhY3RcclxuICAgKiBibG9jayB0byBhIHJlZ3VsYXIgYmxvY2suXHJcbiAgICogQHJldHVybnMge0Jsb2NrfVxyXG4gICAqL1xyXG5cclxuICB0b0Jsb2NrKCkge1xyXG4gICAgY29uc3QgYmxvY2sgPSBuZXcgQmxvY2soKTtcclxuXHJcbiAgICBibG9jay52ZXJzaW9uID0gdGhpcy52ZXJzaW9uO1xyXG4gICAgYmxvY2sucHJldkJsb2NrID0gdGhpcy5wcmV2QmxvY2s7XHJcbiAgICBibG9jay5tZXJrbGVSb290ID0gdGhpcy5tZXJrbGVSb290O1xyXG4gICAgYmxvY2sudGltZSA9IHRoaXMudGltZTtcclxuICAgIGJsb2NrLmJpdHMgPSB0aGlzLmJpdHM7XHJcbiAgICBibG9jay5ub25jZSA9IHRoaXMubm9uY2U7XHJcbiAgICBibG9jay5faGFzaCA9IHRoaXMuX2hhc2g7XHJcbiAgICBibG9jay5faGhhc2ggPSB0aGlzLl9oaGFzaDtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHR4IG9mIHRoaXMuYXZhaWxhYmxlKSB7XHJcbiAgICAgIGFzc2VydCh0eCwgJ0NvbXBhY3QgYmxvY2sgaXMgbm90IGZ1bGwuJyk7XHJcbiAgICAgIGJsb2NrLnR4cy5wdXNoKHR4KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmplY3QgcHJvcGVydGllcyBmcm9tIGJsb2NrLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2tcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdpdG5lc3NcclxuICAgKiBAcGFyYW0ge0J1ZmZlcj99IG5vbmNlXHJcbiAgICogQHJldHVybnMge0NvbXBhY3RCbG9ja31cclxuICAgKi9cclxuXHJcbiAgZnJvbUJsb2NrKGJsb2NrLCB3aXRuZXNzLCBub25jZSkge1xyXG4gICAgdGhpcy52ZXJzaW9uID0gYmxvY2sudmVyc2lvbjtcclxuICAgIHRoaXMucHJldkJsb2NrID0gYmxvY2sucHJldkJsb2NrO1xyXG4gICAgdGhpcy5tZXJrbGVSb290ID0gYmxvY2subWVya2xlUm9vdDtcclxuICAgIHRoaXMudGltZSA9IGJsb2NrLnRpbWU7XHJcbiAgICB0aGlzLmJpdHMgPSBibG9jay5iaXRzO1xyXG4gICAgdGhpcy5ub25jZSA9IGJsb2NrLm5vbmNlO1xyXG4gICAgdGhpcy50b3RhbFRYID0gYmxvY2sudHhzLmxlbmd0aDtcclxuICAgIHRoaXMuX2hhc2ggPSBibG9jay5faGFzaDtcclxuICAgIHRoaXMuX2hoYXNoID0gYmxvY2suX2hoYXNoO1xyXG5cclxuICAgIGlmICghbm9uY2UpXHJcbiAgICAgIG5vbmNlID0gY29tbW9uLm5vbmNlKCk7XHJcblxyXG4gICAgdGhpcy5rZXlOb25jZSA9IG5vbmNlO1xyXG4gICAgdGhpcy5zaXBLZXkgPSB0aGlzLmdldEtleSgpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYmxvY2sudHhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHR4ID0gYmxvY2sudHhzW2ldO1xyXG4gICAgICBsZXQgaGFzaCA9IHR4Lmhhc2goKTtcclxuXHJcbiAgICAgIGlmICh3aXRuZXNzKVxyXG4gICAgICAgIGhhc2ggPSB0eC53aXRuZXNzSGFzaCgpO1xyXG5cclxuICAgICAgY29uc3QgaWQgPSB0aGlzLnNpZChoYXNoKTtcclxuXHJcbiAgICAgIHRoaXMuaWRzLnB1c2goaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucHR4LnB1c2goWzAsIGJsb2NrLnR4c1swXV0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5zdGFudGlhdGUgY29tcGFjdCBibG9jayBmcm9tIGEgYmxvY2suXHJcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2tcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdpdG5lc3NcclxuICAgKiBAcGFyYW0ge0J1ZmZlcj99IG5vbmNlXHJcbiAgICogQHJldHVybnMge0NvbXBhY3RCbG9ja31cclxuICAgKi9cclxuXHJcbiAgc3RhdGljIGZyb21CbG9jayhibG9jaywgd2l0bmVzcywgbm9uY2UpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21CbG9jayhibG9jaywgd2l0bmVzcywgbm9uY2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCBibG9jayB0byBoZWFkZXJzLlxyXG4gICAqIEByZXR1cm5zIHtIZWFkZXJzfVxyXG4gICAqL1xyXG5cclxuICB0b0hlYWRlcnMoKSB7XHJcbiAgICByZXR1cm4gSGVhZGVycy5mcm9tQmxvY2sodGhpcyk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVFggUmVxdWVzdFxyXG4gKiBSZXByZXNlbnRzIGEgQmxvY2tUcmFuc2FjdGlvbnNSZXF1ZXN0IChiaXAxNTIpOiBgZ2V0YmxvY2t0eG5gIHBhY2tldC5cclxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMTUyLm1lZGlhd2lraVxyXG4gKiBAcHJvcGVydHkge0hhc2h9IGhhc2hcclxuICogQHByb3BlcnR5IHtOdW1iZXJbXX0gaW5kZXhlc1xyXG4gKi9cclxuXHJcbmNsYXNzIFRYUmVxdWVzdCB7XHJcbiAgLyoqXHJcbiAgICogVFggUmVxdWVzdFxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9uc1xyXG4gICAqL1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICB0aGlzLmhhc2ggPSBjb25zZW5zdXMuWkVST19IQVNIO1xyXG4gICAgdGhpcy5pbmRleGVzID0gW107XHJcblxyXG4gICAgaWYgKG9wdGlvbnMpXHJcbiAgICAgIHRoaXMuZnJvbU9wdGlvbnMob3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmplY3QgcHJvcGVydGllcyBmcm9tIG9wdGlvbnMuXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAqIEByZXR1cm5zIHtUWFJlcXVlc3R9XHJcbiAgICovXHJcblxyXG4gIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5pbmRleGVzKVxyXG4gICAgICB0aGlzLmluZGV4ZXMgPSBvcHRpb25zLmluZGV4ZXM7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnN0YW50aWF0ZSByZXF1ZXN0IGZyb20gb3B0aW9ucy5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAqIEByZXR1cm5zIHtUWFJlcXVlc3R9XHJcbiAgICovXHJcblxyXG4gIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tT3B0aW9ucyhvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluamVjdCBwcm9wZXJ0aWVzIGZyb20gY29tcGFjdCBibG9jay5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7Q29tcGFjdEJsb2NrfSBibG9ja1xyXG4gICAqIEByZXR1cm5zIHtUWFJlcXVlc3R9XHJcbiAgICovXHJcblxyXG4gIGZyb21Db21wYWN0KGJsb2NrKSB7XHJcbiAgICB0aGlzLmhhc2ggPSBibG9jay5oYXNoKCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9jay5hdmFpbGFibGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKCFibG9jay5hdmFpbGFibGVbaV0pXHJcbiAgICAgICAgdGhpcy5pbmRleGVzLnB1c2goaSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnN0YW50aWF0ZSByZXF1ZXN0IGZyb20gY29tcGFjdCBibG9jay5cclxuICAgKiBAcGFyYW0ge0NvbXBhY3RCbG9ja30gYmxvY2tcclxuICAgKiBAcmV0dXJucyB7VFhSZXF1ZXN0fVxyXG4gICAqL1xyXG5cclxuICBzdGF0aWMgZnJvbUNvbXBhY3QoYmxvY2spIHtcclxuICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21Db21wYWN0KGJsb2NrKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluamVjdCBwcm9wZXJ0aWVzIGZyb20gYnVmZmVyIHJlYWRlci5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7QnVmZmVyUmVhZGVyfSBiclxyXG4gICAqIEByZXR1cm5zIHtUWFJlcXVlc3R9XHJcbiAgICovXHJcblxyXG4gIGZyb21SZWFkZXIoYnIpIHtcclxuICAgIHRoaXMuaGFzaCA9IGJyLnJlYWRIYXNoKCk7XHJcblxyXG4gICAgY29uc3QgY291bnQgPSBici5yZWFkVmFyaW50KCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gYnIucmVhZFZhcmludCgpO1xyXG4gICAgICBhc3NlcnQoaW5kZXggPD0gMHhmZmZmKTtcclxuICAgICAgdGhpcy5pbmRleGVzLnB1c2goaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBvZmZzZXQgPSAwO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICBsZXQgaW5kZXggPSB0aGlzLmluZGV4ZXNbaV07XHJcbiAgICAgIGluZGV4ICs9IG9mZnNldDtcclxuICAgICAgYXNzZXJ0KGluZGV4IDw9IDB4ZmZmZik7XHJcbiAgICAgIHRoaXMuaW5kZXhlc1tpXSA9IGluZGV4O1xyXG4gICAgICBvZmZzZXQgPSBpbmRleCArIDE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmplY3QgcHJvcGVydGllcyBmcm9tIHNlcmlhbGl6ZWQgZGF0YS5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhXHJcbiAgICogQHJldHVybnMge1RYUmVxdWVzdH1cclxuICAgKi9cclxuXHJcbiAgZnJvbVJhdyhkYXRhKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcm9tUmVhZGVyKGJpby5yZWFkKGRhdGEpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc3RhbnRpYXRlIHJlcXVlc3QgZnJvbSBidWZmZXIgcmVhZGVyLlxyXG4gICAqIEBwYXJhbSB7QnVmZmVyUmVhZGVyfSBiclxyXG4gICAqIEByZXR1cm5zIHtUWFJlcXVlc3R9XHJcbiAgICovXHJcblxyXG4gIHN0YXRpYyBmcm9tUmVhZGVyKGJyKSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tUmVhZGVyKGJyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc3RhbnRpYXRlIHJlcXVlc3QgZnJvbSBzZXJpYWxpemVkIGRhdGEuXHJcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGFcclxuICAgKiBAcmV0dXJucyB7VFhSZXF1ZXN0fVxyXG4gICAqL1xyXG5cclxuICBzdGF0aWMgZnJvbVJhdyhkYXRhKSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tUmF3KGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlIHJlcXVlc3Qgc2VyaWFsaXphdGlvbiBzaXplLlxyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICovXHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICBsZXQgc2l6ZSA9IDA7XHJcblxyXG4gICAgc2l6ZSArPSAzMjtcclxuICAgIHNpemUgKz0gZW5jb2Rpbmcuc2l6ZVZhcmludCh0aGlzLmluZGV4ZXMubGVuZ3RoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5kZXhlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgaW5kZXggPSB0aGlzLmluZGV4ZXNbaV07XHJcblxyXG4gICAgICBpZiAoaSA+IDApXHJcbiAgICAgICAgaW5kZXggLT0gdGhpcy5pbmRleGVzW2kgLSAxXSArIDE7XHJcblxyXG4gICAgICBzaXplICs9IGVuY29kaW5nLnNpemVWYXJpbnQoaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaXplO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV3JpdGUgc2VyaWFsaXplZCByZXF1ZXN0IHRvIGJ1ZmZlciB3cml0ZXIuXHJcbiAgICogQHBhcmFtIHtCdWZmZXJXcml0ZXJ9IGJ3XHJcbiAgICovXHJcblxyXG4gIHRvV3JpdGVyKGJ3KSB7XHJcbiAgICBidy53cml0ZUhhc2godGhpcy5oYXNoKTtcclxuXHJcbiAgICBidy53cml0ZVZhcmludCh0aGlzLmluZGV4ZXMubGVuZ3RoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5kZXhlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgaW5kZXggPSB0aGlzLmluZGV4ZXNbaV07XHJcblxyXG4gICAgICBpZiAoaSA+IDApXHJcbiAgICAgICAgaW5kZXggLT0gdGhpcy5pbmRleGVzW2kgLSAxXSArIDE7XHJcblxyXG4gICAgICBidy53cml0ZVZhcmludChpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJ3O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VyaWFsaXplIHJlcXVlc3QuXHJcbiAgICogQHJldHVybnMge0J1ZmZlcn1cclxuICAgKi9cclxuXHJcbiAgdG9SYXcoKSB7XHJcbiAgICBjb25zdCBzaXplID0gdGhpcy5nZXRTaXplKCk7XHJcbiAgICByZXR1cm4gdGhpcy50b1dyaXRlcihiaW8ud3JpdGUoc2l6ZSkpLnJlbmRlcigpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRYIFJlc3BvbnNlXHJcbiAqIFJlcHJlc2VudHMgQmxvY2tUcmFuc2FjdGlvbnMgKGJpcDE1Mik6IGBibG9ja3R4bmAgcGFja2V0LlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAxNTIubWVkaWF3aWtpXHJcbiAqIEBwcm9wZXJ0eSB7SGFzaH0gaGFzaFxyXG4gKiBAcHJvcGVydHkge1RYW119IHR4c1xyXG4gKi9cclxuXHJcbmNsYXNzIFRYUmVzcG9uc2Uge1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIHR4IHJlc3BvbnNlLlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9uc1xyXG4gICAqL1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICB0aGlzLmhhc2ggPSBjb25zZW5zdXMuWkVST19IQVNIO1xyXG4gICAgdGhpcy50eHMgPSBbXTtcclxuXHJcbiAgICBpZiAob3B0aW9ucylcclxuICAgICAgdGhpcy5mcm9tT3B0aW9ucyhvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluamVjdCBwcm9wZXJ0aWVzIGZyb20gb3B0aW9ucy5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAgICogQHJldHVybnMge1RYUmVzcG9uc2V9XHJcbiAgICovXHJcblxyXG4gIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcclxuXHJcbiAgICBpZiAob3B0aW9ucy50eHMpXHJcbiAgICAgIHRoaXMudHhzID0gb3B0aW9ucy50eHM7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnN0YW50aWF0ZSByZXNwb25zZSBmcm9tIG9wdGlvbnMuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAgKiBAcmV0dXJucyB7VFhSZXNwb25zZX1cclxuICAgKi9cclxuXHJcbiAgc3RhdGljIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21PcHRpb25zKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5qZWN0IHByb3BlcnRpZXMgZnJvbSBidWZmZXIgcmVhZGVyLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtCdWZmZXJSZWFkZXJ9IGJyXHJcbiAgICogQHJldHVybnMge1RYUmVzcG9uc2V9XHJcbiAgICovXHJcblxyXG4gIGZyb21SZWFkZXIoYnIpIHtcclxuICAgIHRoaXMuaGFzaCA9IGJyLnJlYWRIYXNoKCk7XHJcblxyXG4gICAgY29uc3QgY291bnQgPSBici5yZWFkVmFyaW50KCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxyXG4gICAgICB0aGlzLnR4cy5wdXNoKFRYLmZyb21SZWFkZXIoYnIpKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluamVjdCBwcm9wZXJ0aWVzIGZyb20gc2VyaWFsaXplZCBkYXRhLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGFcclxuICAgKiBAcmV0dXJucyB7VFhSZXNwb25zZX1cclxuICAgKi9cclxuXHJcbiAgZnJvbVJhdyhkYXRhKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcm9tUmVhZGVyKGJpby5yZWFkKGRhdGEpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc3RhbnRpYXRlIHJlc3BvbnNlIGZyb20gYnVmZmVyIHJlYWRlci5cclxuICAgKiBAcGFyYW0ge0J1ZmZlclJlYWRlcn0gYnJcclxuICAgKiBAcmV0dXJucyB7VFhSZXNwb25zZX1cclxuICAgKi9cclxuXHJcbiAgc3RhdGljIGZyb21SZWFkZXIoYnIpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21SZWFkZXIoYnIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5zdGFudGlhdGUgcmVzcG9uc2UgZnJvbSBzZXJpYWxpemVkIGRhdGEuXHJcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGFcclxuICAgKiBAcmV0dXJucyB7VFhSZXNwb25zZX1cclxuICAgKi9cclxuXHJcbiAgc3RhdGljIGZyb21SYXcoZGF0YSkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVJhdyhkYXRhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluamVjdCBwcm9wZXJ0aWVzIGZyb20gYmxvY2suXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9ja1xyXG4gICAqIEByZXR1cm5zIHtUWFJlc3BvbnNlfVxyXG4gICAqL1xyXG5cclxuICBmcm9tQmxvY2soYmxvY2ssIHJlcSkge1xyXG4gICAgdGhpcy5oYXNoID0gcmVxLmhhc2g7XHJcblxyXG4gICAgZm9yIChjb25zdCBpbmRleCBvZiByZXEuaW5kZXhlcykge1xyXG4gICAgICBpZiAoaW5kZXggPj0gYmxvY2sudHhzLmxlbmd0aClcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIHRoaXMudHhzLnB1c2goYmxvY2sudHhzW2luZGV4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnN0YW50aWF0ZSByZXNwb25zZSBmcm9tIGJsb2NrLlxyXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrXHJcbiAgICogQHJldHVybnMge1RYUmVzcG9uc2V9XHJcbiAgICovXHJcblxyXG4gIHN0YXRpYyBmcm9tQmxvY2soYmxvY2ssIHJlcSkge1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbUJsb2NrKGJsb2NrLCByZXEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VyaWFsaXplIHJlc3BvbnNlIHdpdGggd2l0bmVzcyBkYXRhLlxyXG4gICAqIEByZXR1cm5zIHtCdWZmZXJ9XHJcbiAgICovXHJcblxyXG4gIHRvUmF3KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVSYXcodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXJpYWxpemUgcmVzcG9uc2Ugd2l0aG91dCB3aXRuZXNzIGRhdGEuXHJcbiAgICogQHJldHVybnMge0J1ZmZlcn1cclxuICAgKi9cclxuXHJcbiAgdG9Ob3JtYWwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZVJhdyhmYWxzZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXcml0ZSBzZXJpYWxpemVkIHJlc3BvbnNlIHRvIGEgYnVmZmVyXHJcbiAgICogd3JpdGVyIChpbmNsdWRlcyB3aXRuZXNzIGRhdGEpLlxyXG4gICAqIEBwYXJhbSB7QnVmZmVyV3JpdGVyfSBid1xyXG4gICAqL1xyXG5cclxuICB0b1dyaXRlcihidykge1xyXG4gICAgcmV0dXJuIHRoaXMud3JpdGVSYXcoYncsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV3JpdGUgc2VyaWFsaXplZCByZXNwb25zZSB0byBhIGJ1ZmZlclxyXG4gICAqIHdyaXRlciAoZXhjbHVkZXMgd2l0bmVzcyBkYXRhKS5cclxuICAgKiBAcGFyYW0ge0J1ZmZlcldyaXRlcn0gYndcclxuICAgKi9cclxuXHJcbiAgdG9Ob3JtYWxXcml0ZXIoYncpIHtcclxuICAgIHJldHVybiB0aGlzLndyaXRlUmF3KGJ3LCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhdGUgcmVxdWVzdCBzZXJpYWxpemF0aW9uIHNpemUuXHJcbiAgICogQHJldHVybnMge051bWJlcn1cclxuICAgKi9cclxuXHJcbiAgZ2V0U2l6ZSh3aXRuZXNzKSB7XHJcbiAgICBsZXQgc2l6ZSA9IDA7XHJcblxyXG4gICAgc2l6ZSArPSAzMjtcclxuICAgIHNpemUgKz0gZW5jb2Rpbmcuc2l6ZVZhcmludCh0aGlzLnR4cy5sZW5ndGgpO1xyXG5cclxuICAgIGZvciAoY29uc3QgdHggb2YgdGhpcy50eHMpIHtcclxuICAgICAgaWYgKHdpdG5lc3MpXHJcbiAgICAgICAgc2l6ZSArPSB0eC5nZXRTaXplKCk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBzaXplICs9IHR4LmdldEJhc2VTaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXcml0ZSBzZXJpYWxpemVkIHJlc3BvbnNlIHRvIGJ1ZmZlciB3cml0ZXIuXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAcGFyYW0ge0J1ZmZlcldyaXRlcn0gYndcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdpdG5lc3NcclxuICAgKi9cclxuXHJcbiAgd3JpdGVSYXcoYncsIHdpdG5lc3MpIHtcclxuICAgIGJ3LndyaXRlSGFzaCh0aGlzLmhhc2gpO1xyXG5cclxuICAgIGJ3LndyaXRlVmFyaW50KHRoaXMudHhzLmxlbmd0aCk7XHJcblxyXG4gICAgZm9yIChjb25zdCB0eCBvZiB0aGlzLnR4cykge1xyXG4gICAgICBpZiAod2l0bmVzcylcclxuICAgICAgICB0eC50b1dyaXRlcihidyk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0eC50b05vcm1hbFdyaXRlcihidyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJ3O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VyaWFsaXplIHJlc3BvbnNlIHdpdGggd2l0bmVzcyBkYXRhLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSB3aXRuZXNzXHJcbiAgICogQHJldHVybnMge0J1ZmZlcn1cclxuICAgKi9cclxuXHJcbiAgZnJhbWVSYXcod2l0bmVzcykge1xyXG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSh3aXRuZXNzKTtcclxuICAgIHJldHVybiB0aGlzLndyaXRlUmF3KGJpby53cml0ZShzaXplKSwgd2l0bmVzcykucmVuZGVyKCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4gKiBFeHBvc2VcclxuICovXHJcblxyXG5leHBvcnRzLkNvbXBhY3RCbG9jayA9IENvbXBhY3RCbG9jaztcclxuZXhwb3J0cy5UWFJlcXVlc3QgPSBUWFJlcXVlc3Q7XHJcbmV4cG9ydHMuVFhSZXNwb25zZSA9IFRYUmVzcG9uc2U7XHJcbiJdfQ==
/*!
 * chainentry.js - chainentry object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_83b0b0ef0(){var path="E:\\Projects\\Test\\bcoin\\lib\\blockchain\\chainentry.js";var hash="d1472587f04e27187c8dbd9cf05801a8ac7a1e8d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\blockchain\\chainentry.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:12},end:{line:11,column:28}},"2":{start:{line:12,column:11},end:{line:12,column:39}},"3":{start:{line:13,column:18},end:{line:13,column:50}},"4":{start:{line:14,column:16},end:{line:14,column:46}},"5":{start:{line:15,column:13},end:{line:15,column:37}},"6":{start:{line:16,column:16},end:{line:16,column:48}},"7":{start:{line:17,column:16},end:{line:17,column:48}},"8":{start:{line:18,column:24},end:{line:18,column:43}},"9":{start:{line:24,column:13},end:{line:24,column:22}},"10":{start:{line:54,column:4},end:{line:54,column:36}},"11":{start:{line:55,column:4},end:{line:55,column:21}},"12":{start:{line:56,column:4},end:{line:56,column:41}},"13":{start:{line:57,column:4},end:{line:57,column:42}},"14":{start:{line:58,column:4},end:{line:58,column:18}},"15":{start:{line:59,column:4},end:{line:59,column:18}},"16":{start:{line:60,column:4},end:{line:60,column:19}},"17":{start:{line:61,column:4},end:{line:61,column:20}},"18":{start:{line:62,column:4},end:{line:62,column:26}},"19":{start:{line:64,column:4},end:{line:65,column:32}},"20":{start:{line:65,column:6},end:{line:65,column:32}},"21":{start:{line:75,column:4},end:{line:75,column:47}},"22":{start:{line:76,column:4},end:{line:76,column:42}},"23":{start:{line:77,column:4},end:{line:77,column:56}},"24":{start:{line:78,column:4},end:{line:78,column:47}},"25":{start:{line:79,column:4},end:{line:79,column:48}},"26":{start:{line:80,column:4},end:{line:80,column:50}},"27":{start:{line:81,column:4},end:{line:81,column:50}},"28":{start:{line:82,column:4},end:{line:82,column:52}},"29":{start:{line:83,column:4},end:{line:83,column:54}},"30":{start:{line:84,column:4},end:{line:84,column:61}},"31":{start:{line:86,column:4},end:{line:86,column:29}},"32":{start:{line:87,column:4},end:{line:87,column:35}},"33":{start:{line:88,column:4},end:{line:88,column:39}},"34":{start:{line:89,column:4},end:{line:89,column:41}},"35":{start:{line:90,column:4},end:{line:90,column:29}},"36":{start:{line:91,column:4},end:{line:91,column:29}},"37":{start:{line:92,column:4},end:{line:92,column:31}},"38":{start:{line:93,column:4},end:{line:93,column:33}},"39":{start:{line:94,column:4},end:{line:94,column:47}},"40":{start:{line:96,column:4},end:{line:96,column:16}},"41":{start:{line:107,column:4},end:{line:107,column:49}},"42":{start:{line:116,column:19},end:{line:116,column:51}},"43":{start:{line:118,column:4},end:{line:119,column:23}},"44":{start:{line:119,column:6},end:{line:119,column:23}},"45":{start:{line:121,column:4},end:{line:121,column:57}},"46":{start:{line:131,column:18},end:{line:131,column:33}},"47":{start:{line:133,column:4},end:{line:134,column:19}},"48":{start:{line:134,column:6},end:{line:134,column:19}},"49":{start:{line:136,column:4},end:{line:136,column:38}},"50":{start:{line:145,column:4},end:{line:145,column:29}},"51":{start:{line:155,column:21},end:{line:155,column:47}},"52":{start:{line:156,column:21},end:{line:156,column:47}},"53":{start:{line:157,column:17},end:{line:157,column:48}},"54":{start:{line:159,column:4},end:{line:160,column:19}},"55":{start:{line:160,column:6},end:{line:160,column:19}},"56":{start:{line:162,column:4},end:{line:162,column:54}},"57":{start:{line:172,column:4},end:{line:172,column:47}},"58":{start:{line:181,column:4},end:{line:181,column:34}},"59":{start:{line:192,column:4},end:{line:192,column:29}},"60":{start:{line:193,column:4},end:{line:193,column:33}},"61":{start:{line:194,column:4},end:{line:194,column:37}},"62":{start:{line:195,column:4},end:{line:195,column:39}},"63":{start:{line:196,column:4},end:{line:196,column:27}},"64":{start:{line:197,column:4},end:{line:197,column:27}},"65":{start:{line:198,column:4},end:{line:198,column:29}},"66":{start:{line:199,column:4},end:{line:199,column:44}},"67":{start:{line:200,column:4},end:{line:200,column:45}},"68":{start:{line:201,column:4},end:{line:201,column:16}},"69":{start:{line:212,column:4},end:{line:212,column:45}},"70":{start:{line:221,column:15},end:{line:221,column:29}},"71":{start:{line:223,column:4},end:{line:223,column:30}},"72":{start:{line:224,column:4},end:{line:224,column:33}},"73":{start:{line:225,column:4},end:{line:225,column:34}},"74":{start:{line:226,column:4},end:{line:226,column:27}},"75":{start:{line:227,column:4},end:{line:227,column:27}},"76":{start:{line:228,column:4},end:{line:228,column:28}},"77":{start:{line:229,column:4},end:{line:229,column:29}},"78":{start:{line:230,column:4},end:{line:230,column:64}},"79":{start:{line:232,column:4},end:{line:232,column:23}},"80":{start:{line:242,column:15},end:{line:242,column:35}},"81":{start:{line:243,column:17},end:{line:243,column:49}},"82":{start:{line:245,column:4},end:{line:245,column:17}},"83":{start:{line:247,column:4},end:{line:247,column:21}},"84":{start:{line:248,column:4},end:{line:248,column:32}},"85":{start:{line:249,column:4},end:{line:249,column:35}},"86":{start:{line:250,column:4},end:{line:250,column:36}},"87":{start:{line:251,column:4},end:{line:251,column:29}},"88":{start:{line:252,column:4},end:{line:252,column:29}},"89":{start:{line:253,column:4},end:{line:253,column:30}},"90":{start:{line:254,column:4},end:{line:254,column:31}},"91":{start:{line:255,column:4},end:{line:255,column:52}},"92":{start:{line:257,column:4},end:{line:257,column:16}},"93":{start:{line:267,column:4},end:{line:267,column:36}},"94":{start:{line:277,column:4},end:{line:287,column:6}},"95":{start:{line:297,column:4},end:{line:297,column:44}},"96":{start:{line:298,column:4},end:{line:298,column:42}},"97":{start:{line:299,column:4},end:{line:299,column:50}},"98":{start:{line:300,column:4},end:{line:300,column:47}},"99":{start:{line:301,column:4},end:{line:301,column:48}},"100":{start:{line:302,column:4},end:{line:302,column:44}},"101":{start:{line:303,column:4},end:{line:303,column:44}},"102":{start:{line:304,column:4},end:{line:304,column:46}},"103":{start:{line:305,column:4},end:{line:305,column:47}},"104":{start:{line:307,column:4},end:{line:307,column:40}},"105":{start:{line:308,column:4},end:{line:308,column:32}},"106":{start:{line:309,column:4},end:{line:309,column:50}},"107":{start:{line:310,column:4},end:{line:310,column:52}},"108":{start:{line:311,column:4},end:{line:311,column:26}},"109":{start:{line:312,column:4},end:{line:312,column:26}},"110":{start:{line:313,column:4},end:{line:313,column:28}},"111":{start:{line:314,column:4},end:{line:314,column:30}},"112":{start:{line:315,column:4},end:{line:315,column:51}},"113":{start:{line:317,column:4},end:{line:317,column:16}},"114":{start:{line:327,column:4},end:{line:327,column:37}},"115":{start:{line:336,column:4},end:{line:336,column:35}},"116":{start:{line:345,column:4},end:{line:345,column:55}},"117":{start:{line:354,column:17},end:{line:354,column:30}},"118":{start:{line:355,column:4},end:{line:355,column:45}},"119":{start:{line:356,column:4},end:{line:356,column:16}},"120":{start:{line:366,column:4},end:{line:366,column:37}},"121":{start:{line:375,column:0},end:{line:375,column:48}},"122":{start:{line:381,column:0},end:{line:381,column:28}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:53,column:2},end:{line:53,column:3}},loc:{start:{line:53,column:23},end:{line:66,column:3}},line:53},"1":{name:"(anonymous_1)",decl:{start:{line:74,column:2},end:{line:74,column:3}},loc:{start:{line:74,column:23},end:{line:97,column:3}},line:74},"2":{name:"(anonymous_2)",decl:{start:{line:106,column:2},end:{line:106,column:3}},loc:{start:{line:106,column:36},end:{line:108,column:3}},line:106},"3":{name:"(anonymous_3)",decl:{start:{line:115,column:2},end:{line:115,column:3}},loc:{start:{line:115,column:13},end:{line:122,column:3}},line:115},"4":{name:"(anonymous_4)",decl:{start:{line:130,column:2},end:{line:130,column:3}},loc:{start:{line:130,column:21},end:{line:137,column:3}},line:130},"5":{name:"(anonymous_5)",decl:{start:{line:144,column:2},end:{line:144,column:3}},loc:{start:{line:144,column:14},end:{line:146,column:3}},line:144},"6":{name:"(anonymous_6)",decl:{start:{line:154,column:2},end:{line:154,column:3}},loc:{start:{line:154,column:22},end:{line:163,column:3}},line:154},"7":{name:"(anonymous_7)",decl:{start:{line:171,column:2},end:{line:171,column:3}},loc:{start:{line:171,column:14},end:{line:173,column:3}},line:171},"8":{name:"(anonymous_8)",decl:{start:{line:180,column:2},end:{line:180,column:3}},loc:{start:{line:180,column:10},end:{line:182,column:3}},line:180},"9":{name:"(anonymous_9)",decl:{start:{line:191,column:2},end:{line:191,column:3}},loc:{start:{line:191,column:25},end:{line:202,column:3}},line:191},"10":{name:"(anonymous_10)",decl:{start:{line:211,column:2},end:{line:211,column:3}},loc:{start:{line:211,column:32},end:{line:213,column:3}},line:211},"11":{name:"(anonymous_11)",decl:{start:{line:220,column:2},end:{line:220,column:3}},loc:{start:{line:220,column:10},end:{line:233,column:3}},line:220},"12":{name:"(anonymous_12)",decl:{start:{line:241,column:2},end:{line:241,column:3}},loc:{start:{line:241,column:16},end:{line:258,column:3}},line:241},"13":{name:"(anonymous_13)",decl:{start:{line:266,column:2},end:{line:266,column:3}},loc:{start:{line:266,column:23},end:{line:268,column:3}},line:266},"14":{name:"(anonymous_14)",decl:{start:{line:276,column:2},end:{line:276,column:3}},loc:{start:{line:276,column:11},end:{line:288,column:3}},line:276},"15":{name:"(anonymous_15)",decl:{start:{line:296,column:2},end:{line:296,column:3}},loc:{start:{line:296,column:17},end:{line:318,column:3}},line:296},"16":{name:"(anonymous_16)",decl:{start:{line:326,column:2},end:{line:326,column:3}},loc:{start:{line:326,column:24},end:{line:328,column:3}},line:326},"17":{name:"(anonymous_17)",decl:{start:{line:335,column:2},end:{line:335,column:3}},loc:{start:{line:335,column:14},end:{line:337,column:3}},line:335},"18":{name:"(anonymous_18)",decl:{start:{line:344,column:2},end:{line:344,column:3}},loc:{start:{line:344,column:10},end:{line:346,column:3}},line:344},"19":{name:"(anonymous_19)",decl:{start:{line:353,column:2},end:{line:353,column:3}},loc:{start:{line:353,column:20},end:{line:357,column:3}},line:353},"20":{name:"(anonymous_20)",decl:{start:{line:365,column:2},end:{line:365,column:3}},loc:{start:{line:365,column:27},end:{line:367,column:3}},line:365}},branchMap:{"0":{loc:{start:{line:64,column:4},end:{line:65,column:32}},type:"if",locations:[{start:{line:64,column:4},end:{line:65,column:32}},{start:{line:64,column:4},end:{line:65,column:32}}],line:64},"1":{loc:{start:{line:84,column:11},end:{line:84,column:59}},type:"binary-expr",locations:[{start:{line:84,column:11},end:{line:84,column:29}},{start:{line:84,column:33},end:{line:84,column:59}}],line:84},"2":{loc:{start:{line:94,column:21},end:{line:94,column:46}},type:"binary-expr",locations:[{start:{line:94,column:21},end:{line:94,column:38}},{start:{line:94,column:42},end:{line:94,column:46}}],line:94},"3":{loc:{start:{line:118,column:4},end:{line:119,column:23}},type:"if",locations:[{start:{line:118,column:4},end:{line:119,column:23}},{start:{line:118,column:4},end:{line:119,column:23}}],line:118},"4":{loc:{start:{line:118,column:8},end:{line:118,column:41}},type:"binary-expr",locations:[{start:{line:118,column:8},end:{line:118,column:22}},{start:{line:118,column:26},end:{line:118,column:41}}],line:118},"5":{loc:{start:{line:133,column:4},end:{line:134,column:19}},type:"if",locations:[{start:{line:133,column:4},end:{line:134,column:19}},{start:{line:133,column:4},end:{line:134,column:19}}],line:133},"6":{loc:{start:{line:159,column:4},end:{line:160,column:19}},type:"if",locations:[{start:{line:159,column:4},end:{line:160,column:19}},{start:{line:159,column:4},end:{line:160,column:19}}],line:159},"7":{loc:{start:{line:199,column:18},end:{line:199,column:43}},type:"cond-expr",locations:[{start:{line:199,column:25},end:{line:199,column:40}},{start:{line:199,column:42},end:{line:199,column:43}}],line:199}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d1472587f04e27187c8dbd9cf05801a8ac7a1e8d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_83b0b0ef0=function(){return actualCoverage;};}return actualCoverage;}cov_83b0b0ef0();const assert=(cov_83b0b0ef0().s[0]++,require('bsert'));const bio=(cov_83b0b0ef0().s[1]++,require('bufio'));const BN=(cov_83b0b0ef0().s[2]++,require('bcrypto/lib/bn.js'));const consensus=(cov_83b0b0ef0().s[3]++,require('../protocol/consensus'));const hash256=(cov_83b0b0ef0().s[4]++,require('bcrypto/lib/hash256'));const util=(cov_83b0b0ef0().s[5]++,require('../utils/util'));const Headers=(cov_83b0b0ef0().s[6]++,require('../primitives/headers'));const InvItem=(cov_83b0b0ef0().s[7]++,require('../primitives/invitem'));const{inspectSymbol}=(cov_83b0b0ef0().s[8]++,require('../utils'));/*
 * Constants
 */const ZERO=(cov_83b0b0ef0().s[9]++,new BN(0));/**
 * Chain Entry
 * Represents an entry in the chain. Unlike
 * other bitcoin fullnodes, we store the
 * chainwork _with_ the entry in order to
 * avoid reading the entire chain index on
 * boot and recalculating the chainworks.
 * @alias module:blockchain.ChainEntry
 * @property {Hash} hash
 * @property {Number} version
 * @property {Hash} prevBlock
 * @property {Hash} merkleRoot
 * @property {Number} time
 * @property {Number} bits
 * @property {Number} nonce
 * @property {Number} height
 * @property {BN} chainwork
 * @property {Hash} rhash
 */class ChainEntry{/**
   * Create a chain entry.
   * @constructor
   * @param {Object?} options
   */constructor(options){cov_83b0b0ef0().f[0]++;cov_83b0b0ef0().s[10]++;this.hash=consensus.ZERO_HASH;cov_83b0b0ef0().s[11]++;this.version=1;cov_83b0b0ef0().s[12]++;this.prevBlock=consensus.ZERO_HASH;cov_83b0b0ef0().s[13]++;this.merkleRoot=consensus.ZERO_HASH;cov_83b0b0ef0().s[14]++;this.time=0;cov_83b0b0ef0().s[15]++;this.bits=0;cov_83b0b0ef0().s[16]++;this.nonce=0;cov_83b0b0ef0().s[17]++;this.height=0;cov_83b0b0ef0().s[18]++;this.chainwork=ZERO;cov_83b0b0ef0().s[19]++;if(options){cov_83b0b0ef0().b[0][0]++;cov_83b0b0ef0().s[20]++;this.fromOptions(options);}else{cov_83b0b0ef0().b[0][1]++;}}/**
   * Inject properties from options.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_83b0b0ef0().f[1]++;cov_83b0b0ef0().s[21]++;assert(options,'Block data is required.');cov_83b0b0ef0().s[22]++;assert(Buffer.isBuffer(options.hash));cov_83b0b0ef0().s[23]++;assert(options.version>>>0===options.version);cov_83b0b0ef0().s[24]++;assert(Buffer.isBuffer(options.prevBlock));cov_83b0b0ef0().s[25]++;assert(Buffer.isBuffer(options.merkleRoot));cov_83b0b0ef0().s[26]++;assert(options.time>>>0===options.time);cov_83b0b0ef0().s[27]++;assert(options.bits>>>0===options.bits);cov_83b0b0ef0().s[28]++;assert(options.nonce>>>0===options.nonce);cov_83b0b0ef0().s[29]++;assert(options.height>>>0===options.height);cov_83b0b0ef0().s[30]++;assert((cov_83b0b0ef0().b[1][0]++,!options.chainwork)||(cov_83b0b0ef0().b[1][1]++,BN.isBN(options.chainwork)));cov_83b0b0ef0().s[31]++;this.hash=options.hash;cov_83b0b0ef0().s[32]++;this.version=options.version;cov_83b0b0ef0().s[33]++;this.prevBlock=options.prevBlock;cov_83b0b0ef0().s[34]++;this.merkleRoot=options.merkleRoot;cov_83b0b0ef0().s[35]++;this.time=options.time;cov_83b0b0ef0().s[36]++;this.bits=options.bits;cov_83b0b0ef0().s[37]++;this.nonce=options.nonce;cov_83b0b0ef0().s[38]++;this.height=options.height;cov_83b0b0ef0().s[39]++;this.chainwork=(cov_83b0b0ef0().b[2][0]++,options.chainwork)||(cov_83b0b0ef0().b[2][1]++,ZERO);cov_83b0b0ef0().s[40]++;return this;}/**
   * Instantiate chainentry from options.
   * @param {Object} options
   * @param {ChainEntry} prev - Previous entry.
   * @returns {ChainEntry}
   */static fromOptions(options,prev){cov_83b0b0ef0().f[2]++;cov_83b0b0ef0().s[41]++;return new this().fromOptions(options,prev);}/**
   * Calculate the proof: (1 << 256) / (target + 1)
   * @returns {BN} proof
   */getProof(){cov_83b0b0ef0().f[3]++;const target=(cov_83b0b0ef0().s[42]++,consensus.fromCompact(this.bits));cov_83b0b0ef0().s[43]++;if((cov_83b0b0ef0().b[4][0]++,target.isNeg())||(cov_83b0b0ef0().b[4][1]++,target.isZero())){cov_83b0b0ef0().b[3][0]++;cov_83b0b0ef0().s[44]++;return new BN(0);}else{cov_83b0b0ef0().b[3][1]++;}cov_83b0b0ef0().s[45]++;return ChainEntry.MAX_CHAINWORK.div(target.iaddn(1));}/**
   * Calculate the chainwork by
   * adding proof to previous chainwork.
   * @returns {BN} chainwork
   */getChainwork(prev){cov_83b0b0ef0().f[4]++;const proof=(cov_83b0b0ef0().s[46]++,this.getProof());cov_83b0b0ef0().s[47]++;if(!prev){cov_83b0b0ef0().b[5][0]++;cov_83b0b0ef0().s[48]++;return proof;}else{cov_83b0b0ef0().b[5][1]++;}cov_83b0b0ef0().s[49]++;return proof.iadd(prev.chainwork);}/**
   * Test against the genesis block.
   * @returns {Boolean}
   */isGenesis(){cov_83b0b0ef0().f[5]++;cov_83b0b0ef0().s[50]++;return this.height===0;}/**
   * Test whether the entry contains an unknown version bit.
   * @param {Network} network
   * @returns {Boolean}
   */hasUnknown(network){cov_83b0b0ef0().f[6]++;const TOP_MASK=(cov_83b0b0ef0().s[51]++,consensus.VERSION_TOP_MASK);const TOP_BITS=(cov_83b0b0ef0().s[52]++,consensus.VERSION_TOP_BITS);const bits=(cov_83b0b0ef0().s[53]++,(this.version&TOP_MASK)>>>0);cov_83b0b0ef0().s[54]++;if(bits!==TOP_BITS){cov_83b0b0ef0().b[6][0]++;cov_83b0b0ef0().s[55]++;return false;}else{cov_83b0b0ef0().b[6][1]++;}cov_83b0b0ef0().s[56]++;return(this.version&network.unknownBits)!==0;}/**
   * Test whether the entry contains a version bit.
   * @param {Number} bit
   * @returns {Boolean}
   */hasBit(bit){cov_83b0b0ef0().f[7]++;cov_83b0b0ef0().s[57]++;return consensus.hasBit(this.version,bit);}/**
   * Get little-endian block hash.
   * @returns {Hash}
   */rhash(){cov_83b0b0ef0().f[8]++;cov_83b0b0ef0().s[58]++;return util.revHex(this.hash);}/**
   * Inject properties from block.
   * @private
   * @param {Block|MerkleBlock} block
   * @param {ChainEntry} prev - Previous entry.
   */fromBlock(block,prev){cov_83b0b0ef0().f[9]++;cov_83b0b0ef0().s[59]++;this.hash=block.hash();cov_83b0b0ef0().s[60]++;this.version=block.version;cov_83b0b0ef0().s[61]++;this.prevBlock=block.prevBlock;cov_83b0b0ef0().s[62]++;this.merkleRoot=block.merkleRoot;cov_83b0b0ef0().s[63]++;this.time=block.time;cov_83b0b0ef0().s[64]++;this.bits=block.bits;cov_83b0b0ef0().s[65]++;this.nonce=block.nonce;cov_83b0b0ef0().s[66]++;this.height=prev?(cov_83b0b0ef0().b[7][0]++,prev.height+1):(cov_83b0b0ef0().b[7][1]++,0);cov_83b0b0ef0().s[67]++;this.chainwork=this.getChainwork(prev);cov_83b0b0ef0().s[68]++;return this;}/**
   * Instantiate chainentry from block.
   * @param {Block|MerkleBlock} block
   * @param {ChainEntry} prev - Previous entry.
   * @returns {ChainEntry}
   */static fromBlock(block,prev){cov_83b0b0ef0().f[10]++;cov_83b0b0ef0().s[69]++;return new this().fromBlock(block,prev);}/**
   * Serialize the entry to internal database format.
   * @returns {Buffer}
   */toRaw(){cov_83b0b0ef0().f[11]++;const bw=(cov_83b0b0ef0().s[70]++,bio.write(116));cov_83b0b0ef0().s[71]++;bw.writeU32(this.version);cov_83b0b0ef0().s[72]++;bw.writeHash(this.prevBlock);cov_83b0b0ef0().s[73]++;bw.writeHash(this.merkleRoot);cov_83b0b0ef0().s[74]++;bw.writeU32(this.time);cov_83b0b0ef0().s[75]++;bw.writeU32(this.bits);cov_83b0b0ef0().s[76]++;bw.writeU32(this.nonce);cov_83b0b0ef0().s[77]++;bw.writeU32(this.height);cov_83b0b0ef0().s[78]++;bw.writeBytes(this.chainwork.toArrayLike(Buffer,'le',32));cov_83b0b0ef0().s[79]++;return bw.render();}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_83b0b0ef0().f[12]++;const br=(cov_83b0b0ef0().s[80]++,bio.read(data,true));const hash=(cov_83b0b0ef0().s[81]++,hash256.digest(br.readBytes(80)));cov_83b0b0ef0().s[82]++;br.seek(-80);cov_83b0b0ef0().s[83]++;this.hash=hash;cov_83b0b0ef0().s[84]++;this.version=br.readU32();cov_83b0b0ef0().s[85]++;this.prevBlock=br.readHash();cov_83b0b0ef0().s[86]++;this.merkleRoot=br.readHash();cov_83b0b0ef0().s[87]++;this.time=br.readU32();cov_83b0b0ef0().s[88]++;this.bits=br.readU32();cov_83b0b0ef0().s[89]++;this.nonce=br.readU32();cov_83b0b0ef0().s[90]++;this.height=br.readU32();cov_83b0b0ef0().s[91]++;this.chainwork=new BN(br.readBytes(32),'le');cov_83b0b0ef0().s[92]++;return this;}/**
   * Deserialize the entry.
   * @param {Buffer} data
   * @returns {ChainEntry}
   */static fromRaw(data){cov_83b0b0ef0().f[13]++;cov_83b0b0ef0().s[93]++;return new this().fromRaw(data);}/**
   * Serialize the entry to an object more
   * suitable for JSON serialization.
   * @returns {Object}
   */toJSON(){cov_83b0b0ef0().f[14]++;cov_83b0b0ef0().s[94]++;return{hash:util.revHex(this.hash),version:this.version,prevBlock:util.revHex(this.prevBlock),merkleRoot:util.revHex(this.merkleRoot),time:this.time,bits:this.bits,nonce:this.nonce,height:this.height,chainwork:this.chainwork.toString('hex',64)};}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   */fromJSON(json){cov_83b0b0ef0().f[15]++;cov_83b0b0ef0().s[95]++;assert(json,'Block data is required.');cov_83b0b0ef0().s[96]++;assert(typeof json.hash==='string');cov_83b0b0ef0().s[97]++;assert(json.version>>>0===json.version);cov_83b0b0ef0().s[98]++;assert(typeof json.prevBlock==='string');cov_83b0b0ef0().s[99]++;assert(typeof json.merkleRoot==='string');cov_83b0b0ef0().s[100]++;assert(json.time>>>0===json.time);cov_83b0b0ef0().s[101]++;assert(json.bits>>>0===json.bits);cov_83b0b0ef0().s[102]++;assert(json.nonce>>>0===json.nonce);cov_83b0b0ef0().s[103]++;assert(typeof json.chainwork==='string');cov_83b0b0ef0().s[104]++;this.hash=util.fromRev(json.hash);cov_83b0b0ef0().s[105]++;this.version=json.version;cov_83b0b0ef0().s[106]++;this.prevBlock=util.fromRev(json.prevBlock);cov_83b0b0ef0().s[107]++;this.merkleRoot=util.fromRev(json.merkleRoot);cov_83b0b0ef0().s[108]++;this.time=json.time;cov_83b0b0ef0().s[109]++;this.bits=json.bits;cov_83b0b0ef0().s[110]++;this.nonce=json.nonce;cov_83b0b0ef0().s[111]++;this.height=json.height;cov_83b0b0ef0().s[112]++;this.chainwork=new BN(json.chainwork,'hex');cov_83b0b0ef0().s[113]++;return this;}/**
   * Instantiate block from jsonified object.
   * @param {Object} json
   * @returns {ChainEntry}
   */static fromJSON(json){cov_83b0b0ef0().f[16]++;cov_83b0b0ef0().s[114]++;return new this().fromJSON(json);}/**
   * Convert the entry to a headers object.
   * @returns {Headers}
   */toHeaders(){cov_83b0b0ef0().f[17]++;cov_83b0b0ef0().s[115]++;return Headers.fromEntry(this);}/**
   * Convert the entry to an inv item.
   * @returns {InvItem}
   */toInv(){cov_83b0b0ef0().f[18]++;cov_83b0b0ef0().s[116]++;return new InvItem(InvItem.types.BLOCK,this.hash);}/**
   * Return a more user-friendly object.
   * @returns {Object}
   */[inspectSymbol](){cov_83b0b0ef0().f[19]++;const json=(cov_83b0b0ef0().s[117]++,this.toJSON());cov_83b0b0ef0().s[118]++;json.version=json.version.toString(16);cov_83b0b0ef0().s[119]++;return json;}/**
   * Test whether an object is a {@link ChainEntry}.
   * @param {Object} obj
   * @returns {Boolean}
   */static isChainEntry(obj){cov_83b0b0ef0().f[20]++;cov_83b0b0ef0().s[120]++;return obj instanceof ChainEntry;}}/**
 * The max chainwork (1 << 256).
 * @const {BN}
 */cov_83b0b0ef0().s[121]++;ChainEntry.MAX_CHAINWORK=new BN(1).ushln(256);/*
 * Expose
 */cov_83b0b0ef0().s[122]++;module.exports=ChainEntry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
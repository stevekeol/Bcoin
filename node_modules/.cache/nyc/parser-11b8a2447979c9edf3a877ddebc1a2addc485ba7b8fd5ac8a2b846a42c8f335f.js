/*!
 * parser.js - packet parser for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */ /* eslint nonblock-statement-body-position: "off" */'use strict';function cov_6t87v9468(){var path="E:\\Projects\\Test\\bcoin\\lib\\net\\parser.js";var hash="11f391393b5b970d65f4e6f066987847f1e817bb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\net\\parser.js",statementMap:{"0":{start:{line:12,column:15},end:{line:12,column:31}},"1":{start:{line:13,column:21},end:{line:13,column:38}},"2":{start:{line:14,column:17},end:{line:14,column:32}},"3":{start:{line:15,column:16},end:{line:15,column:46}},"4":{start:{line:16,column:16},end:{line:16,column:46}},"5":{start:{line:17,column:15},end:{line:17,column:34}},"6":{start:{line:18,column:16},end:{line:18,column:36}},"7":{start:{line:36,column:4},end:{line:36,column:12}},"8":{start:{line:38,column:4},end:{line:38,column:40}},"9":{start:{line:40,column:4},end:{line:40,column:22}},"10":{start:{line:41,column:4},end:{line:41,column:19}},"11":{start:{line:42,column:4},end:{line:42,column:22}},"12":{start:{line:43,column:4},end:{line:43,column:23}},"13":{start:{line:53,column:16},end:{line:53,column:45}},"14":{start:{line:54,column:4},end:{line:54,column:39}},"15":{start:{line:63,column:4},end:{line:63,column:30}},"16":{start:{line:64,column:4},end:{line:64,column:28}},"17":{start:{line:66,column:4},end:{line:83,column:5}},"18":{start:{line:67,column:20},end:{line:67,column:52}},"19":{start:{line:68,column:16},end:{line:68,column:17}},"20":{start:{line:70,column:6},end:{line:77,column:7}},"21":{start:{line:71,column:20},end:{line:71,column:52}},"22":{start:{line:72,column:8},end:{line:75,column:55}},"23":{start:{line:73,column:10},end:{line:73,column:31}},"24":{start:{line:75,column:10},end:{line:75,column:55}},"25":{start:{line:76,column:8},end:{line:76,column:19}},"26":{start:{line:79,column:6},end:{line:79,column:44}},"27":{start:{line:81,column:6},end:{line:81,column:33}},"28":{start:{line:82,column:6},end:{line:82,column:24}},"29":{start:{line:92,column:4},end:{line:92,column:46}},"30":{start:{line:94,column:4},end:{line:97,column:5}},"31":{start:{line:95,column:6},end:{line:95,column:43}},"32":{start:{line:96,column:6},end:{line:96,column:13}},"33":{start:{line:99,column:17},end:{line:99,column:37}},"34":{start:{line:100,column:21},end:{line:100,column:47}},"35":{start:{line:102,column:4},end:{line:107,column:5}},"36":{start:{line:103,column:6},end:{line:103,column:24}},"37":{start:{line:104,column:6},end:{line:104,column:25}},"38":{start:{line:105,column:6},end:{line:105,column:65}},"39":{start:{line:106,column:6},end:{line:106,column:13}},"40":{start:{line:110,column:4},end:{line:117,column:5}},"41":{start:{line:111,column:6},end:{line:111,column:57}},"42":{start:{line:113,column:6},end:{line:113,column:24}},"43":{start:{line:114,column:6},end:{line:114,column:25}},"44":{start:{line:115,column:6},end:{line:115,column:28}},"45":{start:{line:116,column:6},end:{line:116,column:13}},"46":{start:{line:119,column:4},end:{line:119,column:22}},"47":{start:{line:120,column:4},end:{line:120,column:23}},"48":{start:{line:122,column:4},end:{line:122,column:33}},"49":{start:{line:132,column:18},end:{line:132,column:44}},"50":{start:{line:134,column:4},end:{line:137,column:5}},"51":{start:{line:135,column:6},end:{line:135,column:65}},"52":{start:{line:136,column:6},end:{line:136,column:18}},"53":{start:{line:140,column:12},end:{line:140,column:13}},"54":{start:{line:141,column:4},end:{line:141,column:45}},"55":{start:{line:143,column:4},end:{line:146,column:5}},"56":{start:{line:144,column:6},end:{line:144,column:49}},"57":{start:{line:145,column:6},end:{line:145,column:18}},"58":{start:{line:148,column:16},end:{line:148,column:48}},"59":{start:{line:150,column:17},end:{line:150,column:44}},"60":{start:{line:152,column:4},end:{line:156,column:5}},"61":{start:{line:153,column:6},end:{line:153,column:24}},"62":{start:{line:154,column:6},end:{line:154,column:55}},"63":{start:{line:155,column:6},end:{line:155,column:18}},"64":{start:{line:158,column:4},end:{line:158,column:24}},"65":{start:{line:160,column:21},end:{line:160,column:48}},"66":{start:{line:162,column:4},end:{line:162,column:43}},"67":{start:{line:173,column:4},end:{line:173,column:38}},"68":{start:{line:189,column:4},end:{line:189,column:19}},"69":{start:{line:190,column:4},end:{line:190,column:21}},"70":{start:{line:191,column:4},end:{line:191,column:29}},"71":{start:{line:199,column:0},end:{line:199,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:35,column:2},end:{line:35,column:3}},loc:{start:{line:35,column:23},end:{line:44,column:3}},line:35},"1":{name:"(anonymous_1)",decl:{start:{line:52,column:2},end:{line:52,column:3}},loc:{start:{line:52,column:10},end:{line:55,column:3}},line:52},"2":{name:"(anonymous_2)",decl:{start:{line:62,column:2},end:{line:62,column:3}},loc:{start:{line:62,column:13},end:{line:84,column:3}},line:62},"3":{name:"(anonymous_3)",decl:{start:{line:91,column:2},end:{line:91,column:3}},loc:{start:{line:91,column:14},end:{line:123,column:3}},line:91},"4":{name:"(anonymous_4)",decl:{start:{line:131,column:2},end:{line:131,column:3}},loc:{start:{line:131,column:20},end:{line:163,column:3}},line:131},"5":{name:"(anonymous_5)",decl:{start:{line:172,column:2},end:{line:172,column:3}},loc:{start:{line:172,column:26},end:{line:174,column:3}},line:172},"6":{name:"(anonymous_6)",decl:{start:{line:188,column:2},end:{line:188,column:3}},loc:{start:{line:188,column:35},end:{line:192,column:3}},line:188}},branchMap:{"0":{loc:{start:{line:72,column:8},end:{line:75,column:55}},type:"if",locations:[{start:{line:72,column:8},end:{line:75,column:55}},{start:{line:72,column:8},end:{line:75,column:55}}],line:72},"1":{loc:{start:{line:94,column:4},end:{line:97,column:5}},type:"if",locations:[{start:{line:94,column:4},end:{line:97,column:5}},{start:{line:94,column:4},end:{line:97,column:5}}],line:94},"2":{loc:{start:{line:102,column:4},end:{line:107,column:5}},type:"if",locations:[{start:{line:102,column:4},end:{line:107,column:5}},{start:{line:102,column:4},end:{line:107,column:5}}],line:102},"3":{loc:{start:{line:134,column:4},end:{line:137,column:5}},type:"if",locations:[{start:{line:134,column:4},end:{line:137,column:5}},{start:{line:134,column:4},end:{line:137,column:5}}],line:134},"4":{loc:{start:{line:141,column:11},end:{line:141,column:38}},type:"binary-expr",locations:[{start:{line:141,column:11},end:{line:141,column:28}},{start:{line:141,column:32},end:{line:141,column:38}}],line:141},"5":{loc:{start:{line:143,column:4},end:{line:146,column:5}},type:"if",locations:[{start:{line:143,column:4},end:{line:146,column:5}},{start:{line:143,column:4},end:{line:146,column:5}}],line:143},"6":{loc:{start:{line:152,column:4},end:{line:156,column:5}},type:"if",locations:[{start:{line:152,column:4},end:{line:156,column:5}},{start:{line:152,column:4},end:{line:156,column:5}}],line:152}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"11f391393b5b970d65f4e6f066987847f1e817bb"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_6t87v9468=function(){return actualCoverage;};}return actualCoverage;}cov_6t87v9468();const assert=(cov_6t87v9468().s[0]++,require('bsert'));const EventEmitter=(cov_6t87v9468().s[1]++,require('events'));const{format}=(cov_6t87v9468().s[2]++,require('util'));const Network=(cov_6t87v9468().s[3]++,require('../protocol/network'));const hash256=(cov_6t87v9468().s[4]++,require('bcrypto/lib/hash256'));const common=(cov_6t87v9468().s[5]++,require('./common'));const packets=(cov_6t87v9468().s[6]++,require('./packets'));/**
 * Protocol Message Parser
 * @alias module:net.Parser
 * @extends EventEmitter
 * @emits Parser#error
 * @emits Parser#packet
 */class Parser extends EventEmitter{/**
   * Create a parser.
   * @constructor
   * @param {Network} network
   */constructor(network){cov_6t87v9468().f[0]++;cov_6t87v9468().s[7]++;super();cov_6t87v9468().s[8]++;this.network=Network.get(network);cov_6t87v9468().s[9]++;this.pending=[];cov_6t87v9468().s[10]++;this.total=0;cov_6t87v9468().s[11]++;this.waiting=24;cov_6t87v9468().s[12]++;this.header=null;}/**
   * Emit an error.
   * @private
   * @param {...String} msg
   */error(){cov_6t87v9468().f[1]++;const msg=(cov_6t87v9468().s[13]++,format.apply(null,arguments));cov_6t87v9468().s[14]++;this.emit('error',new Error(msg));}/**
   * Feed data to the parser.
   * @param {Buffer} data
   */feed(data){cov_6t87v9468().f[2]++;cov_6t87v9468().s[15]++;this.total+=data.length;cov_6t87v9468().s[16]++;this.pending.push(data);cov_6t87v9468().s[17]++;while(this.total>=this.waiting){const chunk=(cov_6t87v9468().s[18]++,Buffer.allocUnsafe(this.waiting));let off=(cov_6t87v9468().s[19]++,0);cov_6t87v9468().s[20]++;while(off<chunk.length){const len=(cov_6t87v9468().s[21]++,this.pending[0].copy(chunk,off));cov_6t87v9468().s[22]++;if(len===this.pending[0].length){cov_6t87v9468().b[0][0]++;cov_6t87v9468().s[23]++;this.pending.shift();}else{cov_6t87v9468().b[0][1]++;cov_6t87v9468().s[24]++;this.pending[0]=this.pending[0].slice(len);}cov_6t87v9468().s[25]++;off+=len;}cov_6t87v9468().s[26]++;assert.strictEqual(off,chunk.length);cov_6t87v9468().s[27]++;this.total-=chunk.length;cov_6t87v9468().s[28]++;this.parse(chunk);}}/**
   * Parse a fully-buffered chunk.
   * @param {Buffer} chunk
   */parse(data){cov_6t87v9468().f[3]++;cov_6t87v9468().s[29]++;assert(data.length<=common.MAX_MESSAGE);cov_6t87v9468().s[30]++;if(!this.header){cov_6t87v9468().b[1][0]++;cov_6t87v9468().s[31]++;this.header=this.parseHeader(data);cov_6t87v9468().s[32]++;return;}else{cov_6t87v9468().b[1][1]++;}const hash=(cov_6t87v9468().s[33]++,hash256.digest(data));const checksum=(cov_6t87v9468().s[34]++,hash.readUInt32LE(0,true));cov_6t87v9468().s[35]++;if(checksum!==this.header.checksum){cov_6t87v9468().b[2][0]++;cov_6t87v9468().s[36]++;this.waiting=24;cov_6t87v9468().s[37]++;this.header=null;cov_6t87v9468().s[38]++;this.error('Invalid checksum: %s.',checksum.toString(16));cov_6t87v9468().s[39]++;return;}else{cov_6t87v9468().b[2][1]++;}let payload;cov_6t87v9468().s[40]++;try{cov_6t87v9468().s[41]++;payload=this.parsePayload(this.header.cmd,data);}catch(e){cov_6t87v9468().s[42]++;this.waiting=24;cov_6t87v9468().s[43]++;this.header=null;cov_6t87v9468().s[44]++;this.emit('error',e);cov_6t87v9468().s[45]++;return;}cov_6t87v9468().s[46]++;this.waiting=24;cov_6t87v9468().s[47]++;this.header=null;cov_6t87v9468().s[48]++;this.emit('packet',payload);}/**
   * Parse buffered packet header.
   * @param {Buffer} data - Header.
   * @returns {Header}
   */parseHeader(data){cov_6t87v9468().f[4]++;const magic=(cov_6t87v9468().s[49]++,data.readUInt32LE(0,true));cov_6t87v9468().s[50]++;if(magic!==this.network.magic){cov_6t87v9468().b[3][0]++;cov_6t87v9468().s[51]++;this.error('Invalid magic value: %s.',magic.toString(16));cov_6t87v9468().s[52]++;return null;}else{cov_6t87v9468().b[3][1]++;}// Count length of the cmd.
let i=(cov_6t87v9468().s[53]++,0);cov_6t87v9468().s[54]++;for(;(cov_6t87v9468().b[4][0]++,data[i+4]!==0)&&(cov_6t87v9468().b[4][1]++,i<12);i++){;}cov_6t87v9468().s[55]++;if(i===12){cov_6t87v9468().b[5][0]++;cov_6t87v9468().s[56]++;this.error('Non NULL-terminated command.');cov_6t87v9468().s[57]++;return null;}else{cov_6t87v9468().b[5][1]++;}const cmd=(cov_6t87v9468().s[58]++,data.toString('ascii',4,4+i));const size=(cov_6t87v9468().s[59]++,data.readUInt32LE(16,true));cov_6t87v9468().s[60]++;if(size>common.MAX_MESSAGE){cov_6t87v9468().b[6][0]++;cov_6t87v9468().s[61]++;this.waiting=24;cov_6t87v9468().s[62]++;this.error('Packet length too large: %d.',size);cov_6t87v9468().s[63]++;return null;}else{cov_6t87v9468().b[6][1]++;}cov_6t87v9468().s[64]++;this.waiting=size;const checksum=(cov_6t87v9468().s[65]++,data.readUInt32LE(20,true));cov_6t87v9468().s[66]++;return new Header(cmd,size,checksum);}/**
   * Parse a payload.
   * @param {String} cmd - Packet type.
   * @param {Buffer} data - Payload.
   * @returns {Object}
   */parsePayload(cmd,data){cov_6t87v9468().f[5]++;cov_6t87v9468().s[67]++;return packets.fromRaw(cmd,data);}}/**
 * Packet Header
 * @ignore
 */class Header{/**
   * Create a header.
   * @constructor
   */constructor(cmd,size,checksum){cov_6t87v9468().f[6]++;cov_6t87v9468().s[68]++;this.cmd=cmd;cov_6t87v9468().s[69]++;this.size=size;cov_6t87v9468().s[70]++;this.checksum=checksum;}}/*
 * Expose
 */cov_6t87v9468().s[71]++;module.exports=Parser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/*!
 * output.js - output object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_2letn88m72(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\output.js";var hash="93baf61b931c1365af9adb2ab5414ec1924c6e3d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\output.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:12},end:{line:11,column:28}},"2":{start:{line:12,column:15},end:{line:12,column:39}},"3":{start:{line:13,column:16},end:{line:13,column:46}},"4":{start:{line:14,column:16},end:{line:14,column:48}},"5":{start:{line:15,column:15},end:{line:15,column:42}},"6":{start:{line:16,column:18},end:{line:16,column:50}},"7":{start:{line:17,column:15},end:{line:17,column:44}},"8":{start:{line:18,column:24},end:{line:18,column:43}},"9":{start:{line:35,column:4},end:{line:35,column:19}},"10":{start:{line:36,column:4},end:{line:36,column:31}},"11":{start:{line:38,column:4},end:{line:39,column:32}},"12":{start:{line:39,column:6},end:{line:39,column:32}},"13":{start:{line:49,column:4},end:{line:49,column:48}},"14":{start:{line:51,column:4},end:{line:55,column:5}},"15":{start:{line:52,column:6},end:{line:53,column:35}},"16":{start:{line:54,column:6},end:{line:54,column:33}},"17":{start:{line:57,column:4},end:{line:58,column:46}},"18":{start:{line:58,column:6},end:{line:58,column:46}},"19":{start:{line:60,column:4},end:{line:61,column:47}},"20":{start:{line:61,column:6},end:{line:61,column:47}},"21":{start:{line:63,column:4},end:{line:63,column:16}},"22":{start:{line:73,column:4},end:{line:73,column:43}},"23":{start:{line:85,column:4},end:{line:86,column:42}},"24":{start:{line:86,column:6},end:{line:86,column:42}},"25":{start:{line:88,column:4},end:{line:89,column:42}},"26":{start:{line:89,column:6},end:{line:89,column:42}},"27":{start:{line:91,column:4},end:{line:91,column:65}},"28":{start:{line:92,column:4},end:{line:93,column:33}},"29":{start:{line:95,column:4},end:{line:95,column:25}},"30":{start:{line:96,column:4},end:{line:96,column:23}},"31":{start:{line:98,column:4},end:{line:98,column:16}},"32":{start:{line:109,column:4},end:{line:109,column:48}},"33":{start:{line:118,column:19},end:{line:118,column:41}},"34":{start:{line:119,column:4},end:{line:119,column:30}},"35":{start:{line:120,column:4},end:{line:120,column:38}},"36":{start:{line:121,column:4},end:{line:121,column:18}},"37":{start:{line:131,column:4},end:{line:131,column:36}},"38":{start:{line:132,column:4},end:{line:133,column:43}},"39":{start:{line:143,column:4},end:{line:143,column:36}},"40":{start:{line:145,column:16},end:{line:145,column:41}},"41":{start:{line:147,column:4},end:{line:148,column:17}},"42":{start:{line:148,column:6},end:{line:148,column:17}},"43":{start:{line:150,column:4},end:{line:150,column:46}},"44":{start:{line:159,column:4},end:{line:159,column:66}},"45":{start:{line:168,column:4},end:{line:168,column:36}},"46":{start:{line:178,column:17},end:{line:178,column:34}},"47":{start:{line:180,column:4},end:{line:181,column:18}},"48":{start:{line:181,column:6},end:{line:181,column:18}},"49":{start:{line:183,column:4},end:{line:183,column:29}},"50":{start:{line:192,column:4},end:{line:197,column:6}},"51":{start:{line:207,column:4},end:{line:207,column:26}},"52":{start:{line:218,column:15},end:{line:218,column:32}},"53":{start:{line:220,column:4},end:{line:220,column:35}},"54":{start:{line:222,column:4},end:{line:223,column:36}},"55":{start:{line:223,column:6},end:{line:223,column:36}},"56":{start:{line:225,column:4},end:{line:229,column:6}},"57":{start:{line:240,column:18},end:{line:240,column:48}},"58":{start:{line:242,column:4},end:{line:243,column:15}},"59":{start:{line:243,column:6},end:{line:243,column:15}},"60":{start:{line:245,column:15},end:{line:245,column:29}},"61":{start:{line:247,column:4},end:{line:252,column:5}},"62":{start:{line:249,column:6},end:{line:249,column:49}},"63":{start:{line:251,column:6},end:{line:251,column:35}},"64":{start:{line:254,column:4},end:{line:254,column:44}},"65":{start:{line:263,column:4},end:{line:263,column:40}},"66":{start:{line:273,column:4},end:{line:273,column:52}},"67":{start:{line:283,column:4},end:{line:283,column:45}},"68":{start:{line:284,column:4},end:{line:285,column:33}},"69":{start:{line:286,column:4},end:{line:286,column:28}},"70":{start:{line:287,column:4},end:{line:287,column:38}},"71":{start:{line:288,column:4},end:{line:288,column:16}},"72":{start:{line:298,column:4},end:{line:298,column:37}},"73":{start:{line:307,column:4},end:{line:307,column:28}},"74":{start:{line:308,column:4},end:{line:308,column:42}},"75":{start:{line:309,column:4},end:{line:309,column:14}},"76":{start:{line:319,column:17},end:{line:319,column:31}},"77":{start:{line:320,column:4},end:{line:320,column:51}},"78":{start:{line:330,column:4},end:{line:330,column:30}},"79":{start:{line:331,column:4},end:{line:331,column:43}},"80":{start:{line:332,column:4},end:{line:332,column:16}},"81":{start:{line:342,column:4},end:{line:342,column:43}},"82":{start:{line:352,column:4},end:{line:352,column:37}},"83":{start:{line:363,column:4},end:{line:364,column:36}},"84":{start:{line:364,column:6},end:{line:364,column:36}},"85":{start:{line:365,column:4},end:{line:365,column:36}},"86":{start:{line:375,column:4},end:{line:375,column:33}},"87":{start:{line:383,column:0},end:{line:383,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:2},end:{line:34,column:3}},loc:{start:{line:34,column:23},end:{line:40,column:3}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:48,column:2},end:{line:48,column:3}},loc:{start:{line:48,column:23},end:{line:64,column:3}},line:48},"2":{name:"(anonymous_2)",decl:{start:{line:72,column:2},end:{line:72,column:3}},loc:{start:{line:72,column:30},end:{line:74,column:3}},line:72},"3":{name:"(anonymous_3)",decl:{start:{line:84,column:2},end:{line:84,column:3}},loc:{start:{line:84,column:28},end:{line:99,column:3}},line:84},"4":{name:"(anonymous_4)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:35},end:{line:110,column:3}},line:108},"5":{name:"(anonymous_5)",decl:{start:{line:117,column:2},end:{line:117,column:3}},loc:{start:{line:117,column:10},end:{line:122,column:3}},line:117},"6":{name:"(anonymous_6)",decl:{start:{line:130,column:2},end:{line:130,column:3}},loc:{start:{line:130,column:17},end:{line:134,column:3}},line:130},"7":{name:"(anonymous_7)",decl:{start:{line:142,column:2},end:{line:142,column:3}},loc:{start:{line:142,column:18},end:{line:151,column:3}},line:142},"8":{name:"(anonymous_8)",decl:{start:{line:158,column:2},end:{line:158,column:3}},loc:{start:{line:158,column:12},end:{line:160,column:3}},line:158},"9":{name:"(anonymous_9)",decl:{start:{line:167,column:2},end:{line:167,column:3}},loc:{start:{line:167,column:15},end:{line:169,column:3}},line:167},"10":{name:"(anonymous_10)",decl:{start:{line:177,column:2},end:{line:177,column:3}},loc:{start:{line:177,column:15},end:{line:184,column:3}},line:177},"11":{name:"(anonymous_11)",decl:{start:{line:191,column:2},end:{line:191,column:3}},loc:{start:{line:191,column:20},end:{line:198,column:3}},line:191},"12":{name:"(anonymous_12)",decl:{start:{line:206,column:2},end:{line:206,column:3}},loc:{start:{line:206,column:11},end:{line:208,column:3}},line:206},"13":{name:"(anonymous_13)",decl:{start:{line:217,column:2},end:{line:217,column:3}},loc:{start:{line:217,column:19},end:{line:230,column:3}},line:217},"14":{name:"(anonymous_14)",decl:{start:{line:239,column:2},end:{line:239,column:3}},loc:{start:{line:239,column:25},end:{line:255,column:3}},line:239},"15":{name:"(anonymous_15)",decl:{start:{line:262,column:2},end:{line:262,column:3}},loc:{start:{line:262,column:12},end:{line:264,column:3}},line:262},"16":{name:"(anonymous_16)",decl:{start:{line:272,column:2},end:{line:272,column:3}},loc:{start:{line:272,column:15},end:{line:274,column:3}},line:272},"17":{name:"(anonymous_17)",decl:{start:{line:282,column:2},end:{line:282,column:3}},loc:{start:{line:282,column:17},end:{line:289,column:3}},line:282},"18":{name:"(anonymous_18)",decl:{start:{line:297,column:2},end:{line:297,column:3}},loc:{start:{line:297,column:24},end:{line:299,column:3}},line:297},"19":{name:"(anonymous_19)",decl:{start:{line:306,column:2},end:{line:306,column:3}},loc:{start:{line:306,column:15},end:{line:310,column:3}},line:306},"20":{name:"(anonymous_20)",decl:{start:{line:318,column:2},end:{line:318,column:3}},loc:{start:{line:318,column:10},end:{line:321,column:3}},line:318},"21":{name:"(anonymous_21)",decl:{start:{line:329,column:2},end:{line:329,column:3}},loc:{start:{line:329,column:17},end:{line:333,column:3}},line:329},"22":{name:"(anonymous_22)",decl:{start:{line:341,column:2},end:{line:341,column:3}},loc:{start:{line:341,column:16},end:{line:343,column:3}},line:341},"23":{name:"(anonymous_23)",decl:{start:{line:351,column:2},end:{line:351,column:3}},loc:{start:{line:351,column:24},end:{line:353,column:3}},line:351},"24":{name:"(anonymous_24)",decl:{start:{line:362,column:2},end:{line:362,column:3}},loc:{start:{line:362,column:28},end:{line:366,column:3}},line:362},"25":{name:"(anonymous_25)",decl:{start:{line:374,column:2},end:{line:374,column:3}},loc:{start:{line:374,column:23},end:{line:376,column:3}},line:374}},branchMap:{"0":{loc:{start:{line:38,column:4},end:{line:39,column:32}},type:"if",locations:[{start:{line:38,column:4},end:{line:39,column:32}},{start:{line:38,column:4},end:{line:39,column:32}}],line:38},"1":{loc:{start:{line:51,column:4},end:{line:55,column:5}},type:"if",locations:[{start:{line:51,column:4},end:{line:55,column:5}},{start:{line:51,column:4},end:{line:55,column:5}}],line:51},"2":{loc:{start:{line:52,column:13},end:{line:52,column:70}},type:"binary-expr",locations:[{start:{line:52,column:13},end:{line:52,column:48}},{start:{line:52,column:52},end:{line:52,column:70}}],line:52},"3":{loc:{start:{line:57,column:4},end:{line:58,column:46}},type:"if",locations:[{start:{line:57,column:4},end:{line:58,column:46}},{start:{line:57,column:4},end:{line:58,column:46}}],line:57},"4":{loc:{start:{line:60,column:4},end:{line:61,column:47}},type:"if",locations:[{start:{line:60,column:4},end:{line:61,column:47}},{start:{line:60,column:4},end:{line:61,column:47}}],line:60},"5":{loc:{start:{line:85,column:4},end:{line:86,column:42}},type:"if",locations:[{start:{line:85,column:4},end:{line:86,column:42}},{start:{line:85,column:4},end:{line:86,column:42}}],line:85},"6":{loc:{start:{line:88,column:4},end:{line:89,column:42}},type:"if",locations:[{start:{line:88,column:4},end:{line:89,column:42}},{start:{line:88,column:4},end:{line:89,column:42}}],line:88},"7":{loc:{start:{line:92,column:11},end:{line:92,column:52}},type:"binary-expr",locations:[{start:{line:92,column:11},end:{line:92,column:38}},{start:{line:92,column:42},end:{line:92,column:52}}],line:92},"8":{loc:{start:{line:132,column:11},end:{line:133,column:42}},type:"binary-expr",locations:[{start:{line:132,column:11},end:{line:132,column:38}},{start:{line:133,column:9},end:{line:133,column:42}}],line:132},"9":{loc:{start:{line:147,column:4},end:{line:148,column:17}},type:"if",locations:[{start:{line:147,column:4},end:{line:148,column:17}},{start:{line:147,column:4},end:{line:148,column:17}}],line:147},"10":{loc:{start:{line:180,column:4},end:{line:181,column:18}},type:"if",locations:[{start:{line:180,column:4},end:{line:181,column:18}},{start:{line:180,column:4},end:{line:181,column:18}}],line:180},"11":{loc:{start:{line:222,column:4},end:{line:223,column:36}},type:"if",locations:[{start:{line:222,column:4},end:{line:223,column:36}},{start:{line:222,column:4},end:{line:223,column:36}}],line:222},"12":{loc:{start:{line:242,column:4},end:{line:243,column:15}},type:"if",locations:[{start:{line:242,column:4},end:{line:243,column:15}},{start:{line:242,column:4},end:{line:243,column:15}}],line:242},"13":{loc:{start:{line:247,column:4},end:{line:252,column:5}},type:"if",locations:[{start:{line:247,column:4},end:{line:252,column:5}},{start:{line:247,column:4},end:{line:252,column:5}}],line:247},"14":{loc:{start:{line:284,column:11},end:{line:284,column:62}},type:"binary-expr",locations:[{start:{line:284,column:11},end:{line:284,column:43}},{start:{line:284,column:47},end:{line:284,column:62}}],line:284},"15":{loc:{start:{line:363,column:4},end:{line:364,column:36}},type:"if",locations:[{start:{line:363,column:4},end:{line:364,column:36}},{start:{line:363,column:4},end:{line:364,column:36}}],line:363}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"93baf61b931c1365af9adb2ab5414ec1924c6e3d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2letn88m72=function(){return actualCoverage;};}return actualCoverage;}cov_2letn88m72();const assert=(cov_2letn88m72().s[0]++,require('bsert'));const bio=(cov_2letn88m72().s[1]++,require('bufio'));const Amount=(cov_2letn88m72().s[2]++,require('../btc/amount'));const Network=(cov_2letn88m72().s[3]++,require('../protocol/network'));const Address=(cov_2letn88m72().s[4]++,require('../primitives/address'));const Script=(cov_2letn88m72().s[5]++,require('../script/script'));const consensus=(cov_2letn88m72().s[6]++,require('../protocol/consensus'));const policy=(cov_2letn88m72().s[7]++,require('../protocol/policy'));const{inspectSymbol}=(cov_2letn88m72().s[8]++,require('../utils'));/**
 * Represents a transaction output.
 * @alias module:primitives.Output
 * @property {Amount} value
 * @property {Script} script
 */class Output{/**
   * Create an output.
   * @constructor
   * @param {Object?} options
   */constructor(options){cov_2letn88m72().f[0]++;cov_2letn88m72().s[9]++;this.value=0;cov_2letn88m72().s[10]++;this.script=new Script();cov_2letn88m72().s[11]++;if(options){cov_2letn88m72().b[0][0]++;cov_2letn88m72().s[12]++;this.fromOptions(options);}else{cov_2letn88m72().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_2letn88m72().f[1]++;cov_2letn88m72().s[13]++;assert(options,'Output data is required.');cov_2letn88m72().s[14]++;if(options.value){cov_2letn88m72().b[1][0]++;cov_2letn88m72().s[15]++;assert((cov_2letn88m72().b[2][0]++,Number.isSafeInteger(options.value))&&(cov_2letn88m72().b[2][1]++,options.value>=0),'Value must be a uint64.');cov_2letn88m72().s[16]++;this.value=options.value;}else{cov_2letn88m72().b[1][1]++;}cov_2letn88m72().s[17]++;if(options.script){cov_2letn88m72().b[3][0]++;cov_2letn88m72().s[18]++;this.script.fromOptions(options.script);}else{cov_2letn88m72().b[3][1]++;}cov_2letn88m72().s[19]++;if(options.address){cov_2letn88m72().b[4][0]++;cov_2letn88m72().s[20]++;this.script.fromAddress(options.address);}else{cov_2letn88m72().b[4][1]++;}cov_2letn88m72().s[21]++;return this;}/**
   * Instantiate output from options object.
   * @param {Object} options
   * @returns {Output}
   */static fromOptions(options){cov_2letn88m72().f[2]++;cov_2letn88m72().s[22]++;return new this().fromOptions(options);}/**
   * Inject properties from script/value pair.
   * @private
   * @param {Script|Address} script
   * @param {Amount} value
   * @returns {Output}
   */fromScript(script,value){cov_2letn88m72().f[3]++;cov_2letn88m72().s[23]++;if(typeof script==='string'){cov_2letn88m72().b[5][0]++;cov_2letn88m72().s[24]++;script=Address.fromString(script);}else{cov_2letn88m72().b[5][1]++;}cov_2letn88m72().s[25]++;if(script instanceof Address){cov_2letn88m72().b[6][0]++;cov_2letn88m72().s[26]++;script=Script.fromAddress(script);}else{cov_2letn88m72().b[6][1]++;}cov_2letn88m72().s[27]++;assert(script instanceof Script,'Script must be a Script.');cov_2letn88m72().s[28]++;assert((cov_2letn88m72().b[7][0]++,Number.isSafeInteger(value))&&(cov_2letn88m72().b[7][1]++,value>=0),'Value must be a uint64.');cov_2letn88m72().s[29]++;this.script=script;cov_2letn88m72().s[30]++;this.value=value;cov_2letn88m72().s[31]++;return this;}/**
   * Instantiate output from script/value pair.
   * @param {Script|Address} script
   * @param {Amount} value
   * @returns {Output}
   */static fromScript(script,value){cov_2letn88m72().f[4]++;cov_2letn88m72().s[32]++;return new this().fromScript(script,value);}/**
   * Clone the output.
   * @returns {Output}
   */clone(){cov_2letn88m72().f[5]++;const output=(cov_2letn88m72().s[33]++,new this.constructor());cov_2letn88m72().s[34]++;output.value=this.value;cov_2letn88m72().s[35]++;output.script.inject(this.script);cov_2letn88m72().s[36]++;return output;}/**
   * Test equality against another output.
   * @param {Output} output
   * @returns {Boolean}
   */equals(output){cov_2letn88m72().f[6]++;cov_2letn88m72().s[37]++;assert(Output.isOutput(output));cov_2letn88m72().s[38]++;return(cov_2letn88m72().b[8][0]++,this.value===output.value)&&(cov_2letn88m72().b[8][1]++,this.script.equals(output.script));}/**
   * Compare against another output (BIP69).
   * @param {Output} output
   * @returns {Number}
   */compare(output){cov_2letn88m72().f[7]++;cov_2letn88m72().s[39]++;assert(Output.isOutput(output));const cmp=(cov_2letn88m72().s[40]++,this.value-output.value);cov_2letn88m72().s[41]++;if(cmp!==0){cov_2letn88m72().b[9][0]++;cov_2letn88m72().s[42]++;return cmp;}else{cov_2letn88m72().b[9][1]++;}cov_2letn88m72().s[43]++;return this.script.compare(output.script);}/**
   * Get the script type as a string.
   * @returns {ScriptType} type
   */getType(){cov_2letn88m72().f[8]++;cov_2letn88m72().s[44]++;return Script.typesByVal[this.script.getType()].toLowerCase();}/**
   * Get the address.
   * @returns {Address} address
   */getAddress(){cov_2letn88m72().f[9]++;cov_2letn88m72().s[45]++;return this.script.getAddress();}/**
   * Get the address hash.
   * @param {String?} enc
   * @returns {Hash} hash
   */getHash(enc){cov_2letn88m72().f[10]++;const addr=(cov_2letn88m72().s[46]++,this.getAddress());cov_2letn88m72().s[47]++;if(!addr){cov_2letn88m72().b[10][0]++;cov_2letn88m72().s[48]++;return null;}else{cov_2letn88m72().b[10][1]++;}cov_2letn88m72().s[49]++;return addr.getHash(enc);}/**
   * Convert the input to a more user-friendly object.
   * @returns {Object}
   */[inspectSymbol](){cov_2letn88m72().f[11]++;cov_2letn88m72().s[50]++;return{type:this.getType(),value:Amount.btc(this.value),script:this.script,address:this.getAddress()};}/**
   * Convert the output to an object suitable
   * for JSON serialization.
   * @returns {Object}
   */toJSON(){cov_2letn88m72().f[12]++;cov_2letn88m72().s[51]++;return this.getJSON();}/**
   * Convert the output to an object suitable
   * for JSON serialization.
   * @param {Network} network
   * @returns {Object}
   */getJSON(network){cov_2letn88m72().f[13]++;let addr=(cov_2letn88m72().s[52]++,this.getAddress());cov_2letn88m72().s[53]++;network=Network.get(network);cov_2letn88m72().s[54]++;if(addr){cov_2letn88m72().b[11][0]++;cov_2letn88m72().s[55]++;addr=addr.toString(network);}else{cov_2letn88m72().b[11][1]++;}cov_2letn88m72().s[56]++;return{value:this.value,script:this.script.toJSON(),address:addr};}/**
   * Calculate the dust threshold for this
   * output, based on serialize size and rate.
   * @param {Rate?} rate
   * @returns {Amount}
   */getDustThreshold(rate){cov_2letn88m72().f[14]++;const scale=(cov_2letn88m72().s[57]++,consensus.WITNESS_SCALE_FACTOR);cov_2letn88m72().s[58]++;if(this.script.isUnspendable()){cov_2letn88m72().b[12][0]++;cov_2letn88m72().s[59]++;return 0;}else{cov_2letn88m72().b[12][1]++;}let size=(cov_2letn88m72().s[60]++,this.getSize());cov_2letn88m72().s[61]++;if(this.script.isProgram()){cov_2letn88m72().b[13][0]++;cov_2letn88m72().s[62]++;// 75% segwit discount applied to script size.
size+=32+4+1+(107/scale|0)+4;}else{cov_2letn88m72().b[13][1]++;cov_2letn88m72().s[63]++;size+=32+4+1+107+4;}cov_2letn88m72().s[64]++;return 3*policy.getMinFee(size,rate);}/**
   * Calculate size of serialized output.
   * @returns {Number}
   */getSize(){cov_2letn88m72().f[15]++;cov_2letn88m72().s[65]++;return 8+this.script.getVarSize();}/**
   * Test whether the output should be considered dust.
   * @param {Rate?} rate
   * @returns {Boolean}
   */isDust(rate){cov_2letn88m72().f[16]++;cov_2letn88m72().s[66]++;return this.value<this.getDustThreshold(rate);}/**
   * Inject properties from a JSON object.
   * @private
   * @param {Object} json
   */fromJSON(json){cov_2letn88m72().f[17]++;cov_2letn88m72().s[67]++;assert(json,'Output data is required.');cov_2letn88m72().s[68]++;assert((cov_2letn88m72().b[14][0]++,Number.isSafeInteger(json.value))&&(cov_2letn88m72().b[14][1]++,json.value>=0),'Value must be a uint64.');cov_2letn88m72().s[69]++;this.value=json.value;cov_2letn88m72().s[70]++;this.script.fromJSON(json.script);cov_2letn88m72().s[71]++;return this;}/**
   * Instantiate an Output from a jsonified output object.
   * @param {Object} json - The jsonified output object.
   * @returns {Output}
   */static fromJSON(json){cov_2letn88m72().f[18]++;cov_2letn88m72().s[72]++;return new this().fromJSON(json);}/**
   * Write the output to a buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_2letn88m72().f[19]++;cov_2letn88m72().s[73]++;bw.writeI64(this.value);cov_2letn88m72().s[74]++;bw.writeVarBytes(this.script.toRaw());cov_2letn88m72().s[75]++;return bw;}/**
   * Serialize the output.
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Buffer|String}
   */toRaw(){cov_2letn88m72().f[20]++;const size=(cov_2letn88m72().s[76]++,this.getSize());cov_2letn88m72().s[77]++;return this.toWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_2letn88m72().f[21]++;cov_2letn88m72().s[78]++;this.value=br.readI64();cov_2letn88m72().s[79]++;this.script.fromRaw(br.readVarBytes());cov_2letn88m72().s[80]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_2letn88m72().f[22]++;cov_2letn88m72().s[81]++;return this.fromReader(bio.read(data));}/**
   * Instantiate an output from a buffer reader.
   * @param {BufferReader} br
   * @returns {Output}
   */static fromReader(br){cov_2letn88m72().f[23]++;cov_2letn88m72().s[82]++;return new this().fromReader(br);}/**
   * Instantiate an output from a serialized Buffer.
   * @param {Buffer} data
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Output}
   */static fromRaw(data,enc){cov_2letn88m72().f[24]++;cov_2letn88m72().s[83]++;if(typeof data==='string'){cov_2letn88m72().b[15][0]++;cov_2letn88m72().s[84]++;data=Buffer.from(data,enc);}else{cov_2letn88m72().b[15][1]++;}cov_2letn88m72().s[85]++;return new this().fromRaw(data);}/**
   * Test an object to see if it is an Output.
   * @param {Object} obj
   * @returns {Boolean}
   */static isOutput(obj){cov_2letn88m72().f[25]++;cov_2letn88m72().s[86]++;return obj instanceof Output;}}/*
 * Expose
 */cov_2letn88m72().s[87]++;module.exports=Output;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
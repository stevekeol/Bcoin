/*!
 * merkleblock.js - merkleblock object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1snm1y855(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\merkleblock.js";var hash="57066d34bd0b8aa20eb9511c6023538034521ef2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\merkleblock.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:12},end:{line:11,column:28}},"2":{start:{line:12,column:31},end:{line:12,column:52}},"3":{start:{line:13,column:13},end:{line:13,column:37}},"4":{start:{line:14,column:16},end:{line:14,column:46}},"5":{start:{line:15,column:18},end:{line:15,column:50}},"6":{start:{line:16,column:22},end:{line:16,column:48}},"7":{start:{line:17,column:11},end:{line:17,column:26}},"8":{start:{line:18,column:16},end:{line:18,column:36}},"9":{start:{line:19,column:14},end:{line:19,column:30}},"10":{start:{line:20,column:19},end:{line:20,column:22}},"11":{start:{line:21,column:24},end:{line:21,column:43}},"12":{start:{line:38,column:4},end:{line:38,column:12}},"13":{start:{line:40,column:4},end:{line:40,column:18}},"14":{start:{line:41,column:4},end:{line:41,column:21}},"15":{start:{line:42,column:4},end:{line:42,column:23}},"16":{start:{line:44,column:4},end:{line:44,column:21}},"17":{start:{line:45,column:4},end:{line:45,column:22}},"18":{start:{line:47,column:4},end:{line:48,column:32}},"19":{start:{line:48,column:6},end:{line:48,column:32}},"20":{start:{line:58,column:4},end:{line:58,column:31}},"21":{start:{line:60,column:4},end:{line:60,column:53}},"22":{start:{line:61,column:4},end:{line:61,column:42}},"23":{start:{line:62,column:4},end:{line:62,column:43}},"24":{start:{line:63,column:4},end:{line:63,column:56}},"25":{start:{line:65,column:4},end:{line:70,column:5}},"26":{start:{line:66,column:6},end:{line:69,column:7}},"27":{start:{line:67,column:8},end:{line:67,column:38}},"28":{start:{line:68,column:8},end:{line:68,column:31}},"29":{start:{line:72,column:4},end:{line:75,column:5}},"30":{start:{line:73,column:6},end:{line:73,column:45}},"31":{start:{line:74,column:6},end:{line:74,column:33}},"32":{start:{line:77,column:4},end:{line:80,column:5}},"33":{start:{line:78,column:6},end:{line:78,column:58}},"34":{start:{line:79,column:6},end:{line:79,column:37}},"35":{start:{line:82,column:4},end:{line:82,column:16}},"36":{start:{line:92,column:4},end:{line:92,column:40}},"37":{start:{line:101,column:4},end:{line:101,column:20}},"38":{start:{line:102,column:4},end:{line:102,column:22}},"39":{start:{line:104,column:4},end:{line:105,column:13}},"40":{start:{line:105,column:6},end:{line:105,column:13}},"41":{start:{line:107,column:4},end:{line:108,column:19}},"42":{start:{line:108,column:6},end:{line:108,column:19}},"43":{start:{line:118,column:4},end:{line:118,column:37}},"44":{start:{line:128,column:17},end:{line:128,column:31}},"45":{start:{line:129,column:18},end:{line:129,column:36}},"46":{start:{line:131,column:4},end:{line:132,column:16}},"47":{start:{line:132,column:6},end:{line:132,column:16}},"48":{start:{line:134,column:4},end:{line:134,column:17}},"49":{start:{line:144,column:20},end:{line:144,column:36}},"50":{start:{line:145,column:4},end:{line:145,column:17}},"51":{start:{line:155,column:17},end:{line:155,column:31}},"52":{start:{line:157,column:4},end:{line:158,column:45}},"53":{start:{line:158,column:6},end:{line:158,column:45}},"54":{start:{line:160,column:4},end:{line:160,column:30}},"55":{start:{line:170,column:4},end:{line:176,column:5}},"56":{start:{line:171,column:6},end:{line:175,column:7}},"57":{start:{line:172,column:8},end:{line:172,column:40}},"58":{start:{line:174,column:8},end:{line:174,column:39}},"59":{start:{line:177,column:4},end:{line:177,column:22}},"60":{start:{line:188,column:20},end:{line:188,column:22}},"61":{start:{line:189,column:20},end:{line:189,column:22}},"62":{start:{line:190,column:16},end:{line:190,column:31}},"63":{start:{line:191,column:19},end:{line:191,column:30}},"64":{start:{line:192,column:18},end:{line:192,column:28}},"65":{start:{line:193,column:20},end:{line:193,column:32}},"66":{start:{line:195,column:19},end:{line:195,column:20}},"67":{start:{line:196,column:19},end:{line:196,column:20}},"68":{start:{line:197,column:17},end:{line:197,column:22}},"69":{start:{line:198,column:17},end:{line:198,column:18}},"70":{start:{line:200,column:18},end:{line:202,column:5}},"71":{start:{line:201,column:6},end:{line:201,column:54}},"72":{start:{line:204,column:21},end:{line:245,column:5}},"73":{start:{line:205,column:6},end:{line:208,column:7}},"74":{start:{line:206,column:8},end:{line:206,column:22}},"75":{start:{line:207,column:8},end:{line:207,column:35}},"76":{start:{line:210,column:21},end:{line:210,column:69}},"77":{start:{line:212,column:6},end:{line:212,column:20}},"78":{start:{line:214,column:6},end:{line:231,column:7}},"79":{start:{line:215,column:8},end:{line:218,column:9}},"80":{start:{line:216,column:10},end:{line:216,column:24}},"81":{start:{line:217,column:10},end:{line:217,column:37}},"82":{start:{line:220,column:21},end:{line:220,column:37}},"83":{start:{line:222,column:8},end:{line:222,column:22}},"84":{start:{line:224,column:8},end:{line:228,column:9}},"85":{start:{line:225,column:10},end:{line:225,column:29}},"86":{start:{line:226,column:10},end:{line:226,column:28}},"87":{start:{line:227,column:10},end:{line:227,column:29}},"88":{start:{line:230,column:8},end:{line:230,column:20}},"89":{start:{line:233,column:19},end:{line:233,column:48}},"90":{start:{line:236,column:6},end:{line:242,column:7}},"91":{start:{line:237,column:8},end:{line:237,column:50}},"92":{start:{line:238,column:8},end:{line:239,column:24}},"93":{start:{line:239,column:10},end:{line:239,column:24}},"94":{start:{line:241,column:8},end:{line:241,column:21}},"95":{start:{line:244,column:6},end:{line:244,column:39}},"96":{start:{line:247,column:4},end:{line:248,column:44}},"97":{start:{line:248,column:6},end:{line:248,column:44}},"98":{start:{line:250,column:4},end:{line:251,column:48}},"99":{start:{line:251,column:6},end:{line:251,column:48}},"100":{start:{line:253,column:4},end:{line:254,column:42}},"101":{start:{line:254,column:6},end:{line:254,column:42}},"102":{start:{line:256,column:4},end:{line:257,column:42}},"103":{start:{line:257,column:6},end:{line:257,column:42}},"104":{start:{line:259,column:4},end:{line:260,column:18}},"105":{start:{line:260,column:6},end:{line:260,column:18}},"106":{start:{line:262,column:17},end:{line:262,column:36}},"107":{start:{line:264,column:4},end:{line:265,column:46}},"108":{start:{line:265,column:6},end:{line:265,column:46}},"109":{start:{line:267,column:4},end:{line:268,column:45}},"110":{start:{line:268,column:6},end:{line:268,column:45}},"111":{start:{line:270,column:4},end:{line:271,column:53}},"112":{start:{line:271,column:6},end:{line:271,column:53}},"113":{start:{line:273,column:4},end:{line:273,column:56}},"114":{start:{line:282,column:4},end:{line:282,column:14}},"115":{start:{line:292,column:4},end:{line:292,column:25}},"116":{start:{line:304,column:4},end:{line:323,column:6}},"117":{start:{line:316,column:8},end:{line:316,column:36}},"118":{start:{line:321,column:8},end:{line:321,column:40}},"119":{start:{line:332,column:15},end:{line:332,column:16}},"120":{start:{line:333,column:4},end:{line:333,column:15}},"121":{start:{line:334,column:4},end:{line:334,column:14}},"122":{start:{line:335,column:4},end:{line:335,column:52}},"123":{start:{line:336,column:4},end:{line:336,column:36}},"124":{start:{line:337,column:4},end:{line:337,column:51}},"125":{start:{line:338,column:4},end:{line:338,column:30}},"126":{start:{line:339,column:4},end:{line:339,column:16}},"127":{start:{line:348,column:15},end:{line:348,column:29}},"128":{start:{line:350,column:4},end:{line:350,column:49}},"129":{start:{line:352,column:4},end:{line:353,column:27}},"130":{start:{line:353,column:6},end:{line:353,column:27}},"131":{start:{line:355,column:4},end:{line:355,column:16}},"132":{start:{line:364,column:4},end:{line:364,column:23}},"133":{start:{line:366,column:4},end:{line:366,column:30}},"134":{start:{line:368,column:4},end:{line:368,column:39}},"135":{start:{line:370,column:4},end:{line:371,column:25}},"136":{start:{line:371,column:6},end:{line:371,column:25}},"137":{start:{line:373,column:4},end:{line:373,column:33}},"138":{start:{line:375,column:4},end:{line:375,column:14}},"139":{start:{line:384,column:4},end:{line:384,column:22}},"140":{start:{line:386,column:4},end:{line:386,column:36}},"141":{start:{line:388,column:4},end:{line:389,column:22}},"142":{start:{line:389,column:6},end:{line:389,column:22}},"143":{start:{line:391,column:4},end:{line:391,column:14}},"144":{start:{line:401,column:17},end:{line:401,column:31}},"145":{start:{line:402,column:4},end:{line:402,column:51}},"146":{start:{line:411,column:17},end:{line:411,column:39}},"147":{start:{line:412,column:4},end:{line:412,column:59}},"148":{start:{line:422,column:4},end:{line:422,column:22}},"149":{start:{line:424,column:4},end:{line:424,column:32}},"150":{start:{line:426,column:18},end:{line:426,column:33}},"151":{start:{line:428,column:4},end:{line:429,column:38}},"152":{start:{line:428,column:17},end:{line:428,column:18}},"153":{start:{line:429,column:6},end:{line:429,column:38}},"154":{start:{line:431,column:4},end:{line:431,column:35}},"155":{start:{line:433,column:4},end:{line:433,column:16}},"156":{start:{line:443,column:4},end:{line:443,column:24}},"157":{start:{line:445,column:18},end:{line:445,column:33}},"158":{start:{line:447,column:4},end:{line:448,column:39}},"159":{start:{line:447,column:17},end:{line:447,column:18}},"160":{start:{line:448,column:6},end:{line:448,column:39}},"161":{start:{line:450,column:4},end:{line:450,column:16}},"162":{start:{line:460,column:4},end:{line:460,column:43}},"163":{start:{line:470,column:4},end:{line:470,column:51}},"164":{start:{line:480,column:4},end:{line:480,column:37}},"165":{start:{line:490,column:4},end:{line:490,column:45}},"166":{start:{line:501,column:4},end:{line:502,column:36}},"167":{start:{line:502,column:6},end:{line:502,column:36}},"168":{start:{line:503,column:4},end:{line:503,column:36}},"169":{start:{line:514,column:4},end:{line:515,column:36}},"170":{start:{line:515,column:6},end:{line:515,column:36}},"171":{start:{line:516,column:4},end:{line:516,column:44}},"172":{start:{line:526,column:4},end:{line:526,column:26}},"173":{start:{line:541,column:4},end:{line:555,column:6}},"174":{start:{line:552,column:8},end:{line:552,column:33}},"175":{start:{line:565,column:4},end:{line:565,column:50}},"176":{start:{line:566,column:4},end:{line:566,column:39}},"177":{start:{line:567,column:4},end:{line:567,column:43}},"178":{start:{line:568,column:4},end:{line:568,column:50}},"179":{start:{line:570,column:4},end:{line:570,column:25}},"180":{start:{line:572,column:4},end:{line:573,column:43}},"181":{start:{line:573,column:6},end:{line:573,column:43}},"182":{start:{line:575,column:4},end:{line:575,column:48}},"183":{start:{line:577,column:4},end:{line:577,column:32}},"184":{start:{line:579,column:4},end:{line:579,column:16}},"185":{start:{line:589,column:4},end:{line:589,column:37}},"186":{start:{line:602,column:20},end:{line:602,column:22}},"187":{start:{line:604,column:4},end:{line:605,column:49}},"188":{start:{line:605,column:6},end:{line:605,column:49}},"189":{start:{line:607,column:4},end:{line:607,column:44}},"190":{start:{line:619,column:19},end:{line:619,column:34}},"191":{start:{line:621,column:4},end:{line:622,column:23}},"192":{start:{line:622,column:6},end:{line:622,column:23}},"193":{start:{line:624,column:20},end:{line:624,column:22}},"194":{start:{line:626,column:4},end:{line:629,column:5}},"195":{start:{line:627,column:19},end:{line:627,column:28}},"196":{start:{line:628,column:6},end:{line:628,column:45}},"197":{start:{line:631,column:4},end:{line:631,column:44}},"198":{start:{line:643,column:16},end:{line:643,column:18}},"199":{start:{line:644,column:19},end:{line:644,column:21}},"200":{start:{line:645,column:17},end:{line:645,column:19}},"201":{start:{line:646,column:19},end:{line:646,column:21}},"202":{start:{line:647,column:20},end:{line:647,column:36}},"203":{start:{line:648,column:17},end:{line:648,column:18}},"204":{start:{line:650,column:18},end:{line:652,column:5}},"205":{start:{line:651,column:6},end:{line:651,column:54}},"206":{start:{line:654,column:17},end:{line:667,column:5}},"207":{start:{line:655,column:6},end:{line:656,column:27}},"208":{start:{line:656,column:8},end:{line:656,column:27}},"209":{start:{line:658,column:19},end:{line:658,column:52}},"210":{start:{line:661,column:6},end:{line:664,column:21}},"211":{start:{line:662,column:8},end:{line:662,column:54}},"212":{start:{line:664,column:8},end:{line:664,column:21}},"213":{start:{line:666,column:6},end:{line:666,column:39}},"214":{start:{line:669,column:21},end:{line:686,column:5}},"215":{start:{line:670,column:19},end:{line:670,column:20}},"216":{start:{line:672,column:6},end:{line:673,column:29}},"217":{start:{line:672,column:19},end:{line:672,column:32}},"218":{start:{line:673,column:8},end:{line:673,column:29}},"219":{start:{line:675,column:6},end:{line:675,column:24}},"220":{start:{line:677,column:6},end:{line:680,column:7}},"221":{start:{line:678,column:8},end:{line:678,column:47}},"222":{start:{line:679,column:8},end:{line:679,column:15}},"223":{start:{line:682,column:6},end:{line:682,column:53}},"224":{start:{line:684,column:6},end:{line:685,column:59}},"225":{start:{line:685,column:8},end:{line:685,column:59}},"226":{start:{line:688,column:4},end:{line:695,column:5}},"227":{start:{line:688,column:17},end:{line:688,column:18}},"228":{start:{line:689,column:17},end:{line:689,column:29}},"229":{start:{line:691,column:6},end:{line:692,column:21}},"230":{start:{line:692,column:8},end:{line:692,column:21}},"231":{start:{line:694,column:6},end:{line:694,column:29}},"232":{start:{line:697,column:4},end:{line:698,column:18}},"233":{start:{line:698,column:6},end:{line:698,column:18}},"234":{start:{line:700,column:4},end:{line:700,column:41}},"235":{start:{line:702,column:18},end:{line:702,column:63}},"236":{start:{line:703,column:4},end:{line:703,column:18}},"237":{start:{line:705,column:4},end:{line:706,column:45}},"238":{start:{line:705,column:17},end:{line:705,column:18}},"239":{start:{line:706,column:6},end:{line:706,column:45}},"240":{start:{line:708,column:19},end:{line:708,column:29}},"241":{start:{line:709,column:4},end:{line:709,column:31}},"242":{start:{line:710,column:4},end:{line:710,column:33}},"243":{start:{line:711,column:4},end:{line:711,column:35}},"244":{start:{line:712,column:4},end:{line:712,column:39}},"245":{start:{line:713,column:4},end:{line:713,column:41}},"246":{start:{line:714,column:4},end:{line:714,column:29}},"247":{start:{line:715,column:4},end:{line:715,column:29}},"248":{start:{line:716,column:4},end:{line:716,column:31}},"249":{start:{line:717,column:4},end:{line:717,column:29}},"250":{start:{line:718,column:4},end:{line:718,column:27}},"251":{start:{line:719,column:4},end:{line:719,column:25}},"252":{start:{line:720,column:4},end:{line:720,column:21}},"253":{start:{line:722,column:4},end:{line:722,column:18}},"254":{start:{line:732,column:4},end:{line:732,column:38}},"255":{start:{line:741,column:4},end:{line:741,column:35}},"256":{start:{line:751,column:4},end:{line:751,column:44}},"257":{start:{line:752,column:4},end:{line:752,column:33}},"258":{start:{line:753,column:4},end:{line:753,column:33}},"259":{start:{line:754,column:4},end:{line:754,column:38}},"260":{start:{line:762,column:0},end:{line:762,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:37,column:2},end:{line:37,column:3}},loc:{start:{line:37,column:23},end:{line:49,column:3}},line:37},"1":{name:"(anonymous_1)",decl:{start:{line:57,column:2},end:{line:57,column:3}},loc:{start:{line:57,column:23},end:{line:83,column:3}},line:57},"2":{name:"(anonymous_2)",decl:{start:{line:91,column:2},end:{line:91,column:3}},loc:{start:{line:91,column:27},end:{line:93,column:3}},line:91},"3":{name:"(anonymous_3)",decl:{start:{line:100,column:2},end:{line:100,column:3}},loc:{start:{line:100,column:15},end:{line:109,column:3}},line:100},"4":{name:"(anonymous_4)",decl:{start:{line:117,column:2},end:{line:117,column:3}},loc:{start:{line:117,column:14},end:{line:119,column:3}},line:117},"5":{name:"(anonymous_5)",decl:{start:{line:127,column:2},end:{line:127,column:3}},loc:{start:{line:127,column:16},end:{line:135,column:3}},line:127},"6":{name:"(anonymous_6)",decl:{start:{line:143,column:2},end:{line:143,column:3}},loc:{start:{line:143,column:15},end:{line:146,column:3}},line:143},"7":{name:"(anonymous_7)",decl:{start:{line:154,column:2},end:{line:154,column:3}},loc:{start:{line:154,column:14},end:{line:161,column:3}},line:154},"8":{name:"(anonymous_8)",decl:{start:{line:169,column:2},end:{line:169,column:3}},loc:{start:{line:169,column:12},end:{line:178,column:3}},line:169},"9":{name:"(anonymous_9)",decl:{start:{line:187,column:2},end:{line:187,column:3}},loc:{start:{line:187,column:16},end:{line:274,column:3}},line:187},"10":{name:"(anonymous_10)",decl:{start:{line:200,column:18},end:{line:200,column:19}},loc:{start:{line:200,column:30},end:{line:202,column:5}},line:200},"11":{name:"(anonymous_11)",decl:{start:{line:204,column:21},end:{line:204,column:22}},loc:{start:{line:204,column:38},end:{line:245,column:5}},line:204},"12":{name:"(anonymous_12)",decl:{start:{line:281,column:2},end:{line:281,column:3}},loc:{start:{line:281,column:22},end:{line:283,column:3}},line:281},"13":{name:"(anonymous_13)",decl:{start:{line:291,column:2},end:{line:291,column:3}},loc:{start:{line:291,column:20},end:{line:293,column:3}},line:291},"14":{name:"(anonymous_14)",decl:{start:{line:303,column:2},end:{line:303,column:3}},loc:{start:{line:303,column:23},end:{line:324,column:3}},line:303},"15":{name:"(anonymous_15)",decl:{start:{line:315,column:30},end:{line:315,column:31}},loc:{start:{line:315,column:40},end:{line:317,column:7}},line:315},"16":{name:"(anonymous_16)",decl:{start:{line:320,column:24},end:{line:320,column:25}},loc:{start:{line:320,column:35},end:{line:322,column:7}},line:320},"17":{name:"(anonymous_17)",decl:{start:{line:331,column:2},end:{line:331,column:3}},loc:{start:{line:331,column:12},end:{line:340,column:3}},line:331},"18":{name:"(anonymous_18)",decl:{start:{line:347,column:2},end:{line:347,column:3}},loc:{start:{line:347,column:20},end:{line:356,column:3}},line:347},"19":{name:"(anonymous_19)",decl:{start:{line:363,column:2},end:{line:363,column:3}},loc:{start:{line:363,column:15},end:{line:376,column:3}},line:363},"20":{name:"(anonymous_20)",decl:{start:{line:383,column:2},end:{line:383,column:3}},loc:{start:{line:383,column:23},end:{line:392,column:3}},line:383},"21":{name:"(anonymous_21)",decl:{start:{line:400,column:2},end:{line:400,column:3}},loc:{start:{line:400,column:10},end:{line:403,column:3}},line:400},"22":{name:"(anonymous_22)",decl:{start:{line:410,column:2},end:{line:410,column:3}},loc:{start:{line:410,column:18},end:{line:413,column:3}},line:410},"23":{name:"(anonymous_23)",decl:{start:{line:421,column:2},end:{line:421,column:3}},loc:{start:{line:421,column:17},end:{line:434,column:3}},line:421},"24":{name:"(anonymous_24)",decl:{start:{line:442,column:2},end:{line:442,column:3}},loc:{start:{line:442,column:26},end:{line:451,column:3}},line:442},"25":{name:"(anonymous_25)",decl:{start:{line:459,column:2},end:{line:459,column:3}},loc:{start:{line:459,column:16},end:{line:461,column:3}},line:459},"26":{name:"(anonymous_26)",decl:{start:{line:469,column:2},end:{line:469,column:3}},loc:{start:{line:469,column:24},end:{line:471,column:3}},line:469},"27":{name:"(anonymous_27)",decl:{start:{line:479,column:2},end:{line:479,column:3}},loc:{start:{line:479,column:24},end:{line:481,column:3}},line:479},"28":{name:"(anonymous_28)",decl:{start:{line:489,column:2},end:{line:489,column:3}},loc:{start:{line:489,column:32},end:{line:491,column:3}},line:489},"29":{name:"(anonymous_29)",decl:{start:{line:500,column:2},end:{line:500,column:3}},loc:{start:{line:500,column:28},end:{line:504,column:3}},line:500},"30":{name:"(anonymous_30)",decl:{start:{line:513,column:2},end:{line:513,column:3}},loc:{start:{line:513,column:36},end:{line:517,column:3}},line:513},"31":{name:"(anonymous_31)",decl:{start:{line:525,column:2},end:{line:525,column:3}},loc:{start:{line:525,column:11},end:{line:527,column:3}},line:525},"32":{name:"(anonymous_32)",decl:{start:{line:540,column:2},end:{line:540,column:3}},loc:{start:{line:540,column:33},end:{line:556,column:3}},line:540},"33":{name:"(anonymous_33)",decl:{start:{line:551,column:30},end:{line:551,column:31}},loc:{start:{line:551,column:40},end:{line:553,column:7}},line:551},"34":{name:"(anonymous_34)",decl:{start:{line:564,column:2},end:{line:564,column:3}},loc:{start:{line:564,column:17},end:{line:580,column:3}},line:564},"35":{name:"(anonymous_35)",decl:{start:{line:588,column:2},end:{line:588,column:3}},loc:{start:{line:588,column:24},end:{line:590,column:3}},line:588},"36":{name:"(anonymous_36)",decl:{start:{line:601,column:2},end:{line:601,column:3}},loc:{start:{line:601,column:34},end:{line:608,column:3}},line:601},"37":{name:"(anonymous_37)",decl:{start:{line:618,column:2},end:{line:618,column:3}},loc:{start:{line:618,column:35},end:{line:632,column:3}},line:618},"38":{name:"(anonymous_38)",decl:{start:{line:642,column:2},end:{line:642,column:3}},loc:{start:{line:642,column:37},end:{line:723,column:3}},line:642},"39":{name:"(anonymous_39)",decl:{start:{line:650,column:18},end:{line:650,column:19}},loc:{start:{line:650,column:30},end:{line:652,column:5}},line:650},"40":{name:"(anonymous_40)",decl:{start:{line:654,column:17},end:{line:654,column:18}},loc:{start:{line:654,column:42},end:{line:667,column:5}},line:654},"41":{name:"(anonymous_41)",decl:{start:{line:669,column:21},end:{line:669,column:22}},loc:{start:{line:669,column:55},end:{line:686,column:5}},line:669},"42":{name:"(anonymous_42)",decl:{start:{line:731,column:2},end:{line:731,column:3}},loc:{start:{line:731,column:28},end:{line:733,column:3}},line:731},"43":{name:"(anonymous_43)",decl:{start:{line:740,column:2},end:{line:740,column:3}},loc:{start:{line:740,column:14},end:{line:742,column:3}},line:740},"44":{name:"(anonymous_44)",decl:{start:{line:750,column:2},end:{line:750,column:3}},loc:{start:{line:750,column:43},end:{line:755,column:3}},line:750}},branchMap:{"0":{loc:{start:{line:47,column:4},end:{line:48,column:32}},type:"if",locations:[{start:{line:47,column:4},end:{line:48,column:32}},{start:{line:47,column:4},end:{line:48,column:32}}],line:47},"1":{loc:{start:{line:65,column:4},end:{line:70,column:5}},type:"if",locations:[{start:{line:65,column:4},end:{line:70,column:5}},{start:{line:65,column:4},end:{line:70,column:5}}],line:65},"2":{loc:{start:{line:72,column:4},end:{line:75,column:5}},type:"if",locations:[{start:{line:72,column:4},end:{line:75,column:5}},{start:{line:72,column:4},end:{line:75,column:5}}],line:72},"3":{loc:{start:{line:77,column:4},end:{line:80,column:5}},type:"if",locations:[{start:{line:77,column:4},end:{line:80,column:5}},{start:{line:77,column:4},end:{line:80,column:5}}],line:77},"4":{loc:{start:{line:104,column:4},end:{line:105,column:13}},type:"if",locations:[{start:{line:104,column:4},end:{line:105,column:13}},{start:{line:104,column:4},end:{line:105,column:13}}],line:104},"5":{loc:{start:{line:131,column:4},end:{line:132,column:16}},type:"if",locations:[{start:{line:131,column:4},end:{line:132,column:16}},{start:{line:131,column:4},end:{line:132,column:16}}],line:131},"6":{loc:{start:{line:157,column:4},end:{line:158,column:45}},type:"if",locations:[{start:{line:157,column:4},end:{line:158,column:45}},{start:{line:157,column:4},end:{line:158,column:45}}],line:157},"7":{loc:{start:{line:170,column:4},end:{line:176,column:5}},type:"if",locations:[{start:{line:170,column:4},end:{line:176,column:5}},{start:{line:170,column:4},end:{line:176,column:5}}],line:170},"8":{loc:{start:{line:205,column:6},end:{line:208,column:7}},type:"if",locations:[{start:{line:205,column:6},end:{line:208,column:7}},{start:{line:205,column:6},end:{line:208,column:7}}],line:205},"9":{loc:{start:{line:214,column:6},end:{line:231,column:7}},type:"if",locations:[{start:{line:214,column:6},end:{line:231,column:7}},{start:{line:214,column:6},end:{line:231,column:7}}],line:214},"10":{loc:{start:{line:214,column:10},end:{line:214,column:33}},type:"binary-expr",locations:[{start:{line:214,column:10},end:{line:214,column:22}},{start:{line:214,column:26},end:{line:214,column:33}}],line:214},"11":{loc:{start:{line:215,column:8},end:{line:218,column:9}},type:"if",locations:[{start:{line:215,column:8},end:{line:218,column:9}},{start:{line:215,column:8},end:{line:218,column:9}}],line:215},"12":{loc:{start:{line:224,column:8},end:{line:228,column:9}},type:"if",locations:[{start:{line:224,column:8},end:{line:228,column:9}},{start:{line:224,column:8},end:{line:228,column:9}}],line:224},"13":{loc:{start:{line:224,column:12},end:{line:224,column:34}},type:"binary-expr",locations:[{start:{line:224,column:12},end:{line:224,column:24}},{start:{line:224,column:28},end:{line:224,column:34}}],line:224},"14":{loc:{start:{line:236,column:6},end:{line:242,column:7}},type:"if",locations:[{start:{line:236,column:6},end:{line:242,column:7}},{start:{line:236,column:6},end:{line:242,column:7}}],line:236},"15":{loc:{start:{line:238,column:8},end:{line:239,column:24}},type:"if",locations:[{start:{line:238,column:8},end:{line:239,column:24}},{start:{line:238,column:8},end:{line:239,column:24}}],line:238},"16":{loc:{start:{line:247,column:4},end:{line:248,column:44}},type:"if",locations:[{start:{line:247,column:4},end:{line:248,column:44}},{start:{line:247,column:4},end:{line:248,column:44}}],line:247},"17":{loc:{start:{line:250,column:4},end:{line:251,column:48}},type:"if",locations:[{start:{line:250,column:4},end:{line:251,column:48}},{start:{line:250,column:4},end:{line:251,column:48}}],line:250},"18":{loc:{start:{line:253,column:4},end:{line:254,column:42}},type:"if",locations:[{start:{line:253,column:4},end:{line:254,column:42}},{start:{line:253,column:4},end:{line:254,column:42}}],line:253},"19":{loc:{start:{line:256,column:4},end:{line:257,column:42}},type:"if",locations:[{start:{line:256,column:4},end:{line:257,column:42}},{start:{line:256,column:4},end:{line:257,column:42}}],line:256},"20":{loc:{start:{line:264,column:4},end:{line:265,column:46}},type:"if",locations:[{start:{line:264,column:4},end:{line:265,column:46}},{start:{line:264,column:4},end:{line:265,column:46}}],line:264},"21":{loc:{start:{line:267,column:4},end:{line:268,column:45}},type:"if",locations:[{start:{line:267,column:4},end:{line:268,column:45}},{start:{line:267,column:4},end:{line:268,column:45}}],line:267},"22":{loc:{start:{line:270,column:4},end:{line:271,column:53}},type:"if",locations:[{start:{line:270,column:4},end:{line:271,column:53}},{start:{line:270,column:4},end:{line:271,column:53}}],line:270},"23":{loc:{start:{line:306,column:14},end:{line:306,column:42}},type:"cond-expr",locations:[{start:{line:306,column:31},end:{line:306,column:37}},{start:{line:306,column:40},end:{line:306,column:42}}],line:306},"24":{loc:{start:{line:501,column:4},end:{line:502,column:36}},type:"if",locations:[{start:{line:501,column:4},end:{line:502,column:36}},{start:{line:501,column:4},end:{line:502,column:36}}],line:501},"25":{loc:{start:{line:514,column:4},end:{line:515,column:36}},type:"if",locations:[{start:{line:514,column:4},end:{line:515,column:36}},{start:{line:514,column:4},end:{line:515,column:36}}],line:514},"26":{loc:{start:{line:605,column:19},end:{line:605,column:47}},type:"cond-expr",locations:[{start:{line:605,column:42},end:{line:605,column:43}},{start:{line:605,column:46},end:{line:605,column:47}}],line:605},"27":{loc:{start:{line:628,column:19},end:{line:628,column:43}},type:"cond-expr",locations:[{start:{line:628,column:38},end:{line:628,column:39}},{start:{line:628,column:42},end:{line:628,column:43}}],line:628},"28":{loc:{start:{line:655,column:6},end:{line:656,column:27}},type:"if",locations:[{start:{line:655,column:6},end:{line:656,column:27}},{start:{line:655,column:6},end:{line:656,column:27}}],line:655},"29":{loc:{start:{line:661,column:6},end:{line:664,column:21}},type:"if",locations:[{start:{line:661,column:6},end:{line:664,column:21}},{start:{line:661,column:6},end:{line:664,column:21}}],line:661},"30":{loc:{start:{line:672,column:34},end:{line:672,column:74}},type:"binary-expr",locations:[{start:{line:672,column:34},end:{line:672,column:59}},{start:{line:672,column:63},end:{line:672,column:74}}],line:672},"31":{loc:{start:{line:677,column:6},end:{line:680,column:7}},type:"if",locations:[{start:{line:677,column:6},end:{line:680,column:7}},{start:{line:677,column:6},end:{line:680,column:7}}],line:677},"32":{loc:{start:{line:677,column:10},end:{line:677,column:33}},type:"binary-expr",locations:[{start:{line:677,column:10},end:{line:677,column:22}},{start:{line:677,column:26},end:{line:677,column:33}}],line:677},"33":{loc:{start:{line:684,column:6},end:{line:685,column:59}},type:"if",locations:[{start:{line:684,column:6},end:{line:685,column:59}},{start:{line:684,column:6},end:{line:685,column:59}}],line:684},"34":{loc:{start:{line:691,column:6},end:{line:692,column:21}},type:"if",locations:[{start:{line:691,column:6},end:{line:692,column:21}},{start:{line:691,column:6},end:{line:692,column:21}}],line:691},"35":{loc:{start:{line:751,column:16},end:{line:751,column:43}},type:"binary-expr",locations:[{start:{line:751,column:16},end:{line:751,column:20}},{start:{line:751,column:24},end:{line:751,column:43}}],line:751},"36":{loc:{start:{line:752,column:19},end:{line:752,column:32}},type:"binary-expr",locations:[{start:{line:752,column:19},end:{line:752,column:26}},{start:{line:752,column:30},end:{line:752,column:32}}],line:752},"37":{loc:{start:{line:753,column:19},end:{line:753,column:32}},type:"binary-expr",locations:[{start:{line:753,column:19},end:{line:753,column:26}},{start:{line:753,column:30},end:{line:753,column:32}}],line:753},"38":{loc:{start:{line:754,column:15},end:{line:754,column:37}},type:"binary-expr",locations:[{start:{line:754,column:15},end:{line:754,column:18}},{start:{line:754,column:22},end:{line:754,column:37}}],line:754}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"57066d34bd0b8aa20eb9511c6023538034521ef2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1snm1y855=function(){return actualCoverage;};}return actualCoverage;}cov_1snm1y855();const assert=(cov_1snm1y855().s[0]++,require('bsert'));const bio=(cov_1snm1y855().s[1]++,require('bufio'));const{BufferMap,BufferSet}=(cov_1snm1y855().s[2]++,require('buffer-map'));const util=(cov_1snm1y855().s[3]++,require('../utils/util'));const hash256=(cov_1snm1y855().s[4]++,require('bcrypto/lib/hash256'));const consensus=(cov_1snm1y855().s[5]++,require('../protocol/consensus'));const AbstractBlock=(cov_1snm1y855().s[6]++,require('./abstractblock'));const TX=(cov_1snm1y855().s[7]++,require('./tx'));const Headers=(cov_1snm1y855().s[8]++,require('./headers'));const DUMMY=(cov_1snm1y855().s[9]++,Buffer.from([0]));const{encoding}=(cov_1snm1y855().s[10]++,bio);const{inspectSymbol}=(cov_1snm1y855().s[11]++,require('../utils'));/**
 * Merkle Block
 * Represents a merkle (filtered) block.
 * @alias module:primitives.MerkleBlock
 * @extends AbstractBlock
 */class MerkleBlock extends AbstractBlock{/**
   * Create a merkle block.
   * @constructor
   * @param {Object} options
   */constructor(options){cov_1snm1y855().f[0]++;cov_1snm1y855().s[12]++;super();cov_1snm1y855().s[13]++;this.txs=[];cov_1snm1y855().s[14]++;this.hashes=[];cov_1snm1y855().s[15]++;this.flags=DUMMY;cov_1snm1y855().s[16]++;this.totalTX=0;cov_1snm1y855().s[17]++;this._tree=null;cov_1snm1y855().s[18]++;if(options){cov_1snm1y855().b[0][0]++;cov_1snm1y855().s[19]++;this.fromOptions(options);}else{cov_1snm1y855().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_1snm1y855().f[1]++;cov_1snm1y855().s[20]++;this.parseOptions(options);cov_1snm1y855().s[21]++;assert(options,'MerkleBlock data is required.');cov_1snm1y855().s[22]++;assert(Array.isArray(options.hashes));cov_1snm1y855().s[23]++;assert(Buffer.isBuffer(options.flags));cov_1snm1y855().s[24]++;assert(options.totalTX>>>0===options.totalTX);cov_1snm1y855().s[25]++;if(options.hashes){cov_1snm1y855().b[1][0]++;cov_1snm1y855().s[26]++;for(const hash of options.hashes){cov_1snm1y855().s[27]++;assert(Buffer.isBuffer(hash));cov_1snm1y855().s[28]++;this.hashes.push(hash);}}else{cov_1snm1y855().b[1][1]++;}cov_1snm1y855().s[29]++;if(options.flags){cov_1snm1y855().b[2][0]++;cov_1snm1y855().s[30]++;assert(Buffer.isBuffer(options.flags));cov_1snm1y855().s[31]++;this.flags=options.flags;}else{cov_1snm1y855().b[2][1]++;}cov_1snm1y855().s[32]++;if(options.totalTX!=null){cov_1snm1y855().b[3][0]++;cov_1snm1y855().s[33]++;assert(options.totalTX>>>0===options.totalTX);cov_1snm1y855().s[34]++;this.totalTX=options.totalTX;}else{cov_1snm1y855().b[3][1]++;}cov_1snm1y855().s[35]++;return this;}/**
   * Instantiate merkle block from options object.
   * @param {Object} options
   * @returns {MerkleBlock}
   */static fromOptions(data){cov_1snm1y855().f[2]++;cov_1snm1y855().s[36]++;return new this().fromOptions(data);}/**
   * Clear any cached values.
   * @param {Boolean?} all - Clear transactions.
   */refresh(all){cov_1snm1y855().f[3]++;cov_1snm1y855().s[37]++;this._refresh();cov_1snm1y855().s[38]++;this._tree=null;cov_1snm1y855().s[39]++;if(!all){cov_1snm1y855().b[4][0]++;cov_1snm1y855().s[40]++;return;}else{cov_1snm1y855().b[4][1]++;}cov_1snm1y855().s[41]++;for(const tx of this.txs){cov_1snm1y855().s[42]++;tx.refresh();}}/**
   * Test the block's _matched_ transaction vector against a hash.
   * @param {Hash} hash
   * @returns {Boolean}
   */hasTX(hash){cov_1snm1y855().f[4]++;cov_1snm1y855().s[43]++;return this.indexOf(hash)!==-1;}/**
   * Test the block's _matched_ transaction vector against a hash.
   * @param {Hash} hash
   * @returns {Number} Index.
   */indexOf(hash){cov_1snm1y855().f[5]++;const tree=(cov_1snm1y855().s[44]++,this.getTree());const index=(cov_1snm1y855().s[45]++,tree.map.get(hash));cov_1snm1y855().s[46]++;if(index==null){cov_1snm1y855().b[5][0]++;cov_1snm1y855().s[47]++;return-1;}else{cov_1snm1y855().b[5][1]++;}cov_1snm1y855().s[48]++;return index;}/**
   * Verify the partial merkletree.
   * @private
   * @returns {Boolean}
   */verifyBody(){cov_1snm1y855().f[6]++;const[valid]=(cov_1snm1y855().s[49]++,this.checkBody());cov_1snm1y855().s[50]++;return valid;}/**
   * Verify the partial merkletree.
   * @private
   * @returns {Array} [valid, reason, score]
   */checkBody(){cov_1snm1y855().f[7]++;const tree=(cov_1snm1y855().s[51]++,this.getTree());cov_1snm1y855().s[52]++;if(!tree.root.equals(this.merkleRoot)){cov_1snm1y855().b[6][0]++;cov_1snm1y855().s[53]++;return[false,'bad-txnmrklroot',100];}else{cov_1snm1y855().b[6][1]++;}cov_1snm1y855().s[54]++;return[true,'valid',0];}/**
   * Extract the matches from partial merkle
   * tree and calculate merkle root.
   * @returns {Object}
   */getTree(){cov_1snm1y855().f[8]++;cov_1snm1y855().s[55]++;if(!this._tree){cov_1snm1y855().b[7][0]++;cov_1snm1y855().s[56]++;try{cov_1snm1y855().s[57]++;this._tree=this.extractTree();}catch(e){cov_1snm1y855().s[58]++;this._tree=new PartialTree();}}else{cov_1snm1y855().b[7][1]++;}cov_1snm1y855().s[59]++;return this._tree;}/**
   * Extract the matches from partial merkle
   * tree and calculate merkle root.
   * @private
   * @returns {Object}
   */extractTree(){cov_1snm1y855().f[9]++;const matches=(cov_1snm1y855().s[60]++,[]);const indexes=(cov_1snm1y855().s[61]++,[]);const map=(cov_1snm1y855().s[62]++,new BufferMap());const hashes=(cov_1snm1y855().s[63]++,this.hashes);const flags=(cov_1snm1y855().s[64]++,this.flags);const totalTX=(cov_1snm1y855().s[65]++,this.totalTX);let bitsUsed=(cov_1snm1y855().s[66]++,0);let hashUsed=(cov_1snm1y855().s[67]++,0);let failed=(cov_1snm1y855().s[68]++,false);let height=(cov_1snm1y855().s[69]++,0);cov_1snm1y855().s[70]++;const width=height=>{cov_1snm1y855().f[10]++;cov_1snm1y855().s[71]++;return totalTX+(1<<height)-1>>>height;};cov_1snm1y855().s[72]++;const traverse=(height,pos)=>{cov_1snm1y855().f[11]++;cov_1snm1y855().s[73]++;if(bitsUsed>=flags.length*8){cov_1snm1y855().b[8][0]++;cov_1snm1y855().s[74]++;failed=true;cov_1snm1y855().s[75]++;return consensus.ZERO_HASH;}else{cov_1snm1y855().b[8][1]++;}const parent=(cov_1snm1y855().s[76]++,flags[bitsUsed/8|0]>>>bitsUsed%8&1);cov_1snm1y855().s[77]++;bitsUsed+=1;cov_1snm1y855().s[78]++;if((cov_1snm1y855().b[10][0]++,height===0)||(cov_1snm1y855().b[10][1]++,!parent)){cov_1snm1y855().b[9][0]++;cov_1snm1y855().s[79]++;if(hashUsed>=hashes.length){cov_1snm1y855().b[11][0]++;cov_1snm1y855().s[80]++;failed=true;cov_1snm1y855().s[81]++;return consensus.ZERO_HASH;}else{cov_1snm1y855().b[11][1]++;}const hash=(cov_1snm1y855().s[82]++,hashes[hashUsed]);cov_1snm1y855().s[83]++;hashUsed+=1;cov_1snm1y855().s[84]++;if((cov_1snm1y855().b[13][0]++,height===0)&&(cov_1snm1y855().b[13][1]++,parent)){cov_1snm1y855().b[12][0]++;cov_1snm1y855().s[85]++;matches.push(hash);cov_1snm1y855().s[86]++;indexes.push(pos);cov_1snm1y855().s[87]++;map.set(hash,pos);}else{cov_1snm1y855().b[12][1]++;}cov_1snm1y855().s[88]++;return hash;}else{cov_1snm1y855().b[9][1]++;}const left=(cov_1snm1y855().s[89]++,traverse(height-1,pos*2));let right;cov_1snm1y855().s[90]++;if(pos*2+1<width(height-1)){cov_1snm1y855().b[14][0]++;cov_1snm1y855().s[91]++;right=traverse(height-1,pos*2+1);cov_1snm1y855().s[92]++;if(right.equals(left)){cov_1snm1y855().b[15][0]++;cov_1snm1y855().s[93]++;failed=true;}else{cov_1snm1y855().b[15][1]++;}}else{cov_1snm1y855().b[14][1]++;cov_1snm1y855().s[94]++;right=left;}cov_1snm1y855().s[95]++;return hash256.root(left,right);};cov_1snm1y855().s[96]++;if(totalTX===0){cov_1snm1y855().b[16][0]++;cov_1snm1y855().s[97]++;throw new Error('Zero transactions.');}else{cov_1snm1y855().b[16][1]++;}cov_1snm1y855().s[98]++;if(totalTX>consensus.MAX_BLOCK_SIZE/60){cov_1snm1y855().b[17][0]++;cov_1snm1y855().s[99]++;throw new Error('Too many transactions.');}else{cov_1snm1y855().b[17][1]++;}cov_1snm1y855().s[100]++;if(hashes.length>totalTX){cov_1snm1y855().b[18][0]++;cov_1snm1y855().s[101]++;throw new Error('Too many hashes.');}else{cov_1snm1y855().b[18][1]++;}cov_1snm1y855().s[102]++;if(flags.length*8<hashes.length){cov_1snm1y855().b[19][0]++;cov_1snm1y855().s[103]++;throw new Error('Flags too small.');}else{cov_1snm1y855().b[19][1]++;}cov_1snm1y855().s[104]++;while(width(height)>1){cov_1snm1y855().s[105]++;height+=1;}const root=(cov_1snm1y855().s[106]++,traverse(height,0));cov_1snm1y855().s[107]++;if(failed){cov_1snm1y855().b[20][0]++;cov_1snm1y855().s[108]++;throw new Error('Mutated merkle tree.');}else{cov_1snm1y855().b[20][1]++;}cov_1snm1y855().s[109]++;if(((bitsUsed+7)/8|0)!==flags.length){cov_1snm1y855().b[21][0]++;cov_1snm1y855().s[110]++;throw new Error('Too many flag bits.');}else{cov_1snm1y855().b[21][1]++;}cov_1snm1y855().s[111]++;if(hashUsed!==hashes.length){cov_1snm1y855().b[22][0]++;cov_1snm1y855().s[112]++;throw new Error('Incorrect number of hashes.');}else{cov_1snm1y855().b[22][1]++;}cov_1snm1y855().s[113]++;return new PartialTree(root,matches,indexes,map);}/**
   * Extract the coinbase height (always -1).
   * @returns {Number}
   */getCoinbaseHeight(){cov_1snm1y855().f[12]++;cov_1snm1y855().s[114]++;return-1;}/**
   * Inspect the block and return a more
   * user-friendly representation of the data.
   * @returns {Object}
   */[inspectSymbol](){cov_1snm1y855().f[13]++;cov_1snm1y855().s[115]++;return this.format();}/**
   * Inspect the block and return a more
   * user-friendly representation of the data.
   * @param {CoinView} view
   * @param {Number} height
   * @returns {Object}
   */format(view,height){cov_1snm1y855().f[14]++;cov_1snm1y855().s[116]++;return{hash:this.rhash(),height:height!=null?(cov_1snm1y855().b[23][0]++,height):(cov_1snm1y855().b[23][1]++,-1),date:util.date(this.time),version:this.version.toString(16),prevBlock:util.revHex(this.prevBlock),merkleRoot:util.revHex(this.merkleRoot),time:this.time,bits:this.bits,nonce:this.nonce,totalTX:this.totalTX,hashes:this.hashes.map(hash=>{cov_1snm1y855().f[15]++;cov_1snm1y855().s[117]++;return hash.toString('hex');}),flags:this.flags,map:this.getTree().map,txs:this.txs.map((tx,i)=>{cov_1snm1y855().f[16]++;cov_1snm1y855().s[118]++;return tx.format(view,null,i);})};}/**
   * Get merkleblock size.
   * @returns {Number} Size.
   */getSize(){cov_1snm1y855().f[17]++;let size=(cov_1snm1y855().s[119]++,0);cov_1snm1y855().s[120]++;size+=80;cov_1snm1y855().s[121]++;size+=4;cov_1snm1y855().s[122]++;size+=encoding.sizeVarint(this.hashes.length);cov_1snm1y855().s[123]++;size+=this.hashes.length*32;cov_1snm1y855().s[124]++;size+=encoding.sizeVarint(this.flags.length);cov_1snm1y855().s[125]++;size+=this.flags.length;cov_1snm1y855().s[126]++;return size;}/**
   * Get merkleblock size with transactions.
   * @returns {Number} Size.
   */getExtendedSize(){cov_1snm1y855().f[18]++;let size=(cov_1snm1y855().s[127]++,this.getSize());cov_1snm1y855().s[128]++;size+=encoding.sizeVarint(this.txs.length);cov_1snm1y855().s[129]++;for(const tx of this.txs){cov_1snm1y855().s[130]++;size+=tx.getSize();}cov_1snm1y855().s[131]++;return size;}/**
   * Write the merkleblock to a buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_1snm1y855().f[19]++;cov_1snm1y855().s[132]++;this.writeHead(bw);cov_1snm1y855().s[133]++;bw.writeU32(this.totalTX);cov_1snm1y855().s[134]++;bw.writeVarint(this.hashes.length);cov_1snm1y855().s[135]++;for(const hash of this.hashes){cov_1snm1y855().s[136]++;bw.writeHash(hash);}cov_1snm1y855().s[137]++;bw.writeVarBytes(this.flags);cov_1snm1y855().s[138]++;return bw;}/**
   * Write the merkleblock to a buffer writer with transactions.
   * @param {BufferWriter} bw
   */toExtendedWriter(bw){cov_1snm1y855().f[20]++;cov_1snm1y855().s[139]++;this.toWriter(bw);cov_1snm1y855().s[140]++;bw.writeVarint(this.txs.length);cov_1snm1y855().s[141]++;for(const tx of this.txs){cov_1snm1y855().s[142]++;tx.toWriter(bw);}cov_1snm1y855().s[143]++;return bw;}/**
   * Serialize the merkleblock.
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Buffer|String}
   */toRaw(){cov_1snm1y855().f[21]++;const size=(cov_1snm1y855().s[144]++,this.getSize());cov_1snm1y855().s[145]++;return this.toWriter(bio.write(size)).render();}/**
   * Serialize the merkleblock with transactions.
   * @returns {Buffer}
   */toExtendedRaw(){cov_1snm1y855().f[22]++;const size=(cov_1snm1y855().s[146]++,this.getExtendedSize());cov_1snm1y855().s[147]++;return this.toExtendedWriter(bio.write(size)).render();}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_1snm1y855().f[23]++;cov_1snm1y855().s[148]++;this.readHead(br);cov_1snm1y855().s[149]++;this.totalTX=br.readU32();const count=(cov_1snm1y855().s[150]++,br.readVarint());cov_1snm1y855().s[151]++;for(let i=(cov_1snm1y855().s[152]++,0);i<count;i++){cov_1snm1y855().s[153]++;this.hashes.push(br.readHash());}cov_1snm1y855().s[154]++;this.flags=br.readVarBytes();cov_1snm1y855().s[155]++;return this;}/**
   * Inject properties with transactions from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromExtendedReader(br){cov_1snm1y855().f[24]++;cov_1snm1y855().s[156]++;this.fromReader(br);const count=(cov_1snm1y855().s[157]++,br.readVarint());cov_1snm1y855().s[158]++;for(let i=(cov_1snm1y855().s[159]++,0);i<count;i++){cov_1snm1y855().s[160]++;this.txs.push(TX.fromReader(br));}cov_1snm1y855().s[161]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_1snm1y855().f[25]++;cov_1snm1y855().s[162]++;return this.fromReader(bio.read(data));}/**
   * Inject properties with transactions from serialized data.
   * @private
   * @param {Buffer} data
   */fromExtendedRaw(data){cov_1snm1y855().f[26]++;cov_1snm1y855().s[163]++;return this.fromExtendedReader(bio.read(data));}/**
   * Instantiate a merkleblock from a buffer reader.
   * @param {BufferReader} br
   * @returns {MerkleBlock}
   */static fromReader(br){cov_1snm1y855().f[27]++;cov_1snm1y855().s[164]++;return new this().fromReader(br);}/**
   * Instantiate a merkleblock with transactions from a buffer reader.
   * @param {BufferReader} br
   * @returns {MerkleBlock}
   */static fromExtendedReader(br){cov_1snm1y855().f[28]++;cov_1snm1y855().s[165]++;return new this().fromExtendedReader(br);}/**
   * Instantiate a merkleblock from a serialized data.
   * @param {Buffer} data
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {MerkleBlock}
   */static fromRaw(data,enc){cov_1snm1y855().f[29]++;cov_1snm1y855().s[166]++;if(typeof data==='string'){cov_1snm1y855().b[24][0]++;cov_1snm1y855().s[167]++;data=Buffer.from(data,enc);}else{cov_1snm1y855().b[24][1]++;}cov_1snm1y855().s[168]++;return new this().fromRaw(data);}/**
   * Instantiate a merkleblock with transactions from a serialized data.
   * @param {Buffer} data
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {MerkleBlock}
   */static fromExtendedRaw(data,enc){cov_1snm1y855().f[30]++;cov_1snm1y855().s[169]++;if(typeof data==='string'){cov_1snm1y855().b[25][0]++;cov_1snm1y855().s[170]++;data=Buffer.from(data,enc);}else{cov_1snm1y855().b[25][1]++;}cov_1snm1y855().s[171]++;return new this().fromExtendedRaw(data);}/**
   * Convert the block to an object suitable
   * for JSON serialization.
   * @returns {Object}
   */toJSON(){cov_1snm1y855().f[31]++;cov_1snm1y855().s[172]++;return this.getJSON();}/**
   * Convert the block to an object suitable
   * for JSON serialization. Note that the hashes
   * will be reversed to abide by bitcoind's legacy
   * of little-endian uint256s.
   * @param {Network} network
   * @param {CoinView} view
   * @param {Number} height
   * @returns {Object}
   */getJSON(network,view,height){cov_1snm1y855().f[32]++;cov_1snm1y855().s[173]++;return{hash:this.rhash(),height:height,version:this.version,prevBlock:util.revHex(this.prevBlock),merkleRoot:util.revHex(this.merkleRoot),time:this.time,bits:this.bits,nonce:this.nonce,totalTX:this.totalTX,hashes:this.hashes.map(hash=>{cov_1snm1y855().f[33]++;cov_1snm1y855().s[174]++;return util.revHex(hash);}),flags:this.flags.toString('hex')};}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   */fromJSON(json){cov_1snm1y855().f[34]++;cov_1snm1y855().s[175]++;assert(json,'MerkleBlock data is required.');cov_1snm1y855().s[176]++;assert(Array.isArray(json.hashes));cov_1snm1y855().s[177]++;assert(typeof json.flags==='string');cov_1snm1y855().s[178]++;assert(json.totalTX>>>0===json.totalTX);cov_1snm1y855().s[179]++;this.parseJSON(json);cov_1snm1y855().s[180]++;for(const hash of json.hashes){cov_1snm1y855().s[181]++;this.hashes.push(util.fromRev(hash));}cov_1snm1y855().s[182]++;this.flags=Buffer.from(json.flags,'hex');cov_1snm1y855().s[183]++;this.totalTX=json.totalTX;cov_1snm1y855().s[184]++;return this;}/**
   * Instantiate a merkle block from a jsonified block object.
   * @param {Object} json - The jsonified block object.
   * @returns {MerkleBlock}
   */static fromJSON(json){cov_1snm1y855().f[35]++;cov_1snm1y855().s[185]++;return new this().fromJSON(json);}/**
   * Create a merkleblock from a {@link Block} object, passing
   * it through a filter first. This will build the partial
   * merkle tree.
   * @param {Block} block
   * @param {Bloom} filter
   * @returns {MerkleBlock}
   */static fromBlock(block,filter){cov_1snm1y855().f[36]++;const matches=(cov_1snm1y855().s[186]++,[]);cov_1snm1y855().s[187]++;for(const tx of block.txs){cov_1snm1y855().s[188]++;matches.push(tx.isWatched(filter)?(cov_1snm1y855().b[26][0]++,1):(cov_1snm1y855().b[26][1]++,0));}cov_1snm1y855().s[189]++;return this.fromMatches(block,matches);}/**
   * Create a merkleblock from an array of txids.
   * This will build the partial merkle tree.
   * @param {Block} block
   * @param {Hash[]} hashes
   * @returns {MerkleBlock}
   */static fromHashes(block,hashes){cov_1snm1y855().f[37]++;const filter=(cov_1snm1y855().s[190]++,new BufferSet());cov_1snm1y855().s[191]++;for(const hash of hashes){cov_1snm1y855().s[192]++;filter.add(hash);}const matches=(cov_1snm1y855().s[193]++,[]);cov_1snm1y855().s[194]++;for(const tx of block.txs){const hash=(cov_1snm1y855().s[195]++,tx.hash());cov_1snm1y855().s[196]++;matches.push(filter.has(hash)?(cov_1snm1y855().b[27][0]++,1):(cov_1snm1y855().b[27][1]++,0));}cov_1snm1y855().s[197]++;return this.fromMatches(block,matches);}/**
   * Create a merkleblock from an array of matches.
   * This will build the partial merkle tree.
   * @param {Block} block
   * @param {Number[]} matches
   * @returns {MerkleBlock}
   */static fromMatches(block,matches){cov_1snm1y855().f[38]++;const txs=(cov_1snm1y855().s[198]++,[]);const leaves=(cov_1snm1y855().s[199]++,[]);const bits=(cov_1snm1y855().s[200]++,[]);const hashes=(cov_1snm1y855().s[201]++,[]);const totalTX=(cov_1snm1y855().s[202]++,block.txs.length);let height=(cov_1snm1y855().s[203]++,0);cov_1snm1y855().s[204]++;const width=height=>{cov_1snm1y855().f[39]++;cov_1snm1y855().s[205]++;return totalTX+(1<<height)-1>>>height;};cov_1snm1y855().s[206]++;const hash=(height,pos,leaves)=>{cov_1snm1y855().f[40]++;cov_1snm1y855().s[207]++;if(height===0){cov_1snm1y855().b[28][0]++;cov_1snm1y855().s[208]++;return leaves[pos];}else{cov_1snm1y855().b[28][1]++;}const left=(cov_1snm1y855().s[209]++,hash(height-1,pos*2,leaves));let right;cov_1snm1y855().s[210]++;if(pos*2+1<width(height-1)){cov_1snm1y855().b[29][0]++;cov_1snm1y855().s[211]++;right=hash(height-1,pos*2+1,leaves);}else{cov_1snm1y855().b[29][1]++;cov_1snm1y855().s[212]++;right=left;}cov_1snm1y855().s[213]++;return hash256.root(left,right);};cov_1snm1y855().s[214]++;const traverse=(height,pos,leaves,matches)=>{cov_1snm1y855().f[41]++;let parent=(cov_1snm1y855().s[215]++,0);cov_1snm1y855().s[216]++;for(let p=(cov_1snm1y855().s[217]++,pos<<height);(cov_1snm1y855().b[30][0]++,p<pos+1<<height)&&(cov_1snm1y855().b[30][1]++,p<totalTX);p++){cov_1snm1y855().s[218]++;parent|=matches[p];}cov_1snm1y855().s[219]++;bits.push(parent);cov_1snm1y855().s[220]++;if((cov_1snm1y855().b[32][0]++,height===0)||(cov_1snm1y855().b[32][1]++,!parent)){cov_1snm1y855().b[31][0]++;cov_1snm1y855().s[221]++;hashes.push(hash(height,pos,leaves));cov_1snm1y855().s[222]++;return;}else{cov_1snm1y855().b[31][1]++;}cov_1snm1y855().s[223]++;traverse(height-1,pos*2,leaves,matches);cov_1snm1y855().s[224]++;if(pos*2+1<width(height-1)){cov_1snm1y855().b[33][0]++;cov_1snm1y855().s[225]++;traverse(height-1,pos*2+1,leaves,matches);}else{cov_1snm1y855().b[33][1]++;}};cov_1snm1y855().s[226]++;for(let i=(cov_1snm1y855().s[227]++,0);i<block.txs.length;i++){const tx=(cov_1snm1y855().s[228]++,block.txs[i]);cov_1snm1y855().s[229]++;if(matches[i]){cov_1snm1y855().b[34][0]++;cov_1snm1y855().s[230]++;txs.push(tx);}else{cov_1snm1y855().b[34][1]++;}cov_1snm1y855().s[231]++;leaves.push(tx.hash());}cov_1snm1y855().s[232]++;while(width(height)>1){cov_1snm1y855().s[233]++;height+=1;}cov_1snm1y855().s[234]++;traverse(height,0,leaves,matches);const flags=(cov_1snm1y855().s[235]++,Buffer.allocUnsafe((bits.length+7)/8|0));cov_1snm1y855().s[236]++;flags.fill(0);cov_1snm1y855().s[237]++;for(let p=(cov_1snm1y855().s[238]++,0);p<bits.length;p++){cov_1snm1y855().s[239]++;flags[p/8|0]|=bits[p]<<p%8;}const merkle=(cov_1snm1y855().s[240]++,new this());cov_1snm1y855().s[241]++;merkle._hash=block._hash;cov_1snm1y855().s[242]++;merkle._hhash=block._hhash;cov_1snm1y855().s[243]++;merkle.version=block.version;cov_1snm1y855().s[244]++;merkle.prevBlock=block.prevBlock;cov_1snm1y855().s[245]++;merkle.merkleRoot=block.merkleRoot;cov_1snm1y855().s[246]++;merkle.time=block.time;cov_1snm1y855().s[247]++;merkle.bits=block.bits;cov_1snm1y855().s[248]++;merkle.nonce=block.nonce;cov_1snm1y855().s[249]++;merkle.totalTX=totalTX;cov_1snm1y855().s[250]++;merkle.hashes=hashes;cov_1snm1y855().s[251]++;merkle.flags=flags;cov_1snm1y855().s[252]++;merkle.txs=txs;cov_1snm1y855().s[253]++;return merkle;}/**
   * Test whether an object is a MerkleBlock.
   * @param {Object} obj
   * @returns {Boolean}
   */static isMerkleBlock(obj){cov_1snm1y855().f[42]++;cov_1snm1y855().s[254]++;return obj instanceof MerkleBlock;}/**
   * Convert the block to a headers object.
   * @returns {Headers}
   */toHeaders(){cov_1snm1y855().f[43]++;cov_1snm1y855().s[255]++;return Headers.fromBlock(this);}}/*
 * Helpers
 */class PartialTree{constructor(root,matches,indexes,map){cov_1snm1y855().f[44]++;cov_1snm1y855().s[256]++;this.root=(cov_1snm1y855().b[35][0]++,root)||(cov_1snm1y855().b[35][1]++,consensus.ZERO_HASH);cov_1snm1y855().s[257]++;this.matches=(cov_1snm1y855().b[36][0]++,matches)||(cov_1snm1y855().b[36][1]++,[]);cov_1snm1y855().s[258]++;this.indexes=(cov_1snm1y855().b[37][0]++,indexes)||(cov_1snm1y855().b[37][1]++,[]);cov_1snm1y855().s[259]++;this.map=(cov_1snm1y855().b[38][0]++,map)||(cov_1snm1y855().b[38][1]++,new BufferMap());}}/*
 * Expose
 */cov_1snm1y855().s[260]++;module.exports=MerkleBlock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/*!
 * witness.js - witness object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1133plsjos(){var path="E:\\Projects\\Test\\bcoin\\lib\\script\\witness.js";var hash="3082d63fed5763467128a96a49ecc1354ef5956e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\script\\witness.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:12},end:{line:11,column:28}},"2":{start:{line:12,column:15},end:{line:12,column:34}},"3":{start:{line:13,column:15},end:{line:13,column:34}},"4":{start:{line:14,column:16},end:{line:14,column:48}},"5":{start:{line:15,column:14},end:{line:15,column:32}},"6":{start:{line:16,column:19},end:{line:16,column:22}},"7":{start:{line:17,column:20},end:{line:17,column:32}},"8":{start:{line:18,column:24},end:{line:18,column:43}},"9":{start:{line:44,column:4},end:{line:44,column:12}},"10":{start:{line:46,column:4},end:{line:47,column:32}},"11":{start:{line:47,column:6},end:{line:47,column:32}},"12":{start:{line:57,column:4},end:{line:57,column:49}},"13":{start:{line:59,column:4},end:{line:60,column:37}},"14":{start:{line:60,column:6},end:{line:60,column:37}},"15":{start:{line:62,column:4},end:{line:63,column:43}},"16":{start:{line:63,column:6},end:{line:63,column:43}},"17":{start:{line:65,column:4},end:{line:65,column:16}},"18":{start:{line:75,column:4},end:{line:75,column:43}},"19":{start:{line:84,column:4},end:{line:84,column:30}},"20":{start:{line:94,column:4},end:{line:94,column:33}},"21":{start:{line:95,column:4},end:{line:95,column:23}},"22":{start:{line:96,column:4},end:{line:96,column:16}},"23":{start:{line:106,column:4},end:{line:106,column:39}},"24":{start:{line:115,column:4},end:{line:115,column:30}},"25":{start:{line:125,column:4},end:{line:125,column:33}},"26":{start:{line:126,column:4},end:{line:126,column:23}},"27":{start:{line:127,column:4},end:{line:127,column:16}},"28":{start:{line:137,column:4},end:{line:137,column:39}},"29":{start:{line:146,column:4},end:{line:146,column:37}},"30":{start:{line:156,column:4},end:{line:156,column:39}},"31":{start:{line:166,column:4},end:{line:166,column:39}},"32":{start:{line:175,column:4},end:{line:175,column:43}},"33":{start:{line:184,column:4},end:{line:184,column:47}},"34":{start:{line:196,column:4},end:{line:196,column:39}},"35":{start:{line:197,column:4},end:{line:197,column:16}},"36":{start:{line:206,column:4},end:{line:206,column:16}},"37":{start:{line:216,column:4},end:{line:217,column:43}},"38":{start:{line:217,column:6},end:{line:217,column:43}},"39":{start:{line:219,column:4},end:{line:220,column:43}},"40":{start:{line:220,column:6},end:{line:220,column:43}},"41":{start:{line:222,column:4},end:{line:222,column:35}},"42":{start:{line:232,column:4},end:{line:232,column:37}},"43":{start:{line:242,column:4},end:{line:242,column:17}},"44":{start:{line:252,column:4},end:{line:252,column:16}},"45":{start:{line:262,column:4},end:{line:264,column:45}},"46":{start:{line:273,column:4},end:{line:274,column:26}},"47":{start:{line:274,column:6},end:{line:274,column:26}},"48":{start:{line:275,column:4},end:{line:275,column:42}},"49":{start:{line:285,column:4},end:{line:285,column:17}},"50":{start:{line:295,column:4},end:{line:295,column:16}},"51":{start:{line:305,column:4},end:{line:305,column:62}},"52":{start:{line:314,column:4},end:{line:315,column:18}},"53":{start:{line:315,column:6},end:{line:315,column:18}},"54":{start:{line:316,column:4},end:{line:316,column:45}},"55":{start:{line:326,column:4},end:{line:326,column:59}},"56":{start:{line:336,column:4},end:{line:342,column:5}},"57":{start:{line:337,column:6},end:{line:338,column:17}},"58":{start:{line:338,column:8},end:{line:338,column:17}},"59":{start:{line:340,column:6},end:{line:341,column:20}},"60":{start:{line:341,column:8},end:{line:341,column:20}},"61":{start:{line:344,column:4},end:{line:344,column:17}},"62":{start:{line:353,column:4},end:{line:354,column:18}},"63":{start:{line:354,column:6},end:{line:354,column:18}},"64":{start:{line:356,column:19},end:{line:356,column:52}},"65":{start:{line:358,column:4},end:{line:359,column:18}},"66":{start:{line:359,column:6},end:{line:359,column:18}},"67":{start:{line:361,column:4},end:{line:361,column:34}},"68":{start:{line:371,column:4},end:{line:375,column:5}},"69":{start:{line:371,column:17},end:{line:371,column:18}},"70":{start:{line:372,column:19},end:{line:372,column:32}},"71":{start:{line:373,column:6},end:{line:374,column:17}},"72":{start:{line:374,column:8},end:{line:374,column:17}},"73":{start:{line:376,column:4},end:{line:376,column:14}},"74":{start:{line:386,column:15},end:{line:386,column:16}},"75":{start:{line:388,column:4},end:{line:389,column:42}},"76":{start:{line:389,column:6},end:{line:389,column:42}},"77":{start:{line:391,column:4},end:{line:391,column:16}},"78":{start:{line:401,column:4},end:{line:401,column:67}},"79":{start:{line:410,column:4},end:{line:410,column:38}},"80":{start:{line:412,column:4},end:{line:413,column:29}},"81":{start:{line:413,column:6},end:{line:413,column:29}},"82":{start:{line:415,column:4},end:{line:415,column:14}},"83":{start:{line:425,column:17},end:{line:425,column:34}},"84":{start:{line:426,column:4},end:{line:426,column:51}},"85":{start:{line:435,column:4},end:{line:435,column:40}},"86":{start:{line:445,column:4},end:{line:445,column:66}},"87":{start:{line:446,column:4},end:{line:446,column:50}},"88":{start:{line:456,column:4},end:{line:456,column:37}},"89":{start:{line:466,column:18},end:{line:466,column:33}},"90":{start:{line:468,column:4},end:{line:469,column:41}},"91":{start:{line:468,column:17},end:{line:468,column:18}},"92":{start:{line:469,column:6},end:{line:469,column:41}},"93":{start:{line:471,column:4},end:{line:471,column:16}},"94":{start:{line:481,column:4},end:{line:481,column:43}},"95":{start:{line:490,column:4},end:{line:490,column:37}},"96":{start:{line:501,column:4},end:{line:502,column:36}},"97":{start:{line:502,column:6},end:{line:502,column:36}},"98":{start:{line:503,column:4},end:{line:503,column:36}},"99":{start:{line:513,column:4},end:{line:522,column:5}},"100":{start:{line:514,column:6},end:{line:514,column:40}},"101":{start:{line:516,column:6},end:{line:516,column:27}},"102":{start:{line:518,column:6},end:{line:519,column:20}},"103":{start:{line:519,column:8},end:{line:519,column:20}},"104":{start:{line:521,column:6},end:{line:521,column:33}},"105":{start:{line:524,column:4},end:{line:525,column:48}},"106":{start:{line:525,column:6},end:{line:525,column:48}},"107":{start:{line:527,column:4},end:{line:527,column:16}},"108":{start:{line:541,column:4},end:{line:541,column:40}},"109":{start:{line:551,column:4},end:{line:551,column:34}},"110":{start:{line:559,column:0},end:{line:559,column:25}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:43,column:2},end:{line:43,column:3}},loc:{start:{line:43,column:23},end:{line:48,column:3}},line:43},"1":{name:"(anonymous_1)",decl:{start:{line:56,column:2},end:{line:56,column:3}},loc:{start:{line:56,column:23},end:{line:66,column:3}},line:56},"2":{name:"(anonymous_2)",decl:{start:{line:74,column:2},end:{line:74,column:3}},loc:{start:{line:74,column:30},end:{line:76,column:3}},line:74},"3":{name:"(anonymous_3)",decl:{start:{line:83,column:2},end:{line:83,column:3}},loc:{start:{line:83,column:12},end:{line:85,column:3}},line:83},"4":{name:"(anonymous_4)",decl:{start:{line:93,column:2},end:{line:93,column:3}},loc:{start:{line:93,column:19},end:{line:97,column:3}},line:93},"5":{name:"(anonymous_5)",decl:{start:{line:105,column:2},end:{line:105,column:3}},loc:{start:{line:105,column:26},end:{line:107,column:3}},line:105},"6":{name:"(anonymous_6)",decl:{start:{line:114,column:2},end:{line:114,column:3}},loc:{start:{line:114,column:12},end:{line:116,column:3}},line:114},"7":{name:"(anonymous_7)",decl:{start:{line:124,column:2},end:{line:124,column:3}},loc:{start:{line:124,column:19},end:{line:128,column:3}},line:124},"8":{name:"(anonymous_8)",decl:{start:{line:136,column:2},end:{line:136,column:3}},loc:{start:{line:136,column:26},end:{line:138,column:3}},line:136},"9":{name:"(anonymous_9)",decl:{start:{line:145,column:2},end:{line:145,column:3}},loc:{start:{line:145,column:12},end:{line:147,column:3}},line:145},"10":{name:"(anonymous_10)",decl:{start:{line:155,column:2},end:{line:155,column:3}},loc:{start:{line:155,column:19},end:{line:157,column:3}},line:155},"11":{name:"(anonymous_11)",decl:{start:{line:165,column:2},end:{line:165,column:3}},loc:{start:{line:165,column:26},end:{line:167,column:3}},line:165},"12":{name:"(anonymous_12)",decl:{start:{line:174,column:2},end:{line:174,column:3}},loc:{start:{line:174,column:20},end:{line:176,column:3}},line:174},"13":{name:"(anonymous_13)",decl:{start:{line:183,column:2},end:{line:183,column:3}},loc:{start:{line:183,column:10},end:{line:185,column:3}},line:183},"14":{name:"(anonymous_14)",decl:{start:{line:195,column:2},end:{line:195,column:3}},loc:{start:{line:195,column:18},end:{line:198,column:3}},line:195},"15":{name:"(anonymous_15)",decl:{start:{line:205,column:2},end:{line:205,column:3}},loc:{start:{line:205,column:12},end:{line:207,column:3}},line:205},"16":{name:"(anonymous_16)",decl:{start:{line:215,column:2},end:{line:215,column:3}},loc:{start:{line:215,column:17},end:{line:223,column:3}},line:215},"17":{name:"(anonymous_17)",decl:{start:{line:231,column:2},end:{line:231,column:3}},loc:{start:{line:231,column:20},end:{line:233,column:3}},line:231},"18":{name:"(anonymous_18)",decl:{start:{line:241,column:2},end:{line:241,column:3}},loc:{start:{line:241,column:18},end:{line:243,column:3}},line:241},"19":{name:"(anonymous_19)",decl:{start:{line:251,column:2},end:{line:251,column:3}},loc:{start:{line:251,column:19},end:{line:253,column:3}},line:251},"20":{name:"(anonymous_20)",decl:{start:{line:261,column:2},end:{line:261,column:3}},loc:{start:{line:261,column:22},end:{line:265,column:3}},line:261},"21":{name:"(anonymous_21)",decl:{start:{line:272,column:2},end:{line:272,column:3}},loc:{start:{line:272,column:23},end:{line:276,column:3}},line:272},"22":{name:"(anonymous_22)",decl:{start:{line:284,column:2},end:{line:284,column:3}},loc:{start:{line:284,column:20},end:{line:286,column:3}},line:284},"23":{name:"(anonymous_23)",decl:{start:{line:294,column:2},end:{line:294,column:3}},loc:{start:{line:294,column:21},end:{line:296,column:3}},line:294},"24":{name:"(anonymous_24)",decl:{start:{line:304,column:2},end:{line:304,column:3}},loc:{start:{line:304,column:22},end:{line:306,column:3}},line:304},"25":{name:"(anonymous_25)",decl:{start:{line:313,column:2},end:{line:313,column:3}},loc:{start:{line:313,column:23},end:{line:317,column:3}},line:313},"26":{name:"(anonymous_26)",decl:{start:{line:325,column:2},end:{line:325,column:3}},loc:{start:{line:325,column:19},end:{line:327,column:3}},line:325},"27":{name:"(anonymous_27)",decl:{start:{line:335,column:2},end:{line:335,column:3}},loc:{start:{line:335,column:15},end:{line:345,column:3}},line:335},"28":{name:"(anonymous_28)",decl:{start:{line:352,column:2},end:{line:352,column:3}},loc:{start:{line:352,column:14},end:{line:362,column:3}},line:352},"29":{name:"(anonymous_29)",decl:{start:{line:370,column:2},end:{line:370,column:3}},loc:{start:{line:370,column:16},end:{line:377,column:3}},line:370},"30":{name:"(anonymous_30)",decl:{start:{line:385,column:2},end:{line:385,column:3}},loc:{start:{line:385,column:12},end:{line:392,column:3}},line:385},"31":{name:"(anonymous_31)",decl:{start:{line:400,column:2},end:{line:400,column:3}},loc:{start:{line:400,column:15},end:{line:402,column:3}},line:400},"32":{name:"(anonymous_32)",decl:{start:{line:409,column:2},end:{line:409,column:3}},loc:{start:{line:409,column:15},end:{line:416,column:3}},line:409},"33":{name:"(anonymous_33)",decl:{start:{line:424,column:2},end:{line:424,column:3}},loc:{start:{line:424,column:10},end:{line:427,column:3}},line:424},"34":{name:"(anonymous_34)",decl:{start:{line:434,column:2},end:{line:434,column:3}},loc:{start:{line:434,column:11},end:{line:436,column:3}},line:434},"35":{name:"(anonymous_35)",decl:{start:{line:444,column:2},end:{line:444,column:3}},loc:{start:{line:444,column:17},end:{line:447,column:3}},line:444},"36":{name:"(anonymous_36)",decl:{start:{line:455,column:2},end:{line:455,column:3}},loc:{start:{line:455,column:24},end:{line:457,column:3}},line:455},"37":{name:"(anonymous_37)",decl:{start:{line:465,column:2},end:{line:465,column:3}},loc:{start:{line:465,column:17},end:{line:472,column:3}},line:465},"38":{name:"(anonymous_38)",decl:{start:{line:480,column:2},end:{line:480,column:3}},loc:{start:{line:480,column:16},end:{line:482,column:3}},line:480},"39":{name:"(anonymous_39)",decl:{start:{line:489,column:2},end:{line:489,column:3}},loc:{start:{line:489,column:24},end:{line:491,column:3}},line:489},"40":{name:"(anonymous_40)",decl:{start:{line:500,column:2},end:{line:500,column:3}},loc:{start:{line:500,column:28},end:{line:504,column:3}},line:500},"41":{name:"(anonymous_41)",decl:{start:{line:512,column:2},end:{line:512,column:3}},loc:{start:{line:512,column:20},end:{line:528,column:3}},line:512},"42":{name:"(anonymous_42)",decl:{start:{line:540,column:2},end:{line:540,column:3}},loc:{start:{line:540,column:27},end:{line:542,column:3}},line:540},"43":{name:"(anonymous_43)",decl:{start:{line:550,column:2},end:{line:550,column:3}},loc:{start:{line:550,column:24},end:{line:552,column:3}},line:550}},branchMap:{"0":{loc:{start:{line:46,column:4},end:{line:47,column:32}},type:"if",locations:[{start:{line:46,column:4},end:{line:47,column:32}},{start:{line:46,column:4},end:{line:47,column:32}}],line:46},"1":{loc:{start:{line:59,column:4},end:{line:60,column:37}},type:"if",locations:[{start:{line:59,column:4},end:{line:60,column:37}},{start:{line:59,column:4},end:{line:60,column:37}}],line:59},"2":{loc:{start:{line:62,column:4},end:{line:63,column:43}},type:"if",locations:[{start:{line:62,column:4},end:{line:63,column:43}},{start:{line:62,column:4},end:{line:63,column:43}}],line:62},"3":{loc:{start:{line:216,column:4},end:{line:217,column:43}},type:"if",locations:[{start:{line:216,column:4},end:{line:217,column:43}},{start:{line:216,column:4},end:{line:217,column:43}}],line:216},"4":{loc:{start:{line:219,column:4},end:{line:220,column:43}},type:"if",locations:[{start:{line:219,column:4},end:{line:220,column:43}},{start:{line:219,column:4},end:{line:220,column:43}}],line:219},"5":{loc:{start:{line:262,column:11},end:{line:264,column:44}},type:"binary-expr",locations:[{start:{line:262,column:11},end:{line:262,column:34}},{start:{line:263,column:9},end:{line:263,column:50}},{start:{line:264,column:9},end:{line:264,column:44}}],line:262},"6":{loc:{start:{line:273,column:4},end:{line:274,column:26}},type:"if",locations:[{start:{line:273,column:4},end:{line:274,column:26}},{start:{line:273,column:4},end:{line:274,column:26}}],line:273},"7":{loc:{start:{line:305,column:11},end:{line:305,column:61}},type:"binary-expr",locations:[{start:{line:305,column:11},end:{line:305,column:32}},{start:{line:305,column:36},end:{line:305,column:61}}],line:305},"8":{loc:{start:{line:314,column:4},end:{line:315,column:18}},type:"if",locations:[{start:{line:314,column:4},end:{line:315,column:18}},{start:{line:314,column:4},end:{line:315,column:18}}],line:314},"9":{loc:{start:{line:337,column:6},end:{line:338,column:17}},type:"if",locations:[{start:{line:337,column:6},end:{line:338,column:17}},{start:{line:337,column:6},end:{line:338,column:17}}],line:337},"10":{loc:{start:{line:340,column:6},end:{line:341,column:20}},type:"if",locations:[{start:{line:340,column:6},end:{line:341,column:20}},{start:{line:340,column:6},end:{line:341,column:20}}],line:340},"11":{loc:{start:{line:353,column:4},end:{line:354,column:18}},type:"if",locations:[{start:{line:353,column:4},end:{line:354,column:18}},{start:{line:353,column:4},end:{line:354,column:18}}],line:353},"12":{loc:{start:{line:358,column:4},end:{line:359,column:18}},type:"if",locations:[{start:{line:358,column:4},end:{line:359,column:18}},{start:{line:358,column:4},end:{line:359,column:18}}],line:358},"13":{loc:{start:{line:373,column:6},end:{line:374,column:17}},type:"if",locations:[{start:{line:373,column:6},end:{line:374,column:17}},{start:{line:373,column:6},end:{line:374,column:17}}],line:373},"14":{loc:{start:{line:501,column:4},end:{line:502,column:36}},type:"if",locations:[{start:{line:501,column:4},end:{line:502,column:36}},{start:{line:501,column:4},end:{line:502,column:36}}],line:501},"15":{loc:{start:{line:513,column:4},end:{line:522,column:5}},type:"if",locations:[{start:{line:513,column:4},end:{line:522,column:5}},{start:{line:513,column:4},end:{line:522,column:5}}],line:513},"16":{loc:{start:{line:518,column:6},end:{line:519,column:20}},type:"if",locations:[{start:{line:518,column:6},end:{line:519,column:20}},{start:{line:518,column:6},end:{line:519,column:20}}],line:518}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3082d63fed5763467128a96a49ecc1354ef5956e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1133plsjos=function(){return actualCoverage;};}return actualCoverage;}cov_1133plsjos();const assert=(cov_1133plsjos().s[0]++,require('bsert'));const bio=(cov_1133plsjos().s[1]++,require('bufio'));const Script=(cov_1133plsjos().s[2]++,require('./script'));const common=(cov_1133plsjos().s[3]++,require('./common'));const Address=(cov_1133plsjos().s[4]++,require('../primitives/address'));const Stack=(cov_1133plsjos().s[5]++,require('./stack'));const{encoding}=(cov_1133plsjos().s[6]++,bio);const scriptTypes=(cov_1133plsjos().s[7]++,common.types);const{inspectSymbol}=(cov_1133plsjos().s[8]++,require('../utils'));/**
 * Witness
 * Refers to the witness vector of
 * segregated witness transactions.
 * @alias module:script.Witness
 * @extends Stack
 * @property {Buffer[]} items
 * @property {Script?} redeem
 * @property {Number} length
 */class Witness extends Stack{/**
   * Create a witness.
   * @alias module:script.Witness
   * @constructor
   * @param {Buffer[]|Object} items - Array of
   * stack items.
   * @property {Buffer[]} items
   * @property {Script?} redeem
   * @property {Number} length
   */constructor(options){cov_1133plsjos().f[0]++;cov_1133plsjos().s[9]++;super();cov_1133plsjos().s[10]++;if(options){cov_1133plsjos().b[0][0]++;cov_1133plsjos().s[11]++;this.fromOptions(options);}else{cov_1133plsjos().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_1133plsjos().f[1]++;cov_1133plsjos().s[12]++;assert(options,'Witness data is required.');cov_1133plsjos().s[13]++;if(Array.isArray(options)){cov_1133plsjos().b[1][0]++;cov_1133plsjos().s[14]++;return this.fromArray(options);}else{cov_1133plsjos().b[1][1]++;}cov_1133plsjos().s[15]++;if(options.items){cov_1133plsjos().b[2][0]++;cov_1133plsjos().s[16]++;return this.fromArray(options.items);}else{cov_1133plsjos().b[2][1]++;}cov_1133plsjos().s[17]++;return this;}/**
   * Instantiate witness from options.
   * @param {Object} options
   * @returns {Witness}
   */static fromOptions(options){cov_1133plsjos().f[2]++;cov_1133plsjos().s[18]++;return new this().fromOptions(options);}/**
   * Convert witness to an array of buffers.
   * @returns {Buffer[]}
   */toArray(){cov_1133plsjos().f[3]++;cov_1133plsjos().s[19]++;return this.items.slice();}/**
   * Inject properties from an array of buffers.
   * @private
   * @param {Buffer[]} items
   */fromArray(items){cov_1133plsjos().f[4]++;cov_1133plsjos().s[20]++;assert(Array.isArray(items));cov_1133plsjos().s[21]++;this.items=items;cov_1133plsjos().s[22]++;return this;}/**
   * Insantiate witness from an array of buffers.
   * @param {Buffer[]} items
   * @returns {Witness}
   */static fromArray(items){cov_1133plsjos().f[5]++;cov_1133plsjos().s[23]++;return new this().fromArray(items);}/**
   * Convert witness to an array of buffers.
   * @returns {Buffer[]}
   */toItems(){cov_1133plsjos().f[6]++;cov_1133plsjos().s[24]++;return this.items.slice();}/**
   * Inject properties from an array of buffers.
   * @private
   * @param {Buffer[]} items
   */fromItems(items){cov_1133plsjos().f[7]++;cov_1133plsjos().s[25]++;assert(Array.isArray(items));cov_1133plsjos().s[26]++;this.items=items;cov_1133plsjos().s[27]++;return this;}/**
   * Insantiate witness from an array of buffers.
   * @param {Buffer[]} items
   * @returns {Witness}
   */static fromItems(items){cov_1133plsjos().f[8]++;cov_1133plsjos().s[28]++;return new this().fromItems(items);}/**
   * Convert witness to a stack.
   * @returns {Stack}
   */toStack(){cov_1133plsjos().f[9]++;cov_1133plsjos().s[29]++;return new Stack(this.toArray());}/**
   * Inject properties from a stack.
   * @private
   * @param {Stack} stack
   */fromStack(stack){cov_1133plsjos().f[10]++;cov_1133plsjos().s[30]++;return this.fromArray(stack.items);}/**
   * Insantiate witness from a stack.
   * @param {Stack} stack
   * @returns {Witness}
   */static fromStack(stack){cov_1133plsjos().f[11]++;cov_1133plsjos().s[31]++;return new this().fromStack(stack);}/**
   * Inspect a Witness object.
   * @returns {String} Human-readable script.
   */[inspectSymbol](){cov_1133plsjos().f[12]++;cov_1133plsjos().s[32]++;return`<Witness: ${this.toString()}>`;}/**
   * Clone the witness object.
   * @returns {Witness} A clone of the current witness object.
   */clone(){cov_1133plsjos().f[13]++;cov_1133plsjos().s[33]++;return new this.constructor().inject(this);}/**
   * Inject properties from witness.
   * Used for cloning.
   * @private
   * @param {Witness} witness
   * @returns {Witness}
   */inject(witness){cov_1133plsjos().f[14]++;cov_1133plsjos().s[34]++;this.items=witness.items.slice();cov_1133plsjos().s[35]++;return this;}/**
   * Compile witness (NOP).
   * @returns {Witness}
   */compile(){cov_1133plsjos().f[15]++;cov_1133plsjos().s[36]++;return this;}/**
   * "Guess" the type of the witness.
   * This method is not 100% reliable.
   * @returns {ScriptType}
   */getInputType(){cov_1133plsjos().f[16]++;cov_1133plsjos().s[37]++;if(this.isPubkeyhashInput()){cov_1133plsjos().b[3][0]++;cov_1133plsjos().s[38]++;return scriptTypes.WITNESSPUBKEYHASH;}else{cov_1133plsjos().b[3][1]++;}cov_1133plsjos().s[39]++;if(this.isScripthashInput()){cov_1133plsjos().b[4][0]++;cov_1133plsjos().s[40]++;return scriptTypes.WITNESSSCRIPTHASH;}else{cov_1133plsjos().b[4][1]++;}cov_1133plsjos().s[41]++;return scriptTypes.NONSTANDARD;}/**
   * "Guess" the address of the witness.
   * This method is not 100% reliable.
   * @returns {Address|null}
   */getInputAddress(){cov_1133plsjos().f[17]++;cov_1133plsjos().s[42]++;return Address.fromWitness(this);}/**
   * "Test" whether the witness is a pubkey input.
   * Always returns false.
   * @returns {Boolean}
   */isPubkeyInput(){cov_1133plsjos().f[18]++;cov_1133plsjos().s[43]++;return false;}/**
   * Get P2PK signature if present.
   * Always returns null.
   * @returns {Buffer|null}
   */getPubkeyInput(){cov_1133plsjos().f[19]++;cov_1133plsjos().s[44]++;return null;}/**
   * "Guess" whether the witness is a pubkeyhash input.
   * This method is not 100% reliable.
   * @returns {Boolean}
   */isPubkeyhashInput(){cov_1133plsjos().f[20]++;cov_1133plsjos().s[45]++;return(cov_1133plsjos().b[5][0]++,this.items.length===2)&&(cov_1133plsjos().b[5][1]++,common.isSignatureEncoding(this.items[0]))&&(cov_1133plsjos().b[5][2]++,common.isKeyEncoding(this.items[1]));}/**
   * Get P2PKH signature and key if present.
   * @returns {Array} [sig, key]
   */getPubkeyhashInput(){cov_1133plsjos().f[21]++;cov_1133plsjos().s[46]++;if(!this.isPubkeyhashInput()){cov_1133plsjos().b[6][0]++;cov_1133plsjos().s[47]++;return[null,null];}else{cov_1133plsjos().b[6][1]++;}cov_1133plsjos().s[48]++;return[this.items[0],this.items[1]];}/**
   * "Test" whether the witness is a multisig input.
   * Always returns false.
   * @returns {Boolean}
   */isMultisigInput(){cov_1133plsjos().f[22]++;cov_1133plsjos().s[49]++;return false;}/**
   * Get multisig signatures key if present.
   * Always returns null.
   * @returns {Buffer[]|null}
   */getMultisigInput(){cov_1133plsjos().f[23]++;cov_1133plsjos().s[50]++;return null;}/**
   * "Guess" whether the witness is a scripthash input.
   * This method is not 100% reliable.
   * @returns {Boolean}
   */isScripthashInput(){cov_1133plsjos().f[24]++;cov_1133plsjos().s[51]++;return(cov_1133plsjos().b[7][0]++,this.items.length>0)&&(cov_1133plsjos().b[7][1]++,!this.isPubkeyhashInput());}/**
   * Get P2SH redeem script if present.
   * @returns {Buffer|null}
   */getScripthashInput(){cov_1133plsjos().f[25]++;cov_1133plsjos().s[52]++;if(!this.isScripthashInput()){cov_1133plsjos().b[8][0]++;cov_1133plsjos().s[53]++;return null;}else{cov_1133plsjos().b[8][1]++;}cov_1133plsjos().s[54]++;return this.items[this.items.length-1];}/**
   * "Guess" whether the witness is an unknown/non-standard type.
   * This method is not 100% reliable.
   * @returns {Boolean}
   */isUnknownInput(){cov_1133plsjos().f[26]++;cov_1133plsjos().s[55]++;return this.getInputType()===scriptTypes.NONSTANDARD;}/**
   * Test the witness against a bloom filter.
   * @param {Bloom} filter
   * @returns {Boolean}
   */test(filter){cov_1133plsjos().f[27]++;cov_1133plsjos().s[56]++;for(const item of this.items){cov_1133plsjos().s[57]++;if(item.length===0){cov_1133plsjos().b[9][0]++;cov_1133plsjos().s[58]++;continue;}else{cov_1133plsjos().b[9][1]++;}cov_1133plsjos().s[59]++;if(filter.test(item)){cov_1133plsjos().b[10][0]++;cov_1133plsjos().s[60]++;return true;}else{cov_1133plsjos().b[10][1]++;}}cov_1133plsjos().s[61]++;return false;}/**
   * Grab and deserialize the redeem script from the witness.
   * @returns {Script} Redeem script.
   */getRedeem(){cov_1133plsjos().f[28]++;cov_1133plsjos().s[62]++;if(this.items.length===0){cov_1133plsjos().b[11][0]++;cov_1133plsjos().s[63]++;return null;}else{cov_1133plsjos().b[11][1]++;}const redeem=(cov_1133plsjos().s[64]++,this.items[this.items.length-1]);cov_1133plsjos().s[65]++;if(!redeem){cov_1133plsjos().b[12][0]++;cov_1133plsjos().s[66]++;return null;}else{cov_1133plsjos().b[12][1]++;}cov_1133plsjos().s[67]++;return Script.fromRaw(redeem);}/**
   * Find a data element in a witness.
   * @param {Buffer} data - Data element to match against.
   * @returns {Number} Index (`-1` if not present).
   */indexOf(data){cov_1133plsjos().f[29]++;cov_1133plsjos().s[68]++;for(let i=(cov_1133plsjos().s[69]++,0);i<this.items.length;i++){const item=(cov_1133plsjos().s[70]++,this.items[i]);cov_1133plsjos().s[71]++;if(item.equals(data)){cov_1133plsjos().b[13][0]++;cov_1133plsjos().s[72]++;return i;}else{cov_1133plsjos().b[13][1]++;}}cov_1133plsjos().s[73]++;return-1;}/**
   * Calculate size of the witness
   * excluding the varint size bytes.
   * @returns {Number}
   */getSize(){cov_1133plsjos().f[30]++;let size=(cov_1133plsjos().s[74]++,0);cov_1133plsjos().s[75]++;for(const item of this.items){cov_1133plsjos().s[76]++;size+=encoding.sizeVarBytes(item);}cov_1133plsjos().s[77]++;return size;}/**
   * Calculate size of the witness
   * including the varint size bytes.
   * @returns {Number}
   */getVarSize(){cov_1133plsjos().f[31]++;cov_1133plsjos().s[78]++;return encoding.sizeVarint(this.items.length)+this.getSize();}/**
   * Write witness to a buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_1133plsjos().f[32]++;cov_1133plsjos().s[79]++;bw.writeVarint(this.items.length);cov_1133plsjos().s[80]++;for(const item of this.items){cov_1133plsjos().s[81]++;bw.writeVarBytes(item);}cov_1133plsjos().s[82]++;return bw;}/**
   * Encode the witness to a Buffer.
   * @param {String} enc - Encoding, either `'hex'` or `null`.
   * @returns {Buffer|String} Serialized script.
   */toRaw(){cov_1133plsjos().f[33]++;const size=(cov_1133plsjos().s[83]++,this.getVarSize());cov_1133plsjos().s[84]++;return this.toWriter(bio.write(size)).render();}/**
   * Convert witness to a hex string.
   * @returns {String}
   */toJSON(){cov_1133plsjos().f[34]++;cov_1133plsjos().s[85]++;return this.toRaw().toString('hex');}/**
   * Inject properties from json object.
   * @private
   * @param {String} json
   */fromJSON(json){cov_1133plsjos().f[35]++;cov_1133plsjos().s[86]++;assert(typeof json==='string','Witness must be a string.');cov_1133plsjos().s[87]++;return this.fromRaw(Buffer.from(json,'hex'));}/**
   * Insantiate witness from a hex string.
   * @param {String} json
   * @returns {Witness}
   */static fromJSON(json){cov_1133plsjos().f[36]++;cov_1133plsjos().s[88]++;return new this().fromJSON(json);}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_1133plsjos().f[37]++;const count=(cov_1133plsjos().s[89]++,br.readVarint());cov_1133plsjos().s[90]++;for(let i=(cov_1133plsjos().s[91]++,0);i<count;i++){cov_1133plsjos().s[92]++;this.items.push(br.readVarBytes());}cov_1133plsjos().s[93]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_1133plsjos().f[38]++;cov_1133plsjos().s[94]++;return this.fromReader(bio.read(data));}/**
   * Create a witness from a buffer reader.
   * @param {BufferReader} br
   */static fromReader(br){cov_1133plsjos().f[39]++;cov_1133plsjos().s[95]++;return new this().fromReader(br);}/**
   * Create a witness from a serialized buffer.
   * @param {Buffer|String} data - Serialized witness.
   * @param {String?} enc - Either `"hex"` or `null`.
   * @returns {Witness}
   */static fromRaw(data,enc){cov_1133plsjos().f[40]++;cov_1133plsjos().s[96]++;if(typeof data==='string'){cov_1133plsjos().b[14][0]++;cov_1133plsjos().s[97]++;data=Buffer.from(data,enc);}else{cov_1133plsjos().b[14][1]++;}cov_1133plsjos().s[98]++;return new this().fromRaw(data);}/**
   * Inject items from string.
   * @private
   * @param {String|String[]} items
   */fromString(items){cov_1133plsjos().f[41]++;cov_1133plsjos().s[99]++;if(!Array.isArray(items)){cov_1133plsjos().b[15][0]++;cov_1133plsjos().s[100]++;assert(typeof items==='string');cov_1133plsjos().s[101]++;items=items.trim();cov_1133plsjos().s[102]++;if(items.length===0){cov_1133plsjos().b[16][0]++;cov_1133plsjos().s[103]++;return this;}else{cov_1133plsjos().b[16][1]++;}cov_1133plsjos().s[104]++;items=items.split(/\s+/);}else{cov_1133plsjos().b[15][1]++;}cov_1133plsjos().s[105]++;for(const item of items){cov_1133plsjos().s[106]++;this.items.push(Buffer.from(item,'hex'));}cov_1133plsjos().s[107]++;return this;}/**
   * Parse a test script/array
   * string into a witness object. _Must_
   * contain only stack items (no non-push
   * opcodes).
   * @param {String|String[]} items - Script string.
   * @returns {Witness}
   * @throws Parse error.
   */static fromString(items){cov_1133plsjos().f[42]++;cov_1133plsjos().s[108]++;return new this().fromString(items);}/**
   * Test an object to see if it is a Witness.
   * @param {Object} obj
   * @returns {Boolean}
   */static isWitness(obj){cov_1133plsjos().f[43]++;cov_1133plsjos().s[109]++;return obj instanceof Witness;}}/*
 * Expose
 */cov_1133plsjos().s[110]++;module.exports=Witness;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
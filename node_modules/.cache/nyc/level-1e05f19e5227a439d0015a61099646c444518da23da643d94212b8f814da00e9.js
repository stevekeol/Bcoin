/*!
 * blockstore/level.js - leveldb blockstore for bcoin
 * Copyright (c) 2019, Braydon Fuller (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_2b6bemgfmm(){var path="E:\\Projects\\Test\\bcoin\\lib\\blockstore\\level.js";var hash="50ea777b2399f0611276e95282f66e7e5074702f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\blockstore\\level.js",statementMap:{"0":{start:{line:9,column:12},end:{line:9,column:26}},"1":{start:{line:10,column:11},end:{line:10,column:27}},"2":{start:{line:11,column:27},end:{line:11,column:48}},"3":{start:{line:12,column:15},end:{line:12,column:34}},"4":{start:{line:13,column:16},end:{line:13,column:35}},"5":{start:{line:29,column:4},end:{line:29,column:19}},"6":{start:{line:31,column:4},end:{line:31,column:37}},"7":{start:{line:33,column:4},end:{line:38,column:7}},"8":{start:{line:48,column:4},end:{line:48,column:36}},"9":{start:{line:57,column:4},end:{line:57,column:51}},"10":{start:{line:59,column:4},end:{line:59,column:25}},"11":{start:{line:60,column:4},end:{line:60,column:66}},"12":{start:{line:68,column:4},end:{line:68,column:51}},"13":{start:{line:70,column:4},end:{line:70,column:26}},"14":{start:{line:81,column:4},end:{line:81,column:66}},"15":{start:{line:92,column:4},end:{line:92,column:64}},"16":{start:{line:103,column:4},end:{line:103,column:65}},"17":{start:{line:114,column:4},end:{line:114,column:66}},"18":{start:{line:124,column:4},end:{line:124,column:60}},"19":{start:{line:134,column:4},end:{line:134,column:58}},"20":{start:{line:144,column:4},end:{line:144,column:60}},"21":{start:{line:154,column:17},end:{line:154,column:71}},"22":{start:{line:156,column:4},end:{line:157,column:18}},"23":{start:{line:157,column:6},end:{line:157,column:18}},"24":{start:{line:159,column:4},end:{line:159,column:29}},"25":{start:{line:174,column:14},end:{line:174,column:67}},"26":{start:{line:176,column:4},end:{line:181,column:5}},"27":{start:{line:177,column:6},end:{line:178,column:47}},"28":{start:{line:178,column:8},end:{line:178,column:47}},"29":{start:{line:180,column:6},end:{line:180,column:47}},"30":{start:{line:183,column:4},end:{line:183,column:15}},"31":{start:{line:195,column:4},end:{line:196,column:19}},"32":{start:{line:196,column:6},end:{line:196,column:19}},"33":{start:{line:198,column:4},end:{line:198,column:59}},"34":{start:{line:200,column:4},end:{line:200,column:16}},"35":{start:{line:212,column:4},end:{line:213,column:19}},"36":{start:{line:213,column:6},end:{line:213,column:19}},"37":{start:{line:215,column:4},end:{line:215,column:57}},"38":{start:{line:217,column:4},end:{line:217,column:16}},"39":{start:{line:227,column:4},end:{line:228,column:19}},"40":{start:{line:228,column:6},end:{line:228,column:19}},"41":{start:{line:230,column:4},end:{line:230,column:59}},"42":{start:{line:232,column:4},end:{line:232,column:16}},"43":{start:{line:244,column:4},end:{line:245,column:19}},"44":{start:{line:245,column:6},end:{line:245,column:19}},"45":{start:{line:247,column:4},end:{line:247,column:58}},"46":{start:{line:249,column:4},end:{line:249,column:16}},"47":{start:{line:260,column:4},end:{line:260,column:60}},"48":{start:{line:271,column:4},end:{line:271,column:58}},"49":{start:{line:282,column:4},end:{line:282,column:60}},"50":{start:{line:292,column:4},end:{line:292,column:59}},"51":{start:{line:300,column:0},end:{line:300,column:33}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:23},end:{line:39,column:3}},line:28},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:2},end:{line:47,column:3}},loc:{start:{line:47,column:17},end:{line:49,column:3}},line:47},"2":{name:"(anonymous_2)",decl:{start:{line:56,column:2},end:{line:56,column:3}},loc:{start:{line:56,column:15},end:{line:61,column:3}},line:56},"3":{name:"(anonymous_3)",decl:{start:{line:67,column:2},end:{line:67,column:3}},loc:{start:{line:67,column:16},end:{line:71,column:3}},line:67},"4":{name:"(anonymous_4)",decl:{start:{line:80,column:2},end:{line:80,column:3}},loc:{start:{line:80,column:32},end:{line:82,column:3}},line:80},"5":{name:"(anonymous_5)",decl:{start:{line:91,column:2},end:{line:91,column:3}},loc:{start:{line:91,column:30},end:{line:93,column:3}},line:91},"6":{name:"(anonymous_6)",decl:{start:{line:102,column:2},end:{line:102,column:3}},loc:{start:{line:102,column:26},end:{line:104,column:3}},line:102},"7":{name:"(anonymous_7)",decl:{start:{line:113,column:2},end:{line:113,column:3}},loc:{start:{line:113,column:32},end:{line:115,column:3}},line:113},"8":{name:"(anonymous_8)",decl:{start:{line:123,column:2},end:{line:123,column:3}},loc:{start:{line:123,column:25},end:{line:125,column:3}},line:123},"9":{name:"(anonymous_9)",decl:{start:{line:133,column:2},end:{line:133,column:3}},loc:{start:{line:133,column:23},end:{line:135,column:3}},line:133},"10":{name:"(anonymous_10)",decl:{start:{line:143,column:2},end:{line:143,column:3}},loc:{start:{line:143,column:25},end:{line:145,column:3}},line:143},"11":{name:"(anonymous_11)",decl:{start:{line:153,column:2},end:{line:153,column:3}},loc:{start:{line:153,column:31},end:{line:160,column:3}},line:153},"12":{name:"(anonymous_12)",decl:{start:{line:173,column:2},end:{line:173,column:3}},loc:{start:{line:173,column:35},end:{line:184,column:3}},line:173},"13":{name:"(anonymous_13)",decl:{start:{line:194,column:2},end:{line:194,column:3}},loc:{start:{line:194,column:26},end:{line:201,column:3}},line:194},"14":{name:"(anonymous_14)",decl:{start:{line:211,column:2},end:{line:211,column:3}},loc:{start:{line:211,column:24},end:{line:218,column:3}},line:211},"15":{name:"(anonymous_15)",decl:{start:{line:226,column:2},end:{line:226,column:3}},loc:{start:{line:226,column:26},end:{line:233,column:3}},line:226},"16":{name:"(anonymous_16)",decl:{start:{line:243,column:2},end:{line:243,column:3}},loc:{start:{line:243,column:20},end:{line:250,column:3}},line:243},"17":{name:"(anonymous_17)",decl:{start:{line:259,column:2},end:{line:259,column:3}},loc:{start:{line:259,column:24},end:{line:261,column:3}},line:259},"18":{name:"(anonymous_18)",decl:{start:{line:270,column:2},end:{line:270,column:3}},loc:{start:{line:270,column:22},end:{line:272,column:3}},line:270},"19":{name:"(anonymous_19)",decl:{start:{line:281,column:2},end:{line:281,column:3}},loc:{start:{line:281,column:24},end:{line:283,column:3}},line:281},"20":{name:"(anonymous_20)",decl:{start:{line:291,column:2},end:{line:291,column:3}},loc:{start:{line:291,column:18},end:{line:293,column:3}},line:291}},branchMap:{"0":{loc:{start:{line:156,column:4},end:{line:157,column:18}},type:"if",locations:[{start:{line:156,column:4},end:{line:157,column:18}},{start:{line:156,column:4},end:{line:157,column:18}}],line:156},"1":{loc:{start:{line:176,column:4},end:{line:181,column:5}},type:"if",locations:[{start:{line:176,column:4},end:{line:181,column:5}},{start:{line:176,column:4},end:{line:181,column:5}}],line:176},"2":{loc:{start:{line:177,column:6},end:{line:178,column:47}},type:"if",locations:[{start:{line:177,column:6},end:{line:178,column:47}},{start:{line:177,column:6},end:{line:178,column:47}}],line:177},"3":{loc:{start:{line:195,column:4},end:{line:196,column:19}},type:"if",locations:[{start:{line:195,column:4},end:{line:196,column:19}},{start:{line:195,column:4},end:{line:196,column:19}}],line:195},"4":{loc:{start:{line:212,column:4},end:{line:213,column:19}},type:"if",locations:[{start:{line:212,column:4},end:{line:213,column:19}},{start:{line:212,column:4},end:{line:213,column:19}}],line:212},"5":{loc:{start:{line:227,column:4},end:{line:228,column:19}},type:"if",locations:[{start:{line:227,column:4},end:{line:228,column:19}},{start:{line:227,column:4},end:{line:228,column:19}}],line:227},"6":{loc:{start:{line:244,column:4},end:{line:245,column:19}},type:"if",locations:[{start:{line:244,column:4},end:{line:245,column:19}},{start:{line:244,column:4},end:{line:245,column:19}}],line:244}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"50ea777b2399f0611276e95282f66e7e5074702f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2b6bemgfmm=function(){return actualCoverage;};}return actualCoverage;}cov_2b6bemgfmm();const bdb=(cov_2b6bemgfmm().s[0]++,require('bdb'));const fs=(cov_2b6bemgfmm().s[1]++,require('bfile'));const AbstractBlockStore=(cov_2b6bemgfmm().s[2]++,require('./abstract'));const layout=(cov_2b6bemgfmm().s[3]++,require('./layout'));const{types}=(cov_2b6bemgfmm().s[4]++,require('./common'));/**
 * LevelDB Block Store
 *
 * @alias module:blockstore:LevelBlockStore
 * @abstract
 */class LevelBlockStore extends AbstractBlockStore{/**
   * Create a blockstore that stores blocks in LevelDB.
   * @constructor
   */constructor(options){cov_2b6bemgfmm().f[0]++;cov_2b6bemgfmm().s[5]++;super(options);cov_2b6bemgfmm().s[6]++;this.location=options.location;cov_2b6bemgfmm().s[7]++;this.db=bdb.create({location:this.location,cacheSize:options.cacheSize,compression:false,memory:options.memory});}/**
   * This method ensures that the storage directory exists
   * before opening.
   * @returns {Promise}
   */async ensure(){cov_2b6bemgfmm().f[1]++;cov_2b6bemgfmm().s[8]++;return fs.mkdirp(this.location);}/**
   * Opens the block storage.
   * @returns {Promise}
   */async open(){cov_2b6bemgfmm().f[2]++;cov_2b6bemgfmm().s[9]++;this.logger.info('Opening LevelBlockStore...');cov_2b6bemgfmm().s[10]++;await this.db.open();cov_2b6bemgfmm().s[11]++;await this.db.verify(layout.V.encode(),'levelblockstore',0);}/**
   * Closes the block storage.
   */async close(){cov_2b6bemgfmm().f[3]++;cov_2b6bemgfmm().s[12]++;this.logger.info('Closing LevelBlockStore...');cov_2b6bemgfmm().s[13]++;await this.db.close();}/**
   * This method stores merkle block data in LevelDB.
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The block data
   * @returns {Promise}
   */async writeMerkle(hash,data){cov_2b6bemgfmm().f[4]++;cov_2b6bemgfmm().s[14]++;return this.db.put(layout.b.encode(types.MERKLE,hash),data);}/**
   * This method stores block undo coin data in LevelDB.
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The block data
   * @returns {Promise}
   */async writeUndo(hash,data){cov_2b6bemgfmm().f[5]++;cov_2b6bemgfmm().s[15]++;return this.db.put(layout.b.encode(types.UNDO,hash),data);}/**
   * This method stores block data in LevelDB.
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The block data
   * @returns {Promise}
   */async write(hash,data){cov_2b6bemgfmm().f[6]++;cov_2b6bemgfmm().s[16]++;return this.db.put(layout.b.encode(types.BLOCK,hash),data);}/**
   * This method stores serialized block filter data in LevelDB.
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The serialized block filter data.
   * @returns {Promise}
   */async writeFilter(hash,data){cov_2b6bemgfmm().f[7]++;cov_2b6bemgfmm().s[17]++;return this.db.put(layout.b.encode(types.FILTER,hash),data);}/**
   * This method will retrieve merkle block data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async readMerkle(hash){cov_2b6bemgfmm().f[8]++;cov_2b6bemgfmm().s[18]++;return this.db.get(layout.b.encode(types.MERKLE,hash));}/**
   * This method will retrieve block undo coin data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async readUndo(hash){cov_2b6bemgfmm().f[9]++;cov_2b6bemgfmm().s[19]++;return this.db.get(layout.b.encode(types.UNDO,hash));}/**
   * This method will retrieve serialized block filter data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async readFilter(hash){cov_2b6bemgfmm().f[10]++;cov_2b6bemgfmm().s[20]++;return this.db.get(layout.b.encode(types.FILTER,hash));}/**
   * This method will retrieve block filter header only.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async readFilterHeader(hash){cov_2b6bemgfmm().f[11]++;const data=(cov_2b6bemgfmm().s[21]++,await this.db.get(layout.b.encode(types.FILTER,hash)));cov_2b6bemgfmm().s[22]++;if(!data){cov_2b6bemgfmm().b[0][0]++;cov_2b6bemgfmm().s[23]++;return null;}else{cov_2b6bemgfmm().b[0][1]++;}cov_2b6bemgfmm().s[24]++;return data.slice(0,32);}/**
   * This method will retrieve block data. Smaller portions of the
   * block (e.g. transactions) can be returned using the offset and
   * length arguments. However, the entire block will be read as the
   * data is stored in a key/value database.
   * @param {Buffer} hash - The block hash
   * @param {Number} offset - The offset within the block
   * @param {Number} length - The number of bytes of the data
   * @returns {Promise}
   */async read(hash,offset,length){cov_2b6bemgfmm().f[12]++;let raw=(cov_2b6bemgfmm().s[25]++,await this.db.get(layout.b.encode(types.BLOCK,hash)));cov_2b6bemgfmm().s[26]++;if(offset){cov_2b6bemgfmm().b[1][0]++;cov_2b6bemgfmm().s[27]++;if(offset+length>raw.length){cov_2b6bemgfmm().b[2][0]++;cov_2b6bemgfmm().s[28]++;throw new Error('Out-of-bounds read.');}else{cov_2b6bemgfmm().b[2][1]++;}cov_2b6bemgfmm().s[29]++;raw=raw.slice(offset,offset+length);}else{cov_2b6bemgfmm().b[1][1]++;}cov_2b6bemgfmm().s[30]++;return raw;}/**
   * This will free resources for storing merkle block data.
   * The block data may not be immediately removed from disk, and will
   * be reclaimed during LevelDB compaction.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async pruneMerkle(hash){cov_2b6bemgfmm().f[13]++;cov_2b6bemgfmm().s[31]++;if(!(await this.hasMerkle(hash))){cov_2b6bemgfmm().b[3][0]++;cov_2b6bemgfmm().s[32]++;return false;}else{cov_2b6bemgfmm().b[3][1]++;}cov_2b6bemgfmm().s[33]++;await this.db.del(layout.b.encode(types.MERKLE,hash));cov_2b6bemgfmm().s[34]++;return true;}/**
   * This will free resources for storing the block undo coin data.
   * The block data may not be immediately removed from disk, and will
   * be reclaimed during LevelDB compaction.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async pruneUndo(hash){cov_2b6bemgfmm().f[14]++;cov_2b6bemgfmm().s[35]++;if(!(await this.hasUndo(hash))){cov_2b6bemgfmm().b[4][0]++;cov_2b6bemgfmm().s[36]++;return false;}else{cov_2b6bemgfmm().b[4][1]++;}cov_2b6bemgfmm().s[37]++;await this.db.del(layout.b.encode(types.UNDO,hash));cov_2b6bemgfmm().s[38]++;return true;}/**
   * This will free resources for storing the serialized block filter data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async pruneFilter(hash){cov_2b6bemgfmm().f[15]++;cov_2b6bemgfmm().s[39]++;if(!(await this.hasFilter(hash))){cov_2b6bemgfmm().b[5][0]++;cov_2b6bemgfmm().s[40]++;return false;}else{cov_2b6bemgfmm().b[5][1]++;}cov_2b6bemgfmm().s[41]++;await this.db.del(layout.b.encode(types.FILTER,hash));cov_2b6bemgfmm().s[42]++;return true;}/**
   * This will free resources for storing the block data. The block
   * data may not be immediately removed from disk, and will be reclaimed
   * during LevelDB compaction.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async prune(hash){cov_2b6bemgfmm().f[16]++;cov_2b6bemgfmm().s[43]++;if(!(await this.has(hash))){cov_2b6bemgfmm().b[6][0]++;cov_2b6bemgfmm().s[44]++;return false;}else{cov_2b6bemgfmm().b[6][1]++;}cov_2b6bemgfmm().s[45]++;await this.db.del(layout.b.encode(types.BLOCK,hash));cov_2b6bemgfmm().s[46]++;return true;}/**
   * This will check if a merkle block data has been stored
   * and is available.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async hasMerkle(hash){cov_2b6bemgfmm().f[17]++;cov_2b6bemgfmm().s[47]++;return this.db.has(layout.b.encode(types.MERKLE,hash));}/**
   * This will check if a block undo coin data has been stored
   * and is available.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async hasUndo(hash){cov_2b6bemgfmm().f[18]++;cov_2b6bemgfmm().s[48]++;return this.db.has(layout.b.encode(types.UNDO,hash));}/**
   * This will check if a block filter has been stored
   * and is available.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async hasFilter(hash){cov_2b6bemgfmm().f[19]++;cov_2b6bemgfmm().s[49]++;return this.db.has(layout.b.encode(types.FILTER,hash));}/**
   * This will check if a block has been stored and is available.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async has(hash){cov_2b6bemgfmm().f[20]++;cov_2b6bemgfmm().s[50]++;return this.db.has(layout.b.encode(types.BLOCK,hash));}}/*
 * Expose
 */cov_2b6bemgfmm().s[51]++;module.exports=LevelBlockStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
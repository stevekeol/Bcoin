/*!
 * public.js - hd public keys for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_134uzzsih9(){var path="E:\\Projects\\Test\\bcoin\\lib\\hd\\public.js";var hash="cb06dd6dcd0269c545697f7d3af34ba0fa8c4c44";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\hd\\public.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:12},end:{line:10,column:28}},"2":{start:{line:11,column:15},end:{line:11,column:53}},"3":{start:{line:12,column:15},end:{line:12,column:44}},"4":{start:{line:13,column:16},end:{line:13,column:46}},"5":{start:{line:14,column:16},end:{line:14,column:46}},"6":{start:{line:15,column:16},end:{line:15,column:46}},"7":{start:{line:16,column:18},end:{line:16,column:50}},"8":{start:{line:17,column:16},end:{line:17,column:46}},"9":{start:{line:18,column:18},end:{line:18,column:50}},"10":{start:{line:19,column:15},end:{line:19,column:34}},"11":{start:{line:45,column:4},end:{line:45,column:19}},"12":{start:{line:46,column:4},end:{line:46,column:31}},"13":{start:{line:47,column:4},end:{line:47,column:24}},"14":{start:{line:48,column:4},end:{line:48,column:41}},"15":{start:{line:49,column:4},end:{line:49,column:37}},"16":{start:{line:51,column:4},end:{line:51,column:26}},"17":{start:{line:53,column:4},end:{line:54,column:32}},"18":{start:{line:54,column:6},end:{line:54,column:32}},"19":{start:{line:64,column:4},end:{line:64,column:50}},"20":{start:{line:65,column:4},end:{line:65,column:53}},"21":{start:{line:66,column:4},end:{line:66,column:76}},"22":{start:{line:67,column:4},end:{line:67,column:62}},"23":{start:{line:68,column:4},end:{line:68,column:47}},"24":{start:{line:69,column:4},end:{line:69,column:47}},"25":{start:{line:71,column:4},end:{line:71,column:31}},"26":{start:{line:72,column:4},end:{line:72,column:55}},"27":{start:{line:73,column:4},end:{line:73,column:41}},"28":{start:{line:74,column:4},end:{line:74,column:39}},"29":{start:{line:75,column:4},end:{line:75,column:39}},"30":{start:{line:77,column:4},end:{line:77,column:16}},"31":{start:{line:87,column:4},end:{line:87,column:43}},"32":{start:{line:96,column:4},end:{line:96,column:16}},"33":{start:{line:105,column:4},end:{line:105,column:16}},"34":{start:{line:114,column:4},end:{line:114,column:34}},"35":{start:{line:122,column:4},end:{line:122,column:19}},"36":{start:{line:123,column:4},end:{line:123,column:24}},"37":{start:{line:124,column:4},end:{line:124,column:31}},"38":{start:{line:126,column:4},end:{line:126,column:28}},"39":{start:{line:127,column:4},end:{line:127,column:28}},"40":{start:{line:129,column:4},end:{line:129,column:26}},"41":{start:{line:142,column:4},end:{line:142,column:38}},"42":{start:{line:144,column:4},end:{line:145,column:45}},"43":{start:{line:145,column:6},end:{line:145,column:45}},"44":{start:{line:147,column:4},end:{line:148,column:49}},"45":{start:{line:148,column:6},end:{line:148,column:49}},"46":{start:{line:150,column:4},end:{line:151,column:41}},"47":{start:{line:151,column:6},end:{line:151,column:41}},"48":{start:{line:153,column:15},end:{line:153,column:32}},"49":{start:{line:154,column:18},end:{line:154,column:38}},"50":{start:{line:156,column:4},end:{line:157,column:19}},"51":{start:{line:157,column:6},end:{line:157,column:19}},"52":{start:{line:159,column:15},end:{line:159,column:27}},"53":{start:{line:161,column:4},end:{line:161,column:34}},"54":{start:{line:162,column:4},end:{line:162,column:25}},"55":{start:{line:164,column:17},end:{line:164,column:28}},"56":{start:{line:166,column:17},end:{line:166,column:49}},"57":{start:{line:167,column:17},end:{line:167,column:34}},"58":{start:{line:168,column:18},end:{line:168,column:36}},"59":{start:{line:171,column:4},end:{line:175,column:5}},"60":{start:{line:172,column:6},end:{line:172,column:68}},"61":{start:{line:174,column:6},end:{line:174,column:36}},"62":{start:{line:177,column:4},end:{line:180,column:5}},"63":{start:{line:178,column:17},end:{line:178,column:47}},"64":{start:{line:179,column:6},end:{line:179,column:50}},"65":{start:{line:182,column:18},end:{line:182,column:40}},"66":{start:{line:183,column:4},end:{line:183,column:33}},"67":{start:{line:184,column:4},end:{line:184,column:47}},"68":{start:{line:185,column:4},end:{line:185,column:29}},"69":{start:{line:186,column:4},end:{line:186,column:28}},"70":{start:{line:187,column:4},end:{line:187,column:26}},"71":{start:{line:189,column:4},end:{line:189,column:32}},"72":{start:{line:191,column:4},end:{line:191,column:17}},"73":{start:{line:202,column:4},end:{line:202,column:56}},"74":{start:{line:216,column:4},end:{line:216,column:40}},"75":{start:{line:217,column:4},end:{line:217,column:34}},"76":{start:{line:218,column:4},end:{line:218,column:40}},"77":{start:{line:219,column:4},end:{line:219,column:68}},"78":{start:{line:220,column:4},end:{line:220,column:16}},"79":{start:{line:230,column:4},end:{line:230,column:33}},"80":{start:{line:241,column:4},end:{line:241,column:43}},"81":{start:{line:252,column:4},end:{line:257,column:5}},"82":{start:{line:253,column:6},end:{line:253,column:36}},"83":{start:{line:254,column:6},end:{line:254,column:18}},"84":{start:{line:256,column:6},end:{line:256,column:19}},"85":{start:{line:269,column:20},end:{line:269,column:49}},"86":{start:{line:271,column:14},end:{line:271,column:18}},"87":{start:{line:273,column:4},end:{line:274,column:30}},"88":{start:{line:274,column:6},end:{line:274,column:30}},"89":{start:{line:276,column:4},end:{line:276,column:15}},"90":{start:{line:286,column:4},end:{line:286,column:43}},"91":{start:{line:288,column:4},end:{line:292,column:46}},"92":{start:{line:302,column:4},end:{line:302,column:43}},"93":{start:{line:304,column:14},end:{line:304,column:36}},"94":{start:{line:306,column:4},end:{line:307,column:17}},"95":{start:{line:307,column:6},end:{line:307,column:17}},"96":{start:{line:309,column:4},end:{line:309,column:57}},"97":{start:{line:311,column:4},end:{line:312,column:17}},"98":{start:{line:312,column:6},end:{line:312,column:17}},"99":{start:{line:314,column:4},end:{line:314,column:43}},"100":{start:{line:316,column:4},end:{line:317,column:17}},"101":{start:{line:317,column:6},end:{line:317,column:17}},"102":{start:{line:319,column:4},end:{line:319,column:48}},"103":{start:{line:321,column:4},end:{line:322,column:17}},"104":{start:{line:322,column:6},end:{line:322,column:17}},"105":{start:{line:324,column:4},end:{line:324,column:48}},"106":{start:{line:326,column:4},end:{line:327,column:17}},"107":{start:{line:327,column:6},end:{line:327,column:17}},"108":{start:{line:329,column:4},end:{line:329,column:13}},"109":{start:{line:338,column:4},end:{line:340,column:6}},"110":{start:{line:351,column:4},end:{line:351,column:58}},"111":{start:{line:352,column:4},end:{line:352,column:43}},"112":{start:{line:353,column:4},end:{line:353,column:16}},"113":{start:{line:364,column:4},end:{line:364,column:46}},"114":{start:{line:375,column:4},end:{line:376,column:19}},"115":{start:{line:376,column:6},end:{line:376,column:19}},"116":{start:{line:378,column:4},end:{line:379,column:19}},"117":{start:{line:379,column:6},end:{line:379,column:19}},"118":{start:{line:381,column:19},end:{line:381,column:39}},"119":{start:{line:383,column:4},end:{line:388,column:5}},"120":{start:{line:384,column:6},end:{line:384,column:44}},"121":{start:{line:385,column:6},end:{line:385,column:18}},"122":{start:{line:387,column:6},end:{line:387,column:19}},"123":{start:{line:399,column:4},end:{line:400,column:19}},"124":{start:{line:400,column:6},end:{line:400,column:19}},"125":{start:{line:402,column:4},end:{line:403,column:19}},"126":{start:{line:403,column:6},end:{line:403,column:19}},"127":{start:{line:405,column:20},end:{line:405,column:46}},"128":{start:{line:407,column:4},end:{line:412,column:5}},"129":{start:{line:408,column:6},end:{line:408,column:43}},"130":{start:{line:409,column:6},end:{line:409,column:18}},"131":{start:{line:411,column:6},end:{line:411,column:19}},"132":{start:{line:423,column:4},end:{line:423,column:37}},"133":{start:{line:424,column:4},end:{line:424,column:54}},"134":{start:{line:435,column:20},end:{line:435,column:34}},"135":{start:{line:437,column:4},end:{line:437,column:41}},"136":{start:{line:439,column:4},end:{line:439,column:29}},"137":{start:{line:440,column:4},end:{line:440,column:44}},"138":{start:{line:441,column:4},end:{line:441,column:37}},"139":{start:{line:442,column:4},end:{line:442,column:38}},"140":{start:{line:443,column:4},end:{line:443,column:38}},"141":{start:{line:445,column:4},end:{line:445,column:38}},"142":{start:{line:447,column:4},end:{line:447,column:16}},"143":{start:{line:458,column:4},end:{line:458,column:52}},"144":{start:{line:468,column:4},end:{line:468,column:46}},"145":{start:{line:478,column:4},end:{line:478,column:35}},"146":{start:{line:480,column:4},end:{line:480,column:45}},"147":{start:{line:481,column:4},end:{line:481,column:27}},"148":{start:{line:482,column:4},end:{line:482,column:42}},"149":{start:{line:483,column:4},end:{line:483,column:35}},"150":{start:{line:484,column:4},end:{line:484,column:34}},"151":{start:{line:485,column:4},end:{line:485,column:34}},"152":{start:{line:486,column:4},end:{line:486,column:37}},"153":{start:{line:488,column:4},end:{line:488,column:14}},"154":{start:{line:497,column:4},end:{line:497,column:14}},"155":{start:{line:507,column:4},end:{line:507,column:58}},"156":{start:{line:518,column:4},end:{line:518,column:48}},"157":{start:{line:529,column:4},end:{line:529,column:46}},"158":{start:{line:540,column:4},end:{line:540,column:45}},"159":{start:{line:550,column:4},end:{line:550,column:38}},"160":{start:{line:558,column:0},end:{line:558,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:44,column:2},end:{line:44,column:3}},loc:{start:{line:44,column:23},end:{line:55,column:3}},line:44},"1":{name:"(anonymous_1)",decl:{start:{line:63,column:2},end:{line:63,column:3}},loc:{start:{line:63,column:23},end:{line:78,column:3}},line:63},"2":{name:"(anonymous_2)",decl:{start:{line:86,column:2},end:{line:86,column:3}},loc:{start:{line:86,column:30},end:{line:88,column:3}},line:86},"3":{name:"(anonymous_3)",decl:{start:{line:95,column:2},end:{line:95,column:3}},loc:{start:{line:95,column:13},end:{line:97,column:3}},line:95},"4":{name:"(anonymous_4)",decl:{start:{line:104,column:2},end:{line:104,column:3}},loc:{start:{line:104,column:20},end:{line:106,column:3}},line:104},"5":{name:"(anonymous_5)",decl:{start:{line:113,column:2},end:{line:113,column:3}},loc:{start:{line:113,column:19},end:{line:115,column:3}},line:113},"6":{name:"(anonymous_6)",decl:{start:{line:121,column:2},end:{line:121,column:3}},loc:{start:{line:121,column:12},end:{line:130,column:3}},line:121},"7":{name:"(anonymous_7)",decl:{start:{line:141,column:2},end:{line:141,column:3}},loc:{start:{line:141,column:26},end:{line:192,column:3}},line:141},"8":{name:"(anonymous_8)",decl:{start:{line:201,column:2},end:{line:201,column:3}},loc:{start:{line:201,column:15},end:{line:203,column:3}},line:201},"9":{name:"(anonymous_9)",decl:{start:{line:215,column:2},end:{line:215,column:3}},loc:{start:{line:215,column:40},end:{line:221,column:3}},line:215},"10":{name:"(anonymous_10)",decl:{start:{line:229,column:2},end:{line:229,column:3}},loc:{start:{line:229,column:13},end:{line:231,column:3}},line:229},"11":{name:"(anonymous_11)",decl:{start:{line:240,column:2},end:{line:240,column:3}},loc:{start:{line:240,column:21},end:{line:242,column:3}},line:240},"12":{name:"(anonymous_12)",decl:{start:{line:251,column:2},end:{line:251,column:3}},loc:{start:{line:251,column:27},end:{line:258,column:3}},line:251},"13":{name:"(anonymous_13)",decl:{start:{line:268,column:2},end:{line:268,column:3}},loc:{start:{line:268,column:19},end:{line:277,column:3}},line:268},"14":{name:"(anonymous_14)",decl:{start:{line:285,column:2},end:{line:285,column:3}},loc:{start:{line:285,column:14},end:{line:293,column:3}},line:285},"15":{name:"(anonymous_15)",decl:{start:{line:301,column:2},end:{line:301,column:3}},loc:{start:{line:301,column:15},end:{line:330,column:3}},line:301},"16":{name:"(anonymous_16)",decl:{start:{line:337,column:2},end:{line:337,column:3}},loc:{start:{line:337,column:18},end:{line:341,column:3}},line:337},"17":{name:"(anonymous_17)",decl:{start:{line:350,column:2},end:{line:350,column:3}},loc:{start:{line:350,column:26},end:{line:354,column:3}},line:350},"18":{name:"(anonymous_18)",decl:{start:{line:363,column:2},end:{line:363,column:3}},loc:{start:{line:363,column:33},end:{line:365,column:3}},line:363},"19":{name:"(anonymous_19)",decl:{start:{line:374,column:2},end:{line:374,column:3}},loc:{start:{line:374,column:33},end:{line:389,column:3}},line:374},"20":{name:"(anonymous_20)",decl:{start:{line:398,column:2},end:{line:398,column:3}},loc:{start:{line:398,column:30},end:{line:413,column:3}},line:398},"21":{name:"(anonymous_21)",decl:{start:{line:422,column:2},end:{line:422,column:3}},loc:{start:{line:422,column:28},end:{line:425,column:3}},line:422},"22":{name:"(anonymous_22)",decl:{start:{line:434,column:2},end:{line:434,column:3}},loc:{start:{line:434,column:26},end:{line:448,column:3}},line:434},"23":{name:"(anonymous_23)",decl:{start:{line:457,column:2},end:{line:457,column:3}},loc:{start:{line:457,column:25},end:{line:459,column:3}},line:457},"24":{name:"(anonymous_24)",decl:{start:{line:467,column:2},end:{line:467,column:3}},loc:{start:{line:467,column:20},end:{line:469,column:3}},line:467},"25":{name:"(anonymous_25)",decl:{start:{line:477,column:2},end:{line:477,column:3}},loc:{start:{line:477,column:24},end:{line:489,column:3}},line:477},"26":{name:"(anonymous_26)",decl:{start:{line:496,column:2},end:{line:496,column:3}},loc:{start:{line:496,column:12},end:{line:498,column:3}},line:496},"27":{name:"(anonymous_27)",decl:{start:{line:506,column:2},end:{line:506,column:3}},loc:{start:{line:506,column:17},end:{line:508,column:3}},line:506},"28":{name:"(anonymous_28)",decl:{start:{line:517,column:2},end:{line:517,column:3}},loc:{start:{line:517,column:35},end:{line:519,column:3}},line:517},"29":{name:"(anonymous_29)",decl:{start:{line:528,column:2},end:{line:528,column:3}},loc:{start:{line:528,column:33},end:{line:530,column:3}},line:528},"30":{name:"(anonymous_30)",decl:{start:{line:539,column:2},end:{line:539,column:3}},loc:{start:{line:539,column:32},end:{line:541,column:3}},line:539},"31":{name:"(anonymous_31)",decl:{start:{line:549,column:2},end:{line:549,column:3}},loc:{start:{line:549,column:28},end:{line:551,column:3}},line:549}},branchMap:{"0":{loc:{start:{line:53,column:4},end:{line:54,column:32}},type:"if",locations:[{start:{line:53,column:4},end:{line:54,column:32}},{start:{line:53,column:4},end:{line:54,column:32}}],line:53},"1":{loc:{start:{line:144,column:4},end:{line:145,column:45}},type:"if",locations:[{start:{line:144,column:4},end:{line:145,column:45}},{start:{line:144,column:4},end:{line:145,column:45}}],line:144},"2":{loc:{start:{line:147,column:4},end:{line:148,column:49}},type:"if",locations:[{start:{line:147,column:4},end:{line:148,column:49}},{start:{line:147,column:4},end:{line:148,column:49}}],line:147},"3":{loc:{start:{line:147,column:8},end:{line:147,column:45}},type:"binary-expr",locations:[{start:{line:147,column:9},end:{line:147,column:32}},{start:{line:147,column:37},end:{line:147,column:45}}],line:147},"4":{loc:{start:{line:150,column:4},end:{line:151,column:41}},type:"if",locations:[{start:{line:150,column:4},end:{line:151,column:41}},{start:{line:150,column:4},end:{line:151,column:41}}],line:150},"5":{loc:{start:{line:156,column:4},end:{line:157,column:19}},type:"if",locations:[{start:{line:156,column:4},end:{line:157,column:19}},{start:{line:156,column:4},end:{line:157,column:19}}],line:156},"6":{loc:{start:{line:177,column:4},end:{line:180,column:5}},type:"if",locations:[{start:{line:177,column:4},end:{line:180,column:5}},{start:{line:177,column:4},end:{line:180,column:5}}],line:177},"7":{loc:{start:{line:288,column:11},end:{line:292,column:45}},type:"binary-expr",locations:[{start:{line:288,column:11},end:{line:288,column:35}},{start:{line:289,column:9},end:{line:289,column:57}},{start:{line:290,column:9},end:{line:290,column:43}},{start:{line:291,column:9},end:{line:291,column:45}},{start:{line:292,column:9},end:{line:292,column:45}}],line:288},"8":{loc:{start:{line:306,column:4},end:{line:307,column:17}},type:"if",locations:[{start:{line:306,column:4},end:{line:307,column:17}},{start:{line:306,column:4},end:{line:307,column:17}}],line:306},"9":{loc:{start:{line:311,column:4},end:{line:312,column:17}},type:"if",locations:[{start:{line:311,column:4},end:{line:312,column:17}},{start:{line:311,column:4},end:{line:312,column:17}}],line:311},"10":{loc:{start:{line:316,column:4},end:{line:317,column:17}},type:"if",locations:[{start:{line:316,column:4},end:{line:317,column:17}},{start:{line:316,column:4},end:{line:317,column:17}}],line:316},"11":{loc:{start:{line:321,column:4},end:{line:322,column:17}},type:"if",locations:[{start:{line:321,column:4},end:{line:322,column:17}},{start:{line:321,column:4},end:{line:322,column:17}}],line:321},"12":{loc:{start:{line:326,column:4},end:{line:327,column:17}},type:"if",locations:[{start:{line:326,column:4},end:{line:327,column:17}},{start:{line:326,column:4},end:{line:327,column:17}}],line:326},"13":{loc:{start:{line:375,column:4},end:{line:376,column:19}},type:"if",locations:[{start:{line:375,column:4},end:{line:376,column:19}},{start:{line:375,column:4},end:{line:376,column:19}}],line:375},"14":{loc:{start:{line:378,column:4},end:{line:379,column:19}},type:"if",locations:[{start:{line:378,column:4},end:{line:379,column:19}},{start:{line:378,column:4},end:{line:379,column:19}}],line:378},"15":{loc:{start:{line:399,column:4},end:{line:400,column:19}},type:"if",locations:[{start:{line:399,column:4},end:{line:400,column:19}},{start:{line:399,column:4},end:{line:400,column:19}}],line:399},"16":{loc:{start:{line:402,column:4},end:{line:403,column:19}},type:"if",locations:[{start:{line:402,column:4},end:{line:403,column:19}},{start:{line:402,column:4},end:{line:403,column:19}}],line:402}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"cb06dd6dcd0269c545697f7d3af34ba0fa8c4c44"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_134uzzsih9=function(){return actualCoverage;};}return actualCoverage;}cov_134uzzsih9();const assert=(cov_134uzzsih9().s[0]++,require('bsert'));const bio=(cov_134uzzsih9().s[1]++,require('bufio'));const base58=(cov_134uzzsih9().s[2]++,require('bcrypto/lib/encoding/base58'));const sha512=(cov_134uzzsih9().s[3]++,require('bcrypto/lib/sha512'));const hash160=(cov_134uzzsih9().s[4]++,require('bcrypto/lib/hash160'));const hash256=(cov_134uzzsih9().s[5]++,require('bcrypto/lib/hash256'));const cleanse=(cov_134uzzsih9().s[6]++,require('bcrypto/lib/cleanse'));const secp256k1=(cov_134uzzsih9().s[7]++,require('bcrypto/lib/secp256k1'));const Network=(cov_134uzzsih9().s[8]++,require('../protocol/network'));const consensus=(cov_134uzzsih9().s[9]++,require('../protocol/consensus'));const common=(cov_134uzzsih9().s[10]++,require('./common'));/**
 * HDPublicKey
 * @alias module:hd.PublicKey
 * @property {Number} depth
 * @property {Number} parentFingerPrint
 * @property {Number} childIndex
 * @property {Buffer} chainCode
 * @property {Buffer} publicKey
 */class HDPublicKey{/**
   * Create an HD public key.
   * @constructor
   * @param {Object|Base58String} options
   * @param {Base58String?} options.xkey - Serialized base58 key.
   * @param {Number?} options.depth
   * @param {Number?} options.parentFingerPrint
   * @param {Number?} options.childIndex
   * @param {Buffer?} options.chainCode
   * @param {Buffer?} options.publicKey
   */constructor(options){cov_134uzzsih9().f[0]++;cov_134uzzsih9().s[11]++;this.depth=0;cov_134uzzsih9().s[12]++;this.parentFingerPrint=0;cov_134uzzsih9().s[13]++;this.childIndex=0;cov_134uzzsih9().s[14]++;this.chainCode=consensus.ZERO_HASH;cov_134uzzsih9().s[15]++;this.publicKey=common.ZERO_KEY;cov_134uzzsih9().s[16]++;this.fingerPrint=-1;cov_134uzzsih9().s[17]++;if(options){cov_134uzzsih9().b[0][0]++;cov_134uzzsih9().s[18]++;this.fromOptions(options);}else{cov_134uzzsih9().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_134uzzsih9().f[1]++;cov_134uzzsih9().s[19]++;assert(options,'No options for HDPublicKey');cov_134uzzsih9().s[20]++;assert((options.depth&0xff)===options.depth);cov_134uzzsih9().s[21]++;assert(options.parentFingerPrint>>>0===options.parentFingerPrint);cov_134uzzsih9().s[22]++;assert(options.childIndex>>>0===options.childIndex);cov_134uzzsih9().s[23]++;assert(Buffer.isBuffer(options.chainCode));cov_134uzzsih9().s[24]++;assert(Buffer.isBuffer(options.publicKey));cov_134uzzsih9().s[25]++;this.depth=options.depth;cov_134uzzsih9().s[26]++;this.parentFingerPrint=options.parentFingerPrint;cov_134uzzsih9().s[27]++;this.childIndex=options.childIndex;cov_134uzzsih9().s[28]++;this.chainCode=options.chainCode;cov_134uzzsih9().s[29]++;this.publicKey=options.publicKey;cov_134uzzsih9().s[30]++;return this;}/**
   * Instantiate HD public key from options object.
   * @param {Object} options
   * @returns {HDPublicKey}
   */static fromOptions(options){cov_134uzzsih9().f[2]++;cov_134uzzsih9().s[31]++;return new this().fromOptions(options);}/**
   * Get HD public key (self).
   * @returns {HDPublicKey}
   */toPublic(){cov_134uzzsih9().f[3]++;cov_134uzzsih9().s[32]++;return this;}/**
   * Get cached base58 xprivkey (always null here).
   * @returns {null}
   */xprivkey(network){cov_134uzzsih9().f[4]++;cov_134uzzsih9().s[33]++;return null;}/**
   * Get cached base58 xpubkey.
   * @returns {Base58String}
   */xpubkey(network){cov_134uzzsih9().f[5]++;cov_134uzzsih9().s[34]++;return this.toBase58(network);}/**
   * Destroy the key (zeroes chain code and pubkey).
   */destroy(){cov_134uzzsih9().f[6]++;cov_134uzzsih9().s[35]++;this.depth=0;cov_134uzzsih9().s[36]++;this.childIndex=0;cov_134uzzsih9().s[37]++;this.parentFingerPrint=0;cov_134uzzsih9().s[38]++;cleanse(this.chainCode);cov_134uzzsih9().s[39]++;cleanse(this.publicKey);cov_134uzzsih9().s[40]++;this.fingerPrint=-1;}/**
   * Derive a child key.
   * @param {Number} index - Derivation index.
   * @param {Boolean?} hardened - Whether the derivation
   * should be hardened (throws if true).
   * @returns {HDPrivateKey}
   * @throws on `hardened`
   */derive(index,hardened){cov_134uzzsih9().f[7]++;cov_134uzzsih9().s[41]++;assert(typeof index==='number');cov_134uzzsih9().s[42]++;if(index>>>0!==index){cov_134uzzsih9().b[1][0]++;cov_134uzzsih9().s[43]++;throw new Error('Index out of range.');}else{cov_134uzzsih9().b[1][1]++;}cov_134uzzsih9().s[44]++;if((cov_134uzzsih9().b[3][0]++,index&common.HARDENED)||(cov_134uzzsih9().b[3][1]++,hardened)){cov_134uzzsih9().b[2][0]++;cov_134uzzsih9().s[45]++;throw new Error('Cannot derive hardened.');}else{cov_134uzzsih9().b[2][1]++;}cov_134uzzsih9().s[46]++;if(this.depth>=0xff){cov_134uzzsih9().b[4][0]++;cov_134uzzsih9().s[47]++;throw new Error('Depth too high.');}else{cov_134uzzsih9().b[4][1]++;}const id=(cov_134uzzsih9().s[48]++,this.getID(index));const cache=(cov_134uzzsih9().s[49]++,common.cache.get(id));cov_134uzzsih9().s[50]++;if(cache){cov_134uzzsih9().b[5][0]++;cov_134uzzsih9().s[51]++;return cache;}else{cov_134uzzsih9().b[5][1]++;}const bw=(cov_134uzzsih9().s[52]++,bio.pool(37));cov_134uzzsih9().s[53]++;bw.writeBytes(this.publicKey);cov_134uzzsih9().s[54]++;bw.writeU32BE(index);const data=(cov_134uzzsih9().s[55]++,bw.render());const hash=(cov_134uzzsih9().s[56]++,sha512.mac(data,this.chainCode));const left=(cov_134uzzsih9().s[57]++,hash.slice(0,32));const right=(cov_134uzzsih9().s[58]++,hash.slice(32,64));let key;cov_134uzzsih9().s[59]++;try{cov_134uzzsih9().s[60]++;key=secp256k1.publicKeyTweakAdd(this.publicKey,left,true);}catch(e){cov_134uzzsih9().s[61]++;return this.derive(index+1);}cov_134uzzsih9().s[62]++;if(this.fingerPrint===-1){cov_134uzzsih9().b[6][0]++;const fp=(cov_134uzzsih9().s[63]++,hash160.digest(this.publicKey));cov_134uzzsih9().s[64]++;this.fingerPrint=fp.readUInt32BE(0,true);}else{cov_134uzzsih9().b[6][1]++;}const child=(cov_134uzzsih9().s[65]++,new this.constructor());cov_134uzzsih9().s[66]++;child.depth=this.depth+1;cov_134uzzsih9().s[67]++;child.parentFingerPrint=this.fingerPrint;cov_134uzzsih9().s[68]++;child.childIndex=index;cov_134uzzsih9().s[69]++;child.chainCode=right;cov_134uzzsih9().s[70]++;child.publicKey=key;cov_134uzzsih9().s[71]++;common.cache.set(id,child);cov_134uzzsih9().s[72]++;return child;}/**
   * Unique HD key ID.
   * @private
   * @param {Number} index
   * @returns {String}
   */getID(index){cov_134uzzsih9().f[8]++;cov_134uzzsih9().s[73]++;return'b'+this.publicKey.toString('hex')+index;}/**
   * Derive a BIP44 account key (does not derive, only ensures account key).
   * @method
   * @param {Number} purpose
   * @param {Number} type
   * @param {Number} account
   * @returns {HDPublicKey}
   * @throws Error if key is not already an account key.
   */deriveAccount(purpose,type,account){cov_134uzzsih9().f[9]++;cov_134uzzsih9().s[74]++;assert(purpose>>>0===purpose);cov_134uzzsih9().s[75]++;assert(type>>>0===type);cov_134uzzsih9().s[76]++;assert(account>>>0===account);cov_134uzzsih9().s[77]++;assert(this.isAccount(account),'Cannot derive account index.');cov_134uzzsih9().s[78]++;return this;}/**
   * Test whether the key is a master key.
   * @method
   * @returns {Boolean}
   */isMaster(){cov_134uzzsih9().f[10]++;cov_134uzzsih9().s[79]++;return common.isMaster(this);}/**
   * Test whether the key is (most likely) a BIP44 account key.
   * @method
   * @param {Number?} account
   * @returns {Boolean}
   */isAccount(account){cov_134uzzsih9().f[11]++;cov_134uzzsih9().s[80]++;return common.isAccount(this,account);}/**
   * Test whether a string is a valid path.
   * @param {String} path
   * @param {Boolean?} hardened
   * @returns {Boolean}
   */static isValidPath(path){cov_134uzzsih9().f[12]++;cov_134uzzsih9().s[81]++;try{cov_134uzzsih9().s[82]++;common.parsePath(path,false);cov_134uzzsih9().s[83]++;return true;}catch(e){cov_134uzzsih9().s[84]++;return false;}}/**
   * Derive a key from a derivation path.
   * @param {String} path
   * @returns {HDPublicKey}
   * @throws Error if `path` is not a valid path.
   * @throws Error if hardened.
   */derivePath(path){cov_134uzzsih9().f[13]++;const indexes=(cov_134uzzsih9().s[85]++,common.parsePath(path,false));let key=(cov_134uzzsih9().s[86]++,this);cov_134uzzsih9().s[87]++;for(const index of indexes){cov_134uzzsih9().s[88]++;key=key.derive(index);}cov_134uzzsih9().s[89]++;return key;}/**
   * Compare a key against an object.
   * @param {Object} obj
   * @returns {Boolean}
   */equals(obj){cov_134uzzsih9().f[14]++;cov_134uzzsih9().s[90]++;assert(HDPublicKey.isHDPublicKey(obj));cov_134uzzsih9().s[91]++;return(cov_134uzzsih9().b[7][0]++,this.depth===obj.depth)&&(cov_134uzzsih9().b[7][1]++,this.parentFingerPrint===obj.parentFingerPrint)&&(cov_134uzzsih9().b[7][2]++,this.childIndex===obj.childIndex)&&(cov_134uzzsih9().b[7][3]++,this.chainCode.equals(obj.chainCode))&&(cov_134uzzsih9().b[7][4]++,this.publicKey.equals(obj.publicKey));}/**
   * Compare a key against an object.
   * @param {Object} obj
   * @returns {Boolean}
   */compare(key){cov_134uzzsih9().f[15]++;cov_134uzzsih9().s[92]++;assert(HDPublicKey.isHDPublicKey(key));let cmp=(cov_134uzzsih9().s[93]++,this.depth-key.depth);cov_134uzzsih9().s[94]++;if(cmp!==0){cov_134uzzsih9().b[8][0]++;cov_134uzzsih9().s[95]++;return cmp;}else{cov_134uzzsih9().b[8][1]++;}cov_134uzzsih9().s[96]++;cmp=this.parentFingerPrint-key.parentFingerPrint;cov_134uzzsih9().s[97]++;if(cmp!==0){cov_134uzzsih9().b[9][0]++;cov_134uzzsih9().s[98]++;return cmp;}else{cov_134uzzsih9().b[9][1]++;}cov_134uzzsih9().s[99]++;cmp=this.childIndex-key.childIndex;cov_134uzzsih9().s[100]++;if(cmp!==0){cov_134uzzsih9().b[10][0]++;cov_134uzzsih9().s[101]++;return cmp;}else{cov_134uzzsih9().b[10][1]++;}cov_134uzzsih9().s[102]++;cmp=this.chainCode.compare(key.chainCode);cov_134uzzsih9().s[103]++;if(cmp!==0){cov_134uzzsih9().b[11][0]++;cov_134uzzsih9().s[104]++;return cmp;}else{cov_134uzzsih9().b[11][1]++;}cov_134uzzsih9().s[105]++;cmp=this.publicKey.compare(key.publicKey);cov_134uzzsih9().s[106]++;if(cmp!==0){cov_134uzzsih9().b[12][0]++;cov_134uzzsih9().s[107]++;return cmp;}else{cov_134uzzsih9().b[12][1]++;}cov_134uzzsih9().s[108]++;return 0;}/**
   * Convert key to a more json-friendly object.
   * @returns {Object}
   */toJSON(network){cov_134uzzsih9().f[16]++;cov_134uzzsih9().s[109]++;return{xpubkey:this.xpubkey(network)};}/**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   * @param {Network?} network
   */fromJSON(json,network){cov_134uzzsih9().f[17]++;cov_134uzzsih9().s[110]++;assert(json.xpubkey,'Could not handle HD key JSON.');cov_134uzzsih9().s[111]++;this.fromBase58(json.xpubkey,network);cov_134uzzsih9().s[112]++;return this;}/**
   * Instantiate an HDPublicKey from a jsonified key object.
   * @param {Object} json - The jsonified transaction object.
   * @param {Network?} network
   * @returns {HDPrivateKey}
   */static fromJSON(json,network){cov_134uzzsih9().f[18]++;cov_134uzzsih9().s[113]++;return new this().fromJSON(json,network);}/**
   * Test whether an object is in the form of a base58 xpubkey.
   * @param {String} data
   * @param {(Network|NetworkType)?} network
   * @returns {Boolean}
   */static isBase58(data,network){cov_134uzzsih9().f[19]++;cov_134uzzsih9().s[114]++;if(typeof data!=='string'){cov_134uzzsih9().b[13][0]++;cov_134uzzsih9().s[115]++;return false;}else{cov_134uzzsih9().b[13][1]++;}cov_134uzzsih9().s[116]++;if(data.length<4){cov_134uzzsih9().b[14][0]++;cov_134uzzsih9().s[117]++;return false;}else{cov_134uzzsih9().b[14][1]++;}const prefix=(cov_134uzzsih9().s[118]++,data.substring(0,4));cov_134uzzsih9().s[119]++;try{cov_134uzzsih9().s[120]++;Network.fromPublic58(prefix,network);cov_134uzzsih9().s[121]++;return true;}catch(e){cov_134uzzsih9().s[122]++;return false;}}/**
   * Test whether a buffer has a valid network prefix.
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   * @returns {NetworkType}
   */static isRaw(data,network){cov_134uzzsih9().f[20]++;cov_134uzzsih9().s[123]++;if(!Buffer.isBuffer(data)){cov_134uzzsih9().b[15][0]++;cov_134uzzsih9().s[124]++;return false;}else{cov_134uzzsih9().b[15][1]++;}cov_134uzzsih9().s[125]++;if(data.length<4){cov_134uzzsih9().b[16][0]++;cov_134uzzsih9().s[126]++;return false;}else{cov_134uzzsih9().b[16][1]++;}const version=(cov_134uzzsih9().s[127]++,data.readUInt32BE(0,true));cov_134uzzsih9().s[128]++;try{cov_134uzzsih9().s[129]++;Network.fromPublic(version,network);cov_134uzzsih9().s[130]++;return true;}catch(e){cov_134uzzsih9().s[131]++;return false;}}/**
   * Inject properties from a base58 key.
   * @private
   * @param {Base58String} xkey
   * @param {Network?} network
   */fromBase58(xkey,network){cov_134uzzsih9().f[21]++;cov_134uzzsih9().s[132]++;assert(typeof xkey==='string');cov_134uzzsih9().s[133]++;return this.fromRaw(base58.decode(xkey),network);}/**
   * Inject properties from serialized data.
   * @private
   * @param {BufferReader} br
   * @param {(Network|NetworkType)?} network
   */fromReader(br,network){cov_134uzzsih9().f[22]++;const version=(cov_134uzzsih9().s[134]++,br.readU32BE());cov_134uzzsih9().s[135]++;Network.fromPublic(version,network);cov_134uzzsih9().s[136]++;this.depth=br.readU8();cov_134uzzsih9().s[137]++;this.parentFingerPrint=br.readU32BE();cov_134uzzsih9().s[138]++;this.childIndex=br.readU32BE();cov_134uzzsih9().s[139]++;this.chainCode=br.readBytes(32);cov_134uzzsih9().s[140]++;this.publicKey=br.readBytes(33);cov_134uzzsih9().s[141]++;br.verifyChecksum(hash256.digest);cov_134uzzsih9().s[142]++;return this;}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   */fromRaw(data,network){cov_134uzzsih9().f[23]++;cov_134uzzsih9().s[143]++;return this.fromReader(bio.read(data),network);}/**
   * Serialize key data to base58 extended key.
   * @param {(Network|NetworkType)?} network
   * @returns {Base58String}
   */toBase58(network){cov_134uzzsih9().f[24]++;cov_134uzzsih9().s[144]++;return base58.encode(this.toRaw(network));}/**
   * Write the key to a buffer writer.
   * @param {BufferWriter} bw
   * @param {(Network|NetworkType)?} network
   */toWriter(bw,network){cov_134uzzsih9().f[25]++;cov_134uzzsih9().s[145]++;network=Network.get(network);cov_134uzzsih9().s[146]++;bw.writeU32BE(network.keyPrefix.xpubkey);cov_134uzzsih9().s[147]++;bw.writeU8(this.depth);cov_134uzzsih9().s[148]++;bw.writeU32BE(this.parentFingerPrint);cov_134uzzsih9().s[149]++;bw.writeU32BE(this.childIndex);cov_134uzzsih9().s[150]++;bw.writeBytes(this.chainCode);cov_134uzzsih9().s[151]++;bw.writeBytes(this.publicKey);cov_134uzzsih9().s[152]++;bw.writeChecksum(hash256.digest);cov_134uzzsih9().s[153]++;return bw;}/**
   * Calculate serialization size.
   * @returns {Number}
   */getSize(){cov_134uzzsih9().f[26]++;cov_134uzzsih9().s[154]++;return 82;}/**
   * Serialize the key.
   * @param {(Network|NetworkType)?} network
   * @returns {Buffer}
   */toRaw(network){cov_134uzzsih9().f[27]++;cov_134uzzsih9().s[155]++;return this.toWriter(bio.write(82),network).render();}/**
   * Instantiate an HD public key from a base58 string.
   * @param {Base58String} xkey
   * @param {Network?} network
   * @returns {HDPublicKey}
   */static fromBase58(xkey,network){cov_134uzzsih9().f[28]++;cov_134uzzsih9().s[156]++;return new this().fromBase58(xkey,network);}/**
   * Instantiate key from serialized data.
   * @param {BufferReader} br
   * @param {(Network|NetworkType)?} network
   * @returns {HDPublicKey}
   */static fromReader(br,network){cov_134uzzsih9().f[29]++;cov_134uzzsih9().s[157]++;return new this().fromReader(br,network);}/**
   * Instantiate key from serialized data.
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   * @returns {HDPublicKey}
   */static fromRaw(data,network){cov_134uzzsih9().f[30]++;cov_134uzzsih9().s[158]++;return new this().fromRaw(data,network);}/**
   * Test whether an object is a HDPublicKey.
   * @param {Object} obj
   * @returns {Boolean}
   */static isHDPublicKey(obj){cov_134uzzsih9().f[31]++;cov_134uzzsih9().s[159]++;return obj instanceof HDPublicKey;}}/*
 * Expose
 */cov_134uzzsih9().s[160]++;module.exports=HDPublicKey;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
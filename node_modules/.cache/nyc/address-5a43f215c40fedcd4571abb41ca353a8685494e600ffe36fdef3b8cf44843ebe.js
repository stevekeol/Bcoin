/*!
 * address.js - address object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_jdlskfo6a(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\address.js";var hash="be4dc5e73be36ac4ea1c8e9e9825fbc77a95cd88";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\address.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:12},end:{line:11,column:28}},"2":{start:{line:12,column:15},end:{line:12,column:53}},"3":{start:{line:13,column:15},end:{line:13,column:53}},"4":{start:{line:14,column:15},end:{line:14,column:44}},"5":{start:{line:15,column:16},end:{line:15,column:46}},"6":{start:{line:16,column:16},end:{line:16,column:46}},"7":{start:{line:17,column:16},end:{line:17,column:46}},"8":{start:{line:18,column:18},end:{line:18,column:50}},"9":{start:{line:19,column:24},end:{line:19,column:43}},"10":{start:{line:25,column:21},end:{line:25,column:43}},"11":{start:{line:44,column:4},end:{line:44,column:41}},"12":{start:{line:45,column:4},end:{line:45,column:22}},"13":{start:{line:46,column:4},end:{line:46,column:29}},"14":{start:{line:48,column:4},end:{line:49,column:41}},"15":{start:{line:49,column:6},end:{line:49,column:41}},"16":{start:{line:59,column:4},end:{line:60,column:47}},"17":{start:{line:60,column:6},end:{line:60,column:47}},"18":{start:{line:62,column:4},end:{line:62,column:20}},"19":{start:{line:64,column:34},end:{line:64,column:41}},"20":{start:{line:66,column:4},end:{line:66,column:46}},"21":{start:{line:76,column:4},end:{line:76,column:52}},"22":{start:{line:86,column:4},end:{line:87,column:39}},"23":{start:{line:87,column:6},end:{line:87,column:39}},"24":{start:{line:88,column:4},end:{line:88,column:21}},"25":{start:{line:97,column:4},end:{line:98,column:44}},"26":{start:{line:98,column:6},end:{line:98,column:44}},"27":{start:{line:100,column:4},end:{line:101,column:51}},"28":{start:{line:101,column:6},end:{line:101,column:51}},"29":{start:{line:103,column:4},end:{line:106,column:5}},"30":{start:{line:103,column:17},end:{line:103,column:18}},"31":{start:{line:104,column:6},end:{line:105,column:21}},"32":{start:{line:105,column:8},end:{line:105,column:21}},"33":{start:{line:108,column:4},end:{line:108,column:16}},"34":{start:{line:118,column:4},end:{line:118,column:36}},"35":{start:{line:120,column:4},end:{line:122,column:37}},"36":{start:{line:131,column:4},end:{line:131,column:55}},"37":{start:{line:141,column:4},end:{line:141,column:35}},"38":{start:{line:143,column:21},end:{line:143,column:42}},"39":{start:{line:145,column:4},end:{line:158,column:5}},"40":{start:{line:147,column:8},end:{line:147,column:35}},"41":{start:{line:149,column:8},end:{line:149,column:35}},"42":{start:{line:151,column:8},end:{line:152,column:44}},"43":{start:{line:152,column:10},end:{line:152,column:44}},"44":{start:{line:154,column:8},end:{line:155,column:44}},"45":{start:{line:155,column:10},end:{line:155,column:44}},"46":{start:{line:157,column:8},end:{line:157,column:14}},"47":{start:{line:160,column:4},end:{line:160,column:14}},"48":{start:{line:169,column:15},end:{line:169,column:35}},"49":{start:{line:171,column:4},end:{line:172,column:16}},"50":{start:{line:172,column:6},end:{line:172,column:16}},"51":{start:{line:174,column:4},end:{line:174,column:16}},"52":{start:{line:185,column:17},end:{line:185,column:31}},"53":{start:{line:186,column:15},end:{line:186,column:30}},"54":{start:{line:187,column:19},end:{line:187,column:42}},"55":{start:{line:189,column:4},end:{line:189,column:57}},"56":{start:{line:191,column:4},end:{line:191,column:23}},"57":{start:{line:193,column:4},end:{line:196,column:5}},"58":{start:{line:194,column:6},end:{line:194,column:31}},"59":{start:{line:195,column:6},end:{line:195,column:20}},"60":{start:{line:198,column:4},end:{line:198,column:29}},"61":{start:{line:199,column:4},end:{line:199,column:37}},"62":{start:{line:201,column:4},end:{line:201,column:23}},"63":{start:{line:212,column:4},end:{line:212,column:46}},"64":{start:{line:223,column:20},end:{line:223,column:32}},"65":{start:{line:224,column:17},end:{line:224,column:26}},"66":{start:{line:226,column:4},end:{line:227,column:55}},"67":{start:{line:229,column:4},end:{line:229,column:35}},"68":{start:{line:231,column:16},end:{line:231,column:44}},"69":{start:{line:233,column:4},end:{line:233,column:45}},"70":{start:{line:245,column:4},end:{line:245,column:37}},"71":{start:{line:246,column:4},end:{line:246,column:28}},"72":{start:{line:247,column:4},end:{line:247,column:31}},"73":{start:{line:251,column:4},end:{line:252,column:44}},"74":{start:{line:252,column:6},end:{line:252,column:44}},"75":{start:{line:255,column:4},end:{line:259,column:5}},"76":{start:{line:256,column:6},end:{line:256,column:44}},"77":{start:{line:258,column:6},end:{line:258,column:44}},"78":{start:{line:270,column:4},end:{line:270,column:48}},"79":{start:{line:280,column:4},end:{line:281,column:36}},"80":{start:{line:281,column:6},end:{line:281,column:36}},"81":{start:{line:282,column:4},end:{line:282,column:34}},"82":{start:{line:291,column:4},end:{line:295,column:12}},"83":{start:{line:306,column:15},end:{line:306,column:35}},"84":{start:{line:307,column:19},end:{line:307,column:30}},"85":{start:{line:309,column:4},end:{line:309,column:51}},"86":{start:{line:311,column:17},end:{line:311,column:49}},"87":{start:{line:313,column:18},end:{line:313,column:20}},"88":{start:{line:314,column:4},end:{line:325,column:5}},"89":{start:{line:315,column:6},end:{line:316,column:48}},"90":{start:{line:316,column:8},end:{line:316,column:48}},"91":{start:{line:318,column:6},end:{line:318,column:28}},"92":{start:{line:320,column:6},end:{line:321,column:64}},"93":{start:{line:321,column:8},end:{line:321,column:64}},"94":{start:{line:323,column:6},end:{line:324,column:48}},"95":{start:{line:324,column:8},end:{line:324,column:48}},"96":{start:{line:327,column:17},end:{line:327,column:44}},"97":{start:{line:329,column:4},end:{line:329,column:38}},"98":{start:{line:331,column:4},end:{line:331,column:46}},"99":{start:{line:342,column:4},end:{line:342,column:45}},"100":{start:{line:354,column:4},end:{line:354,column:37}},"101":{start:{line:356,column:4},end:{line:357,column:46}},"102":{start:{line:357,column:6},end:{line:357,column:46}},"103":{start:{line:359,column:4},end:{line:359,column:54}},"104":{start:{line:371,column:4},end:{line:371,column:48}},"105":{start:{line:383,column:17},end:{line:383,column:38}},"106":{start:{line:385,column:4},end:{line:385,column:37}},"107":{start:{line:387,column:33},end:{line:387,column:52}},"108":{start:{line:390,column:4},end:{line:390,column:37}},"109":{start:{line:392,column:4},end:{line:392,column:46}},"110":{start:{line:404,column:4},end:{line:404,column:48}},"111":{start:{line:414,column:15},end:{line:414,column:33}},"112":{start:{line:416,column:4},end:{line:421,column:5}},"113":{start:{line:417,column:6},end:{line:417,column:37}},"114":{start:{line:418,column:6},end:{line:418,column:43}},"115":{start:{line:419,column:6},end:{line:419,column:24}},"116":{start:{line:420,column:6},end:{line:420,column:18}},"117":{start:{line:423,column:16},end:{line:423,column:38}},"118":{start:{line:425,column:4},end:{line:430,column:5}},"119":{start:{line:426,column:6},end:{line:426,column:22}},"120":{start:{line:427,column:6},end:{line:427,column:43}},"121":{start:{line:428,column:6},end:{line:428,column:24}},"122":{start:{line:429,column:6},end:{line:429,column:18}},"123":{start:{line:432,column:15},end:{line:432,column:37}},"124":{start:{line:434,column:4},end:{line:439,column:5}},"125":{start:{line:435,column:6},end:{line:435,column:21}},"126":{start:{line:436,column:6},end:{line:436,column:43}},"127":{start:{line:437,column:6},end:{line:437,column:24}},"128":{start:{line:438,column:6},end:{line:438,column:18}},"129":{start:{line:441,column:20},end:{line:441,column:39}},"130":{start:{line:443,column:4},end:{line:448,column:5}},"131":{start:{line:444,column:6},end:{line:444,column:31}},"132":{start:{line:445,column:6},end:{line:445,column:40}},"133":{start:{line:446,column:6},end:{line:446,column:37}},"134":{start:{line:447,column:6},end:{line:447,column:18}},"135":{start:{line:451,column:4},end:{line:456,column:5}},"136":{start:{line:452,column:6},end:{line:452,column:35}},"137":{start:{line:453,column:6},end:{line:453,column:43}},"138":{start:{line:454,column:6},end:{line:454,column:24}},"139":{start:{line:455,column:6},end:{line:455,column:18}},"140":{start:{line:458,column:4},end:{line:458,column:16}},"141":{start:{line:468,column:19},end:{line:468,column:47}},"142":{start:{line:472,column:4},end:{line:477,column:5}},"143":{start:{line:473,column:6},end:{line:473,column:37}},"144":{start:{line:474,column:6},end:{line:474,column:40}},"145":{start:{line:475,column:6},end:{line:475,column:23}},"146":{start:{line:476,column:6},end:{line:476,column:18}},"147":{start:{line:479,column:19},end:{line:479,column:47}},"148":{start:{line:481,column:4},end:{line:486,column:5}},"149":{start:{line:482,column:6},end:{line:482,column:40}},"150":{start:{line:483,column:6},end:{line:483,column:40}},"151":{start:{line:484,column:6},end:{line:484,column:23}},"152":{start:{line:485,column:6},end:{line:485,column:18}},"153":{start:{line:488,column:4},end:{line:488,column:16}},"154":{start:{line:498,column:19},end:{line:498,column:46}},"155":{start:{line:500,column:4},end:{line:505,column:5}},"156":{start:{line:501,column:6},end:{line:501,column:37}},"157":{start:{line:502,column:6},end:{line:502,column:43}},"158":{start:{line:503,column:6},end:{line:503,column:24}},"159":{start:{line:504,column:6},end:{line:504,column:18}},"160":{start:{line:507,column:19},end:{line:507,column:46}},"161":{start:{line:509,column:4},end:{line:514,column:5}},"162":{start:{line:510,column:6},end:{line:510,column:41}},"163":{start:{line:511,column:6},end:{line:511,column:43}},"164":{start:{line:512,column:6},end:{line:512,column:24}},"165":{start:{line:513,column:6},end:{line:513,column:18}},"166":{start:{line:516,column:4},end:{line:516,column:16}},"167":{start:{line:528,column:4},end:{line:528,column:43}},"168":{start:{line:540,column:4},end:{line:540,column:46}},"169":{start:{line:553,column:4},end:{line:553,column:41}},"170":{start:{line:566,column:4},end:{line:569,column:5}},"171":{start:{line:567,column:6},end:{line:567,column:47}},"172":{start:{line:568,column:6},end:{line:568,column:56}},"173":{start:{line:571,column:4},end:{line:572,column:38}},"174":{start:{line:572,column:6},end:{line:572,column:38}},"175":{start:{line:574,column:4},end:{line:575,column:19}},"176":{start:{line:575,column:6},end:{line:575,column:19}},"177":{start:{line:577,column:4},end:{line:577,column:34}},"178":{start:{line:578,column:4},end:{line:578,column:34}},"179":{start:{line:579,column:4},end:{line:579,column:38}},"180":{start:{line:581,column:4},end:{line:582,column:35}},"181":{start:{line:584,column:4},end:{line:595,column:5}},"182":{start:{line:585,column:6},end:{line:585,column:72}},"183":{start:{line:586,column:6},end:{line:586,column:60}},"184":{start:{line:588,column:6},end:{line:588,column:77}},"185":{start:{line:589,column:6},end:{line:589,column:68}},"186":{start:{line:590,column:6},end:{line:593,column:7}},"187":{start:{line:591,column:8},end:{line:592,column:53}},"188":{start:{line:594,column:6},end:{line:594,column:79}},"189":{start:{line:597,column:4},end:{line:597,column:21}},"190":{start:{line:598,column:4},end:{line:598,column:21}},"191":{start:{line:599,column:4},end:{line:599,column:27}},"192":{start:{line:601,column:4},end:{line:601,column:16}},"193":{start:{line:614,column:4},end:{line:614,column:52}},"194":{start:{line:625,column:17},end:{line:625,column:41}},"195":{start:{line:626,column:4},end:{line:626,column:58}},"196":{start:{line:627,column:4},end:{line:627,column:41}},"197":{start:{line:637,column:4},end:{line:637,column:43}},"198":{start:{line:648,column:17},end:{line:648,column:41}},"199":{start:{line:649,column:4},end:{line:649,column:65}},"200":{start:{line:650,column:4},end:{line:650,column:41}},"201":{start:{line:660,column:4},end:{line:660,column:43}},"202":{start:{line:671,column:17},end:{line:671,column:38}},"203":{start:{line:672,column:4},end:{line:672,column:67}},"204":{start:{line:673,column:4},end:{line:673,column:40}},"205":{start:{line:683,column:4},end:{line:683,column:50}},"206":{start:{line:694,column:17},end:{line:694,column:38}},"207":{start:{line:695,column:4},end:{line:695,column:67}},"208":{start:{line:696,column:4},end:{line:696,column:40}},"209":{start:{line:706,column:4},end:{line:706,column:50}},"210":{start:{line:718,column:17},end:{line:718,column:38}},"211":{start:{line:720,column:4},end:{line:720,column:61}},"212":{start:{line:722,column:4},end:{line:722,column:46}},"213":{start:{line:733,column:4},end:{line:733,column:49}},"214":{start:{line:742,column:4},end:{line:742,column:50}},"215":{start:{line:751,column:4},end:{line:751,column:50}},"216":{start:{line:760,column:4},end:{line:760,column:57}},"217":{start:{line:769,column:4},end:{line:769,column:57}},"218":{start:{line:778,column:4},end:{line:778,column:31}},"219":{start:{line:787,column:4},end:{line:788,column:19}},"220":{start:{line:788,column:6},end:{line:788,column:19}},"221":{start:{line:790,column:4},end:{line:791,column:18}},"222":{start:{line:791,column:6},end:{line:791,column:18}},"223":{start:{line:793,column:4},end:{line:793,column:62}},"224":{start:{line:804,column:4},end:{line:805,column:51}},"225":{start:{line:805,column:6},end:{line:805,column:51}},"226":{start:{line:809,column:4},end:{line:817,column:5}},"227":{start:{line:810,column:6},end:{line:811,column:53}},"228":{start:{line:811,column:8},end:{line:811,column:53}},"229":{start:{line:812,column:6},end:{line:812,column:18}},"230":{start:{line:813,column:11},end:{line:817,column:5}},"231":{start:{line:814,column:6},end:{line:814,column:23}},"232":{start:{line:816,column:6},end:{line:816,column:51}},"233":{start:{line:819,column:4},end:{line:820,column:34}},"234":{start:{line:820,column:6},end:{line:820,column:34}},"235":{start:{line:822,column:4},end:{line:822,column:16}},"236":{start:{line:833,column:21},end:{line:833,column:42}},"237":{start:{line:835,column:4},end:{line:845,column:5}},"238":{start:{line:837,column:8},end:{line:837,column:40}},"239":{start:{line:839,column:8},end:{line:839,column:40}},"240":{start:{line:842,column:8},end:{line:842,column:37}},"241":{start:{line:844,column:8},end:{line:844,column:51}},"242":{start:{line:854,column:0},end:{line:858,column:2}},"243":{start:{line:865,column:0},end:{line:869,column:2}},"244":{start:{line:876,column:14},end:{line:876,column:19}},"245":{start:{line:877,column:14},end:{line:877,column:19}},"246":{start:{line:879,column:2},end:{line:895,column:3}},"247":{start:{line:879,column:15},end:{line:879,column:16}},"248":{start:{line:880,column:15},end:{line:880,column:32}},"249":{start:{line:882,column:4},end:{line:883,column:15}},"250":{start:{line:883,column:6},end:{line:883,column:15}},"251":{start:{line:885,column:4},end:{line:891,column:5}},"252":{start:{line:886,column:6},end:{line:886,column:39}},"253":{start:{line:887,column:6},end:{line:887,column:19}},"254":{start:{line:889,column:6},end:{line:889,column:39}},"255":{start:{line:890,column:6},end:{line:890,column:19}},"256":{start:{line:893,column:4},end:{line:894,column:18}},"257":{start:{line:894,column:6},end:{line:894,column:18}},"258":{start:{line:897,column:2},end:{line:897,column:15}},"259":{start:{line:904,column:0},end:{line:904,column:25}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:43,column:2},end:{line:43,column:3}},loc:{start:{line:43,column:32},end:{line:50,column:3}},line:43},"1":{name:"(anonymous_1)",decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:32},end:{line:67,column:3}},line:58},"2":{name:"(anonymous_2)",decl:{start:{line:75,column:2},end:{line:75,column:3}},loc:{start:{line:75,column:39},end:{line:77,column:3}},line:75},"3":{name:"(anonymous_3)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:15},end:{line:89,column:3}},line:85},"4":{name:"(anonymous_4)",decl:{start:{line:96,column:2},end:{line:96,column:3}},loc:{start:{line:96,column:11},end:{line:109,column:3}},line:96},"5":{name:"(anonymous_5)",decl:{start:{line:117,column:2},end:{line:117,column:3}},loc:{start:{line:117,column:15},end:{line:123,column:3}},line:117},"6":{name:"(anonymous_6)",decl:{start:{line:130,column:2},end:{line:130,column:3}},loc:{start:{line:130,column:12},end:{line:132,column:3}},line:130},"7":{name:"(anonymous_7)",decl:{start:{line:140,column:2},end:{line:140,column:3}},loc:{start:{line:140,column:21},end:{line:161,column:3}},line:140},"8":{name:"(anonymous_8)",decl:{start:{line:168,column:2},end:{line:168,column:3}},loc:{start:{line:168,column:12},end:{line:175,column:3}},line:168},"9":{name:"(anonymous_9)",decl:{start:{line:184,column:2},end:{line:184,column:3}},loc:{start:{line:184,column:17},end:{line:202,column:3}},line:184},"10":{name:"(anonymous_10)",decl:{start:{line:211,column:2},end:{line:211,column:3}},loc:{start:{line:211,column:20},end:{line:213,column:3}},line:211},"11":{name:"(anonymous_11)",decl:{start:{line:222,column:2},end:{line:222,column:3}},loc:{start:{line:222,column:20},end:{line:234,column:3}},line:222},"12":{name:"(anonymous_12)",decl:{start:{line:244,column:2},end:{line:244,column:3}},loc:{start:{line:244,column:28},end:{line:260,column:3}},line:244},"13":{name:"(anonymous_13)",decl:{start:{line:269,column:2},end:{line:269,column:3}},loc:{start:{line:269,column:35},end:{line:271,column:3}},line:269},"14":{name:"(anonymous_14)",decl:{start:{line:279,column:2},end:{line:279,column:3}},loc:{start:{line:279,column:20},end:{line:283,column:3}},line:279},"15":{name:"(anonymous_15)",decl:{start:{line:290,column:2},end:{line:290,column:3}},loc:{start:{line:290,column:20},end:{line:296,column:3}},line:290},"16":{name:"(anonymous_16)",decl:{start:{line:305,column:2},end:{line:305,column:3}},loc:{start:{line:305,column:25},end:{line:332,column:3}},line:305},"17":{name:"(anonymous_17)",decl:{start:{line:341,column:2},end:{line:341,column:3}},loc:{start:{line:341,column:32},end:{line:343,column:3}},line:341},"18":{name:"(anonymous_18)",decl:{start:{line:353,column:2},end:{line:353,column:3}},loc:{start:{line:353,column:28},end:{line:360,column:3}},line:353},"19":{name:"(anonymous_19)",decl:{start:{line:370,column:2},end:{line:370,column:3}},loc:{start:{line:370,column:35},end:{line:372,column:3}},line:370},"20":{name:"(anonymous_20)",decl:{start:{line:382,column:2},end:{line:382,column:3}},loc:{start:{line:382,column:28},end:{line:393,column:3}},line:382},"21":{name:"(anonymous_21)",decl:{start:{line:403,column:2},end:{line:403,column:3}},loc:{start:{line:403,column:35},end:{line:405,column:3}},line:403},"22":{name:"(anonymous_22)",decl:{start:{line:413,column:2},end:{line:413,column:3}},loc:{start:{line:413,column:21},end:{line:459,column:3}},line:413},"23":{name:"(anonymous_23)",decl:{start:{line:467,column:2},end:{line:467,column:3}},loc:{start:{line:467,column:23},end:{line:489,column:3}},line:467},"24":{name:"(anonymous_24)",decl:{start:{line:497,column:2},end:{line:497,column:3}},loc:{start:{line:497,column:26},end:{line:517,column:3}},line:497},"25":{name:"(anonymous_25)",decl:{start:{line:527,column:2},end:{line:527,column:3}},loc:{start:{line:527,column:30},end:{line:529,column:3}},line:527},"26":{name:"(anonymous_26)",decl:{start:{line:539,column:2},end:{line:539,column:3}},loc:{start:{line:539,column:33},end:{line:541,column:3}},line:539},"27":{name:"(anonymous_27)",decl:{start:{line:552,column:2},end:{line:552,column:3}},loc:{start:{line:552,column:28},end:{line:554,column:3}},line:552},"28":{name:"(anonymous_28)",decl:{start:{line:565,column:2},end:{line:565,column:3}},loc:{start:{line:565,column:32},end:{line:602,column:3}},line:565},"29":{name:"(anonymous_29)",decl:{start:{line:613,column:2},end:{line:613,column:3}},loc:{start:{line:613,column:39},end:{line:615,column:3}},line:613},"30":{name:"(anonymous_30)",decl:{start:{line:624,column:2},end:{line:624,column:3}},loc:{start:{line:624,column:23},end:{line:628,column:3}},line:624},"31":{name:"(anonymous_31)",decl:{start:{line:636,column:2},end:{line:636,column:3}},loc:{start:{line:636,column:30},end:{line:638,column:3}},line:636},"32":{name:"(anonymous_32)",decl:{start:{line:647,column:2},end:{line:647,column:3}},loc:{start:{line:647,column:23},end:{line:651,column:3}},line:647},"33":{name:"(anonymous_33)",decl:{start:{line:659,column:2},end:{line:659,column:3}},loc:{start:{line:659,column:30},end:{line:661,column:3}},line:659},"34":{name:"(anonymous_34)",decl:{start:{line:670,column:2},end:{line:670,column:3}},loc:{start:{line:670,column:30},end:{line:674,column:3}},line:670},"35":{name:"(anonymous_35)",decl:{start:{line:682,column:2},end:{line:682,column:3}},loc:{start:{line:682,column:37},end:{line:684,column:3}},line:682},"36":{name:"(anonymous_36)",decl:{start:{line:693,column:2},end:{line:693,column:3}},loc:{start:{line:693,column:30},end:{line:697,column:3}},line:693},"37":{name:"(anonymous_37)",decl:{start:{line:705,column:2},end:{line:705,column:3}},loc:{start:{line:705,column:37},end:{line:707,column:3}},line:705},"38":{name:"(anonymous_38)",decl:{start:{line:717,column:2},end:{line:717,column:3}},loc:{start:{line:717,column:29},end:{line:723,column:3}},line:717},"39":{name:"(anonymous_39)",decl:{start:{line:732,column:2},end:{line:732,column:3}},loc:{start:{line:732,column:36},end:{line:734,column:3}},line:732},"40":{name:"(anonymous_40)",decl:{start:{line:741,column:2},end:{line:741,column:3}},loc:{start:{line:741,column:17},end:{line:743,column:3}},line:741},"41":{name:"(anonymous_41)",decl:{start:{line:750,column:2},end:{line:750,column:3}},loc:{start:{line:750,column:17},end:{line:752,column:3}},line:750},"42":{name:"(anonymous_42)",decl:{start:{line:759,column:2},end:{line:759,column:3}},loc:{start:{line:759,column:24},end:{line:761,column:3}},line:759},"43":{name:"(anonymous_43)",decl:{start:{line:768,column:2},end:{line:768,column:3}},loc:{start:{line:768,column:24},end:{line:770,column:3}},line:768},"44":{name:"(anonymous_44)",decl:{start:{line:777,column:2},end:{line:777,column:3}},loc:{start:{line:777,column:14},end:{line:779,column:3}},line:777},"45":{name:"(anonymous_45)",decl:{start:{line:786,column:2},end:{line:786,column:3}},loc:{start:{line:786,column:14},end:{line:794,column:3}},line:786},"46":{name:"(anonymous_46)",decl:{start:{line:803,column:2},end:{line:803,column:3}},loc:{start:{line:803,column:28},end:{line:823,column:3}},line:803},"47":{name:"(anonymous_47)",decl:{start:{line:832,column:2},end:{line:832,column:3}},loc:{start:{line:832,column:34},end:{line:846,column:3}},line:832},"48":{name:"isMixedCase",decl:{start:{line:875,column:9},end:{line:875,column:20}},loc:{start:{line:875,column:26},end:{line:898,column:1}},line:875}},branchMap:{"0":{loc:{start:{line:48,column:4},end:{line:49,column:41}},type:"if",locations:[{start:{line:48,column:4},end:{line:49,column:41}},{start:{line:48,column:4},end:{line:49,column:41}}],line:48},"1":{loc:{start:{line:59,column:4},end:{line:60,column:47}},type:"if",locations:[{start:{line:59,column:4},end:{line:60,column:47}},{start:{line:59,column:4},end:{line:60,column:47}}],line:59},"2":{loc:{start:{line:86,column:4},end:{line:87,column:39}},type:"if",locations:[{start:{line:86,column:4},end:{line:87,column:39}},{start:{line:86,column:4},end:{line:87,column:39}}],line:86},"3":{loc:{start:{line:97,column:4},end:{line:98,column:44}},type:"if",locations:[{start:{line:97,column:4},end:{line:98,column:44}},{start:{line:97,column:4},end:{line:98,column:44}}],line:97},"4":{loc:{start:{line:100,column:4},end:{line:101,column:51}},type:"if",locations:[{start:{line:100,column:4},end:{line:101,column:51}},{start:{line:100,column:4},end:{line:101,column:51}}],line:100},"5":{loc:{start:{line:104,column:6},end:{line:105,column:21}},type:"if",locations:[{start:{line:104,column:6},end:{line:105,column:21}},{start:{line:104,column:6},end:{line:105,column:21}}],line:104},"6":{loc:{start:{line:120,column:11},end:{line:122,column:36}},type:"binary-expr",locations:[{start:{line:120,column:11},end:{line:120,column:34}},{start:{line:121,column:9},end:{line:121,column:38}},{start:{line:122,column:9},end:{line:122,column:36}}],line:120},"7":{loc:{start:{line:145,column:4},end:{line:158,column:5}},type:"switch",locations:[{start:{line:146,column:6},end:{line:147,column:35}},{start:{line:148,column:6},end:{line:149,column:35}},{start:{line:150,column:6},end:{line:157,column:14}}],line:145},"8":{loc:{start:{line:151,column:8},end:{line:152,column:44}},type:"if",locations:[{start:{line:151,column:8},end:{line:152,column:44}},{start:{line:151,column:8},end:{line:152,column:44}}],line:151},"9":{loc:{start:{line:154,column:8},end:{line:155,column:44}},type:"if",locations:[{start:{line:154,column:8},end:{line:155,column:44}},{start:{line:154,column:8},end:{line:155,column:44}}],line:154},"10":{loc:{start:{line:171,column:4},end:{line:172,column:16}},type:"if",locations:[{start:{line:171,column:4},end:{line:172,column:16}},{start:{line:171,column:4},end:{line:172,column:16}}],line:171},"11":{loc:{start:{line:193,column:4},end:{line:196,column:5}},type:"if",locations:[{start:{line:193,column:4},end:{line:196,column:5}},{start:{line:193,column:4},end:{line:196,column:5}}],line:193},"12":{loc:{start:{line:251,column:4},end:{line:252,column:44}},type:"if",locations:[{start:{line:251,column:4},end:{line:252,column:44}},{start:{line:251,column:4},end:{line:252,column:44}}],line:251},"13":{loc:{start:{line:280,column:4},end:{line:281,column:36}},type:"if",locations:[{start:{line:280,column:4},end:{line:281,column:36}},{start:{line:280,column:4},end:{line:281,column:36}}],line:280},"14":{loc:{start:{line:314,column:4},end:{line:325,column:5}},type:"if",locations:[{start:{line:314,column:4},end:{line:325,column:5}},{start:{line:314,column:4},end:{line:325,column:5}}],line:314},"15":{loc:{start:{line:315,column:6},end:{line:316,column:48}},type:"if",locations:[{start:{line:315,column:6},end:{line:316,column:48}},{start:{line:315,column:6},end:{line:316,column:48}}],line:315},"16":{loc:{start:{line:320,column:6},end:{line:321,column:64}},type:"if",locations:[{start:{line:320,column:6},end:{line:321,column:64}},{start:{line:320,column:6},end:{line:321,column:64}}],line:320},"17":{loc:{start:{line:323,column:6},end:{line:324,column:48}},type:"if",locations:[{start:{line:323,column:6},end:{line:324,column:48}},{start:{line:323,column:6},end:{line:324,column:48}}],line:323},"18":{loc:{start:{line:356,column:4},end:{line:357,column:46}},type:"if",locations:[{start:{line:356,column:4},end:{line:357,column:46}},{start:{line:356,column:4},end:{line:357,column:46}}],line:356},"19":{loc:{start:{line:416,column:4},end:{line:421,column:5}},type:"if",locations:[{start:{line:416,column:4},end:{line:421,column:5}},{start:{line:416,column:4},end:{line:421,column:5}}],line:416},"20":{loc:{start:{line:425,column:4},end:{line:430,column:5}},type:"if",locations:[{start:{line:425,column:4},end:{line:430,column:5}},{start:{line:425,column:4},end:{line:430,column:5}}],line:425},"21":{loc:{start:{line:434,column:4},end:{line:439,column:5}},type:"if",locations:[{start:{line:434,column:4},end:{line:439,column:5}},{start:{line:434,column:4},end:{line:439,column:5}}],line:434},"22":{loc:{start:{line:443,column:4},end:{line:448,column:5}},type:"if",locations:[{start:{line:443,column:4},end:{line:448,column:5}},{start:{line:443,column:4},end:{line:448,column:5}}],line:443},"23":{loc:{start:{line:443,column:8},end:{line:443,column:41}},type:"binary-expr",locations:[{start:{line:443,column:8},end:{line:443,column:15}},{start:{line:443,column:19},end:{line:443,column:41}}],line:443},"24":{loc:{start:{line:451,column:4},end:{line:456,column:5}},type:"if",locations:[{start:{line:451,column:4},end:{line:456,column:5}},{start:{line:451,column:4},end:{line:456,column:5}}],line:451},"25":{loc:{start:{line:472,column:4},end:{line:477,column:5}},type:"if",locations:[{start:{line:472,column:4},end:{line:477,column:5}},{start:{line:472,column:4},end:{line:477,column:5}}],line:472},"26":{loc:{start:{line:481,column:4},end:{line:486,column:5}},type:"if",locations:[{start:{line:481,column:4},end:{line:486,column:5}},{start:{line:481,column:4},end:{line:486,column:5}}],line:481},"27":{loc:{start:{line:500,column:4},end:{line:505,column:5}},type:"if",locations:[{start:{line:500,column:4},end:{line:505,column:5}},{start:{line:500,column:4},end:{line:505,column:5}}],line:500},"28":{loc:{start:{line:509,column:4},end:{line:514,column:5}},type:"if",locations:[{start:{line:509,column:4},end:{line:514,column:5}},{start:{line:509,column:4},end:{line:514,column:5}}],line:509},"29":{loc:{start:{line:566,column:4},end:{line:569,column:5}},type:"if",locations:[{start:{line:566,column:4},end:{line:569,column:5}},{start:{line:566,column:4},end:{line:569,column:5}}],line:566},"30":{loc:{start:{line:571,column:4},end:{line:572,column:38}},type:"if",locations:[{start:{line:571,column:4},end:{line:572,column:38}},{start:{line:571,column:4},end:{line:572,column:38}}],line:571},"31":{loc:{start:{line:574,column:4},end:{line:575,column:19}},type:"if",locations:[{start:{line:574,column:4},end:{line:575,column:19}},{start:{line:574,column:4},end:{line:575,column:19}}],line:574},"32":{loc:{start:{line:581,column:11},end:{line:581,column:76}},type:"binary-expr",locations:[{start:{line:581,column:11},end:{line:581,column:43}},{start:{line:581,column:47},end:{line:581,column:76}}],line:581},"33":{loc:{start:{line:584,column:4},end:{line:595,column:5}},type:"if",locations:[{start:{line:584,column:4},end:{line:595,column:5}},{start:{line:584,column:4},end:{line:595,column:5}}],line:584},"34":{loc:{start:{line:589,column:13},end:{line:589,column:42}},type:"binary-expr",locations:[{start:{line:589,column:13},end:{line:589,column:25}},{start:{line:589,column:29},end:{line:589,column:42}}],line:589},"35":{loc:{start:{line:590,column:6},end:{line:593,column:7}},type:"if",locations:[{start:{line:590,column:6},end:{line:593,column:7}},{start:{line:590,column:6},end:{line:593,column:7}}],line:590},"36":{loc:{start:{line:590,column:10},end:{line:590,column:57}},type:"binary-expr",locations:[{start:{line:590,column:10},end:{line:590,column:23}},{start:{line:590,column:27},end:{line:590,column:57}}],line:590},"37":{loc:{start:{line:591,column:15},end:{line:591,column:55}},type:"binary-expr",locations:[{start:{line:591,column:15},end:{line:591,column:33}},{start:{line:591,column:37},end:{line:591,column:55}}],line:591},"38":{loc:{start:{line:594,column:13},end:{line:594,column:50}},type:"binary-expr",locations:[{start:{line:594,column:13},end:{line:594,column:29}},{start:{line:594,column:33},end:{line:594,column:50}}],line:594},"39":{loc:{start:{line:649,column:11},end:{line:649,column:37}},type:"binary-expr",locations:[{start:{line:649,column:11},end:{line:649,column:15}},{start:{line:649,column:19},end:{line:649,column:37}}],line:649},"40":{loc:{start:{line:672,column:11},end:{line:672,column:37}},type:"binary-expr",locations:[{start:{line:672,column:11},end:{line:672,column:15}},{start:{line:672,column:19},end:{line:672,column:37}}],line:672},"41":{loc:{start:{line:695,column:11},end:{line:695,column:37}},type:"binary-expr",locations:[{start:{line:695,column:11},end:{line:695,column:15}},{start:{line:695,column:19},end:{line:695,column:37}}],line:695},"42":{loc:{start:{line:760,column:11},end:{line:760,column:56}},type:"binary-expr",locations:[{start:{line:760,column:11},end:{line:760,column:29}},{start:{line:760,column:33},end:{line:760,column:56}}],line:760},"43":{loc:{start:{line:769,column:11},end:{line:769,column:56}},type:"binary-expr",locations:[{start:{line:769,column:11},end:{line:769,column:29}},{start:{line:769,column:33},end:{line:769,column:56}}],line:769},"44":{loc:{start:{line:787,column:4},end:{line:788,column:19}},type:"if",locations:[{start:{line:787,column:4},end:{line:788,column:19}},{start:{line:787,column:4},end:{line:788,column:19}}],line:787},"45":{loc:{start:{line:790,column:4},end:{line:791,column:18}},type:"if",locations:[{start:{line:790,column:4},end:{line:791,column:18}},{start:{line:790,column:4},end:{line:791,column:18}}],line:790},"46":{loc:{start:{line:793,column:11},end:{line:793,column:61}},type:"binary-expr",locations:[{start:{line:793,column:11},end:{line:793,column:34}},{start:{line:793,column:38},end:{line:793,column:61}}],line:793},"47":{loc:{start:{line:804,column:4},end:{line:805,column:51}},type:"if",locations:[{start:{line:804,column:4},end:{line:805,column:51}},{start:{line:804,column:4},end:{line:805,column:51}}],line:804},"48":{loc:{start:{line:809,column:4},end:{line:817,column:5}},type:"if",locations:[{start:{line:809,column:4},end:{line:817,column:5}},{start:{line:809,column:4},end:{line:817,column:5}}],line:809},"49":{loc:{start:{line:810,column:6},end:{line:811,column:53}},type:"if",locations:[{start:{line:810,column:6},end:{line:811,column:53}},{start:{line:810,column:6},end:{line:811,column:53}}],line:810},"50":{loc:{start:{line:810,column:10},end:{line:810,column:50}},type:"binary-expr",locations:[{start:{line:810,column:10},end:{line:810,column:28}},{start:{line:810,column:32},end:{line:810,column:50}}],line:810},"51":{loc:{start:{line:813,column:11},end:{line:817,column:5}},type:"if",locations:[{start:{line:813,column:11},end:{line:817,column:5}},{start:{line:813,column:11},end:{line:817,column:5}}],line:813},"52":{loc:{start:{line:819,column:4},end:{line:820,column:34}},type:"if",locations:[{start:{line:819,column:4},end:{line:820,column:34}},{start:{line:819,column:4},end:{line:820,column:34}}],line:819},"53":{loc:{start:{line:835,column:4},end:{line:845,column:5}},type:"switch",locations:[{start:{line:836,column:6},end:{line:837,column:40}},{start:{line:838,column:6},end:{line:839,column:40}},{start:{line:840,column:6},end:{line:840,column:38}},{start:{line:841,column:6},end:{line:842,column:37}},{start:{line:843,column:6},end:{line:844,column:51}}],line:835},"54":{loc:{start:{line:882,column:4},end:{line:883,column:15}},type:"if",locations:[{start:{line:882,column:4},end:{line:883,column:15}},{start:{line:882,column:4},end:{line:883,column:15}}],line:882},"55":{loc:{start:{line:882,column:8},end:{line:882,column:32}},type:"binary-expr",locations:[{start:{line:882,column:8},end:{line:882,column:18}},{start:{line:882,column:22},end:{line:882,column:32}}],line:882},"56":{loc:{start:{line:885,column:4},end:{line:891,column:5}},type:"if",locations:[{start:{line:885,column:4},end:{line:891,column:5}},{start:{line:885,column:4},end:{line:891,column:5}}],line:885},"57":{loc:{start:{line:886,column:13},end:{line:886,column:37}},type:"binary-expr",locations:[{start:{line:886,column:13},end:{line:886,column:23}},{start:{line:886,column:27},end:{line:886,column:37}}],line:886},"58":{loc:{start:{line:889,column:13},end:{line:889,column:37}},type:"binary-expr",locations:[{start:{line:889,column:13},end:{line:889,column:23}},{start:{line:889,column:27},end:{line:889,column:37}}],line:889},"59":{loc:{start:{line:893,column:4},end:{line:894,column:18}},type:"if",locations:[{start:{line:893,column:4},end:{line:894,column:18}},{start:{line:893,column:4},end:{line:894,column:18}}],line:893},"60":{loc:{start:{line:893,column:8},end:{line:893,column:22}},type:"binary-expr",locations:[{start:{line:893,column:8},end:{line:893,column:13}},{start:{line:893,column:17},end:{line:893,column:22}}],line:893}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0,0,0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"be4dc5e73be36ac4ea1c8e9e9825fbc77a95cd88"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_jdlskfo6a=function(){return actualCoverage;};}return actualCoverage;}cov_jdlskfo6a();const assert=(cov_jdlskfo6a().s[0]++,require('bsert'));const bio=(cov_jdlskfo6a().s[1]++,require('bufio'));const base58=(cov_jdlskfo6a().s[2]++,require('bcrypto/lib/encoding/base58'));const bech32=(cov_jdlskfo6a().s[3]++,require('bcrypto/lib/encoding/bech32'));const sha256=(cov_jdlskfo6a().s[4]++,require('bcrypto/lib/sha256'));const hash160=(cov_jdlskfo6a().s[5]++,require('bcrypto/lib/hash160'));const hash256=(cov_jdlskfo6a().s[6]++,require('bcrypto/lib/hash256'));const Network=(cov_jdlskfo6a().s[7]++,require('../protocol/network'));const consensus=(cov_jdlskfo6a().s[8]++,require('../protocol/consensus'));const{inspectSymbol}=(cov_jdlskfo6a().s[9]++,require('../utils'));/*
 * Constants
 */const ZERO_HASH160=(cov_jdlskfo6a().s[10]++,Buffer.alloc(20,0x00));/**
 * Address
 * Represents an address.
 * @alias module:primitives.Address
 * @property {Buffer} hash
 * @property {AddressPrefix} type
 * @property {Number} version
 */class Address{/**
   * Create an address.
   * @constructor
   * @param {Object?} options
   */constructor(options,network){cov_jdlskfo6a().f[0]++;cov_jdlskfo6a().s[11]++;this.type=Address.types.PUBKEYHASH;cov_jdlskfo6a().s[12]++;this.version=-1;cov_jdlskfo6a().s[13]++;this.hash=ZERO_HASH160;cov_jdlskfo6a().s[14]++;if(options){cov_jdlskfo6a().b[0][0]++;cov_jdlskfo6a().s[15]++;this.fromOptions(options,network);}else{cov_jdlskfo6a().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options,network){cov_jdlskfo6a().f[1]++;cov_jdlskfo6a().s[16]++;if(typeof options==='string'){cov_jdlskfo6a().b[1][0]++;cov_jdlskfo6a().s[17]++;return this.fromString(options,network);}else{cov_jdlskfo6a().b[1][1]++;}cov_jdlskfo6a().s[18]++;assert(options);const{hash,type,version}=(cov_jdlskfo6a().s[19]++,options);cov_jdlskfo6a().s[20]++;return this.fromHash(hash,type,version);}/**
   * Insantiate address from options.
   * @param {Object} options
   * @returns {Address}
   */static fromOptions(options,network){cov_jdlskfo6a().f[2]++;cov_jdlskfo6a().s[21]++;return new this().fromOptions(options,network);}/**
   * Get the address hash.
   * @param {String?} enc - Can be `"hex"` or `null`.
   * @returns {Hash|Buffer}
   */getHash(enc){cov_jdlskfo6a().f[3]++;cov_jdlskfo6a().s[22]++;if(enc==='hex'){cov_jdlskfo6a().b[2][0]++;cov_jdlskfo6a().s[23]++;return this.hash.toString('hex');}else{cov_jdlskfo6a().b[2][1]++;}cov_jdlskfo6a().s[24]++;return this.hash;}/**
   * Test whether the address is null.
   * @returns {Boolean}
   */isNull(){cov_jdlskfo6a().f[4]++;cov_jdlskfo6a().s[25]++;if(this.hash.length===20){cov_jdlskfo6a().b[3][0]++;cov_jdlskfo6a().s[26]++;return this.hash.equals(ZERO_HASH160);}else{cov_jdlskfo6a().b[3][1]++;}cov_jdlskfo6a().s[27]++;if(this.hash.length===32){cov_jdlskfo6a().b[4][0]++;cov_jdlskfo6a().s[28]++;return this.hash.equals(consensus.ZERO_HASH);}else{cov_jdlskfo6a().b[4][1]++;}cov_jdlskfo6a().s[29]++;for(let i=(cov_jdlskfo6a().s[30]++,0);i<this.hash.length;i++){cov_jdlskfo6a().s[31]++;if(this.hash[i]!==0){cov_jdlskfo6a().b[5][0]++;cov_jdlskfo6a().s[32]++;return false;}else{cov_jdlskfo6a().b[5][1]++;}}cov_jdlskfo6a().s[33]++;return true;}/**
   * Test equality against another address.
   * @param {Address} addr
   * @returns {Boolean}
   */equals(addr){cov_jdlskfo6a().f[5]++;cov_jdlskfo6a().s[34]++;assert(addr instanceof Address);cov_jdlskfo6a().s[35]++;return(cov_jdlskfo6a().b[6][0]++,this.type===addr.type)&&(cov_jdlskfo6a().b[6][1]++,this.version===addr.version)&&(cov_jdlskfo6a().b[6][2]++,this.hash.equals(addr.hash));}/**
   * Get the address type as a string.
   * @returns {String}
   */getType(){cov_jdlskfo6a().f[6]++;cov_jdlskfo6a().s[36]++;return Address.typesByVal[this.type].toLowerCase();}/**
   * Get a network address prefix for the address.
   * @param {Network?} network
   * @returns {Number}
   */getPrefix(network){cov_jdlskfo6a().f[7]++;cov_jdlskfo6a().s[37]++;network=Network.get(network);const prefixes=(cov_jdlskfo6a().s[38]++,network.addressPrefix);cov_jdlskfo6a().s[39]++;switch(this.type){case Address.types.PUBKEYHASH:cov_jdlskfo6a().b[7][0]++;cov_jdlskfo6a().s[40]++;return prefixes.pubkeyhash;case Address.types.SCRIPTHASH:cov_jdlskfo6a().b[7][1]++;cov_jdlskfo6a().s[41]++;return prefixes.scripthash;case Address.types.WITNESS:cov_jdlskfo6a().b[7][2]++;cov_jdlskfo6a().s[42]++;if(this.hash.length===20){cov_jdlskfo6a().b[8][0]++;cov_jdlskfo6a().s[43]++;return prefixes.witnesspubkeyhash;}else{cov_jdlskfo6a().b[8][1]++;}cov_jdlskfo6a().s[44]++;if(this.hash.length===32){cov_jdlskfo6a().b[9][0]++;cov_jdlskfo6a().s[45]++;return prefixes.witnessscripthash;}else{cov_jdlskfo6a().b[9][1]++;}cov_jdlskfo6a().s[46]++;break;}cov_jdlskfo6a().s[47]++;return-1;}/**
   * Calculate size of serialized address.
   * @returns {Number}
   */getSize(){cov_jdlskfo6a().f[8]++;let size=(cov_jdlskfo6a().s[48]++,5+this.hash.length);cov_jdlskfo6a().s[49]++;if(this.version!==-1){cov_jdlskfo6a().b[10][0]++;cov_jdlskfo6a().s[50]++;size+=2;}else{cov_jdlskfo6a().b[10][1]++;}cov_jdlskfo6a().s[51]++;return size;}/**
   * Compile the address object to its raw serialization.
   * @param {{NetworkType|Network)?} network
   * @returns {Buffer}
   * @throws Error on bad hash/prefix.
   */toRaw(network){cov_jdlskfo6a().f[9]++;const size=(cov_jdlskfo6a().s[52]++,this.getSize());const bw=(cov_jdlskfo6a().s[53]++,bio.write(size));const prefix=(cov_jdlskfo6a().s[54]++,this.getPrefix(network));cov_jdlskfo6a().s[55]++;assert(prefix!==-1,'Not a valid address prefix.');cov_jdlskfo6a().s[56]++;bw.writeU8(prefix);cov_jdlskfo6a().s[57]++;if(this.version!==-1){cov_jdlskfo6a().b[11][0]++;cov_jdlskfo6a().s[58]++;bw.writeU8(this.version);cov_jdlskfo6a().s[59]++;bw.writeU8(0);}else{cov_jdlskfo6a().b[11][1]++;}cov_jdlskfo6a().s[60]++;bw.writeBytes(this.hash);cov_jdlskfo6a().s[61]++;bw.writeChecksum(hash256.digest);cov_jdlskfo6a().s[62]++;return bw.render();}/**
   * Compile the address object to a base58 address.
   * @param {{NetworkType|Network)?} network
   * @returns {AddressString}
   * @throws Error on bad hash/prefix.
   */toBase58(network){cov_jdlskfo6a().f[10]++;cov_jdlskfo6a().s[63]++;return base58.encode(this.toRaw(network));}/**
   * Compile the address object to a bech32 address.
   * @param {{NetworkType|Network)?} network
   * @returns {String}
   * @throws Error on bad hash/prefix.
   */toBech32(network){cov_jdlskfo6a().f[11]++;const version=(cov_jdlskfo6a().s[64]++,this.version);const hash=(cov_jdlskfo6a().s[65]++,this.hash);cov_jdlskfo6a().s[66]++;assert(version!==-1,'Cannot convert non-program address to bech32.');cov_jdlskfo6a().s[67]++;network=Network.get(network);const hrp=(cov_jdlskfo6a().s[68]++,network.addressPrefix.bech32);cov_jdlskfo6a().s[69]++;return bech32.encode(hrp,version,hash);}/**
   * Inject properties from string.
   * @private
   * @param {String} addr
   * @param {(Network|NetworkType)?} network
   * @returns {Address}
   */fromString(addr,network){cov_jdlskfo6a().f[12]++;cov_jdlskfo6a().s[70]++;assert(typeof addr==='string');cov_jdlskfo6a().s[71]++;assert(addr.length>0);cov_jdlskfo6a().s[72]++;assert(addr.length<=100);// If the address is mixed case,
// it can only ever be base58.
cov_jdlskfo6a().s[73]++;if(isMixedCase(addr)){cov_jdlskfo6a().b[12][0]++;cov_jdlskfo6a().s[74]++;return this.fromBase58(addr,network);}else{cov_jdlskfo6a().b[12][1]++;}// Otherwise, it's most likely bech32.
cov_jdlskfo6a().s[75]++;try{cov_jdlskfo6a().s[76]++;return this.fromBech32(addr,network);}catch(e){cov_jdlskfo6a().s[77]++;return this.fromBase58(addr,network);}}/**
   * Instantiate address from string.
   * @param {String} addr
   * @param {(Network|NetworkType)?} network
   * @returns {Address}
   */static fromString(addr,network){cov_jdlskfo6a().f[13]++;cov_jdlskfo6a().s[78]++;return new this().fromString(addr,network);}/**
   * Convert the Address to a string.
   * @param {(Network|NetworkType)?} network
   * @returns {AddressString}
   */toString(network){cov_jdlskfo6a().f[14]++;cov_jdlskfo6a().s[79]++;if(this.version!==-1){cov_jdlskfo6a().b[13][0]++;cov_jdlskfo6a().s[80]++;return this.toBech32(network);}else{cov_jdlskfo6a().b[13][1]++;}cov_jdlskfo6a().s[81]++;return this.toBase58(network);}/**
   * Inspect the Address.
   * @returns {Object}
   */[inspectSymbol](){cov_jdlskfo6a().f[15]++;cov_jdlskfo6a().s[82]++;return'<Address:'+` type=${this.getType()}`+` version=${this.version}`+` str=${this.toString()}`+'>';}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @throws Parse error
   */fromRaw(data,network){cov_jdlskfo6a().f[16]++;const br=(cov_jdlskfo6a().s[83]++,bio.read(data,true));const prefix=(cov_jdlskfo6a().s[84]++,br.readU8());cov_jdlskfo6a().s[85]++;network=Network.fromAddress(prefix,network);const type=(cov_jdlskfo6a().s[86]++,Address.getType(prefix,network));let version=(cov_jdlskfo6a().s[87]++,-1);cov_jdlskfo6a().s[88]++;if(type===Address.types.WITNESS){cov_jdlskfo6a().b[14][0]++;cov_jdlskfo6a().s[89]++;if(data.length>38){cov_jdlskfo6a().b[15][0]++;cov_jdlskfo6a().s[90]++;throw new Error('Address is too long.');}else{cov_jdlskfo6a().b[15][1]++;}cov_jdlskfo6a().s[91]++;version=br.readU8();cov_jdlskfo6a().s[92]++;if(br.readU8()!==0){cov_jdlskfo6a().b[16][0]++;cov_jdlskfo6a().s[93]++;throw new Error('Address version padding is non-zero.');}else{cov_jdlskfo6a().b[16][1]++;}}else{cov_jdlskfo6a().b[14][1]++;cov_jdlskfo6a().s[94]++;if(data.length!==25){cov_jdlskfo6a().b[17][0]++;cov_jdlskfo6a().s[95]++;throw new Error('Address is too long.');}else{cov_jdlskfo6a().b[17][1]++;}}const hash=(cov_jdlskfo6a().s[96]++,br.readBytes(br.left()-4));cov_jdlskfo6a().s[97]++;br.verifyChecksum(hash256.digest);cov_jdlskfo6a().s[98]++;return this.fromHash(hash,type,version);}/**
   * Create an address object from a serialized address.
   * @param {Buffer} data
   * @returns {Address}
   * @throws Parse error.
   */static fromRaw(data,network){cov_jdlskfo6a().f[17]++;cov_jdlskfo6a().s[99]++;return new this().fromRaw(data,network);}/**
   * Inject properties from base58 address.
   * @private
   * @param {AddressString} data
   * @param {Network?} network
   * @throws Parse error
   */fromBase58(data,network){cov_jdlskfo6a().f[18]++;cov_jdlskfo6a().s[100]++;assert(typeof data==='string');cov_jdlskfo6a().s[101]++;if(data.length>55){cov_jdlskfo6a().b[18][0]++;cov_jdlskfo6a().s[102]++;throw new Error('Address is too long.');}else{cov_jdlskfo6a().b[18][1]++;}cov_jdlskfo6a().s[103]++;return this.fromRaw(base58.decode(data),network);}/**
   * Create an address object from a base58 address.
   * @param {AddressString} data
   * @param {Network?} network
   * @returns {Address}
   * @throws Parse error.
   */static fromBase58(data,network){cov_jdlskfo6a().f[19]++;cov_jdlskfo6a().s[104]++;return new this().fromBase58(data,network);}/**
   * Inject properties from bech32 address.
   * @private
   * @param {String} data
   * @param {Network?} network
   * @throws Parse error
   */fromBech32(data,network){cov_jdlskfo6a().f[20]++;const type=(cov_jdlskfo6a().s[105]++,Address.types.WITNESS);cov_jdlskfo6a().s[106]++;assert(typeof data==='string');const[hrp,version,hash]=(cov_jdlskfo6a().s[107]++,bech32.decode(data));// make sure HRP is correct.
cov_jdlskfo6a().s[108]++;Network.fromBech32(hrp,network);cov_jdlskfo6a().s[109]++;return this.fromHash(hash,type,version);}/**
   * Create an address object from a bech32 address.
   * @param {String} data
   * @param {Network?} network
   * @returns {Address}
   * @throws Parse error.
   */static fromBech32(data,network){cov_jdlskfo6a().f[21]++;cov_jdlskfo6a().s[110]++;return new this().fromBech32(data,network);}/**
   * Inject properties from output script.
   * @private
   * @param {Script} script
   */fromScript(script){cov_jdlskfo6a().f[22]++;const pk=(cov_jdlskfo6a().s[111]++,script.getPubkey());cov_jdlskfo6a().s[112]++;if(pk){cov_jdlskfo6a().b[19][0]++;cov_jdlskfo6a().s[113]++;this.hash=hash160.digest(pk);cov_jdlskfo6a().s[114]++;this.type=Address.types.PUBKEYHASH;cov_jdlskfo6a().s[115]++;this.version=-1;cov_jdlskfo6a().s[116]++;return this;}else{cov_jdlskfo6a().b[19][1]++;}const pkh=(cov_jdlskfo6a().s[117]++,script.getPubkeyhash());cov_jdlskfo6a().s[118]++;if(pkh){cov_jdlskfo6a().b[20][0]++;cov_jdlskfo6a().s[119]++;this.hash=pkh;cov_jdlskfo6a().s[120]++;this.type=Address.types.PUBKEYHASH;cov_jdlskfo6a().s[121]++;this.version=-1;cov_jdlskfo6a().s[122]++;return this;}else{cov_jdlskfo6a().b[20][1]++;}const sh=(cov_jdlskfo6a().s[123]++,script.getScripthash());cov_jdlskfo6a().s[124]++;if(sh){cov_jdlskfo6a().b[21][0]++;cov_jdlskfo6a().s[125]++;this.hash=sh;cov_jdlskfo6a().s[126]++;this.type=Address.types.SCRIPTHASH;cov_jdlskfo6a().s[127]++;this.version=-1;cov_jdlskfo6a().s[128]++;return this;}else{cov_jdlskfo6a().b[21][1]++;}const program=(cov_jdlskfo6a().s[129]++,script.getProgram());cov_jdlskfo6a().s[130]++;if((cov_jdlskfo6a().b[23][0]++,program)&&(cov_jdlskfo6a().b[23][1]++,!program.isMalformed())){cov_jdlskfo6a().b[22][0]++;cov_jdlskfo6a().s[131]++;this.hash=program.data;cov_jdlskfo6a().s[132]++;this.type=Address.types.WITNESS;cov_jdlskfo6a().s[133]++;this.version=program.version;cov_jdlskfo6a().s[134]++;return this;}else{cov_jdlskfo6a().b[22][1]++;}// Put this last: it's the slowest to check.
cov_jdlskfo6a().s[135]++;if(script.isMultisig()){cov_jdlskfo6a().b[24][0]++;cov_jdlskfo6a().s[136]++;this.hash=script.hash160();cov_jdlskfo6a().s[137]++;this.type=Address.types.SCRIPTHASH;cov_jdlskfo6a().s[138]++;this.version=-1;cov_jdlskfo6a().s[139]++;return this;}else{cov_jdlskfo6a().b[24][1]++;}cov_jdlskfo6a().s[140]++;return null;}/**
   * Inject properties from witness.
   * @private
   * @param {Witness} witness
   */fromWitness(witness){cov_jdlskfo6a().f[23]++;const[,pk]=(cov_jdlskfo6a().s[141]++,witness.getPubkeyhashInput());// We're pretty much screwed here
// since we can't get the version.
cov_jdlskfo6a().s[142]++;if(pk){cov_jdlskfo6a().b[25][0]++;cov_jdlskfo6a().s[143]++;this.hash=hash160.digest(pk);cov_jdlskfo6a().s[144]++;this.type=Address.types.WITNESS;cov_jdlskfo6a().s[145]++;this.version=0;cov_jdlskfo6a().s[146]++;return this;}else{cov_jdlskfo6a().b[25][1]++;}const redeem=(cov_jdlskfo6a().s[147]++,witness.getScripthashInput());cov_jdlskfo6a().s[148]++;if(redeem){cov_jdlskfo6a().b[26][0]++;cov_jdlskfo6a().s[149]++;this.hash=sha256.digest(redeem);cov_jdlskfo6a().s[150]++;this.type=Address.types.WITNESS;cov_jdlskfo6a().s[151]++;this.version=0;cov_jdlskfo6a().s[152]++;return this;}else{cov_jdlskfo6a().b[26][1]++;}cov_jdlskfo6a().s[153]++;return null;}/**
   * Inject properties from input script.
   * @private
   * @param {Script} script
   */fromInputScript(script){cov_jdlskfo6a().f[24]++;const[,pk]=(cov_jdlskfo6a().s[154]++,script.getPubkeyhashInput());cov_jdlskfo6a().s[155]++;if(pk){cov_jdlskfo6a().b[27][0]++;cov_jdlskfo6a().s[156]++;this.hash=hash160.digest(pk);cov_jdlskfo6a().s[157]++;this.type=Address.types.PUBKEYHASH;cov_jdlskfo6a().s[158]++;this.version=-1;cov_jdlskfo6a().s[159]++;return this;}else{cov_jdlskfo6a().b[27][1]++;}const redeem=(cov_jdlskfo6a().s[160]++,script.getScripthashInput());cov_jdlskfo6a().s[161]++;if(redeem){cov_jdlskfo6a().b[28][0]++;cov_jdlskfo6a().s[162]++;this.hash=hash160.digest(redeem);cov_jdlskfo6a().s[163]++;this.type=Address.types.SCRIPTHASH;cov_jdlskfo6a().s[164]++;this.version=-1;cov_jdlskfo6a().s[165]++;return this;}else{cov_jdlskfo6a().b[28][1]++;}cov_jdlskfo6a().s[166]++;return null;}/**
   * Create an Address from a witness.
   * Attempt to extract address
   * properties from a witness.
   * @param {Witness}
   * @returns {Address|null}
   */static fromWitness(witness){cov_jdlskfo6a().f[25]++;cov_jdlskfo6a().s[167]++;return new this().fromWitness(witness);}/**
   * Create an Address from an input script.
   * Attempt to extract address
   * properties from an input script.
   * @param {Script}
   * @returns {Address|null}
   */static fromInputScript(script){cov_jdlskfo6a().f[26]++;cov_jdlskfo6a().s[168]++;return new this().fromInputScript(script);}/**
   * Create an Address from an output script.
   * Parse an output script and extract address
   * properties. Converts pubkey and multisig
   * scripts to pubkeyhash and scripthash addresses.
   * @param {Script}
   * @returns {Address|null}
   */static fromScript(script){cov_jdlskfo6a().f[27]++;cov_jdlskfo6a().s[169]++;return new this().fromScript(script);}/**
   * Inject properties from a hash.
   * @private
   * @param {Buffer|Hash} hash
   * @param {AddressPrefix} type
   * @param {Number} [version=-1]
   * @throws on bad hash size
   */fromHash(hash,type,version){cov_jdlskfo6a().f[28]++;cov_jdlskfo6a().s[170]++;if(typeof type==='string'){cov_jdlskfo6a().b[29][0]++;cov_jdlskfo6a().s[171]++;type=Address.types[type.toUpperCase()];cov_jdlskfo6a().s[172]++;assert(type!=null,'Not a valid address type.');}else{cov_jdlskfo6a().b[29][1]++;}cov_jdlskfo6a().s[173]++;if(type==null){cov_jdlskfo6a().b[30][0]++;cov_jdlskfo6a().s[174]++;type=Address.types.PUBKEYHASH;}else{cov_jdlskfo6a().b[30][1]++;}cov_jdlskfo6a().s[175]++;if(version==null){cov_jdlskfo6a().b[31][0]++;cov_jdlskfo6a().s[176]++;version=-1;}else{cov_jdlskfo6a().b[31][1]++;}cov_jdlskfo6a().s[177]++;assert(Buffer.isBuffer(hash));cov_jdlskfo6a().s[178]++;assert(type>>>0===type);cov_jdlskfo6a().s[179]++;assert((version|0)===version);cov_jdlskfo6a().s[180]++;assert((cov_jdlskfo6a().b[32][0]++,type>=Address.types.PUBKEYHASH)&&(cov_jdlskfo6a().b[32][1]++,type<=Address.types.WITNESS),'Not a valid address type.');cov_jdlskfo6a().s[181]++;if(version===-1){cov_jdlskfo6a().b[33][0]++;cov_jdlskfo6a().s[182]++;assert(type!==Address.types.WITNESS,'Wrong version (witness)');cov_jdlskfo6a().s[183]++;assert(hash.length===20,'Hash is the wrong size.');}else{cov_jdlskfo6a().b[33][1]++;cov_jdlskfo6a().s[184]++;assert(type===Address.types.WITNESS,'Wrong version (non-witness).');cov_jdlskfo6a().s[185]++;assert((cov_jdlskfo6a().b[34][0]++,version>=0)&&(cov_jdlskfo6a().b[34][1]++,version<=16),'Bad program version.');cov_jdlskfo6a().s[186]++;if((cov_jdlskfo6a().b[36][0]++,version===0)&&(cov_jdlskfo6a().b[36][1]++,type===Address.types.WITNESS)){cov_jdlskfo6a().b[35][0]++;cov_jdlskfo6a().s[187]++;assert((cov_jdlskfo6a().b[37][0]++,hash.length===20)||(cov_jdlskfo6a().b[37][1]++,hash.length===32),'Witness program hash is the wrong size.');}else{cov_jdlskfo6a().b[35][1]++;}cov_jdlskfo6a().s[188]++;assert((cov_jdlskfo6a().b[38][0]++,hash.length>=2)&&(cov_jdlskfo6a().b[38][1]++,hash.length<=40),'Hash is the wrong size.');}cov_jdlskfo6a().s[189]++;this.hash=hash;cov_jdlskfo6a().s[190]++;this.type=type;cov_jdlskfo6a().s[191]++;this.version=version;cov_jdlskfo6a().s[192]++;return this;}/**
   * Create a naked address from hash/type/version.
   * @param {Hash} hash
   * @param {AddressPrefix} type
   * @param {Number} [version=-1]
   * @returns {Address}
   * @throws on bad hash size
   */static fromHash(hash,type,version){cov_jdlskfo6a().f[29]++;cov_jdlskfo6a().s[193]++;return new this().fromHash(hash,type,version);}/**
   * Inject properties from pubkeyhash.
   * @private
   * @param {Buffer} hash
   * @returns {Address}
   */fromPubkeyhash(hash){cov_jdlskfo6a().f[30]++;const type=(cov_jdlskfo6a().s[194]++,Address.types.PUBKEYHASH);cov_jdlskfo6a().s[195]++;assert(hash.length===20,'P2PKH must be 20 bytes.');cov_jdlskfo6a().s[196]++;return this.fromHash(hash,type,-1);}/**
   * Instantiate address from pubkeyhash.
   * @param {Buffer} hash
   * @returns {Address}
   */static fromPubkeyhash(hash){cov_jdlskfo6a().f[31]++;cov_jdlskfo6a().s[197]++;return new this().fromPubkeyhash(hash);}/**
   * Inject properties from scripthash.
   * @private
   * @param {Buffer} hash
   * @returns {Address}
   */fromScripthash(hash){cov_jdlskfo6a().f[32]++;const type=(cov_jdlskfo6a().s[198]++,Address.types.SCRIPTHASH);cov_jdlskfo6a().s[199]++;assert((cov_jdlskfo6a().b[39][0]++,hash)&&(cov_jdlskfo6a().b[39][1]++,hash.length===20),'P2SH must be 20 bytes.');cov_jdlskfo6a().s[200]++;return this.fromHash(hash,type,-1);}/**
   * Instantiate address from scripthash.
   * @param {Buffer} hash
   * @returns {Address}
   */static fromScripthash(hash){cov_jdlskfo6a().f[33]++;cov_jdlskfo6a().s[201]++;return new this().fromScripthash(hash);}/**
   * Inject properties from witness pubkeyhash.
   * @private
   * @param {Buffer} hash
   * @returns {Address}
   */fromWitnessPubkeyhash(hash){cov_jdlskfo6a().f[34]++;const type=(cov_jdlskfo6a().s[202]++,Address.types.WITNESS);cov_jdlskfo6a().s[203]++;assert((cov_jdlskfo6a().b[40][0]++,hash)&&(cov_jdlskfo6a().b[40][1]++,hash.length===20),'P2WPKH must be 20 bytes.');cov_jdlskfo6a().s[204]++;return this.fromHash(hash,type,0);}/**
   * Instantiate address from witness pubkeyhash.
   * @param {Buffer} hash
   * @returns {Address}
   */static fromWitnessPubkeyhash(hash){cov_jdlskfo6a().f[35]++;cov_jdlskfo6a().s[205]++;return new this().fromWitnessPubkeyhash(hash);}/**
   * Inject properties from witness scripthash.
   * @private
   * @param {Buffer} hash
   * @returns {Address}
   */fromWitnessScripthash(hash){cov_jdlskfo6a().f[36]++;const type=(cov_jdlskfo6a().s[206]++,Address.types.WITNESS);cov_jdlskfo6a().s[207]++;assert((cov_jdlskfo6a().b[41][0]++,hash)&&(cov_jdlskfo6a().b[41][1]++,hash.length===32),'P2WPKH must be 32 bytes.');cov_jdlskfo6a().s[208]++;return this.fromHash(hash,type,0);}/**
   * Instantiate address from witness scripthash.
   * @param {Buffer} hash
   * @returns {Address}
   */static fromWitnessScripthash(hash){cov_jdlskfo6a().f[37]++;cov_jdlskfo6a().s[209]++;return new this().fromWitnessScripthash(hash);}/**
   * Inject properties from witness program.
   * @private
   * @param {Number} version
   * @param {Buffer} hash
   * @returns {Address}
   */fromProgram(version,hash){cov_jdlskfo6a().f[38]++;const type=(cov_jdlskfo6a().s[210]++,Address.types.WITNESS);cov_jdlskfo6a().s[211]++;assert(version>=0,'Bad version for witness program.');cov_jdlskfo6a().s[212]++;return this.fromHash(hash,type,version);}/**
   * Instantiate address from witness program.
   * @param {Number} version
   * @param {Buffer} hash
   * @returns {Address}
   */static fromProgram(version,hash){cov_jdlskfo6a().f[39]++;cov_jdlskfo6a().s[213]++;return new this().fromProgram(version,hash);}/**
   * Test whether the address is pubkeyhash.
   * @returns {Boolean}
   */isPubkeyhash(){cov_jdlskfo6a().f[40]++;cov_jdlskfo6a().s[214]++;return this.type===Address.types.PUBKEYHASH;}/**
   * Test whether the address is scripthash.
   * @returns {Boolean}
   */isScripthash(){cov_jdlskfo6a().f[41]++;cov_jdlskfo6a().s[215]++;return this.type===Address.types.SCRIPTHASH;}/**
   * Test whether the address is witness pubkeyhash.
   * @returns {Boolean}
   */isWitnessPubkeyhash(){cov_jdlskfo6a().f[42]++;cov_jdlskfo6a().s[216]++;return(cov_jdlskfo6a().b[42][0]++,this.version===0)&&(cov_jdlskfo6a().b[42][1]++,this.hash.length===20);}/**
   * Test whether the address is witness scripthash.
   * @returns {Boolean}
   */isWitnessScripthash(){cov_jdlskfo6a().f[43]++;cov_jdlskfo6a().s[217]++;return(cov_jdlskfo6a().b[43][0]++,this.version===0)&&(cov_jdlskfo6a().b[43][1]++,this.hash.length===32);}/**
   * Test whether the address is a witness program.
   * @returns {Boolean}
   */isProgram(){cov_jdlskfo6a().f[44]++;cov_jdlskfo6a().s[218]++;return this.version!==-1;}/**
   * Test whether the address is an unknown witness program.
   * @returns {Boolean}
   */isUnknown(){cov_jdlskfo6a().f[45]++;cov_jdlskfo6a().s[219]++;if(this.version===-1){cov_jdlskfo6a().b[44][0]++;cov_jdlskfo6a().s[220]++;return false;}else{cov_jdlskfo6a().b[44][1]++;}cov_jdlskfo6a().s[221]++;if(this.version>0){cov_jdlskfo6a().b[45][0]++;cov_jdlskfo6a().s[222]++;return true;}else{cov_jdlskfo6a().b[45][1]++;}cov_jdlskfo6a().s[223]++;return(cov_jdlskfo6a().b[46][0]++,this.hash.length!==20)&&(cov_jdlskfo6a().b[46][1]++,this.hash.length!==32);}/**
   * Get the hash of a base58 address or address-related object.
   * @param {String|Address|Hash} data
   * @param {String?} enc - Can be `"hex"` or `null`.
   * @returns {Hash}
   */static getHash(data,enc){cov_jdlskfo6a().f[46]++;cov_jdlskfo6a().s[224]++;if(!data){cov_jdlskfo6a().b[47][0]++;cov_jdlskfo6a().s[225]++;throw new Error('Object is not an address.');}else{cov_jdlskfo6a().b[47][1]++;}let hash;cov_jdlskfo6a().s[226]++;if(Buffer.isBuffer(data)){cov_jdlskfo6a().b[48][0]++;cov_jdlskfo6a().s[227]++;if((cov_jdlskfo6a().b[50][0]++,data.length!==20)&&(cov_jdlskfo6a().b[50][1]++,data.length!==32)){cov_jdlskfo6a().b[49][0]++;cov_jdlskfo6a().s[228]++;throw new Error('Object is not an address.');}else{cov_jdlskfo6a().b[49][1]++;}cov_jdlskfo6a().s[229]++;hash=data;}else{cov_jdlskfo6a().b[48][1]++;cov_jdlskfo6a().s[230]++;if(data instanceof Address){cov_jdlskfo6a().b[51][0]++;cov_jdlskfo6a().s[231]++;hash=data.hash;}else{cov_jdlskfo6a().b[51][1]++;cov_jdlskfo6a().s[232]++;throw new Error('Object is not an address.');}}cov_jdlskfo6a().s[233]++;if(enc==='hex'){cov_jdlskfo6a().b[52][0]++;cov_jdlskfo6a().s[234]++;return hash.toString('hex');}else{cov_jdlskfo6a().b[52][1]++;}cov_jdlskfo6a().s[235]++;return hash;}/**
   * Get an address type for a specified network address prefix.
   * @param {Number} prefix
   * @param {Network} network
   * @returns {AddressType}
   */static getType(prefix,network){cov_jdlskfo6a().f[47]++;const prefixes=(cov_jdlskfo6a().s[236]++,network.addressPrefix);cov_jdlskfo6a().s[237]++;switch(prefix){case prefixes.pubkeyhash:cov_jdlskfo6a().b[53][0]++;cov_jdlskfo6a().s[238]++;return Address.types.PUBKEYHASH;case prefixes.scripthash:cov_jdlskfo6a().b[53][1]++;cov_jdlskfo6a().s[239]++;return Address.types.SCRIPTHASH;case prefixes.witnesspubkeyhash:cov_jdlskfo6a().b[53][2]++;case prefixes.witnessscripthash:cov_jdlskfo6a().b[53][3]++;cov_jdlskfo6a().s[240]++;return Address.types.WITNESS;default:cov_jdlskfo6a().b[53][4]++;cov_jdlskfo6a().s[241]++;throw new Error('Unknown address prefix.');}}}/**
 * Address types.
 * @enum {Number}
 */cov_jdlskfo6a().s[242]++;Address.types={PUBKEYHASH:0,SCRIPTHASH:1,WITNESS:2};/**
 * Address types by value.
 * @const {Object}
 */cov_jdlskfo6a().s[243]++;Address.typesByVal=['PUBKEYHASH','SCRIPTHASH','WITNESS'];/*
 * Helpers
 */function isMixedCase(str){cov_jdlskfo6a().f[48]++;let lower=(cov_jdlskfo6a().s[244]++,false);let upper=(cov_jdlskfo6a().s[245]++,false);cov_jdlskfo6a().s[246]++;for(let i=(cov_jdlskfo6a().s[247]++,0);i<str.length;i++){const ch=(cov_jdlskfo6a().s[248]++,str.charCodeAt(i));cov_jdlskfo6a().s[249]++;if((cov_jdlskfo6a().b[55][0]++,ch>=0x30)&&(cov_jdlskfo6a().b[55][1]++,ch<=0x39)){cov_jdlskfo6a().b[54][0]++;cov_jdlskfo6a().s[250]++;continue;}else{cov_jdlskfo6a().b[54][1]++;}cov_jdlskfo6a().s[251]++;if(ch&32){cov_jdlskfo6a().b[56][0]++;cov_jdlskfo6a().s[252]++;assert((cov_jdlskfo6a().b[57][0]++,ch>=0x61)&&(cov_jdlskfo6a().b[57][1]++,ch<=0x7a));cov_jdlskfo6a().s[253]++;lower=true;}else{cov_jdlskfo6a().b[56][1]++;cov_jdlskfo6a().s[254]++;assert((cov_jdlskfo6a().b[58][0]++,ch>=0x41)&&(cov_jdlskfo6a().b[58][1]++,ch<=0x5a));cov_jdlskfo6a().s[255]++;upper=true;}cov_jdlskfo6a().s[256]++;if((cov_jdlskfo6a().b[60][0]++,lower)&&(cov_jdlskfo6a().b[60][1]++,upper)){cov_jdlskfo6a().b[59][0]++;cov_jdlskfo6a().s[257]++;return true;}else{cov_jdlskfo6a().b[59][1]++;}}cov_jdlskfo6a().s[258]++;return false;}/*
 * Expose
 */cov_jdlskfo6a().s[259]++;module.exports=Address;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
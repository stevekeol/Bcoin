/*!
 * input.js - input object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1rbi8iwnhy(){var path="E:\\Projects\\Test\\bcoin\\lib\\primitives\\input.js";var hash="6a2770cd103d5f5e10e229f4fab32a61180bccb6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\primitives\\input.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:31}},"1":{start:{line:11,column:12},end:{line:11,column:28}},"2":{start:{line:12,column:16},end:{line:12,column:46}},"3":{start:{line:13,column:15},end:{line:13,column:42}},"4":{start:{line:14,column:16},end:{line:14,column:44}},"5":{start:{line:15,column:17},end:{line:15,column:38}},"6":{start:{line:16,column:24},end:{line:16,column:43}},"7":{start:{line:36,column:4},end:{line:36,column:34}},"8":{start:{line:37,column:4},end:{line:37,column:31}},"9":{start:{line:38,column:4},end:{line:38,column:31}},"10":{start:{line:39,column:4},end:{line:39,column:33}},"11":{start:{line:41,column:4},end:{line:42,column:32}},"12":{start:{line:42,column:6},end:{line:42,column:32}},"13":{start:{line:52,column:4},end:{line:52,column:47}},"14":{start:{line:54,column:4},end:{line:54,column:46}},"15":{start:{line:56,column:4},end:{line:57,column:46}},"16":{start:{line:57,column:6},end:{line:57,column:46}},"17":{start:{line:59,column:4},end:{line:63,column:5}},"18":{start:{line:60,column:6},end:{line:61,column:38}},"19":{start:{line:62,column:6},end:{line:62,column:39}},"20":{start:{line:65,column:4},end:{line:66,column:48}},"21":{start:{line:66,column:6},end:{line:66,column:48}},"22":{start:{line:68,column:4},end:{line:68,column:16}},"23":{start:{line:78,column:4},end:{line:78,column:43}},"24":{start:{line:87,column:18},end:{line:87,column:40}},"25":{start:{line:88,column:4},end:{line:88,column:33}},"26":{start:{line:89,column:4},end:{line:89,column:37}},"27":{start:{line:90,column:4},end:{line:90,column:35}},"28":{start:{line:91,column:4},end:{line:91,column:39}},"29":{start:{line:92,column:4},end:{line:92,column:17}},"30":{start:{line:102,column:4},end:{line:102,column:33}},"31":{start:{line:103,column:4},end:{line:103,column:46}},"32":{start:{line:113,column:4},end:{line:113,column:33}},"33":{start:{line:114,column:4},end:{line:114,column:47}},"34":{start:{line:126,column:4},end:{line:127,column:24}},"35":{start:{line:127,column:6},end:{line:127,column:24}},"36":{start:{line:129,column:4},end:{line:130,column:28}},"37":{start:{line:130,column:6},end:{line:130,column:28}},"38":{start:{line:134,column:4},end:{line:137,column:40}},"39":{start:{line:135,column:6},end:{line:135,column:41}},"40":{start:{line:137,column:6},end:{line:137,column:40}},"41":{start:{line:139,column:4},end:{line:139,column:49}},"42":{start:{line:150,column:4},end:{line:151,column:18}},"43":{start:{line:151,column:6},end:{line:151,column:18}},"44":{start:{line:153,column:4},end:{line:161,column:5}},"45":{start:{line:154,column:6},end:{line:155,column:40}},"46":{start:{line:155,column:8},end:{line:155,column:40}},"47":{start:{line:157,column:6},end:{line:158,column:39}},"48":{start:{line:158,column:8},end:{line:158,column:39}},"49":{start:{line:160,column:6},end:{line:160,column:18}},"50":{start:{line:163,column:15},end:{line:163,column:26}},"51":{start:{line:164,column:17},end:{line:164,column:21}},"52":{start:{line:166,column:4},end:{line:169,column:5}},"53":{start:{line:167,column:6},end:{line:167,column:37}},"54":{start:{line:168,column:6},end:{line:168,column:20}},"55":{start:{line:171,column:4},end:{line:174,column:5}},"56":{start:{line:172,column:6},end:{line:172,column:38}},"57":{start:{line:173,column:6},end:{line:173,column:20}},"58":{start:{line:176,column:4},end:{line:176,column:18}},"59":{start:{line:186,column:4},end:{line:187,column:18}},"60":{start:{line:187,column:6},end:{line:187,column:18}},"61":{start:{line:189,column:19},end:{line:189,column:39}},"62":{start:{line:191,column:4},end:{line:192,column:18}},"63":{start:{line:192,column:6},end:{line:192,column:18}},"64":{start:{line:194,column:17},end:{line:194,column:33}},"65":{start:{line:196,column:4},end:{line:196,column:49}},"66":{start:{line:208,column:4},end:{line:209,column:18}},"67":{start:{line:209,column:6},end:{line:209,column:18}},"68":{start:{line:211,column:4},end:{line:212,column:31}},"69":{start:{line:212,column:6},end:{line:212,column:31}},"70":{start:{line:214,column:4},end:{line:215,column:43}},"71":{start:{line:215,column:6},end:{line:215,column:43}},"72":{start:{line:217,column:4},end:{line:218,column:44}},"73":{start:{line:218,column:6},end:{line:218,column:44}},"74":{start:{line:220,column:4},end:{line:220,column:16}},"75":{start:{line:231,column:17},end:{line:231,column:38}},"76":{start:{line:233,column:4},end:{line:234,column:18}},"77":{start:{line:234,column:6},end:{line:234,column:18}},"78":{start:{line:236,column:4},end:{line:236,column:29}},"79":{start:{line:245,column:4},end:{line:245,column:40}},"80":{start:{line:254,column:4},end:{line:254,column:38}},"81":{start:{line:263,column:4},end:{line:263,column:33}},"82":{start:{line:272,column:4},end:{line:272,column:25}},"83":{start:{line:282,column:4},end:{line:292,column:6}},"84":{start:{line:302,column:4},end:{line:302,column:26}},"85":{start:{line:316,column:4},end:{line:316,column:35}},"86":{start:{line:319,column:4},end:{line:323,column:5}},"87":{start:{line:320,column:6},end:{line:320,column:31}},"88":{start:{line:321,column:6},end:{line:322,column:38}},"89":{start:{line:322,column:8},end:{line:322,column:38}},"90":{start:{line:325,column:4},end:{line:332,column:6}},"91":{start:{line:342,column:4},end:{line:342,column:44}},"92":{start:{line:343,column:4},end:{line:344,column:36}},"93":{start:{line:345,column:4},end:{line:345,column:40}},"94":{start:{line:346,column:4},end:{line:346,column:38}},"95":{start:{line:347,column:4},end:{line:347,column:40}},"96":{start:{line:348,column:4},end:{line:348,column:34}},"97":{start:{line:349,column:4},end:{line:349,column:16}},"98":{start:{line:359,column:4},end:{line:359,column:37}},"99":{start:{line:368,column:4},end:{line:368,column:41}},"100":{start:{line:378,column:17},end:{line:378,column:31}},"101":{start:{line:379,column:4},end:{line:379,column:51}},"102":{start:{line:388,column:4},end:{line:388,column:30}},"103":{start:{line:389,column:4},end:{line:389,column:42}},"104":{start:{line:390,column:4},end:{line:390,column:31}},"105":{start:{line:391,column:4},end:{line:391,column:14}},"106":{start:{line:401,column:4},end:{line:401,column:32}},"107":{start:{line:402,column:4},end:{line:402,column:43}},"108":{start:{line:403,column:4},end:{line:403,column:33}},"109":{start:{line:404,column:4},end:{line:404,column:16}},"110":{start:{line:413,column:4},end:{line:413,column:43}},"111":{start:{line:423,column:4},end:{line:423,column:37}},"112":{start:{line:434,column:4},end:{line:435,column:36}},"113":{start:{line:435,column:6},end:{line:435,column:36}},"114":{start:{line:436,column:4},end:{line:436,column:36}},"115":{start:{line:446,column:4},end:{line:446,column:43}},"116":{start:{line:447,column:4},end:{line:447,column:47}},"117":{start:{line:448,column:4},end:{line:448,column:38}},"118":{start:{line:449,column:4},end:{line:449,column:40}},"119":{start:{line:450,column:4},end:{line:450,column:16}},"120":{start:{line:460,column:4},end:{line:460,column:45}},"121":{start:{line:470,column:4},end:{line:470,column:39}},"122":{start:{line:471,column:4},end:{line:471,column:43}},"123":{start:{line:472,column:4},end:{line:472,column:34}},"124":{start:{line:473,column:4},end:{line:473,column:36}},"125":{start:{line:474,column:4},end:{line:474,column:16}},"126":{start:{line:484,column:4},end:{line:484,column:37}},"127":{start:{line:495,column:4},end:{line:495,column:15}},"128":{start:{line:496,column:4},end:{line:496,column:38}},"129":{start:{line:497,column:4},end:{line:497,column:52}},"130":{start:{line:498,column:4},end:{line:498,column:34}},"131":{start:{line:499,column:4},end:{line:499,column:31}},"132":{start:{line:500,column:4},end:{line:500,column:16}},"133":{start:{line:511,column:4},end:{line:511,column:40}},"134":{start:{line:521,column:4},end:{line:521,column:32}},"135":{start:{line:529,column:0},end:{line:529,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:35,column:2},end:{line:35,column:3}},loc:{start:{line:35,column:23},end:{line:43,column:3}},line:35},"1":{name:"(anonymous_1)",decl:{start:{line:51,column:2},end:{line:51,column:3}},loc:{start:{line:51,column:23},end:{line:69,column:3}},line:51},"2":{name:"(anonymous_2)",decl:{start:{line:77,column:2},end:{line:77,column:3}},loc:{start:{line:77,column:30},end:{line:79,column:3}},line:77},"3":{name:"(anonymous_3)",decl:{start:{line:86,column:2},end:{line:86,column:3}},loc:{start:{line:86,column:10},end:{line:93,column:3}},line:86},"4":{name:"(anonymous_4)",decl:{start:{line:101,column:2},end:{line:101,column:3}},loc:{start:{line:101,column:16},end:{line:104,column:3}},line:101},"5":{name:"(anonymous_5)",decl:{start:{line:112,column:2},end:{line:112,column:3}},loc:{start:{line:112,column:17},end:{line:115,column:3}},line:112},"6":{name:"(anonymous_6)",decl:{start:{line:125,column:2},end:{line:125,column:3}},loc:{start:{line:125,column:16},end:{line:140,column:3}},line:125},"7":{name:"(anonymous_7)",decl:{start:{line:149,column:2},end:{line:149,column:3}},loc:{start:{line:149,column:18},end:{line:177,column:3}},line:149},"8":{name:"(anonymous_8)",decl:{start:{line:185,column:2},end:{line:185,column:3}},loc:{start:{line:185,column:19},end:{line:197,column:3}},line:185},"9":{name:"(anonymous_9)",decl:{start:{line:207,column:2},end:{line:207,column:3}},loc:{start:{line:207,column:19},end:{line:221,column:3}},line:207},"10":{name:"(anonymous_10)",decl:{start:{line:230,column:2},end:{line:230,column:3}},loc:{start:{line:230,column:21},end:{line:237,column:3}},line:230},"11":{name:"(anonymous_11)",decl:{start:{line:244,column:2},end:{line:244,column:3}},loc:{start:{line:244,column:12},end:{line:246,column:3}},line:244},"12":{name:"(anonymous_12)",decl:{start:{line:253,column:2},end:{line:253,column:3}},loc:{start:{line:253,column:10},end:{line:255,column:3}},line:253},"13":{name:"(anonymous_13)",decl:{start:{line:262,column:2},end:{line:262,column:3}},loc:{start:{line:262,column:15},end:{line:264,column:3}},line:262},"14":{name:"(anonymous_14)",decl:{start:{line:271,column:2},end:{line:271,column:3}},loc:{start:{line:271,column:20},end:{line:273,column:3}},line:271},"15":{name:"(anonymous_15)",decl:{start:{line:281,column:2},end:{line:281,column:3}},loc:{start:{line:281,column:15},end:{line:293,column:3}},line:281},"16":{name:"(anonymous_16)",decl:{start:{line:301,column:2},end:{line:301,column:3}},loc:{start:{line:301,column:24},end:{line:303,column:3}},line:301},"17":{name:"(anonymous_17)",decl:{start:{line:315,column:2},end:{line:315,column:3}},loc:{start:{line:315,column:25},end:{line:333,column:3}},line:315},"18":{name:"(anonymous_18)",decl:{start:{line:341,column:2},end:{line:341,column:3}},loc:{start:{line:341,column:17},end:{line:350,column:3}},line:341},"19":{name:"(anonymous_19)",decl:{start:{line:358,column:2},end:{line:358,column:3}},loc:{start:{line:358,column:24},end:{line:360,column:3}},line:358},"20":{name:"(anonymous_20)",decl:{start:{line:367,column:2},end:{line:367,column:3}},loc:{start:{line:367,column:12},end:{line:369,column:3}},line:367},"21":{name:"(anonymous_21)",decl:{start:{line:377,column:2},end:{line:377,column:3}},loc:{start:{line:377,column:10},end:{line:380,column:3}},line:377},"22":{name:"(anonymous_22)",decl:{start:{line:387,column:2},end:{line:387,column:3}},loc:{start:{line:387,column:15},end:{line:392,column:3}},line:387},"23":{name:"(anonymous_23)",decl:{start:{line:400,column:2},end:{line:400,column:3}},loc:{start:{line:400,column:17},end:{line:405,column:3}},line:400},"24":{name:"(anonymous_24)",decl:{start:{line:412,column:2},end:{line:412,column:3}},loc:{start:{line:412,column:16},end:{line:414,column:3}},line:412},"25":{name:"(anonymous_25)",decl:{start:{line:422,column:2},end:{line:422,column:3}},loc:{start:{line:422,column:24},end:{line:424,column:3}},line:422},"26":{name:"(anonymous_26)",decl:{start:{line:433,column:2},end:{line:433,column:3}},loc:{start:{line:433,column:28},end:{line:437,column:3}},line:433},"27":{name:"(anonymous_27)",decl:{start:{line:445,column:2},end:{line:445,column:3}},loc:{start:{line:445,column:25},end:{line:451,column:3}},line:445},"28":{name:"(anonymous_28)",decl:{start:{line:459,column:2},end:{line:459,column:3}},loc:{start:{line:459,column:32},end:{line:461,column:3}},line:459},"29":{name:"(anonymous_29)",decl:{start:{line:469,column:2},end:{line:469,column:3}},loc:{start:{line:469,column:17},end:{line:475,column:3}},line:469},"30":{name:"(anonymous_30)",decl:{start:{line:483,column:2},end:{line:483,column:3}},loc:{start:{line:483,column:24},end:{line:485,column:3}},line:483},"31":{name:"(anonymous_31)",decl:{start:{line:494,column:2},end:{line:494,column:3}},loc:{start:{line:494,column:20},end:{line:501,column:3}},line:494},"32":{name:"(anonymous_32)",decl:{start:{line:510,column:2},end:{line:510,column:3}},loc:{start:{line:510,column:27},end:{line:512,column:3}},line:510},"33":{name:"(anonymous_33)",decl:{start:{line:520,column:2},end:{line:520,column:3}},loc:{start:{line:520,column:22},end:{line:522,column:3}},line:520}},branchMap:{"0":{loc:{start:{line:41,column:4},end:{line:42,column:32}},type:"if",locations:[{start:{line:41,column:4},end:{line:42,column:32}},{start:{line:41,column:4},end:{line:42,column:32}}],line:41},"1":{loc:{start:{line:56,column:4},end:{line:57,column:46}},type:"if",locations:[{start:{line:56,column:4},end:{line:57,column:46}},{start:{line:56,column:4},end:{line:57,column:46}}],line:56},"2":{loc:{start:{line:59,column:4},end:{line:63,column:5}},type:"if",locations:[{start:{line:59,column:4},end:{line:63,column:5}},{start:{line:59,column:4},end:{line:63,column:5}}],line:59},"3":{loc:{start:{line:65,column:4},end:{line:66,column:48}},type:"if",locations:[{start:{line:65,column:4},end:{line:66,column:48}},{start:{line:65,column:4},end:{line:66,column:48}}],line:65},"4":{loc:{start:{line:126,column:4},end:{line:127,column:24}},type:"if",locations:[{start:{line:126,column:4},end:{line:127,column:24}},{start:{line:126,column:4},end:{line:127,column:24}}],line:126},"5":{loc:{start:{line:129,column:4},end:{line:130,column:28}},type:"if",locations:[{start:{line:129,column:4},end:{line:130,column:28}},{start:{line:129,column:4},end:{line:130,column:28}}],line:129},"6":{loc:{start:{line:134,column:4},end:{line:137,column:40}},type:"if",locations:[{start:{line:134,column:4},end:{line:137,column:40}},{start:{line:134,column:4},end:{line:137,column:40}}],line:134},"7":{loc:{start:{line:150,column:4},end:{line:151,column:18}},type:"if",locations:[{start:{line:150,column:4},end:{line:151,column:18}},{start:{line:150,column:4},end:{line:151,column:18}}],line:150},"8":{loc:{start:{line:153,column:4},end:{line:161,column:5}},type:"if",locations:[{start:{line:153,column:4},end:{line:161,column:5}},{start:{line:153,column:4},end:{line:161,column:5}}],line:153},"9":{loc:{start:{line:154,column:6},end:{line:155,column:40}},type:"if",locations:[{start:{line:154,column:6},end:{line:155,column:40}},{start:{line:154,column:6},end:{line:155,column:40}}],line:154},"10":{loc:{start:{line:157,column:6},end:{line:158,column:39}},type:"if",locations:[{start:{line:157,column:6},end:{line:158,column:39}},{start:{line:157,column:6},end:{line:158,column:39}}],line:157},"11":{loc:{start:{line:166,column:4},end:{line:169,column:5}},type:"if",locations:[{start:{line:166,column:4},end:{line:169,column:5}},{start:{line:166,column:4},end:{line:169,column:5}}],line:166},"12":{loc:{start:{line:171,column:4},end:{line:174,column:5}},type:"if",locations:[{start:{line:171,column:4},end:{line:174,column:5}},{start:{line:171,column:4},end:{line:174,column:5}}],line:171},"13":{loc:{start:{line:171,column:8},end:{line:171,column:42}},type:"binary-expr",locations:[{start:{line:171,column:8},end:{line:171,column:12}},{start:{line:171,column:16},end:{line:171,column:42}}],line:171},"14":{loc:{start:{line:186,column:4},end:{line:187,column:18}},type:"if",locations:[{start:{line:186,column:4},end:{line:187,column:18}},{start:{line:186,column:4},end:{line:187,column:18}}],line:186},"15":{loc:{start:{line:191,column:4},end:{line:192,column:18}},type:"if",locations:[{start:{line:191,column:4},end:{line:192,column:18}},{start:{line:191,column:4},end:{line:192,column:18}}],line:191},"16":{loc:{start:{line:208,column:4},end:{line:209,column:18}},type:"if",locations:[{start:{line:208,column:4},end:{line:209,column:18}},{start:{line:208,column:4},end:{line:209,column:18}}],line:208},"17":{loc:{start:{line:211,column:4},end:{line:212,column:31}},type:"if",locations:[{start:{line:211,column:4},end:{line:212,column:31}},{start:{line:211,column:4},end:{line:212,column:31}}],line:211},"18":{loc:{start:{line:214,column:4},end:{line:215,column:43}},type:"if",locations:[{start:{line:214,column:4},end:{line:215,column:43}},{start:{line:214,column:4},end:{line:215,column:43}}],line:214},"19":{loc:{start:{line:217,column:4},end:{line:218,column:44}},type:"if",locations:[{start:{line:217,column:4},end:{line:218,column:44}},{start:{line:217,column:4},end:{line:218,column:44}}],line:217},"20":{loc:{start:{line:233,column:4},end:{line:234,column:18}},type:"if",locations:[{start:{line:233,column:4},end:{line:234,column:18}},{start:{line:233,column:4},end:{line:234,column:18}}],line:233},"21":{loc:{start:{line:291,column:12},end:{line:291,column:24}},type:"binary-expr",locations:[{start:{line:291,column:12},end:{line:291,column:16}},{start:{line:291,column:20},end:{line:291,column:24}}],line:291},"22":{loc:{start:{line:319,column:4},end:{line:323,column:5}},type:"if",locations:[{start:{line:319,column:4},end:{line:323,column:5}},{start:{line:319,column:4},end:{line:323,column:5}}],line:319},"23":{loc:{start:{line:321,column:6},end:{line:322,column:38}},type:"if",locations:[{start:{line:321,column:6},end:{line:322,column:38}},{start:{line:321,column:6},end:{line:322,column:38}}],line:321},"24":{loc:{start:{line:331,column:12},end:{line:331,column:58}},type:"cond-expr",locations:[{start:{line:331,column:19},end:{line:331,column:46}},{start:{line:331,column:49},end:{line:331,column:58}}],line:331},"25":{loc:{start:{line:434,column:4},end:{line:435,column:36}},type:"if",locations:[{start:{line:434,column:4},end:{line:435,column:36}},{start:{line:434,column:4},end:{line:435,column:36}}],line:434},"26":{loc:{start:{line:497,column:11},end:{line:497,column:50}},type:"binary-expr",locations:[{start:{line:497,column:11},end:{line:497,column:21}},{start:{line:497,column:25},end:{line:497,column:50}}],line:497}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6a2770cd103d5f5e10e229f4fab32a61180bccb6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1rbi8iwnhy=function(){return actualCoverage;};}return actualCoverage;}cov_1rbi8iwnhy();const assert=(cov_1rbi8iwnhy().s[0]++,require('bsert'));const bio=(cov_1rbi8iwnhy().s[1]++,require('bufio'));const Network=(cov_1rbi8iwnhy().s[2]++,require('../protocol/network'));const Script=(cov_1rbi8iwnhy().s[3]++,require('../script/script'));const Witness=(cov_1rbi8iwnhy().s[4]++,require('../script/witness'));const Outpoint=(cov_1rbi8iwnhy().s[5]++,require('./outpoint'));const{inspectSymbol}=(cov_1rbi8iwnhy().s[6]++,require('../utils'));/**
 * Input
 * Represents a transaction input.
 * @alias module:primitives.Input
 * @property {Outpoint} prevout - Outpoint.
 * @property {Script} script - Input script / scriptSig.
 * @property {Number} sequence - nSequence.
 * @property {Witness} witness - Witness (empty if not present).
 */class Input{/**
   * Create transaction input.
   * @constructor
   * @param {Object} options
   */constructor(options){cov_1rbi8iwnhy().f[0]++;cov_1rbi8iwnhy().s[7]++;this.prevout=new Outpoint();cov_1rbi8iwnhy().s[8]++;this.script=new Script();cov_1rbi8iwnhy().s[9]++;this.sequence=0xffffffff;cov_1rbi8iwnhy().s[10]++;this.witness=new Witness();cov_1rbi8iwnhy().s[11]++;if(options){cov_1rbi8iwnhy().b[0][0]++;cov_1rbi8iwnhy().s[12]++;this.fromOptions(options);}else{cov_1rbi8iwnhy().b[0][1]++;}}/**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */fromOptions(options){cov_1rbi8iwnhy().f[1]++;cov_1rbi8iwnhy().s[13]++;assert(options,'Input data is required.');cov_1rbi8iwnhy().s[14]++;this.prevout.fromOptions(options.prevout);cov_1rbi8iwnhy().s[15]++;if(options.script){cov_1rbi8iwnhy().b[1][0]++;cov_1rbi8iwnhy().s[16]++;this.script.fromOptions(options.script);}else{cov_1rbi8iwnhy().b[1][1]++;}cov_1rbi8iwnhy().s[17]++;if(options.sequence!=null){cov_1rbi8iwnhy().b[2][0]++;cov_1rbi8iwnhy().s[18]++;assert(options.sequence>>>0===options.sequence,'Sequence must be a uint32.');cov_1rbi8iwnhy().s[19]++;this.sequence=options.sequence;}else{cov_1rbi8iwnhy().b[2][1]++;}cov_1rbi8iwnhy().s[20]++;if(options.witness){cov_1rbi8iwnhy().b[3][0]++;cov_1rbi8iwnhy().s[21]++;this.witness.fromOptions(options.witness);}else{cov_1rbi8iwnhy().b[3][1]++;}cov_1rbi8iwnhy().s[22]++;return this;}/**
   * Instantiate an Input from options object.
   * @param {Object} options
   * @returns {Input}
   */static fromOptions(options){cov_1rbi8iwnhy().f[2]++;cov_1rbi8iwnhy().s[23]++;return new this().fromOptions(options);}/**
   * Clone the input.
   * @returns {Input}
   */clone(){cov_1rbi8iwnhy().f[3]++;const input=(cov_1rbi8iwnhy().s[24]++,new this.constructor());cov_1rbi8iwnhy().s[25]++;input.prevout=this.prevout;cov_1rbi8iwnhy().s[26]++;input.script.inject(this.script);cov_1rbi8iwnhy().s[27]++;input.sequence=this.sequence;cov_1rbi8iwnhy().s[28]++;input.witness.inject(this.witness);cov_1rbi8iwnhy().s[29]++;return input;}/**
   * Test equality against another input.
   * @param {Input} input
   * @returns {Boolean}
   */equals(input){cov_1rbi8iwnhy().f[4]++;cov_1rbi8iwnhy().s[30]++;assert(Input.isInput(input));cov_1rbi8iwnhy().s[31]++;return this.prevout.equals(input.prevout);}/**
   * Compare against another input (BIP69).
   * @param {Input} input
   * @returns {Number}
   */compare(input){cov_1rbi8iwnhy().f[5]++;cov_1rbi8iwnhy().s[32]++;assert(Input.isInput(input));cov_1rbi8iwnhy().s[33]++;return this.prevout.compare(input.prevout);}/**
   * Get the previous output script type as a string.
   * Will "guess" based on the input script and/or
   * witness if coin is not available.
   * @param {Coin?} coin
   * @returns {ScriptType} type
   */getType(coin){cov_1rbi8iwnhy().f[6]++;cov_1rbi8iwnhy().s[34]++;if(this.isCoinbase()){cov_1rbi8iwnhy().b[4][0]++;cov_1rbi8iwnhy().s[35]++;return'coinbase';}else{cov_1rbi8iwnhy().b[4][1]++;}cov_1rbi8iwnhy().s[36]++;if(coin){cov_1rbi8iwnhy().b[5][0]++;cov_1rbi8iwnhy().s[37]++;return coin.getType();}else{cov_1rbi8iwnhy().b[5][1]++;}let type;cov_1rbi8iwnhy().s[38]++;if(this.witness.items.length>0){cov_1rbi8iwnhy().b[6][0]++;cov_1rbi8iwnhy().s[39]++;type=this.witness.getInputType();}else{cov_1rbi8iwnhy().b[6][1]++;cov_1rbi8iwnhy().s[40]++;type=this.script.getInputType();}cov_1rbi8iwnhy().s[41]++;return Script.typesByVal[type].toLowerCase();}/**
   * Get the redeem script. Will attempt to resolve nested
   * redeem scripts if witnessscripthash is behind a scripthash.
   * @param {Coin?} coin
   * @returns {Script?} Redeem script.
   */getRedeem(coin){cov_1rbi8iwnhy().f[7]++;cov_1rbi8iwnhy().s[42]++;if(this.isCoinbase()){cov_1rbi8iwnhy().b[7][0]++;cov_1rbi8iwnhy().s[43]++;return null;}else{cov_1rbi8iwnhy().b[7][1]++;}cov_1rbi8iwnhy().s[44]++;if(!coin){cov_1rbi8iwnhy().b[8][0]++;cov_1rbi8iwnhy().s[45]++;if(this.witness.isScripthashInput()){cov_1rbi8iwnhy().b[9][0]++;cov_1rbi8iwnhy().s[46]++;return this.witness.getRedeem();}else{cov_1rbi8iwnhy().b[9][1]++;}cov_1rbi8iwnhy().s[47]++;if(this.script.isScripthashInput()){cov_1rbi8iwnhy().b[10][0]++;cov_1rbi8iwnhy().s[48]++;return this.script.getRedeem();}else{cov_1rbi8iwnhy().b[10][1]++;}cov_1rbi8iwnhy().s[49]++;return null;}else{cov_1rbi8iwnhy().b[8][1]++;}let prev=(cov_1rbi8iwnhy().s[50]++,coin.script);let redeem=(cov_1rbi8iwnhy().s[51]++,null);cov_1rbi8iwnhy().s[52]++;if(prev.isScripthash()){cov_1rbi8iwnhy().b[11][0]++;cov_1rbi8iwnhy().s[53]++;prev=this.script.getRedeem();cov_1rbi8iwnhy().s[54]++;redeem=prev;}else{cov_1rbi8iwnhy().b[11][1]++;}cov_1rbi8iwnhy().s[55]++;if((cov_1rbi8iwnhy().b[13][0]++,prev)&&(cov_1rbi8iwnhy().b[13][1]++,prev.isWitnessScripthash())){cov_1rbi8iwnhy().b[12][0]++;cov_1rbi8iwnhy().s[56]++;prev=this.witness.getRedeem();cov_1rbi8iwnhy().s[57]++;redeem=prev;}else{cov_1rbi8iwnhy().b[12][1]++;}cov_1rbi8iwnhy().s[58]++;return redeem;}/**
   * Get the redeem script type.
   * @param {Coin?} coin
   * @returns {String} subtype
   */getSubtype(coin){cov_1rbi8iwnhy().f[8]++;cov_1rbi8iwnhy().s[59]++;if(this.isCoinbase()){cov_1rbi8iwnhy().b[14][0]++;cov_1rbi8iwnhy().s[60]++;return null;}else{cov_1rbi8iwnhy().b[14][1]++;}const redeem=(cov_1rbi8iwnhy().s[61]++,this.getRedeem(coin));cov_1rbi8iwnhy().s[62]++;if(!redeem){cov_1rbi8iwnhy().b[15][0]++;cov_1rbi8iwnhy().s[63]++;return null;}else{cov_1rbi8iwnhy().b[15][1]++;}const type=(cov_1rbi8iwnhy().s[64]++,redeem.getType());cov_1rbi8iwnhy().s[65]++;return Script.typesByVal[type].toLowerCase();}/**
   * Get the previous output script's address. Will "guess"
   * based on the input script and/or witness if coin
   * is not available.
   * @param {Coin?} coin
   * @returns {Address?} addr
   */getAddress(coin){cov_1rbi8iwnhy().f[9]++;cov_1rbi8iwnhy().s[66]++;if(this.isCoinbase()){cov_1rbi8iwnhy().b[16][0]++;cov_1rbi8iwnhy().s[67]++;return null;}else{cov_1rbi8iwnhy().b[16][1]++;}cov_1rbi8iwnhy().s[68]++;if(coin){cov_1rbi8iwnhy().b[17][0]++;cov_1rbi8iwnhy().s[69]++;return coin.getAddress();}else{cov_1rbi8iwnhy().b[17][1]++;}cov_1rbi8iwnhy().s[70]++;if(this.script.code.length>0){cov_1rbi8iwnhy().b[18][0]++;cov_1rbi8iwnhy().s[71]++;return this.script.getInputAddress();}else{cov_1rbi8iwnhy().b[18][1]++;}cov_1rbi8iwnhy().s[72]++;if(this.witness.items.length>0){cov_1rbi8iwnhy().b[19][0]++;cov_1rbi8iwnhy().s[73]++;return this.witness.getInputAddress();}else{cov_1rbi8iwnhy().b[19][1]++;}cov_1rbi8iwnhy().s[74]++;return null;}/**
   * Get the address hash.
   * @param {Coin?} coin
   * @param {String?} enc
   * @returns {Hash} hash
   */getHash(coin,enc){cov_1rbi8iwnhy().f[10]++;const addr=(cov_1rbi8iwnhy().s[75]++,this.getAddress(coin));cov_1rbi8iwnhy().s[76]++;if(!addr){cov_1rbi8iwnhy().b[20][0]++;cov_1rbi8iwnhy().s[77]++;return null;}else{cov_1rbi8iwnhy().b[20][1]++;}cov_1rbi8iwnhy().s[78]++;return addr.getHash(enc);}/**
   * Test to see if nSequence is equal to uint32max.
   * @returns {Boolean}
   */isFinal(){cov_1rbi8iwnhy().f[11]++;cov_1rbi8iwnhy().s[79]++;return this.sequence===0xffffffff;}/**
   * Test to see if nSequence is less than 0xfffffffe.
   * @returns {Boolean}
   */isRBF(){cov_1rbi8iwnhy().f[12]++;cov_1rbi8iwnhy().s[80]++;return this.sequence<0xfffffffe;}/**
   * Test to see if outpoint is null.
   * @returns {Boolean}
   */isCoinbase(){cov_1rbi8iwnhy().f[13]++;cov_1rbi8iwnhy().s[81]++;return this.prevout.isNull();}/**
   * Convert the input to a more user-friendly object.
   * @returns {Object}
   */[inspectSymbol](){cov_1rbi8iwnhy().f[14]++;cov_1rbi8iwnhy().s[82]++;return this.format();}/**
   * Convert the input to a more user-friendly object.
   * @param {Coin?} coin
   * @returns {Object}
   */format(coin){cov_1rbi8iwnhy().f[15]++;cov_1rbi8iwnhy().s[83]++;return{type:this.getType(coin),subtype:this.getSubtype(coin),address:this.getAddress(coin),script:this.script,witness:this.witness,redeem:this.getRedeem(coin),sequence:this.sequence,prevout:this.prevout,coin:(cov_1rbi8iwnhy().b[21][0]++,coin)||(cov_1rbi8iwnhy().b[21][1]++,null)};}/**
   * Convert the input to an object suitable
   * for JSON serialization.
   * @returns {Object}
   */toJSON(network,coin){cov_1rbi8iwnhy().f[16]++;cov_1rbi8iwnhy().s[84]++;return this.getJSON();}/**
   * Convert the input to an object suitable
   * for JSON serialization. Note that the hashes
   * will be reversed to abide by bitcoind's legacy
   * of little-endian uint256s.
   * @param {Network} network
   * @param {Coin} coin
   * @returns {Object}
   */getJSON(network,coin){cov_1rbi8iwnhy().f[17]++;cov_1rbi8iwnhy().s[85]++;network=Network.get(network);let addr;cov_1rbi8iwnhy().s[86]++;if(!coin){cov_1rbi8iwnhy().b[22][0]++;cov_1rbi8iwnhy().s[87]++;addr=this.getAddress();cov_1rbi8iwnhy().s[88]++;if(addr){cov_1rbi8iwnhy().b[23][0]++;cov_1rbi8iwnhy().s[89]++;addr=addr.toString(network);}else{cov_1rbi8iwnhy().b[23][1]++;}}else{cov_1rbi8iwnhy().b[22][1]++;}cov_1rbi8iwnhy().s[90]++;return{prevout:this.prevout.toJSON(),script:this.script.toJSON(),witness:this.witness.toJSON(),sequence:this.sequence,address:addr,coin:coin?(cov_1rbi8iwnhy().b[24][0]++,coin.getJSON(network,true)):(cov_1rbi8iwnhy().b[24][1]++,undefined)};}/**
   * Inject properties from a JSON object.
   * @private
   * @param {Object} json
   */fromJSON(json){cov_1rbi8iwnhy().f[18]++;cov_1rbi8iwnhy().s[91]++;assert(json,'Input data is required.');cov_1rbi8iwnhy().s[92]++;assert(json.sequence>>>0===json.sequence,'Sequence must be a uint32.');cov_1rbi8iwnhy().s[93]++;this.prevout.fromJSON(json.prevout);cov_1rbi8iwnhy().s[94]++;this.script.fromJSON(json.script);cov_1rbi8iwnhy().s[95]++;this.witness.fromJSON(json.witness);cov_1rbi8iwnhy().s[96]++;this.sequence=json.sequence;cov_1rbi8iwnhy().s[97]++;return this;}/**
   * Instantiate an Input from a jsonified input object.
   * @param {Object} json - The jsonified input object.
   * @returns {Input}
   */static fromJSON(json){cov_1rbi8iwnhy().f[19]++;cov_1rbi8iwnhy().s[98]++;return new this().fromJSON(json);}/**
   * Calculate size of serialized input.
   * @returns {Number}
   */getSize(){cov_1rbi8iwnhy().f[20]++;cov_1rbi8iwnhy().s[99]++;return 40+this.script.getVarSize();}/**
   * Serialize the input.
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Buffer|String}
   */toRaw(){cov_1rbi8iwnhy().f[21]++;const size=(cov_1rbi8iwnhy().s[100]++,this.getSize());cov_1rbi8iwnhy().s[101]++;return this.toWriter(bio.write(size)).render();}/**
   * Write the input to a buffer writer.
   * @param {BufferWriter} bw
   */toWriter(bw){cov_1rbi8iwnhy().f[22]++;cov_1rbi8iwnhy().s[102]++;this.prevout.toWriter(bw);cov_1rbi8iwnhy().s[103]++;bw.writeVarBytes(this.script.toRaw());cov_1rbi8iwnhy().s[104]++;bw.writeU32(this.sequence);cov_1rbi8iwnhy().s[105]++;return bw;}/**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */fromReader(br){cov_1rbi8iwnhy().f[23]++;cov_1rbi8iwnhy().s[106]++;this.prevout.fromReader(br);cov_1rbi8iwnhy().s[107]++;this.script.fromRaw(br.readVarBytes());cov_1rbi8iwnhy().s[108]++;this.sequence=br.readU32();cov_1rbi8iwnhy().s[109]++;return this;}/**
   * Inject properties from serialized data.
   * @param {Buffer} data
   */fromRaw(data){cov_1rbi8iwnhy().f[24]++;cov_1rbi8iwnhy().s[110]++;return this.fromReader(bio.read(data));}/**
   * Instantiate an input from a buffer reader.
   * @param {BufferReader} br
   * @returns {Input}
   */static fromReader(br){cov_1rbi8iwnhy().f[25]++;cov_1rbi8iwnhy().s[111]++;return new this().fromReader(br);}/**
   * Instantiate an input from a serialized Buffer.
   * @param {Buffer} data
   * @param {String?} enc - Encoding, can be `'hex'` or null.
   * @returns {Input}
   */static fromRaw(data,enc){cov_1rbi8iwnhy().f[26]++;cov_1rbi8iwnhy().s[112]++;if(typeof data==='string'){cov_1rbi8iwnhy().b[25][0]++;cov_1rbi8iwnhy().s[113]++;data=Buffer.from(data,enc);}else{cov_1rbi8iwnhy().b[25][1]++;}cov_1rbi8iwnhy().s[114]++;return new this().fromRaw(data);}/**
   * Inject properties from outpoint.
   * @private
   * @param {Outpoint} outpoint
   */fromOutpoint(outpoint){cov_1rbi8iwnhy().f[27]++;cov_1rbi8iwnhy().s[115]++;assert(Buffer.isBuffer(outpoint.hash));cov_1rbi8iwnhy().s[116]++;assert(typeof outpoint.index==='number');cov_1rbi8iwnhy().s[117]++;this.prevout.hash=outpoint.hash;cov_1rbi8iwnhy().s[118]++;this.prevout.index=outpoint.index;cov_1rbi8iwnhy().s[119]++;return this;}/**
   * Instantiate input from outpoint.
   * @param {Outpoint}
   * @returns {Input}
   */static fromOutpoint(outpoint){cov_1rbi8iwnhy().f[28]++;cov_1rbi8iwnhy().s[120]++;return new this().fromOutpoint(outpoint);}/**
   * Inject properties from coin.
   * @private
   * @param {Coin} coin
   */fromCoin(coin){cov_1rbi8iwnhy().f[29]++;cov_1rbi8iwnhy().s[121]++;assert(Buffer.isBuffer(coin.hash));cov_1rbi8iwnhy().s[122]++;assert(typeof coin.index==='number');cov_1rbi8iwnhy().s[123]++;this.prevout.hash=coin.hash;cov_1rbi8iwnhy().s[124]++;this.prevout.index=coin.index;cov_1rbi8iwnhy().s[125]++;return this;}/**
   * Instantiate input from coin.
   * @param {Coin}
   * @returns {Input}
   */static fromCoin(coin){cov_1rbi8iwnhy().f[30]++;cov_1rbi8iwnhy().s[126]++;return new this().fromCoin(coin);}/**
   * Inject properties from transaction.
   * @private
   * @param {TX} tx
   * @param {Number} index
   */fromTX(tx,index){cov_1rbi8iwnhy().f[31]++;cov_1rbi8iwnhy().s[127]++;assert(tx);cov_1rbi8iwnhy().s[128]++;assert(typeof index==='number');cov_1rbi8iwnhy().s[129]++;assert((cov_1rbi8iwnhy().b[26][0]++,index>=0)&&(cov_1rbi8iwnhy().b[26][1]++,index<tx.outputs.length));cov_1rbi8iwnhy().s[130]++;this.prevout.hash=tx.hash();cov_1rbi8iwnhy().s[131]++;this.prevout.index=index;cov_1rbi8iwnhy().s[132]++;return this;}/**
   * Instantiate input from tx.
   * @param {TX} tx
   * @param {Number} index
   * @returns {Input}
   */static fromTX(tx,index){cov_1rbi8iwnhy().f[32]++;cov_1rbi8iwnhy().s[133]++;return new this().fromTX(tx,index);}/**
   * Test an object to see if it is an Input.
   * @param {Object} obj
   * @returns {Boolean}
   */static isInput(obj){cov_1rbi8iwnhy().f[33]++;cov_1rbi8iwnhy().s[134]++;return obj instanceof Input;}}/*
 * Expose
 */cov_1rbi8iwnhy().s[135]++;module.exports=Input;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
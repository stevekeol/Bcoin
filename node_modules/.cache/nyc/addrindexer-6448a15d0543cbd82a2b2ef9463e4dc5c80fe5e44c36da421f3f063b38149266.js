/*!
 * addrindexer.js - address indexer for bcoin
 * Copyright (c) 2018, the bcoin developers (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1kv0t06aky(){var path="E:\\Projects\\Test\\bcoin\\lib\\indexer\\addrindexer.js";var hash="f6467fbffda3da03141fea7ea6048864d4c59db5";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\indexer\\addrindexer.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:32}},"1":{start:{line:10,column:12},end:{line:10,column:26}},"2":{start:{line:11,column:12},end:{line:11,column:28}},"3":{start:{line:12,column:15},end:{line:12,column:34}},"4":{start:{line:13,column:16},end:{line:13,column:48}},"5":{start:{line:14,column:16},end:{line:14,column:36}},"6":{start:{line:39,column:0},end:{line:43,column:3}},"7":{start:{line:58,column:4},end:{line:58,column:30}},"8":{start:{line:59,column:4},end:{line:59,column:28}},"9":{start:{line:61,column:4},end:{line:61,column:48}},"10":{start:{line:62,column:4},end:{line:62,column:46}},"11":{start:{line:71,column:15},end:{line:71,column:27}},"12":{start:{line:73,column:4},end:{line:73,column:29}},"13":{start:{line:74,column:4},end:{line:74,column:28}},"14":{start:{line:76,column:4},end:{line:76,column:23}},"15":{start:{line:86,column:15},end:{line:86,column:29}},"16":{start:{line:88,column:4},end:{line:88,column:31}},"17":{start:{line:89,column:4},end:{line:89,column:30}},"18":{start:{line:91,column:4},end:{line:91,column:16}},"19":{start:{line:101,column:4},end:{line:101,column:36}},"20":{start:{line:119,column:4},end:{line:119,column:27}},"21":{start:{line:121,column:4},end:{line:121,column:39}},"22":{start:{line:122,column:4},end:{line:122,column:40}},"23":{start:{line:134,column:19},end:{line:134,column:30}},"24":{start:{line:136,column:4},end:{line:160,column:5}},"25":{start:{line:136,column:17},end:{line:136,column:18}},"26":{start:{line:137,column:17},end:{line:137,column:29}},"27":{start:{line:138,column:19},end:{line:138,column:28}},"28":{start:{line:139,column:20},end:{line:139,column:40}},"29":{start:{line:141,column:23},end:{line:141,column:28}},"30":{start:{line:143,column:6},end:{line:154,column:7}},"31":{start:{line:144,column:23},end:{line:144,column:51}},"32":{start:{line:146,column:8},end:{line:147,column:19}},"33":{start:{line:147,column:10},end:{line:147,column:19}},"34":{start:{line:149,column:25},end:{line:149,column:39}},"35":{start:{line:151,column:8},end:{line:151,column:69}},"36":{start:{line:153,column:8},end:{line:153,column:26}},"37":{start:{line:156,column:6},end:{line:159,column:7}},"38":{start:{line:157,column:8},end:{line:157,column:51}},"39":{start:{line:158,column:8},end:{line:158,column:55}},"40":{start:{line:172,column:19},end:{line:172,column:30}},"41":{start:{line:174,column:4},end:{line:197,column:5}},"42":{start:{line:174,column:17},end:{line:174,column:18}},"43":{start:{line:175,column:17},end:{line:175,column:29}},"44":{start:{line:176,column:19},end:{line:176,column:28}},"45":{start:{line:178,column:23},end:{line:178,column:28}},"46":{start:{line:180,column:6},end:{line:191,column:7}},"47":{start:{line:181,column:23},end:{line:181,column:51}},"48":{start:{line:183,column:8},end:{line:184,column:19}},"49":{start:{line:184,column:10},end:{line:184,column:19}},"50":{start:{line:186,column:25},end:{line:186,column:39}},"51":{start:{line:188,column:8},end:{line:188,column:63}},"52":{start:{line:190,column:8},end:{line:190,column:26}},"53":{start:{line:193,column:6},end:{line:196,column:7}},"54":{start:{line:194,column:8},end:{line:194,column:45}},"55":{start:{line:195,column:8},end:{line:195,column:40}},"56":{start:{line:214,column:29},end:{line:214,column:36}},"57":{start:{line:215,column:18},end:{line:215,column:25}},"58":{start:{line:217,column:4},end:{line:218,column:26}},"59":{start:{line:218,column:6},end:{line:218,column:26}},"60":{start:{line:220,column:4},end:{line:221,column:60}},"61":{start:{line:221,column:6},end:{line:221,column:60}},"62":{start:{line:223,column:17},end:{line:223,column:38}},"63":{start:{line:224,column:19},end:{line:224,column:47}},"64":{start:{line:226,column:17},end:{line:233,column:5}},"65":{start:{line:230,column:35},end:{line:230,column:55}},"66":{start:{line:231,column:8},end:{line:231,column:31}},"67":{start:{line:236,column:22},end:{line:236,column:72}},"68":{start:{line:241,column:18},end:{line:241,column:48}},"69":{start:{line:242,column:4},end:{line:243,column:16}},"70":{start:{line:243,column:6},end:{line:243,column:16}},"71":{start:{line:245,column:4},end:{line:264,column:5}},"72":{start:{line:248,column:18},end:{line:248,column:59}},"73":{start:{line:249,column:20},end:{line:249,column:38}},"74":{start:{line:250,column:30},end:{line:250,column:35}},"75":{start:{line:252,column:6},end:{line:258,column:7}},"76":{start:{line:253,column:8},end:{line:253,column:60}},"77":{start:{line:254,column:8},end:{line:254,column:46}},"78":{start:{line:256,column:8},end:{line:256,column:46}},"79":{start:{line:257,column:8},end:{line:257,column:60}},"80":{start:{line:262,column:6},end:{line:262,column:44}},"81":{start:{line:263,column:6},end:{line:263,column:44}},"82":{start:{line:266,column:16},end:{line:266,column:40}},"83":{start:{line:267,column:19},end:{line:267,column:21}},"84":{start:{line:269,column:4},end:{line:270,column:69}},"85":{start:{line:270,column:6},end:{line:270,column:69}},"86":{start:{line:272,column:4},end:{line:272,column:18}},"87":{start:{line:276,column:0},end:{line:276,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:57,column:2},end:{line:57,column:3}},loc:{start:{line:57,column:29},end:{line:63,column:3}},line:57},"1":{name:"(anonymous_1)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:10},end:{line:77,column:3}},line:70},"2":{name:"(anonymous_2)",decl:{start:{line:85,column:2},end:{line:85,column:3}},loc:{start:{line:85,column:16},end:{line:92,column:3}},line:85},"3":{name:"(anonymous_3)",decl:{start:{line:100,column:2},end:{line:100,column:3}},loc:{start:{line:100,column:23},end:{line:102,column:3}},line:100},"4":{name:"(anonymous_4)",decl:{start:{line:118,column:2},end:{line:118,column:3}},loc:{start:{line:118,column:23},end:{line:123,column:3}},line:118},"5":{name:"(anonymous_5)",decl:{start:{line:133,column:2},end:{line:133,column:3}},loc:{start:{line:133,column:38},end:{line:161,column:3}},line:133},"6":{name:"(anonymous_6)",decl:{start:{line:171,column:2},end:{line:171,column:3}},loc:{start:{line:171,column:40},end:{line:198,column:3}},line:171},"7":{name:"(anonymous_7)",decl:{start:{line:213,column:2},end:{line:213,column:3}},loc:{start:{line:213,column:47},end:{line:273,column:3}},line:213},"8":{name:"(anonymous_8)",decl:{start:{line:229,column:13},end:{line:229,column:14}},loc:{start:{line:229,column:22},end:{line:232,column:7}},line:229}},branchMap:{"0":{loc:{start:{line:58,column:18},end:{line:58,column:29}},type:"binary-expr",locations:[{start:{line:58,column:18},end:{line:58,column:24}},{start:{line:58,column:28},end:{line:58,column:29}}],line:58},"1":{loc:{start:{line:59,column:17},end:{line:59,column:27}},type:"binary-expr",locations:[{start:{line:59,column:17},end:{line:59,column:22}},{start:{line:59,column:26},end:{line:59,column:27}}],line:59},"2":{loc:{start:{line:122,column:18},end:{line:122,column:39}},type:"binary-expr",locations:[{start:{line:122,column:18},end:{line:122,column:32}},{start:{line:122,column:36},end:{line:122,column:39}}],line:122},"3":{loc:{start:{line:146,column:8},end:{line:147,column:19}},type:"if",locations:[{start:{line:146,column:8},end:{line:147,column:19}},{start:{line:146,column:8},end:{line:147,column:19}}],line:146},"4":{loc:{start:{line:156,column:6},end:{line:159,column:7}},type:"if",locations:[{start:{line:156,column:6},end:{line:159,column:7}},{start:{line:156,column:6},end:{line:159,column:7}}],line:156},"5":{loc:{start:{line:183,column:8},end:{line:184,column:19}},type:"if",locations:[{start:{line:183,column:8},end:{line:184,column:19}},{start:{line:183,column:8},end:{line:184,column:19}}],line:183},"6":{loc:{start:{line:193,column:6},end:{line:196,column:7}},type:"if",locations:[{start:{line:193,column:6},end:{line:196,column:7}},{start:{line:193,column:6},end:{line:196,column:7}}],line:193},"7":{loc:{start:{line:213,column:33},end:{line:213,column:45}},type:"default-arg",locations:[{start:{line:213,column:43},end:{line:213,column:45}}],line:213},"8":{loc:{start:{line:217,column:4},end:{line:218,column:26}},type:"if",locations:[{start:{line:217,column:4},end:{line:218,column:26}},{start:{line:217,column:4},end:{line:218,column:26}}],line:217},"9":{loc:{start:{line:220,column:4},end:{line:221,column:60}},type:"if",locations:[{start:{line:220,column:4},end:{line:221,column:60}},{start:{line:220,column:4},end:{line:221,column:60}}],line:220},"10":{loc:{start:{line:236,column:22},end:{line:236,column:72}},type:"binary-expr",locations:[{start:{line:236,column:22},end:{line:236,column:27}},{start:{line:236,column:31},end:{line:236,column:72}}],line:236},"11":{loc:{start:{line:241,column:18},end:{line:241,column:48}},type:"binary-expr",locations:[{start:{line:241,column:18},end:{line:241,column:23}},{start:{line:241,column:27},end:{line:241,column:36}},{start:{line:241,column:40},end:{line:241,column:48}}],line:241},"12":{loc:{start:{line:242,column:4},end:{line:243,column:16}},type:"if",locations:[{start:{line:242,column:4},end:{line:243,column:16}},{start:{line:242,column:4},end:{line:243,column:16}}],line:242},"13":{loc:{start:{line:245,column:4},end:{line:264,column:5}},type:"if",locations:[{start:{line:245,column:4},end:{line:264,column:5}},{start:{line:245,column:4},end:{line:264,column:5}}],line:245},"14":{loc:{start:{line:245,column:8},end:{line:245,column:25}},type:"binary-expr",locations:[{start:{line:245,column:8},end:{line:245,column:13}},{start:{line:245,column:17},end:{line:245,column:25}}],line:245},"15":{loc:{start:{line:252,column:6},end:{line:258,column:7}},type:"if",locations:[{start:{line:252,column:6},end:{line:258,column:7}},{start:{line:252,column:6},end:{line:258,column:7}}],line:252}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f6467fbffda3da03141fea7ea6048864d4c59db5"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1kv0t06aky=function(){return actualCoverage;};}return actualCoverage;}cov_1kv0t06aky();const assert=(cov_1kv0t06aky().s[0]++,require('assert'));const bdb=(cov_1kv0t06aky().s[1]++,require('bdb'));const bio=(cov_1kv0t06aky().s[2]++,require('bufio'));const layout=(cov_1kv0t06aky().s[3]++,require('./layout'));const Address=(cov_1kv0t06aky().s[4]++,require('../primitives/address'));const Indexer=(cov_1kv0t06aky().s[5]++,require('./indexer'));/*
 * AddrIndexer Database Layout:
 *  A[addr-prefix][addr-hash][height][index] -> dummy (tx by address)
 *  C[height][index] -> hash (tx hash by height and index)
 *  c[hash]-> height + index (tx height and index by hash)
 *
 * The database layout is organized so that transactions are
 * sorted in the same order as the blocks using the block height
 * and transaction index. This provides the ability to query for
 * sets of transactions within that order. For a wallet that would
 * like to synchronize or rescan, this could be a query for all of
 * the latest transactions, but not for earlier transactions that
 * are already known.
 *
 * To be able to query for all transactions in multiple sets without
 * reference to height and index, there is a mapping from tx hash to
 * the height and index as an entry point.
 *
 * A mapping of height and index is kept for each transaction
 * hash so that the tx hash is not repeated for every address within
 * a transaction.
 */cov_1kv0t06aky().s[6]++;Object.assign(layout,{A:bdb.key('A',['uint8','hash','uint32','uint32']),C:bdb.key('C',['uint32','uint32']),c:bdb.key('c',['hash256'])});/**
 * Count
 */class Count{/**
   * Create count record.
   * @constructor
   * @param {Number} height
   * @param {Number} index
   */constructor(height,index){cov_1kv0t06aky().f[0]++;cov_1kv0t06aky().s[7]++;this.height=(cov_1kv0t06aky().b[0][0]++,height)||(cov_1kv0t06aky().b[0][1]++,0);cov_1kv0t06aky().s[8]++;this.index=(cov_1kv0t06aky().b[1][0]++,index)||(cov_1kv0t06aky().b[1][1]++,0);cov_1kv0t06aky().s[9]++;assert(this.height>>>0===this.height);cov_1kv0t06aky().s[10]++;assert(this.index>>>0===this.index);}/**
   * Serialize.
   * @returns {Buffer}
   */toRaw(){cov_1kv0t06aky().f[1]++;const bw=(cov_1kv0t06aky().s[11]++,bio.write(8));cov_1kv0t06aky().s[12]++;bw.writeU32(this.height);cov_1kv0t06aky().s[13]++;bw.writeU32(this.index);cov_1kv0t06aky().s[14]++;return bw.render();}/**
   * Deserialize.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_1kv0t06aky().f[2]++;const br=(cov_1kv0t06aky().s[15]++,bio.read(data));cov_1kv0t06aky().s[16]++;this.height=br.readU32();cov_1kv0t06aky().s[17]++;this.index=br.readU32();cov_1kv0t06aky().s[18]++;return this;}/**
   * Instantiate a count from a buffer.
   * @param {Buffer} data
   * @returns {Count}
   */static fromRaw(data){cov_1kv0t06aky().f[3]++;cov_1kv0t06aky().s[19]++;return new this().fromRaw(data);}}/**
 * AddrIndexer
 * @alias module:indexer.AddrIndexer
 * @extends Indexer
 */class AddrIndexer extends Indexer{/**
   * Create a indexer
   * @constructor
   * @param {Object} options
   */constructor(options){cov_1kv0t06aky().f[4]++;cov_1kv0t06aky().s[20]++;super('addr',options);cov_1kv0t06aky().s[21]++;this.db=bdb.create(this.options);cov_1kv0t06aky().s[22]++;this.maxTxs=(cov_1kv0t06aky().b[2][0]++,options.maxTxs)||(cov_1kv0t06aky().b[2][1]++,100);}/**
   * Index transactions by address.
   * @private
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   */async indexBlock(meta,block,view){cov_1kv0t06aky().f[5]++;const height=(cov_1kv0t06aky().s[23]++,meta.height);cov_1kv0t06aky().s[24]++;for(let i=(cov_1kv0t06aky().s[25]++,0);i<block.txs.length;i++){const tx=(cov_1kv0t06aky().s[26]++,block.txs[i]);const hash=(cov_1kv0t06aky().s[27]++,tx.hash());const count=(cov_1kv0t06aky().s[28]++,new Count(height,i));let hasAddress=(cov_1kv0t06aky().s[29]++,false);cov_1kv0t06aky().s[30]++;for(const addr of tx.getAddresses(view)){const prefix=(cov_1kv0t06aky().s[31]++,addr.getPrefix(this.network));cov_1kv0t06aky().s[32]++;if(prefix<0){cov_1kv0t06aky().b[3][0]++;cov_1kv0t06aky().s[33]++;continue;}else{cov_1kv0t06aky().b[3][1]++;}const addrHash=(cov_1kv0t06aky().s[34]++,addr.getHash());cov_1kv0t06aky().s[35]++;this.put(layout.A.encode(prefix,addrHash,height,i),null);cov_1kv0t06aky().s[36]++;hasAddress=true;}cov_1kv0t06aky().s[37]++;if(hasAddress){cov_1kv0t06aky().b[4][0]++;cov_1kv0t06aky().s[38]++;this.put(layout.C.encode(height,i),hash);cov_1kv0t06aky().s[39]++;this.put(layout.c.encode(hash),count.toRaw());}else{cov_1kv0t06aky().b[4][1]++;}}}/**
   * Remove addresses from index.
   * @private
   * @param {BlockMeta} meta
   * @param {Block} block
   * @param {CoinView} view
   */async unindexBlock(meta,block,view){cov_1kv0t06aky().f[6]++;const height=(cov_1kv0t06aky().s[40]++,meta.height);cov_1kv0t06aky().s[41]++;for(let i=(cov_1kv0t06aky().s[42]++,0);i<block.txs.length;i++){const tx=(cov_1kv0t06aky().s[43]++,block.txs[i]);const hash=(cov_1kv0t06aky().s[44]++,tx.hash());let hasAddress=(cov_1kv0t06aky().s[45]++,false);cov_1kv0t06aky().s[46]++;for(const addr of tx.getAddresses(view)){const prefix=(cov_1kv0t06aky().s[47]++,addr.getPrefix(this.network));cov_1kv0t06aky().s[48]++;if(prefix<0){cov_1kv0t06aky().b[5][0]++;cov_1kv0t06aky().s[49]++;continue;}else{cov_1kv0t06aky().b[5][1]++;}const addrHash=(cov_1kv0t06aky().s[50]++,addr.getHash());cov_1kv0t06aky().s[51]++;this.del(layout.A.encode(prefix,addrHash,height,i));cov_1kv0t06aky().s[52]++;hasAddress=true;}cov_1kv0t06aky().s[53]++;if(hasAddress){cov_1kv0t06aky().b[6][0]++;cov_1kv0t06aky().s[54]++;this.del(layout.C.encode(height,i));cov_1kv0t06aky().s[55]++;this.del(layout.c.encode(hash));}else{cov_1kv0t06aky().b[6][1]++;}}}/**
   * Get transaction hashes to an address in ascending or descending
   * order. If the `after` argument is supplied, results will be given
   * _after_ that transaction hash. The default order is ascending from
   * oldest to latest.
   * @param {Address} addr
   * @param {Object} options
   * @param {Buffer} options.after - A transaction hash
   * @param {Number} options.limit
   * @param {Boolean} options.reverse
   * @returns {Promise} - Returns {@link Hash}[].
   */async getHashesByAddress(addr,options=(cov_1kv0t06aky().b[7][0]++,{})){cov_1kv0t06aky().f[7]++;const{after,reverse}=(cov_1kv0t06aky().s[56]++,options);let{limit}=(cov_1kv0t06aky().s[57]++,options);cov_1kv0t06aky().s[58]++;if(!limit){cov_1kv0t06aky().b[8][0]++;cov_1kv0t06aky().s[59]++;limit=this.maxTxs;}else{cov_1kv0t06aky().b[8][1]++;}cov_1kv0t06aky().s[60]++;if(limit>this.maxTxs){cov_1kv0t06aky().b[9][0]++;cov_1kv0t06aky().s[61]++;throw new Error(`Limit above max of ${this.maxTxs}.`);}else{cov_1kv0t06aky().b[9][1]++;}const hash=(cov_1kv0t06aky().s[62]++,Address.getHash(addr));const prefix=(cov_1kv0t06aky().s[63]++,addr.getPrefix(this.network));const opts=(cov_1kv0t06aky().s[64]++,{limit,reverse,parse:key=>{cov_1kv0t06aky().f[8]++;const[,,height,index]=(cov_1kv0t06aky().s[65]++,layout.A.decode(key));cov_1kv0t06aky().s[66]++;return[height,index];}});// Determine if the hash -> height + index mapping exists.
const hasAfter=(cov_1kv0t06aky().s[67]++,(cov_1kv0t06aky().b[10][0]++,after)&&(cov_1kv0t06aky().b[10][1]++,await this.db.has(layout.c.encode(after))));// Check to see if results should be skipped because
// the after hash is expected to be within a following
// mempool query.
const skip=(cov_1kv0t06aky().s[68]++,(cov_1kv0t06aky().b[11][0]++,after)&&(cov_1kv0t06aky().b[11][1]++,!hasAfter)&&(cov_1kv0t06aky().b[11][2]++,!reverse));cov_1kv0t06aky().s[69]++;if(skip){cov_1kv0t06aky().b[12][0]++;cov_1kv0t06aky().s[70]++;return[];}else{cov_1kv0t06aky().b[12][1]++;}cov_1kv0t06aky().s[71]++;if((cov_1kv0t06aky().b[14][0]++,after)&&(cov_1kv0t06aky().b[14][1]++,hasAfter)){cov_1kv0t06aky().b[13][0]++;// Give results starting from after
// the tx hash for the address.
const raw=(cov_1kv0t06aky().s[72]++,await this.db.get(layout.c.encode(after)));const count=(cov_1kv0t06aky().s[73]++,Count.fromRaw(raw));const{height,index}=(cov_1kv0t06aky().s[74]++,count);cov_1kv0t06aky().s[75]++;if(!reverse){cov_1kv0t06aky().b[15][0]++;cov_1kv0t06aky().s[76]++;opts.gt=layout.A.min(prefix,hash,height,index);cov_1kv0t06aky().s[77]++;opts.lte=layout.A.max(prefix,hash);}else{cov_1kv0t06aky().b[15][1]++;cov_1kv0t06aky().s[78]++;opts.gte=layout.A.min(prefix,hash);cov_1kv0t06aky().s[79]++;opts.lt=layout.A.max(prefix,hash,height,index);}}else{cov_1kv0t06aky().b[13][1]++;cov_1kv0t06aky().s[80]++;// Give earliest or latest results
// for the address.
opts.gte=layout.A.min(prefix,hash);cov_1kv0t06aky().s[81]++;opts.lte=layout.A.max(prefix,hash);}const txs=(cov_1kv0t06aky().s[82]++,await this.db.keys(opts));const hashes=(cov_1kv0t06aky().s[83]++,[]);cov_1kv0t06aky().s[84]++;for(const[height,index]of txs){cov_1kv0t06aky().s[85]++;hashes.push(await this.db.get(layout.C.encode(height,index)));}cov_1kv0t06aky().s[86]++;return hashes;}}cov_1kv0t06aky().s[87]++;module.exports=AddrIndexer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
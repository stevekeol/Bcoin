/*!
 * undocoins.js - undocoins object for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_10nmxieg1x(){var path="E:\\Projects\\Test\\bcoin\\lib\\coins\\undocoins.js";var hash="b7914dd0523a2617784fcac8b9962a687d10a8ff";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\coins\\undocoins.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:12},end:{line:10,column:28}},"2":{start:{line:11,column:18},end:{line:11,column:47}},"3":{start:{line:30,column:4},end:{line:30,column:20}},"4":{start:{line:40,column:4},end:{line:40,column:33}},"5":{start:{line:49,column:15},end:{line:49,column:16}},"6":{start:{line:51,column:4},end:{line:51,column:14}},"7":{start:{line:53,column:4},end:{line:54,column:29}},"8":{start:{line:54,column:6},end:{line:54,column:29}},"9":{start:{line:56,column:4},end:{line:56,column:16}},"10":{start:{line:65,column:17},end:{line:65,column:31}},"11":{start:{line:66,column:15},end:{line:66,column:30}},"12":{start:{line:68,column:4},end:{line:68,column:35}},"13":{start:{line:70,column:4},end:{line:71,column:24}},"14":{start:{line:71,column:6},end:{line:71,column:24}},"15":{start:{line:73,column:4},end:{line:73,column:23}},"16":{start:{line:84,column:15},end:{line:84,column:29}},"17":{start:{line:85,column:18},end:{line:85,column:30}},"18":{start:{line:87,column:4},end:{line:88,column:48}},"19":{start:{line:87,column:17},end:{line:87,column:18}},"20":{start:{line:88,column:6},end:{line:88,column:48}},"21":{start:{line:90,column:4},end:{line:90,column:16}},"22":{start:{line:100,column:4},end:{line:100,column:36}},"23":{start:{line:109,column:4},end:{line:109,column:35}},"24":{start:{line:118,column:16},end:{line:118,column:28}},"25":{start:{line:119,column:4},end:{line:119,column:26}},"26":{start:{line:120,column:4},end:{line:120,column:15}},"27":{start:{line:130,column:17},end:{line:130,column:33}},"28":{start:{line:132,column:4},end:{line:132,column:17}},"29":{start:{line:134,column:4},end:{line:134,column:33}},"30":{start:{line:142,column:0},end:{line:142,column:27}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:29,column:2},end:{line:29,column:3}},loc:{start:{line:29,column:16},end:{line:31,column:3}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:39,column:2},end:{line:39,column:3}},loc:{start:{line:39,column:13},end:{line:41,column:3}},line:39},"2":{name:"(anonymous_2)",decl:{start:{line:48,column:2},end:{line:48,column:3}},loc:{start:{line:48,column:12},end:{line:57,column:3}},line:48},"3":{name:"(anonymous_3)",decl:{start:{line:64,column:2},end:{line:64,column:3}},loc:{start:{line:64,column:10},end:{line:74,column:3}},line:64},"4":{name:"(anonymous_4)",decl:{start:{line:83,column:2},end:{line:83,column:3}},loc:{start:{line:83,column:16},end:{line:91,column:3}},line:83},"5":{name:"(anonymous_5)",decl:{start:{line:99,column:2},end:{line:99,column:3}},loc:{start:{line:99,column:23},end:{line:101,column:3}},line:99},"6":{name:"(anonymous_6)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:12},end:{line:110,column:3}},line:108},"7":{name:"(anonymous_7)",decl:{start:{line:117,column:2},end:{line:117,column:3}},loc:{start:{line:117,column:11},end:{line:121,column:3}},line:117},"8":{name:"(anonymous_8)",decl:{start:{line:129,column:2},end:{line:129,column:3}},loc:{start:{line:129,column:23},end:{line:135,column:3}},line:129}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b7914dd0523a2617784fcac8b9962a687d10a8ff"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_10nmxieg1x=function(){return actualCoverage;};}return actualCoverage;}cov_10nmxieg1x();const assert=(cov_10nmxieg1x().s[0]++,require('bsert'));const bio=(cov_10nmxieg1x().s[1]++,require('bufio'));const CoinEntry=(cov_10nmxieg1x().s[2]++,require('../coins/coinentry'));/**
 * Undo Coins
 * Coins need to be resurrected from somewhere
 * during a reorg. The undo coins store all
 * spent coins in a single record per block
 * (in a compressed format).
 * @alias module:coins.UndoCoins
 * @property {UndoCoin[]} items
 */class UndoCoins{/**
   * Create undo coins.
   * @constructor
   */constructor(){cov_10nmxieg1x().f[0]++;cov_10nmxieg1x().s[3]++;this.items=[];}/**
   * Push coin entry onto undo coin array.
   * @param {CoinEntry}
   * @returns {Number}
   */push(coin){cov_10nmxieg1x().f[1]++;cov_10nmxieg1x().s[4]++;return this.items.push(coin);}/**
   * Calculate undo coins size.
   * @returns {Number}
   */getSize(){cov_10nmxieg1x().f[2]++;let size=(cov_10nmxieg1x().s[5]++,0);cov_10nmxieg1x().s[6]++;size+=4;cov_10nmxieg1x().s[7]++;for(const coin of this.items){cov_10nmxieg1x().s[8]++;size+=coin.getSize();}cov_10nmxieg1x().s[9]++;return size;}/**
   * Serialize all undo coins.
   * @returns {Buffer}
   */toRaw(){cov_10nmxieg1x().f[3]++;const size=(cov_10nmxieg1x().s[10]++,this.getSize());const bw=(cov_10nmxieg1x().s[11]++,bio.write(size));cov_10nmxieg1x().s[12]++;bw.writeU32(this.items.length);cov_10nmxieg1x().s[13]++;for(const coin of this.items){cov_10nmxieg1x().s[14]++;coin.toWriter(bw);}cov_10nmxieg1x().s[15]++;return bw.render();}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @returns {UndoCoins}
   */fromRaw(data){cov_10nmxieg1x().f[4]++;const br=(cov_10nmxieg1x().s[16]++,bio.read(data));const count=(cov_10nmxieg1x().s[17]++,br.readU32());cov_10nmxieg1x().s[18]++;for(let i=(cov_10nmxieg1x().s[19]++,0);i<count;i++){cov_10nmxieg1x().s[20]++;this.items.push(CoinEntry.fromReader(br));}cov_10nmxieg1x().s[21]++;return this;}/**
   * Instantiate undo coins from serialized data.
   * @param {Buffer} data
   * @returns {UndoCoins}
   */static fromRaw(data){cov_10nmxieg1x().f[5]++;cov_10nmxieg1x().s[22]++;return new this().fromRaw(data);}/**
   * Test whether the undo coins have any members.
   * @returns {Boolean}
   */isEmpty(){cov_10nmxieg1x().f[6]++;cov_10nmxieg1x().s[23]++;return this.items.length===0;}/**
   * Render the undo coins.
   * @returns {Buffer}
   */commit(){cov_10nmxieg1x().f[7]++;const raw=(cov_10nmxieg1x().s[24]++,this.toRaw());cov_10nmxieg1x().s[25]++;this.items.length=0;cov_10nmxieg1x().s[26]++;return raw;}/**
   * Re-apply undo coins to a view, effectively unspending them.
   * @param {CoinView} view
   * @param {Outpoint} prevout
   */apply(view,prevout){cov_10nmxieg1x().f[8]++;const undo=(cov_10nmxieg1x().s[27]++,this.items.pop());cov_10nmxieg1x().s[28]++;assert(undo);cov_10nmxieg1x().s[29]++;view.addEntry(prevout,undo);}}/*
 * Expose
 */cov_10nmxieg1x().s[30]++;module.exports=UndoCoins;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuZG9jb2lucy5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiYmlvIiwiQ29pbkVudHJ5IiwiVW5kb0NvaW5zIiwiY29uc3RydWN0b3IiLCJpdGVtcyIsInB1c2giLCJjb2luIiwiZ2V0U2l6ZSIsInNpemUiLCJ0b1JhdyIsImJ3Iiwid3JpdGUiLCJ3cml0ZVUzMiIsImxlbmd0aCIsInRvV3JpdGVyIiwicmVuZGVyIiwiZnJvbVJhdyIsImRhdGEiLCJiciIsInJlYWQiLCJjb3VudCIsInJlYWRVMzIiLCJpIiwiZnJvbVJlYWRlciIsImlzRW1wdHkiLCJjb21taXQiLCJyYXciLCJhcHBseSIsInZpZXciLCJwcmV2b3V0IiwidW5kbyIsInBvcCIsImFkZEVudHJ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUVBLGEseTFIQVNZOzJGQVBaLEtBQU1BLENBQUFBLE1BQU0sMEJBQUdDLE9BQU8sQ0FBQyxPQUFELENBQVYsQ0FBWixDQUNBLEtBQU1DLENBQUFBLEdBQUcsMEJBQUdELE9BQU8sQ0FBQyxPQUFELENBQVYsQ0FBVCxDQUNBLEtBQU1FLENBQUFBLFNBQVMsMEJBQUdGLE9BQU8sQ0FBQyxvQkFBRCxDQUFWLENBQWYsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FFQSxLQUFNRyxDQUFBQSxTQUFVLENBQ2Q7QUFDRjtBQUNBO0FBQ0EsS0FFRUMsV0FBVyxFQUFHLGlEQUNaLEtBQUtDLEtBQUwsQ0FBYSxFQUFiLENBQ0QsQ0FFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBLEtBRUVDLElBQUksQ0FBQ0MsSUFBRCxDQUFPLGlEQUNULE1BQU8sTUFBS0YsS0FBTCxDQUFXQyxJQUFYLENBQWdCQyxJQUFoQixDQUFQLENBQ0QsQ0FFRDtBQUNGO0FBQ0E7QUFDQSxLQUVFQyxPQUFPLEVBQUcseUJBQ1IsR0FBSUMsQ0FBQUEsSUFBSSwwQkFBRyxDQUFILENBQVIsQ0FEUSx3QkFHUkEsSUFBSSxFQUFJLENBQVIsQ0FIUSx3QkFLUixJQUFLLEtBQU1GLENBQUFBLElBQVgsR0FBbUIsTUFBS0YsS0FBeEIsQ0FDRSx5QkFBQUksSUFBSSxFQUFJRixJQUFJLENBQUNDLE9BQUwsRUFBUixDQUF1QixDQU5qQix3QkFRUixNQUFPQyxDQUFBQSxJQUFQLENBQ0QsQ0FFRDtBQUNGO0FBQ0E7QUFDQSxLQUVFQyxLQUFLLEVBQUcseUJBQ04sS0FBTUQsQ0FBQUEsSUFBSSwyQkFBRyxLQUFLRCxPQUFMLEVBQUgsQ0FBVixDQUNBLEtBQU1HLENBQUFBLEVBQUUsMkJBQUdWLEdBQUcsQ0FBQ1csS0FBSixDQUFVSCxJQUFWLENBQUgsQ0FBUixDQUZNLHlCQUlORSxFQUFFLENBQUNFLFFBQUgsQ0FBWSxLQUFLUixLQUFMLENBQVdTLE1BQXZCLEVBSk0seUJBTU4sSUFBSyxLQUFNUCxDQUFBQSxJQUFYLEdBQW1CLE1BQUtGLEtBQXhCLENBQ0UsMEJBQUFFLElBQUksQ0FBQ1EsUUFBTCxDQUFjSixFQUFkLEVBQWtCLENBUGQseUJBU04sTUFBT0EsQ0FBQUEsRUFBRSxDQUFDSyxNQUFILEVBQVAsQ0FDRCxDQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUVFQyxPQUFPLENBQUNDLElBQUQsQ0FBTyx5QkFDWixLQUFNQyxDQUFBQSxFQUFFLDJCQUFHbEIsR0FBRyxDQUFDbUIsSUFBSixDQUFTRixJQUFULENBQUgsQ0FBUixDQUNBLEtBQU1HLENBQUFBLEtBQUssMkJBQUdGLEVBQUUsQ0FBQ0csT0FBSCxFQUFILENBQVgsQ0FGWSx5QkFJWixJQUFLLEdBQUlDLENBQUFBLENBQUMsMkJBQUcsQ0FBSCxDQUFWLENBQWdCQSxDQUFDLENBQUdGLEtBQXBCLENBQTJCRSxDQUFDLEVBQTVCLENBQ0UsK0JBQUtsQixLQUFMLENBQVdDLElBQVgsQ0FBZ0JKLFNBQVMsQ0FBQ3NCLFVBQVYsQ0FBcUJMLEVBQXJCLENBQWhCLEVBQTBDLENBTGhDLHlCQU9aLE1BQU8sS0FBUCxDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQSxLQUVFLE1BQU9GLENBQUFBLE9BQVAsQ0FBZUMsSUFBZixDQUFxQixrREFDbkIsTUFBTyxJQUFJLEtBQUosR0FBV0QsT0FBWCxDQUFtQkMsSUFBbkIsQ0FBUCxDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0EsS0FFRU8sT0FBTyxFQUFHLGtEQUNSLE1BQU8sTUFBS3BCLEtBQUwsQ0FBV1MsTUFBWCxHQUFzQixDQUE3QixDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0EsS0FFRVksTUFBTSxFQUFHLHlCQUNQLEtBQU1DLENBQUFBLEdBQUcsMkJBQUcsS0FBS2pCLEtBQUwsRUFBSCxDQUFULENBRE8seUJBRVAsS0FBS0wsS0FBTCxDQUFXUyxNQUFYLENBQW9CLENBQXBCLENBRk8seUJBR1AsTUFBT2EsQ0FBQUEsR0FBUCxDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQSxLQUVFQyxLQUFLLENBQUNDLElBQUQsQ0FBT0MsT0FBUCxDQUFnQix5QkFDbkIsS0FBTUMsQ0FBQUEsSUFBSSwyQkFBRyxLQUFLMUIsS0FBTCxDQUFXMkIsR0FBWCxFQUFILENBQVYsQ0FEbUIseUJBR25CakMsTUFBTSxDQUFDZ0MsSUFBRCxDQUFOLENBSG1CLHlCQUtuQkYsSUFBSSxDQUFDSSxRQUFMLENBQWNILE9BQWQsQ0FBdUJDLElBQXZCLEVBQ0QsQ0FoSGEsQ0FtSGhCO0FBQ0E7QUFDQSxHLHlCQUVBRyxNQUFNLENBQUNDLE9BQVAsQ0FBaUJoQyxTQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiB1bmRvY29pbnMuanMgLSB1bmRvY29pbnMgb2JqZWN0IGZvciBiY29pblxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNywgQ2hyaXN0b3BoZXIgSmVmZnJleSAoTUlUIExpY2Vuc2UpLlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmNvaW4tb3JnL2Jjb2luXHJcbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYnNlcnQnKTtcclxuY29uc3QgYmlvID0gcmVxdWlyZSgnYnVmaW8nKTtcclxuY29uc3QgQ29pbkVudHJ5ID0gcmVxdWlyZSgnLi4vY29pbnMvY29pbmVudHJ5Jyk7XHJcblxyXG4vKipcclxuICogVW5kbyBDb2luc1xyXG4gKiBDb2lucyBuZWVkIHRvIGJlIHJlc3VycmVjdGVkIGZyb20gc29tZXdoZXJlXHJcbiAqIGR1cmluZyBhIHJlb3JnLiBUaGUgdW5kbyBjb2lucyBzdG9yZSBhbGxcclxuICogc3BlbnQgY29pbnMgaW4gYSBzaW5nbGUgcmVjb3JkIHBlciBibG9ja1xyXG4gKiAoaW4gYSBjb21wcmVzc2VkIGZvcm1hdCkuXHJcbiAqIEBhbGlhcyBtb2R1bGU6Y29pbnMuVW5kb0NvaW5zXHJcbiAqIEBwcm9wZXJ0eSB7VW5kb0NvaW5bXX0gaXRlbXNcclxuICovXHJcblxyXG5jbGFzcyBVbmRvQ29pbnMge1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSB1bmRvIGNvaW5zLlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqL1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFB1c2ggY29pbiBlbnRyeSBvbnRvIHVuZG8gY29pbiBhcnJheS5cclxuICAgKiBAcGFyYW0ge0NvaW5FbnRyeX1cclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAqL1xyXG5cclxuICBwdXNoKGNvaW4pIHtcclxuICAgIHJldHVybiB0aGlzLml0ZW1zLnB1c2goY29pbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxjdWxhdGUgdW5kbyBjb2lucyBzaXplLlxyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICovXHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICBsZXQgc2l6ZSA9IDA7XHJcblxyXG4gICAgc2l6ZSArPSA0O1xyXG5cclxuICAgIGZvciAoY29uc3QgY29pbiBvZiB0aGlzLml0ZW1zKVxyXG4gICAgICBzaXplICs9IGNvaW4uZ2V0U2l6ZSgpO1xyXG5cclxuICAgIHJldHVybiBzaXplO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VyaWFsaXplIGFsbCB1bmRvIGNvaW5zLlxyXG4gICAqIEByZXR1cm5zIHtCdWZmZXJ9XHJcbiAgICovXHJcblxyXG4gIHRvUmF3KCkge1xyXG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xyXG4gICAgY29uc3QgYncgPSBiaW8ud3JpdGUoc2l6ZSk7XHJcblxyXG4gICAgYncud3JpdGVVMzIodGhpcy5pdGVtcy5sZW5ndGgpO1xyXG5cclxuICAgIGZvciAoY29uc3QgY29pbiBvZiB0aGlzLml0ZW1zKVxyXG4gICAgICBjb2luLnRvV3JpdGVyKGJ3KTtcclxuXHJcbiAgICByZXR1cm4gYncucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmplY3QgcHJvcGVydGllcyBmcm9tIHNlcmlhbGl6ZWQgZGF0YS5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhXHJcbiAgICogQHJldHVybnMge1VuZG9Db2luc31cclxuICAgKi9cclxuXHJcbiAgZnJvbVJhdyhkYXRhKSB7XHJcbiAgICBjb25zdCBiciA9IGJpby5yZWFkKGRhdGEpO1xyXG4gICAgY29uc3QgY291bnQgPSBici5yZWFkVTMyKCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxyXG4gICAgICB0aGlzLml0ZW1zLnB1c2goQ29pbkVudHJ5LmZyb21SZWFkZXIoYnIpKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc3RhbnRpYXRlIHVuZG8gY29pbnMgZnJvbSBzZXJpYWxpemVkIGRhdGEuXHJcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGFcclxuICAgKiBAcmV0dXJucyB7VW5kb0NvaW5zfVxyXG4gICAqL1xyXG5cclxuICBzdGF0aWMgZnJvbVJhdyhkYXRhKSB7XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tUmF3KGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGVzdCB3aGV0aGVyIHRoZSB1bmRvIGNvaW5zIGhhdmUgYW55IG1lbWJlcnMuXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICovXHJcblxyXG4gIGlzRW1wdHkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGggPT09IDA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW5kZXIgdGhlIHVuZG8gY29pbnMuXHJcbiAgICogQHJldHVybnMge0J1ZmZlcn1cclxuICAgKi9cclxuXHJcbiAgY29tbWl0KCkge1xyXG4gICAgY29uc3QgcmF3ID0gdGhpcy50b1JhdygpO1xyXG4gICAgdGhpcy5pdGVtcy5sZW5ndGggPSAwO1xyXG4gICAgcmV0dXJuIHJhdztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlLWFwcGx5IHVuZG8gY29pbnMgdG8gYSB2aWV3LCBlZmZlY3RpdmVseSB1bnNwZW5kaW5nIHRoZW0uXHJcbiAgICogQHBhcmFtIHtDb2luVmlld30gdmlld1xyXG4gICAqIEBwYXJhbSB7T3V0cG9pbnR9IHByZXZvdXRcclxuICAgKi9cclxuXHJcbiAgYXBwbHkodmlldywgcHJldm91dCkge1xyXG4gICAgY29uc3QgdW5kbyA9IHRoaXMuaXRlbXMucG9wKCk7XHJcblxyXG4gICAgYXNzZXJ0KHVuZG8pO1xyXG5cclxuICAgIHZpZXcuYWRkRW50cnkocHJldm91dCwgdW5kbyk7XHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4gKiBFeHBvc2VcclxuICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFVuZG9Db2lucztcclxuIl19
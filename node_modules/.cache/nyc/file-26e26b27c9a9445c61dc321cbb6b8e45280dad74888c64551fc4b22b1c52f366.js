/*!
 * blockstore/file.js - file blockstore for bcoin
 * Copyright (c) 2019, Braydon Fuller (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1s9lijb1oc(){var path="E:\\Projects\\Test\\bcoin\\lib\\blockstore\\file.js";var hash="70f8731e67e8451327ef793840dbed31c64eef79";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\blockstore\\file.js",statementMap:{"0":{start:{line:9,column:36},end:{line:9,column:51}},"1":{start:{line:10,column:12},end:{line:10,column:26}},"2":{start:{line:11,column:15},end:{line:11,column:31}},"3":{start:{line:12,column:11},end:{line:12,column:27}},"4":{start:{line:13,column:12},end:{line:13,column:28}},"5":{start:{line:14,column:16},end:{line:14,column:46}},"6":{start:{line:15,column:16},end:{line:15,column:46}},"7":{start:{line:16,column:27},end:{line:16,column:48}},"8":{start:{line:17,column:34},end:{line:17,column:54}},"9":{start:{line:18,column:15},end:{line:18,column:34}},"10":{start:{line:19,column:26},end:{line:19,column:45}},"11":{start:{line:35,column:4},end:{line:35,column:19}},"12":{start:{line:37,column:4},end:{line:37,column:67}},"13":{start:{line:39,column:4},end:{line:39,column:37}},"14":{start:{line:40,column:4},end:{line:40,column:59}},"15":{start:{line:42,column:4},end:{line:46,column:7}},"16":{start:{line:48,column:4},end:{line:48,column:68}},"17":{start:{line:50,column:4},end:{line:51,column:34}},"18":{start:{line:53,column:4},end:{line:53,column:35}},"19":{start:{line:55,column:4},end:{line:56,column:50}},"20":{start:{line:56,column:6},end:{line:56,column:50}},"21":{start:{line:58,column:4},end:{line:58,column:39}},"22":{start:{line:70,column:19},end:{line:70,column:33}},"23":{start:{line:71,column:19},end:{line:71,column:58}},"24":{start:{line:72,column:16},end:{line:72,column:47}},"25":{start:{line:73,column:17},end:{line:73,column:48}},"26":{start:{line:73,column:33},end:{line:73,column:47}},"27":{start:{line:74,column:20},end:{line:74,column:63}},"28":{start:{line:74,column:34},end:{line:74,column:62}},"29":{start:{line:76,column:18},end:{line:76,column:23}},"30":{start:{line:78,column:4},end:{line:84,column:5}},"31":{start:{line:79,column:18},end:{line:79,column:66}},"32":{start:{line:80,column:6},end:{line:83,column:7}},"33":{start:{line:81,column:8},end:{line:81,column:23}},"34":{start:{line:82,column:8},end:{line:82,column:14}},"35":{start:{line:86,column:4},end:{line:86,column:30}},"36":{start:{line:99,column:31},end:{line:99,column:53}},"37":{start:{line:101,column:4},end:{line:102,column:13}},"38":{start:{line:102,column:6},end:{line:102,column:13}},"39":{start:{line:104,column:4},end:{line:104,column:56}},"40":{start:{line:106,column:4},end:{line:168,column:5}},"41":{start:{line:107,column:16},end:{line:107,column:31}},"42":{start:{line:108,column:23},end:{line:108,column:50}},"43":{start:{line:109,column:19},end:{line:109,column:46}},"44":{start:{line:110,column:21},end:{line:110,column:35}},"45":{start:{line:111,column:18},end:{line:111,column:22}},"46":{start:{line:112,column:19},end:{line:112,column:20}},"47":{start:{line:114,column:6},end:{line:155,column:7}},"48":{start:{line:115,column:8},end:{line:115,column:33}},"49":{start:{line:119,column:8},end:{line:122,column:9}},"50":{start:{line:120,column:10},end:{line:120,column:26}},"51":{start:{line:121,column:10},end:{line:121,column:19}},"52":{start:{line:124,column:19},end:{line:124,column:23}},"53":{start:{line:125,column:23},end:{line:125,column:24}},"54":{start:{line:126,column:21},end:{line:126,column:22}},"55":{start:{line:128,column:8},end:{line:145,column:9}},"56":{start:{line:129,column:10},end:{line:129,column:36}},"57":{start:{line:131,column:10},end:{line:139,column:11}},"58":{start:{line:132,column:12},end:{line:132,column:37}},"59":{start:{line:133,column:12},end:{line:133,column:62}},"60":{start:{line:134,column:12},end:{line:134,column:37}},"61":{start:{line:136,column:12},end:{line:136,column:37}},"62":{start:{line:137,column:12},end:{line:137,column:37}},"63":{start:{line:138,column:12},end:{line:138,column:32}},"64":{start:{line:141,column:10},end:{line:143,column:35}},"65":{start:{line:144,column:10},end:{line:144,column:19}},"66":{start:{line:147,column:28},end:{line:151,column:10}},"67":{start:{line:153,column:8},end:{line:153,column:20}},"68":{start:{line:154,column:8},end:{line:154,column:64}},"69":{start:{line:157,column:25},end:{line:161,column:8}},"70":{start:{line:163,column:6},end:{line:163,column:63}},"71":{start:{line:165,column:6},end:{line:165,column:22}},"72":{start:{line:167,column:6},end:{line:167,column:73}},"73":{start:{line:180,column:4},end:{line:180,column:35}},"74":{start:{line:181,column:4},end:{line:181,column:36}},"75":{start:{line:182,column:4},end:{line:182,column:34}},"76":{start:{line:193,column:4},end:{line:193,column:41}},"77":{start:{line:203,column:4},end:{line:203,column:50}},"78":{start:{line:205,column:4},end:{line:205,column:25}},"79":{start:{line:206,column:4},end:{line:206,column:65}},"80":{start:{line:208,column:4},end:{line:208,column:23}},"81":{start:{line:217,column:4},end:{line:217,column:50}},"82":{start:{line:219,column:4},end:{line:219,column:26}},"83":{start:{line:232,column:16},end:{line:232,column:17}},"84":{start:{line:234,column:14},end:{line:234,column:33}},"85":{start:{line:236,column:4},end:{line:237,column:48}},"86":{start:{line:237,column:6},end:{line:237,column:48}},"87":{start:{line:239,column:4},end:{line:240,column:22}},"88":{start:{line:240,column:6},end:{line:240,column:22}},"89":{start:{line:242,column:19},end:{line:242,column:23}},"90":{start:{line:244,column:19},end:{line:244,column:33}},"91":{start:{line:246,column:4},end:{line:247,column:46}},"92":{start:{line:247,column:6},end:{line:247,column:46}},"93":{start:{line:249,column:4},end:{line:249,column:58}},"94":{start:{line:251,column:4},end:{line:251,column:20}},"95":{start:{line:264,column:4},end:{line:265,column:61}},"96":{start:{line:265,column:6},end:{line:265,column:61}},"97":{start:{line:267,column:17},end:{line:267,column:18}},"98":{start:{line:268,column:21},end:{line:268,column:25}},"99":{start:{line:269,column:19},end:{line:269,column:23}},"100":{start:{line:271,column:17},end:{line:271,column:57}},"101":{start:{line:272,column:4},end:{line:273,column:36}},"102":{start:{line:273,column:6},end:{line:273,column:36}},"103":{start:{line:275,column:4},end:{line:275,column:43}},"104":{start:{line:277,column:16},end:{line:277,column:64}},"105":{start:{line:279,column:16},end:{line:279,column:21}},"106":{start:{line:281,column:4},end:{line:290,column:5}},"107":{start:{line:282,column:6},end:{line:282,column:43}},"108":{start:{line:284,column:6},end:{line:284,column:19}},"109":{start:{line:285,column:6},end:{line:289,column:9}},"110":{start:{line:292,column:4},end:{line:301,column:5}},"111":{start:{line:293,column:6},end:{line:293,column:18}},"112":{start:{line:294,column:6},end:{line:294,column:45}},"113":{start:{line:295,column:6},end:{line:295,column:19}},"114":{start:{line:296,column:6},end:{line:300,column:9}},"115":{start:{line:303,column:4},end:{line:306,column:5}},"116":{start:{line:304,column:17},end:{line:304,column:45}},"117":{start:{line:305,column:6},end:{line:305,column:25}},"118":{start:{line:308,column:4},end:{line:308,column:42}},"119":{start:{line:319,column:4},end:{line:319,column:49}},"120":{start:{line:330,column:4},end:{line:330,column:47}},"121":{start:{line:341,column:4},end:{line:341,column:48}},"122":{start:{line:352,column:4},end:{line:352,column:49}},"123":{start:{line:367,column:4},end:{line:368,column:42}},"124":{start:{line:368,column:6},end:{line:368,column:42}},"125":{start:{line:370,column:4},end:{line:370,column:30}},"126":{start:{line:372,column:4},end:{line:375,column:5}},"127":{start:{line:373,column:6},end:{line:373,column:33}},"128":{start:{line:374,column:6},end:{line:374,column:19}},"129":{start:{line:377,column:18},end:{line:377,column:19}},"130":{start:{line:382,column:4},end:{line:383,column:20}},"131":{start:{line:383,column:6},end:{line:383,column:20}},"132":{start:{line:385,column:20},end:{line:385,column:31}},"133":{start:{line:386,column:19},end:{line:386,column:40}},"134":{start:{line:388,column:16},end:{line:388,column:34}},"135":{start:{line:390,column:4},end:{line:390,column:37}},"136":{start:{line:391,column:4},end:{line:391,column:26}},"137":{start:{line:393,column:4},end:{line:394,column:26}},"138":{start:{line:394,column:6},end:{line:394,column:26}},"139":{start:{line:396,column:18},end:{line:396,column:30}},"140":{start:{line:402,column:8},end:{line:402,column:41}},"141":{start:{line:404,column:22},end:{line:404,column:37}},"142":{start:{line:405,column:22},end:{line:405,column:47}},"143":{start:{line:407,column:15},end:{line:407,column:44}},"144":{start:{line:409,column:19},end:{line:409,column:20}},"145":{start:{line:410,column:19},end:{line:410,column:20}},"146":{start:{line:412,column:4},end:{line:417,column:5}},"147":{start:{line:413,column:6},end:{line:413,column:66}},"148":{start:{line:414,column:6},end:{line:414,column:65}},"149":{start:{line:416,column:6},end:{line:416,column:25}},"150":{start:{line:419,column:4},end:{line:422,column:5}},"151":{start:{line:420,column:6},end:{line:420,column:33}},"152":{start:{line:421,column:6},end:{line:421,column:54}},"153":{start:{line:424,column:4},end:{line:427,column:5}},"154":{start:{line:425,column:6},end:{line:425,column:33}},"155":{start:{line:426,column:6},end:{line:426,column:48}},"156":{start:{line:429,column:4},end:{line:429,column:27}},"157":{start:{line:430,column:4},end:{line:430,column:30}},"158":{start:{line:432,column:14},end:{line:432,column:29}},"159":{start:{line:434,column:24},end:{line:438,column:6}},"160":{start:{line:440,column:4},end:{line:440,column:60}},"161":{start:{line:441,column:4},end:{line:441,column:61}},"162":{start:{line:443,column:17},end:{line:443,column:55}},"163":{start:{line:444,column:4},end:{line:444,column:39}},"164":{start:{line:446,column:4},end:{line:446,column:20}},"165":{start:{line:448,column:4},end:{line:448,column:31}},"166":{start:{line:450,column:4},end:{line:450,column:16}},"167":{start:{line:460,column:4},end:{line:460,column:42}},"168":{start:{line:470,column:4},end:{line:470,column:40}},"169":{start:{line:484,column:4},end:{line:484,column:57}},"170":{start:{line:494,column:4},end:{line:494,column:42}},"171":{start:{line:504,column:4},end:{line:504,column:49}},"172":{start:{line:519,column:16},end:{line:519,column:62}},"173":{start:{line:520,column:4},end:{line:521,column:18}},"174":{start:{line:521,column:6},end:{line:521,column:18}},"175":{start:{line:523,column:24},end:{line:523,column:48}},"176":{start:{line:525,column:21},end:{line:525,column:58}},"177":{start:{line:527,column:19},end:{line:527,column:39}},"178":{start:{line:529,column:4},end:{line:530,column:25}},"179":{start:{line:530,column:6},end:{line:530,column:25}},"180":{start:{line:532,column:4},end:{line:533,column:43}},"181":{start:{line:533,column:6},end:{line:533,column:43}},"182":{start:{line:535,column:4},end:{line:536,column:34}},"183":{start:{line:536,column:6},end:{line:536,column:34}},"184":{start:{line:538,column:4},end:{line:539,column:45}},"185":{start:{line:539,column:6},end:{line:539,column:45}},"186":{start:{line:541,column:17},end:{line:541,column:37}},"187":{start:{line:543,column:15},end:{line:543,column:43}},"188":{start:{line:544,column:16},end:{line:544,column:17}},"189":{start:{line:546,column:4},end:{line:550,column:5}},"190":{start:{line:547,column:6},end:{line:547,column:59}},"191":{start:{line:549,column:6},end:{line:549,column:25}},"192":{start:{line:552,column:4},end:{line:553,column:53}},"193":{start:{line:553,column:6},end:{line:553,column:53}},"194":{start:{line:555,column:4},end:{line:555,column:16}},"195":{start:{line:565,column:4},end:{line:565,column:43}},"196":{start:{line:575,column:4},end:{line:575,column:41}},"197":{start:{line:585,column:4},end:{line:585,column:42}},"198":{start:{line:595,column:4},end:{line:595,column:43}},"199":{start:{line:609,column:17},end:{line:609,column:63}},"200":{start:{line:610,column:4},end:{line:611,column:19}},"201":{start:{line:611,column:6},end:{line:611,column:19}},"202":{start:{line:613,column:24},end:{line:613,column:49}},"203":{start:{line:615,column:17},end:{line:615,column:75}},"204":{start:{line:616,column:4},end:{line:617,column:19}},"205":{start:{line:617,column:6},end:{line:617,column:19}},"206":{start:{line:619,column:23},end:{line:619,column:47}},"207":{start:{line:621,column:4},end:{line:621,column:27}},"208":{start:{line:623,column:14},end:{line:623,column:29}},"209":{start:{line:625,column:4},end:{line:628,column:73}},"210":{start:{line:626,column:6},end:{line:626,column:53}},"211":{start:{line:628,column:6},end:{line:628,column:73}},"212":{start:{line:630,column:4},end:{line:630,column:39}},"213":{start:{line:632,column:4},end:{line:632,column:20}},"214":{start:{line:634,column:4},end:{line:635,column:61}},"215":{start:{line:635,column:6},end:{line:635,column:61}},"216":{start:{line:637,column:4},end:{line:637,column:16}},"217":{start:{line:648,column:4},end:{line:648,column:66}},"218":{start:{line:659,column:4},end:{line:659,column:64}},"219":{start:{line:670,column:4},end:{line:670,column:66}},"220":{start:{line:680,column:4},end:{line:680,column:65}},"221":{start:{line:688,column:0},end:{line:688,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:34,column:2},end:{line:34,column:3}},loc:{start:{line:34,column:23},end:{line:59,column:3}},line:34},"1":{name:"(anonymous_1)",decl:{start:{line:69,column:2},end:{line:69,column:3}},loc:{start:{line:69,column:20},end:{line:87,column:3}},line:69},"2":{name:"(anonymous_2)",decl:{start:{line:73,column:28},end:{line:73,column:29}},loc:{start:{line:73,column:33},end:{line:73,column:47}},line:73},"3":{name:"(anonymous_3)",decl:{start:{line:74,column:29},end:{line:74,column:30}},loc:{start:{line:74,column:34},end:{line:74,column:62}},line:74},"4":{name:"(anonymous_4)",decl:{start:{line:98,column:2},end:{line:98,column:3}},loc:{start:{line:98,column:21},end:{line:169,column:3}},line:98},"5":{name:"(anonymous_5)",decl:{start:{line:179,column:2},end:{line:179,column:3}},loc:{start:{line:179,column:16},end:{line:183,column:3}},line:179},"6":{name:"(anonymous_6)",decl:{start:{line:192,column:2},end:{line:192,column:3}},loc:{start:{line:192,column:17},end:{line:194,column:3}},line:192},"7":{name:"(anonymous_7)",decl:{start:{line:202,column:2},end:{line:202,column:3}},loc:{start:{line:202,column:15},end:{line:209,column:3}},line:202},"8":{name:"(anonymous_8)",decl:{start:{line:216,column:2},end:{line:216,column:3}},loc:{start:{line:216,column:16},end:{line:220,column:3}},line:216},"9":{name:"(anonymous_9)",decl:{start:{line:231,column:2},end:{line:231,column:3}},loc:{start:{line:231,column:25},end:{line:252,column:3}},line:231},"10":{name:"(anonymous_10)",decl:{start:{line:263,column:2},end:{line:263,column:3}},loc:{start:{line:263,column:31},end:{line:309,column:3}},line:263},"11":{name:"(anonymous_11)",decl:{start:{line:318,column:2},end:{line:318,column:3}},loc:{start:{line:318,column:32},end:{line:320,column:3}},line:318},"12":{name:"(anonymous_12)",decl:{start:{line:329,column:2},end:{line:329,column:3}},loc:{start:{line:329,column:30},end:{line:331,column:3}},line:329},"13":{name:"(anonymous_13)",decl:{start:{line:340,column:2},end:{line:340,column:3}},loc:{start:{line:340,column:26},end:{line:342,column:3}},line:340},"14":{name:"(anonymous_14)",decl:{start:{line:351,column:2},end:{line:351,column:3}},loc:{start:{line:351,column:32},end:{line:353,column:3}},line:351},"15":{name:"(anonymous_15)",decl:{start:{line:366,column:2},end:{line:366,column:3}},loc:{start:{line:366,column:33},end:{line:451,column:3}},line:366},"16":{name:"(anonymous_16)",decl:{start:{line:459,column:2},end:{line:459,column:3}},loc:{start:{line:459,column:25},end:{line:461,column:3}},line:459},"17":{name:"(anonymous_17)",decl:{start:{line:469,column:2},end:{line:469,column:3}},loc:{start:{line:469,column:23},end:{line:471,column:3}},line:469},"18":{name:"(anonymous_18)",decl:{start:{line:483,column:2},end:{line:483,column:3}},loc:{start:{line:483,column:35},end:{line:485,column:3}},line:483},"19":{name:"(anonymous_19)",decl:{start:{line:493,column:2},end:{line:493,column:3}},loc:{start:{line:493,column:25},end:{line:495,column:3}},line:493},"20":{name:"(anonymous_20)",decl:{start:{line:503,column:2},end:{line:503,column:3}},loc:{start:{line:503,column:31},end:{line:505,column:3}},line:503},"21":{name:"(anonymous_21)",decl:{start:{line:518,column:2},end:{line:518,column:3}},loc:{start:{line:518,column:42},end:{line:556,column:3}},line:518},"22":{name:"(anonymous_22)",decl:{start:{line:564,column:2},end:{line:564,column:3}},loc:{start:{line:564,column:26},end:{line:566,column:3}},line:564},"23":{name:"(anonymous_23)",decl:{start:{line:574,column:2},end:{line:574,column:3}},loc:{start:{line:574,column:24},end:{line:576,column:3}},line:574},"24":{name:"(anonymous_24)",decl:{start:{line:584,column:2},end:{line:584,column:3}},loc:{start:{line:584,column:20},end:{line:586,column:3}},line:584},"25":{name:"(anonymous_25)",decl:{start:{line:594,column:2},end:{line:594,column:3}},loc:{start:{line:594,column:26},end:{line:596,column:3}},line:594},"26":{name:"(anonymous_26)",decl:{start:{line:608,column:2},end:{line:608,column:3}},loc:{start:{line:608,column:27},end:{line:638,column:3}},line:608},"27":{name:"(anonymous_27)",decl:{start:{line:647,column:2},end:{line:647,column:3}},loc:{start:{line:647,column:24},end:{line:649,column:3}},line:647},"28":{name:"(anonymous_28)",decl:{start:{line:658,column:2},end:{line:658,column:3}},loc:{start:{line:658,column:22},end:{line:660,column:3}},line:658},"29":{name:"(anonymous_29)",decl:{start:{line:669,column:2},end:{line:669,column:3}},loc:{start:{line:669,column:24},end:{line:671,column:3}},line:669},"30":{name:"(anonymous_30)",decl:{start:{line:679,column:2},end:{line:679,column:3}},loc:{start:{line:679,column:18},end:{line:681,column:3}},line:679}},branchMap:{"0":{loc:{start:{line:48,column:25},end:{line:48,column:67}},type:"binary-expr",locations:[{start:{line:48,column:25},end:{line:48,column:46}},{start:{line:48,column:50},end:{line:48,column:67}}],line:48},"1":{loc:{start:{line:55,column:4},end:{line:56,column:50}},type:"if",locations:[{start:{line:55,column:4},end:{line:56,column:50}},{start:{line:55,column:4},end:{line:56,column:50}}],line:55},"2":{loc:{start:{line:80,column:6},end:{line:83,column:7}},type:"if",locations:[{start:{line:80,column:6},end:{line:83,column:7}},{start:{line:80,column:6},end:{line:83,column:7}}],line:80},"3":{loc:{start:{line:101,column:4},end:{line:102,column:13}},type:"if",locations:[{start:{line:101,column:4},end:{line:102,column:13}},{start:{line:101,column:4},end:{line:102,column:13}}],line:101},"4":{loc:{start:{line:119,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:119,column:8},end:{line:122,column:9}},{start:{line:119,column:8},end:{line:122,column:9}}],line:119},"5":{loc:{start:{line:131,column:10},end:{line:139,column:11}},type:"if",locations:[{start:{line:131,column:10},end:{line:139,column:11}},{start:{line:131,column:10},end:{line:139,column:11}}],line:131},"6":{loc:{start:{line:131,column:14},end:{line:131,column:59}},type:"binary-expr",locations:[{start:{line:131,column:14},end:{line:131,column:34}},{start:{line:131,column:38},end:{line:131,column:59}}],line:131},"7":{loc:{start:{line:236,column:4},end:{line:237,column:48}},type:"if",locations:[{start:{line:236,column:4},end:{line:237,column:48}},{start:{line:236,column:4},end:{line:237,column:48}}],line:236},"8":{loc:{start:{line:246,column:4},end:{line:247,column:46}},type:"if",locations:[{start:{line:246,column:4},end:{line:247,column:46}},{start:{line:246,column:4},end:{line:247,column:46}}],line:246},"9":{loc:{start:{line:264,column:4},end:{line:265,column:61}},type:"if",locations:[{start:{line:264,column:4},end:{line:265,column:61}},{start:{line:264,column:4},end:{line:265,column:61}}],line:264},"10":{loc:{start:{line:272,column:4},end:{line:273,column:36}},type:"if",locations:[{start:{line:272,column:4},end:{line:273,column:36}},{start:{line:272,column:4},end:{line:273,column:36}}],line:272},"11":{loc:{start:{line:281,column:4},end:{line:290,column:5}},type:"if",locations:[{start:{line:281,column:4},end:{line:290,column:5}},{start:{line:281,column:4},end:{line:290,column:5}}],line:281},"12":{loc:{start:{line:292,column:4},end:{line:301,column:5}},type:"if",locations:[{start:{line:292,column:4},end:{line:301,column:5}},{start:{line:292,column:4},end:{line:301,column:5}}],line:292},"13":{loc:{start:{line:303,column:4},end:{line:306,column:5}},type:"if",locations:[{start:{line:303,column:4},end:{line:306,column:5}},{start:{line:303,column:4},end:{line:306,column:5}}],line:303},"14":{loc:{start:{line:367,column:4},end:{line:368,column:42}},type:"if",locations:[{start:{line:367,column:4},end:{line:368,column:42}},{start:{line:367,column:4},end:{line:368,column:42}}],line:367},"15":{loc:{start:{line:372,column:4},end:{line:375,column:5}},type:"if",locations:[{start:{line:372,column:4},end:{line:375,column:5}},{start:{line:372,column:4},end:{line:375,column:5}}],line:372},"16":{loc:{start:{line:382,column:4},end:{line:383,column:20}},type:"if",locations:[{start:{line:382,column:4},end:{line:383,column:20}},{start:{line:382,column:4},end:{line:383,column:20}}],line:382},"17":{loc:{start:{line:382,column:8},end:{line:382,column:53}},type:"binary-expr",locations:[{start:{line:382,column:8},end:{line:382,column:28}},{start:{line:382,column:32},end:{line:382,column:53}}],line:382},"18":{loc:{start:{line:393,column:4},end:{line:394,column:26}},type:"if",locations:[{start:{line:393,column:4},end:{line:394,column:26}},{start:{line:393,column:4},end:{line:394,column:26}}],line:393},"19":{loc:{start:{line:393,column:8},end:{line:393,column:53}},type:"binary-expr",locations:[{start:{line:393,column:8},end:{line:393,column:28}},{start:{line:393,column:32},end:{line:393,column:53}}],line:393},"20":{loc:{start:{line:419,column:4},end:{line:422,column:5}},type:"if",locations:[{start:{line:419,column:4},end:{line:422,column:5}},{start:{line:419,column:4},end:{line:422,column:5}}],line:419},"21":{loc:{start:{line:424,column:4},end:{line:427,column:5}},type:"if",locations:[{start:{line:424,column:4},end:{line:427,column:5}},{start:{line:424,column:4},end:{line:427,column:5}}],line:424},"22":{loc:{start:{line:520,column:4},end:{line:521,column:18}},type:"if",locations:[{start:{line:520,column:4},end:{line:521,column:18}},{start:{line:520,column:4},end:{line:521,column:18}}],line:520},"23":{loc:{start:{line:529,column:4},end:{line:530,column:25}},type:"if",locations:[{start:{line:529,column:4},end:{line:530,column:25}},{start:{line:529,column:4},end:{line:530,column:25}}],line:529},"24":{loc:{start:{line:532,column:4},end:{line:533,column:43}},type:"if",locations:[{start:{line:532,column:4},end:{line:533,column:43}},{start:{line:532,column:4},end:{line:533,column:43}}],line:532},"25":{loc:{start:{line:532,column:8},end:{line:532,column:29}},type:"binary-expr",locations:[{start:{line:532,column:8},end:{line:532,column:15}},{start:{line:532,column:19},end:{line:532,column:29}}],line:532},"26":{loc:{start:{line:535,column:4},end:{line:536,column:34}},type:"if",locations:[{start:{line:535,column:4},end:{line:536,column:34}},{start:{line:535,column:4},end:{line:536,column:34}}],line:535},"27":{loc:{start:{line:538,column:4},end:{line:539,column:45}},type:"if",locations:[{start:{line:538,column:4},end:{line:539,column:45}},{start:{line:538,column:4},end:{line:539,column:45}}],line:538},"28":{loc:{start:{line:552,column:4},end:{line:553,column:53}},type:"if",locations:[{start:{line:552,column:4},end:{line:553,column:53}},{start:{line:552,column:4},end:{line:553,column:53}}],line:552},"29":{loc:{start:{line:610,column:4},end:{line:611,column:19}},type:"if",locations:[{start:{line:610,column:4},end:{line:611,column:19}},{start:{line:610,column:4},end:{line:611,column:19}}],line:610},"30":{loc:{start:{line:616,column:4},end:{line:617,column:19}},type:"if",locations:[{start:{line:616,column:4},end:{line:617,column:19}},{start:{line:616,column:4},end:{line:617,column:19}}],line:616},"31":{loc:{start:{line:625,column:4},end:{line:628,column:73}},type:"if",locations:[{start:{line:625,column:4},end:{line:628,column:73}},{start:{line:625,column:4},end:{line:628,column:73}}],line:625},"32":{loc:{start:{line:634,column:4},end:{line:635,column:61}},type:"if",locations:[{start:{line:634,column:4},end:{line:635,column:61}},{start:{line:634,column:4},end:{line:635,column:61}}],line:634}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"70f8731e67e8451327ef793840dbed31c64eef79"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1s9lijb1oc=function(){return actualCoverage;};}return actualCoverage;}cov_1s9lijb1oc();const{isAbsolute,resolve,join}=(cov_1s9lijb1oc().s[0]++,require('path'));const bdb=(cov_1s9lijb1oc().s[1]++,require('bdb'));const assert=(cov_1s9lijb1oc().s[2]++,require('bsert'));const fs=(cov_1s9lijb1oc().s[3]++,require('bfile'));const bio=(cov_1s9lijb1oc().s[4]++,require('bufio'));const hash256=(cov_1s9lijb1oc().s[5]++,require('bcrypto/lib/hash256'));const Network=(cov_1s9lijb1oc().s[6]++,require('../protocol/network'));const AbstractBlockStore=(cov_1s9lijb1oc().s[7]++,require('./abstract'));const{BlockRecord,FileRecord}=(cov_1s9lijb1oc().s[8]++,require('./records'));const layout=(cov_1s9lijb1oc().s[9]++,require('./layout'));const{types,prefixes}=(cov_1s9lijb1oc().s[10]++,require('./common'));/**
 * File Block Store
 *
 * @alias module:blockstore:FileBlockStore
 * @abstract
 */class FileBlockStore extends AbstractBlockStore{/**
   * Create a blockstore that stores blocks in files.
   * @constructor
   */constructor(options){cov_1s9lijb1oc().f[0]++;cov_1s9lijb1oc().s[11]++;super(options);cov_1s9lijb1oc().s[12]++;assert(isAbsolute(options.location),'Location not absolute.');cov_1s9lijb1oc().s[13]++;this.location=options.location;cov_1s9lijb1oc().s[14]++;this.indexLocation=resolve(this.location,'./index');cov_1s9lijb1oc().s[15]++;this.db=bdb.create({location:this.indexLocation,cacheSize:options.cacheSize,compression:false});cov_1s9lijb1oc().s[16]++;this.maxFileLength=(cov_1s9lijb1oc().b[0][0]++,options.maxFileLength)||(cov_1s9lijb1oc().b[0][1]++,128*1024*1024);cov_1s9lijb1oc().s[17]++;assert(Number.isSafeInteger(this.maxFileLength),'Invalid max file length.');cov_1s9lijb1oc().s[18]++;this.network=Network.primary;cov_1s9lijb1oc().s[19]++;if(options.network!=null){cov_1s9lijb1oc().b[1][0]++;cov_1s9lijb1oc().s[20]++;this.network=Network.get(options.network);}else{cov_1s9lijb1oc().b[1][1]++;}cov_1s9lijb1oc().s[21]++;this.writing=Object.create(null);}/**
   * Compares the number of files in the directory
   * with the recorded number of files.
   * @param {Number} type - The type of block data
   * @private
   * @returns {Promise}
   */async check(type){cov_1s9lijb1oc().f[1]++;const prefix=(cov_1s9lijb1oc().s[22]++,prefixes[type]);const regexp=(cov_1s9lijb1oc().s[23]++,new RegExp(`^${prefix}(\\d{5})\\.dat$`));const all=(cov_1s9lijb1oc().s[24]++,await fs.readdir(this.location));const dats=(cov_1s9lijb1oc().s[25]++,all.filter(f=>{cov_1s9lijb1oc().f[2]++;cov_1s9lijb1oc().s[26]++;return regexp.test(f);}));const filenos=(cov_1s9lijb1oc().s[27]++,dats.map(f=>{cov_1s9lijb1oc().f[3]++;cov_1s9lijb1oc().s[28]++;return parseInt(f.match(regexp)[1]);}));let missing=(cov_1s9lijb1oc().s[29]++,false);cov_1s9lijb1oc().s[30]++;for(const fileno of filenos){const rec=(cov_1s9lijb1oc().s[31]++,await this.db.get(layout.f.encode(type,fileno)));cov_1s9lijb1oc().s[32]++;if(!rec){cov_1s9lijb1oc().b[2][0]++;cov_1s9lijb1oc().s[33]++;missing=true;cov_1s9lijb1oc().s[34]++;break;}else{cov_1s9lijb1oc().b[2][1]++;}}cov_1s9lijb1oc().s[35]++;return{missing,filenos};}/**
   * Creates indexes from files for a block type. Reads the hash of
   * the block data from the magic prefix, except for a block which
   * the hash is read from the block header.
   * @private
   * @param {Number} type - The type of block data
   * @returns {Promise}
   */async _index(type){cov_1s9lijb1oc().f[4]++;const{missing,filenos}=(cov_1s9lijb1oc().s[36]++,await this.check(type));cov_1s9lijb1oc().s[37]++;if(!missing){cov_1s9lijb1oc().b[3][0]++;cov_1s9lijb1oc().s[38]++;return;}else{cov_1s9lijb1oc().b[3][1]++;}cov_1s9lijb1oc().s[39]++;this.logger.info('Indexing block type %d...',type);cov_1s9lijb1oc().s[40]++;for(const fileno of filenos){const b=(cov_1s9lijb1oc().s[41]++,this.db.batch());const filepath=(cov_1s9lijb1oc().s[42]++,this.filepath(type,fileno));const data=(cov_1s9lijb1oc().s[43]++,await fs.readFile(filepath));const reader=(cov_1s9lijb1oc().s[44]++,bio.read(data));let magic=(cov_1s9lijb1oc().s[45]++,null);let blocks=(cov_1s9lijb1oc().s[46]++,0);cov_1s9lijb1oc().s[47]++;while(reader.left()>=4){cov_1s9lijb1oc().s[48]++;magic=reader.readU32();// Move forward a byte from the last read
// if the magic doesn't match.
cov_1s9lijb1oc().s[49]++;if(magic!==this.network.magic){cov_1s9lijb1oc().b[4][0]++;cov_1s9lijb1oc().s[50]++;reader.seek(-3);cov_1s9lijb1oc().s[51]++;continue;}else{cov_1s9lijb1oc().b[4][1]++;}let hash=(cov_1s9lijb1oc().s[52]++,null);let position=(cov_1s9lijb1oc().s[53]++,0);let length=(cov_1s9lijb1oc().s[54]++,0);cov_1s9lijb1oc().s[55]++;try{cov_1s9lijb1oc().s[56]++;length=reader.readU32();cov_1s9lijb1oc().s[57]++;if((cov_1s9lijb1oc().b[6][0]++,type===types.BLOCK)||(cov_1s9lijb1oc().b[6][1]++,type===types.MERKLE)){cov_1s9lijb1oc().b[5][0]++;cov_1s9lijb1oc().s[58]++;position=reader.offset;cov_1s9lijb1oc().s[59]++;hash=hash256.digest(reader.readBytes(80,true));cov_1s9lijb1oc().s[60]++;reader.seek(length-80);}else{cov_1s9lijb1oc().b[5][1]++;cov_1s9lijb1oc().s[61]++;hash=reader.readHash();cov_1s9lijb1oc().s[62]++;position=reader.offset;cov_1s9lijb1oc().s[63]++;reader.seek(length);}}catch(err){cov_1s9lijb1oc().s[64]++;this.logger.warning('Unknown block in file: %s, reason: %s',filepath,err.message);cov_1s9lijb1oc().s[65]++;continue;}const blockrecord=(cov_1s9lijb1oc().s[66]++,new BlockRecord({file:fileno,position:position,length:length}));cov_1s9lijb1oc().s[67]++;blocks+=1;cov_1s9lijb1oc().s[68]++;b.put(layout.b.encode(type,hash),blockrecord.toRaw());}const filerecord=(cov_1s9lijb1oc().s[69]++,new FileRecord({blocks:blocks,used:reader.offset,length:this.maxFileLength}));cov_1s9lijb1oc().s[70]++;b.put(layout.f.encode(type,fileno),filerecord.toRaw());cov_1s9lijb1oc().s[71]++;await b.write();cov_1s9lijb1oc().s[72]++;this.logger.info('Indexed %d blocks (file=%s).',blocks,filepath);}}/**
   * Compares the number of files in the directory
   * with the recorded number of files. If there are any
   * inconsistencies it will reindex all blocks.
   * @private
   * @returns {Promise}
   */async index(){cov_1s9lijb1oc().f[5]++;cov_1s9lijb1oc().s[73]++;await this._index(types.BLOCK);cov_1s9lijb1oc().s[74]++;await this._index(types.MERKLE);cov_1s9lijb1oc().s[75]++;await this._index(types.UNDO);}/**
   * This method ensures that both the block storage directory
   * and index directory exist.
   * before opening.
   * @returns {Promise}
   */async ensure(){cov_1s9lijb1oc().f[6]++;cov_1s9lijb1oc().s[76]++;return fs.mkdirp(this.indexLocation);}/**
   * Opens the file block store. It will regenerate necessary block
   * indexing if the index is missing or inconsistent.
   * @returns {Promise}
   */async open(){cov_1s9lijb1oc().f[7]++;cov_1s9lijb1oc().s[77]++;this.logger.info('Opening FileBlockStore...');cov_1s9lijb1oc().s[78]++;await this.db.open();cov_1s9lijb1oc().s[79]++;await this.db.verify(layout.V.encode(),'fileblockstore',0);cov_1s9lijb1oc().s[80]++;await this.index();}/**
   * This closes the file block store and underlying
   * indexing databases.
   */async close(){cov_1s9lijb1oc().f[8]++;cov_1s9lijb1oc().s[81]++;this.logger.info('Closing FileBlockStore...');cov_1s9lijb1oc().s[82]++;await this.db.close();}/**
   * This method will determine the file path based on the file number
   * and the current block data location.
   * @private
   * @param {Number} type - The type of block data
   * @param {Number} fileno - The number of the file.
   * @returns {Promise}
   */filepath(type,fileno){cov_1s9lijb1oc().f[9]++;const pad=(cov_1s9lijb1oc().s[83]++,5);let num=(cov_1s9lijb1oc().s[84]++,fileno.toString(10));cov_1s9lijb1oc().s[85]++;if(num.length>pad){cov_1s9lijb1oc().b[7][0]++;cov_1s9lijb1oc().s[86]++;throw new Error('File number too large.');}else{cov_1s9lijb1oc().b[7][1]++;}cov_1s9lijb1oc().s[87]++;while(num.length<pad){cov_1s9lijb1oc().s[88]++;num=`0${num}`;}let filepath=(cov_1s9lijb1oc().s[89]++,null);const prefix=(cov_1s9lijb1oc().s[90]++,prefixes[type]);cov_1s9lijb1oc().s[91]++;if(!prefix){cov_1s9lijb1oc().b[8][0]++;cov_1s9lijb1oc().s[92]++;throw new Error('Unknown file prefix.');}else{cov_1s9lijb1oc().b[8][1]++;}cov_1s9lijb1oc().s[93]++;filepath=join(this.location,`${prefix}${num}.dat`);cov_1s9lijb1oc().s[94]++;return filepath;}/**
   * This method will select and potentially allocate a file to
   * write a block based on the size and type.
   * @private
   * @param {Number} type - The type of block data
   * @param {Number} length - The number of bytes
   * @returns {Promise}
   */async allocate(type,length){cov_1s9lijb1oc().f[10]++;cov_1s9lijb1oc().s[95]++;if(length>this.maxFileLength){cov_1s9lijb1oc().b[9][0]++;cov_1s9lijb1oc().s[96]++;throw new Error('Block length above max file length.');}else{cov_1s9lijb1oc().b[9][1]++;}let fileno=(cov_1s9lijb1oc().s[97]++,0);let filerecord=(cov_1s9lijb1oc().s[98]++,null);let filepath=(cov_1s9lijb1oc().s[99]++,null);const last=(cov_1s9lijb1oc().s[100]++,await this.db.get(layout.F.encode(type)));cov_1s9lijb1oc().s[101]++;if(last){cov_1s9lijb1oc().b[10][0]++;cov_1s9lijb1oc().s[102]++;fileno=bio.readU32(last,0);}else{cov_1s9lijb1oc().b[10][1]++;}cov_1s9lijb1oc().s[103]++;filepath=this.filepath(type,fileno);const rec=(cov_1s9lijb1oc().s[104]++,await this.db.get(layout.f.encode(type,fileno)));let touch=(cov_1s9lijb1oc().s[105]++,false);cov_1s9lijb1oc().s[106]++;if(rec){cov_1s9lijb1oc().b[11][0]++;cov_1s9lijb1oc().s[107]++;filerecord=FileRecord.fromRaw(rec);}else{cov_1s9lijb1oc().b[11][1]++;cov_1s9lijb1oc().s[108]++;touch=true;cov_1s9lijb1oc().s[109]++;filerecord=new FileRecord({blocks:0,used:0,length:this.maxFileLength});}cov_1s9lijb1oc().s[110]++;if(filerecord.used+length>filerecord.length){cov_1s9lijb1oc().b[12][0]++;cov_1s9lijb1oc().s[111]++;fileno+=1;cov_1s9lijb1oc().s[112]++;filepath=this.filepath(type,fileno);cov_1s9lijb1oc().s[113]++;touch=true;cov_1s9lijb1oc().s[114]++;filerecord=new FileRecord({blocks:0,used:0,length:this.maxFileLength});}else{cov_1s9lijb1oc().b[12][1]++;}cov_1s9lijb1oc().s[115]++;if(touch){cov_1s9lijb1oc().b[13][0]++;const fd=(cov_1s9lijb1oc().s[116]++,await fs.open(filepath,'w'));cov_1s9lijb1oc().s[117]++;await fs.close(fd);}else{cov_1s9lijb1oc().b[13][1]++;}cov_1s9lijb1oc().s[118]++;return{fileno,filerecord,filepath};}/**
   * This method stores merkle block data in files.
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The block data
   * @returns {Promise}
   */async writeMerkle(hash,data){cov_1s9lijb1oc().f[11]++;cov_1s9lijb1oc().s[119]++;return this._write(types.MERKLE,hash,data);}/**
   * This method stores block undo coin data in files.
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The block data
   * @returns {Promise}
   */async writeUndo(hash,data){cov_1s9lijb1oc().f[12]++;cov_1s9lijb1oc().s[120]++;return this._write(types.UNDO,hash,data);}/**
   * This method stores block data in files.
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The block data
   * @returns {Promise}
   */async write(hash,data){cov_1s9lijb1oc().f[13]++;cov_1s9lijb1oc().s[121]++;return this._write(types.BLOCK,hash,data);}/**
   * This method stores serialized block filter data in files.
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The serialized block filter data.
   * @returns {Promise}
   */async writeFilter(hash,data){cov_1s9lijb1oc().f[14]++;cov_1s9lijb1oc().s[122]++;return this._write(types.FILTER,hash,data);}/**
   * This method stores block data in files with by appending
   * data to the last written file and updating indexes to point
   * to the file and position.
   * @private
   * @param {Number} type - The type of block data
   * @param {Buffer} hash - The block hash
   * @param {Buffer} data - The block data
   * @returns {Promise}
   */async _write(type,hash,data){cov_1s9lijb1oc().f[15]++;cov_1s9lijb1oc().s[123]++;if(this.writing[type]){cov_1s9lijb1oc().b[14][0]++;cov_1s9lijb1oc().s[124]++;throw new Error('Already writing.');}else{cov_1s9lijb1oc().b[14][1]++;}cov_1s9lijb1oc().s[125]++;this.writing[type]=true;cov_1s9lijb1oc().s[126]++;if(await this.db.has(layout.b.encode(type,hash))){cov_1s9lijb1oc().b[15][0]++;cov_1s9lijb1oc().s[127]++;this.writing[type]=false;cov_1s9lijb1oc().s[128]++;return false;}else{cov_1s9lijb1oc().b[15][1]++;}let mlength=(cov_1s9lijb1oc().s[129]++,8);// Hash for a block is not stored with
// the magic prefix as it's read from the header
// of the block data.
cov_1s9lijb1oc().s[130]++;if((cov_1s9lijb1oc().b[17][0]++,type!==types.BLOCK)&&(cov_1s9lijb1oc().b[17][1]++,type!==types.MERKLE)){cov_1s9lijb1oc().b[16][0]++;cov_1s9lijb1oc().s[131]++;mlength+=32;}else{cov_1s9lijb1oc().b[16][1]++;}const blength=(cov_1s9lijb1oc().s[132]++,data.length);const length=(cov_1s9lijb1oc().s[133]++,data.length+mlength);const bwm=(cov_1s9lijb1oc().s[134]++,bio.write(mlength));cov_1s9lijb1oc().s[135]++;bwm.writeU32(this.network.magic);cov_1s9lijb1oc().s[136]++;bwm.writeU32(blength);cov_1s9lijb1oc().s[137]++;if((cov_1s9lijb1oc().b[19][0]++,type!==types.BLOCK)&&(cov_1s9lijb1oc().b[19][1]++,type!==types.MERKLE)){cov_1s9lijb1oc().b[18][0]++;cov_1s9lijb1oc().s[138]++;bwm.writeHash(hash);}else{cov_1s9lijb1oc().b[18][1]++;}const magic=(cov_1s9lijb1oc().s[139]++,bwm.render());const{fileno,filerecord,filepath}=(cov_1s9lijb1oc().s[140]++,await this.allocate(type,length));const mposition=(cov_1s9lijb1oc().s[141]++,filerecord.used);const bposition=(cov_1s9lijb1oc().s[142]++,filerecord.used+mlength);const fd=(cov_1s9lijb1oc().s[143]++,await fs.open(filepath,'r+'));let mwritten=(cov_1s9lijb1oc().s[144]++,0);let bwritten=(cov_1s9lijb1oc().s[145]++,0);cov_1s9lijb1oc().s[146]++;try{cov_1s9lijb1oc().s[147]++;mwritten=await fs.write(fd,magic,0,mlength,mposition);cov_1s9lijb1oc().s[148]++;bwritten=await fs.write(fd,data,0,blength,bposition);}finally{cov_1s9lijb1oc().s[149]++;await fs.close(fd);}cov_1s9lijb1oc().s[150]++;if(mwritten!==mlength){cov_1s9lijb1oc().b[20][0]++;cov_1s9lijb1oc().s[151]++;this.writing[type]=false;cov_1s9lijb1oc().s[152]++;throw new Error('Could not write block magic.');}else{cov_1s9lijb1oc().b[20][1]++;}cov_1s9lijb1oc().s[153]++;if(bwritten!==blength){cov_1s9lijb1oc().b[21][0]++;cov_1s9lijb1oc().s[154]++;this.writing[type]=false;cov_1s9lijb1oc().s[155]++;throw new Error('Could not write block.');}else{cov_1s9lijb1oc().b[21][1]++;}cov_1s9lijb1oc().s[156]++;filerecord.blocks+=1;cov_1s9lijb1oc().s[157]++;filerecord.used+=length;const b=(cov_1s9lijb1oc().s[158]++,this.db.batch());const blockrecord=(cov_1s9lijb1oc().s[159]++,new BlockRecord({file:fileno,position:bposition,length:blength}));cov_1s9lijb1oc().s[160]++;b.put(layout.b.encode(type,hash),blockrecord.toRaw());cov_1s9lijb1oc().s[161]++;b.put(layout.f.encode(type,fileno),filerecord.toRaw());const last=(cov_1s9lijb1oc().s[162]++,bio.write(4).writeU32(fileno).render());cov_1s9lijb1oc().s[163]++;b.put(layout.F.encode(type),last);cov_1s9lijb1oc().s[164]++;await b.write();cov_1s9lijb1oc().s[165]++;this.writing[type]=false;cov_1s9lijb1oc().s[166]++;return true;}/**
   * This method will retrieve merkle block data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async readMerkle(hash){cov_1s9lijb1oc().f[16]++;cov_1s9lijb1oc().s[167]++;return this._read(types.MERKLE,hash);}/**
   * This method will retrieve block undo coin data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async readUndo(hash){cov_1s9lijb1oc().f[17]++;cov_1s9lijb1oc().s[168]++;return this._read(types.UNDO,hash);}/**
   * This method will retrieve block data. Smaller portions of the
   * block (e.g. transactions) can be read by using the offset and
   * length arguments.
   * @param {Buffer} hash - The block hash
   * @param {Number} offset - The offset within the block
   * @param {Number} length - The number of bytes of the data
   * @returns {Promise}
   */async read(hash,offset,length){cov_1s9lijb1oc().f[18]++;cov_1s9lijb1oc().s[169]++;return this._read(types.BLOCK,hash,offset,length);}/**
   * This method will retrieve serialized block filter data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async readFilter(hash){cov_1s9lijb1oc().f[19]++;cov_1s9lijb1oc().s[170]++;return this._read(types.FILTER,hash);}/**
   * This method will retrieve block filter header only.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async readFilterHeader(hash){cov_1s9lijb1oc().f[20]++;cov_1s9lijb1oc().s[171]++;return this._read(types.FILTER,hash,0,32);}/**
   * This methods reads data from disk by retrieving the index of
   * the data and reading from the corresponding file and location.
   * @private
   * @param {Number} type - The type of block data
   * @param {Buffer} hash - The block hash
   * @param {Number} offset - The offset within the block
   * @param {Number} length - The number of bytes of the data
   * @returns {Promise}
   */async _read(type,hash,offset,length){cov_1s9lijb1oc().f[21]++;const raw=(cov_1s9lijb1oc().s[172]++,await this.db.get(layout.b.encode(type,hash)));cov_1s9lijb1oc().s[173]++;if(!raw){cov_1s9lijb1oc().b[22][0]++;cov_1s9lijb1oc().s[174]++;return null;}else{cov_1s9lijb1oc().b[22][1]++;}const blockrecord=(cov_1s9lijb1oc().s[175]++,BlockRecord.fromRaw(raw));const filepath=(cov_1s9lijb1oc().s[176]++,this.filepath(type,blockrecord.file));let position=(cov_1s9lijb1oc().s[177]++,blockrecord.position);cov_1s9lijb1oc().s[178]++;if(offset){cov_1s9lijb1oc().b[23][0]++;cov_1s9lijb1oc().s[179]++;position+=offset;}else{cov_1s9lijb1oc().b[23][1]++;}cov_1s9lijb1oc().s[180]++;if((cov_1s9lijb1oc().b[25][0]++,!length)&&(cov_1s9lijb1oc().b[25][1]++,offset>0)){cov_1s9lijb1oc().b[24][0]++;cov_1s9lijb1oc().s[181]++;length=blockrecord.length-offset;}else{cov_1s9lijb1oc().b[24][1]++;}cov_1s9lijb1oc().s[182]++;if(!length){cov_1s9lijb1oc().b[26][0]++;cov_1s9lijb1oc().s[183]++;length=blockrecord.length;}else{cov_1s9lijb1oc().b[26][1]++;}cov_1s9lijb1oc().s[184]++;if(offset+length>blockrecord.length){cov_1s9lijb1oc().b[27][0]++;cov_1s9lijb1oc().s[185]++;throw new Error('Out-of-bounds read.');}else{cov_1s9lijb1oc().b[27][1]++;}const data=(cov_1s9lijb1oc().s[186]++,Buffer.alloc(length));const fd=(cov_1s9lijb1oc().s[187]++,await fs.open(filepath,'r'));let bytes=(cov_1s9lijb1oc().s[188]++,0);cov_1s9lijb1oc().s[189]++;try{cov_1s9lijb1oc().s[190]++;bytes=await fs.read(fd,data,0,length,position);}finally{cov_1s9lijb1oc().s[191]++;await fs.close(fd);}cov_1s9lijb1oc().s[192]++;if(bytes!==length){cov_1s9lijb1oc().b[28][0]++;cov_1s9lijb1oc().s[193]++;throw new Error('Wrong number of bytes read.');}else{cov_1s9lijb1oc().b[28][1]++;}cov_1s9lijb1oc().s[194]++;return data;}/**
   * This will free resources for storing merkle block data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async pruneMerkle(hash){cov_1s9lijb1oc().f[22]++;cov_1s9lijb1oc().s[195]++;return this._prune(types.MERKLE,hash);}/**
   * This will free resources for storing the block undo coin data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async pruneUndo(hash){cov_1s9lijb1oc().f[23]++;cov_1s9lijb1oc().s[196]++;return this._prune(types.UNDO,hash);}/**
   * This will free resources for storing the block data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async prune(hash){cov_1s9lijb1oc().f[24]++;cov_1s9lijb1oc().s[197]++;return this._prune(types.BLOCK,hash);}/**
   * This will free resources for storing the serialized block filter data.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async pruneFilter(hash){cov_1s9lijb1oc().f[25]++;cov_1s9lijb1oc().s[198]++;return this._prune(types.FILTER,hash);}/**
   * This will free resources for storing the block data. The block
   * data may not be deleted from disk immediately, the index for the
   * block is removed and will not be able to be read. The underlying
   * file is unlinked when all blocks in a file have been pruned.
   * @private
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async _prune(type,hash){cov_1s9lijb1oc().f[26]++;const braw=(cov_1s9lijb1oc().s[199]++,await this.db.get(layout.b.encode(type,hash)));cov_1s9lijb1oc().s[200]++;if(!braw){cov_1s9lijb1oc().b[29][0]++;cov_1s9lijb1oc().s[201]++;return false;}else{cov_1s9lijb1oc().b[29][1]++;}const blockrecord=(cov_1s9lijb1oc().s[202]++,BlockRecord.fromRaw(braw));const fraw=(cov_1s9lijb1oc().s[203]++,await this.db.get(layout.f.encode(type,blockrecord.file)));cov_1s9lijb1oc().s[204]++;if(!fraw){cov_1s9lijb1oc().b[30][0]++;cov_1s9lijb1oc().s[205]++;return false;}else{cov_1s9lijb1oc().b[30][1]++;}const filerecord=(cov_1s9lijb1oc().s[206]++,FileRecord.fromRaw(fraw));cov_1s9lijb1oc().s[207]++;filerecord.blocks-=1;const b=(cov_1s9lijb1oc().s[208]++,this.db.batch());cov_1s9lijb1oc().s[209]++;if(filerecord.blocks===0){cov_1s9lijb1oc().b[31][0]++;cov_1s9lijb1oc().s[210]++;b.del(layout.f.encode(type,blockrecord.file));}else{cov_1s9lijb1oc().b[31][1]++;cov_1s9lijb1oc().s[211]++;b.put(layout.f.encode(type,blockrecord.file),filerecord.toRaw());}cov_1s9lijb1oc().s[212]++;b.del(layout.b.encode(type,hash));cov_1s9lijb1oc().s[213]++;await b.write();cov_1s9lijb1oc().s[214]++;if(filerecord.blocks===0){cov_1s9lijb1oc().b[32][0]++;cov_1s9lijb1oc().s[215]++;await fs.unlink(this.filepath(type,blockrecord.file));}else{cov_1s9lijb1oc().b[32][1]++;}cov_1s9lijb1oc().s[216]++;return true;}/**
   * This will check if merkle block data has been stored
   * and is available.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async hasMerkle(hash){cov_1s9lijb1oc().f[27]++;cov_1s9lijb1oc().s[217]++;return await this.db.has(layout.b.encode(types.MERKLE,hash));}/**
   * This will check if a block undo coin has been stored
   * and is available.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async hasUndo(hash){cov_1s9lijb1oc().f[28]++;cov_1s9lijb1oc().s[218]++;return await this.db.has(layout.b.encode(types.UNDO,hash));}/**
   * This will check if a block filter has been stored
   * and is available.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async hasFilter(hash){cov_1s9lijb1oc().f[29]++;cov_1s9lijb1oc().s[219]++;return await this.db.has(layout.b.encode(types.FILTER,hash));}/**
   * This will check if a block has been stored and is available.
   * @param {Buffer} hash - The block hash
   * @returns {Promise}
   */async has(hash){cov_1s9lijb1oc().f[30]++;cov_1s9lijb1oc().s[220]++;return await this.db.has(layout.b.encode(types.BLOCK,hash));}}/*
 * Expose
 */cov_1s9lijb1oc().s[221]++;module.exports=FileBlockStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
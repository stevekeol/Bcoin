/*!
 * blockstore/records.js - blockstore records
 * Copyright (c) 2019, Braydon Fuller (MIT License).
 * https://github.com/bcoin-org/bcoin
 */'use strict';function cov_1s0zhserjg(){var path="E:\\Projects\\Test\\bcoin\\lib\\blockstore\\records.js";var hash="d01aede37a33b64228c6d9d6e47eff80f553c1bb";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\Projects\\Test\\bcoin\\lib\\blockstore\\records.js",statementMap:{"0":{start:{line:9,column:15},end:{line:9,column:31}},"1":{start:{line:10,column:12},end:{line:10,column:28}},"2":{start:{line:27,column:4},end:{line:27,column:34}},"3":{start:{line:28,column:4},end:{line:28,column:42}},"4":{start:{line:29,column:4},end:{line:29,column:38}},"5":{start:{line:31,column:4},end:{line:31,column:44}},"6":{start:{line:32,column:4},end:{line:32,column:52}},"7":{start:{line:33,column:4},end:{line:33,column:48}},"8":{start:{line:43,column:15},end:{line:43,column:29}},"9":{start:{line:45,column:4},end:{line:45,column:29}},"10":{start:{line:46,column:4},end:{line:46,column:33}},"11":{start:{line:47,column:4},end:{line:47,column:31}},"12":{start:{line:49,column:4},end:{line:49,column:16}},"13":{start:{line:60,column:4},end:{line:60,column:36}},"14":{start:{line:69,column:15},end:{line:69,column:28}},"15":{start:{line:71,column:4},end:{line:71,column:27}},"16":{start:{line:72,column:4},end:{line:72,column:31}},"17":{start:{line:73,column:4},end:{line:73,column:29}},"18":{start:{line:75,column:4},end:{line:75,column:23}},"19":{start:{line:90,column:4},end:{line:90,column:38}},"20":{start:{line:91,column:4},end:{line:91,column:34}},"21":{start:{line:92,column:4},end:{line:92,column:38}},"22":{start:{line:94,column:4},end:{line:94,column:48}},"23":{start:{line:95,column:4},end:{line:95,column:44}},"24":{start:{line:96,column:4},end:{line:96,column:48}},"25":{start:{line:106,column:15},end:{line:106,column:29}},"26":{start:{line:108,column:4},end:{line:108,column:31}},"27":{start:{line:109,column:4},end:{line:109,column:29}},"28":{start:{line:110,column:4},end:{line:110,column:31}},"29":{start:{line:112,column:4},end:{line:112,column:16}},"30":{start:{line:123,column:4},end:{line:123,column:36}},"31":{start:{line:132,column:15},end:{line:132,column:28}},"32":{start:{line:134,column:4},end:{line:134,column:29}},"33":{start:{line:135,column:4},end:{line:135,column:27}},"34":{start:{line:136,column:4},end:{line:136,column:29}},"35":{start:{line:138,column:4},end:{line:138,column:23}},"36":{start:{line:146,column:0},end:{line:146,column:34}},"37":{start:{line:147,column:0},end:{line:147,column:32}},"38":{start:{line:149,column:0},end:{line:149,column:25}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:26,column:2},end:{line:26,column:3}},loc:{start:{line:26,column:28},end:{line:34,column:3}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:42,column:2},end:{line:42,column:3}},loc:{start:{line:42,column:16},end:{line:50,column:3}},line:42},"2":{name:"(anonymous_2)",decl:{start:{line:59,column:2},end:{line:59,column:3}},loc:{start:{line:59,column:23},end:{line:61,column:3}},line:59},"3":{name:"(anonymous_3)",decl:{start:{line:68,column:2},end:{line:68,column:3}},loc:{start:{line:68,column:10},end:{line:76,column:3}},line:68},"4":{name:"(anonymous_4)",decl:{start:{line:89,column:2},end:{line:89,column:3}},loc:{start:{line:89,column:28},end:{line:97,column:3}},line:89},"5":{name:"(anonymous_5)",decl:{start:{line:105,column:2},end:{line:105,column:3}},loc:{start:{line:105,column:16},end:{line:113,column:3}},line:105},"6":{name:"(anonymous_6)",decl:{start:{line:122,column:2},end:{line:122,column:3}},loc:{start:{line:122,column:23},end:{line:124,column:3}},line:122},"7":{name:"(anonymous_7)",decl:{start:{line:131,column:2},end:{line:131,column:3}},loc:{start:{line:131,column:10},end:{line:139,column:3}},line:131}},branchMap:{"0":{loc:{start:{line:26,column:14},end:{line:26,column:26}},type:"default-arg",locations:[{start:{line:26,column:24},end:{line:26,column:26}}],line:26},"1":{loc:{start:{line:27,column:16},end:{line:27,column:33}},type:"binary-expr",locations:[{start:{line:27,column:16},end:{line:27,column:28}},{start:{line:27,column:32},end:{line:27,column:33}}],line:27},"2":{loc:{start:{line:28,column:20},end:{line:28,column:41}},type:"binary-expr",locations:[{start:{line:28,column:20},end:{line:28,column:36}},{start:{line:28,column:40},end:{line:28,column:41}}],line:28},"3":{loc:{start:{line:29,column:18},end:{line:29,column:37}},type:"binary-expr",locations:[{start:{line:29,column:18},end:{line:29,column:32}},{start:{line:29,column:36},end:{line:29,column:37}}],line:29},"4":{loc:{start:{line:89,column:14},end:{line:89,column:26}},type:"default-arg",locations:[{start:{line:89,column:24},end:{line:89,column:26}}],line:89},"5":{loc:{start:{line:90,column:18},end:{line:90,column:37}},type:"binary-expr",locations:[{start:{line:90,column:18},end:{line:90,column:32}},{start:{line:90,column:36},end:{line:90,column:37}}],line:90},"6":{loc:{start:{line:91,column:16},end:{line:91,column:33}},type:"binary-expr",locations:[{start:{line:91,column:16},end:{line:91,column:28}},{start:{line:91,column:32},end:{line:91,column:33}}],line:91},"7":{loc:{start:{line:92,column:18},end:{line:92,column:37}},type:"binary-expr",locations:[{start:{line:92,column:18},end:{line:92,column:32}},{start:{line:92,column:36},end:{line:92,column:37}}],line:92}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0],"5":[0,0],"6":[0,0],"7":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d01aede37a33b64228c6d9d6e47eff80f553c1bb"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1s0zhserjg=function(){return actualCoverage;};}return actualCoverage;}cov_1s0zhserjg();const assert=(cov_1s0zhserjg().s[0]++,require('bsert'));const bio=(cov_1s0zhserjg().s[1]++,require('bufio'));/**
 * @module blockstore/records
 */ /**
 * Block Record
 */class BlockRecord{/**
   * Create a block record.
   * @constructor
   */constructor(options=(cov_1s0zhserjg().b[0][0]++,{})){cov_1s0zhserjg().f[0]++;cov_1s0zhserjg().s[2]++;this.file=(cov_1s0zhserjg().b[1][0]++,options.file)||(cov_1s0zhserjg().b[1][1]++,0);cov_1s0zhserjg().s[3]++;this.position=(cov_1s0zhserjg().b[2][0]++,options.position)||(cov_1s0zhserjg().b[2][1]++,0);cov_1s0zhserjg().s[4]++;this.length=(cov_1s0zhserjg().b[3][0]++,options.length)||(cov_1s0zhserjg().b[3][1]++,0);cov_1s0zhserjg().s[5]++;assert(this.file>>>0===this.file);cov_1s0zhserjg().s[6]++;assert(this.position>>>0===this.position);cov_1s0zhserjg().s[7]++;assert(this.length>>>0===this.length);}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_1s0zhserjg().f[1]++;const br=(cov_1s0zhserjg().s[8]++,bio.read(data));cov_1s0zhserjg().s[9]++;this.file=br.readU32();cov_1s0zhserjg().s[10]++;this.position=br.readU32();cov_1s0zhserjg().s[11]++;this.length=br.readU32();cov_1s0zhserjg().s[12]++;return this;}/**
   * Instantiate block record from serialized data.
   * @param {Hash} hash
   * @param {Buffer} data
   * @returns {BlockRecord}
   */static fromRaw(data){cov_1s0zhserjg().f[2]++;cov_1s0zhserjg().s[13]++;return new this().fromRaw(data);}/**
   * Serialize the block record.
   * @returns {Buffer}
   */toRaw(){cov_1s0zhserjg().f[3]++;const bw=(cov_1s0zhserjg().s[14]++,bio.write(12));cov_1s0zhserjg().s[15]++;bw.writeU32(this.file);cov_1s0zhserjg().s[16]++;bw.writeU32(this.position);cov_1s0zhserjg().s[17]++;bw.writeU32(this.length);cov_1s0zhserjg().s[18]++;return bw.render();}}/**
 * File Record
 */class FileRecord{/**
   * Create a file record.
   * @constructor
   */constructor(options=(cov_1s0zhserjg().b[4][0]++,{})){cov_1s0zhserjg().f[4]++;cov_1s0zhserjg().s[19]++;this.blocks=(cov_1s0zhserjg().b[5][0]++,options.blocks)||(cov_1s0zhserjg().b[5][1]++,0);cov_1s0zhserjg().s[20]++;this.used=(cov_1s0zhserjg().b[6][0]++,options.used)||(cov_1s0zhserjg().b[6][1]++,0);cov_1s0zhserjg().s[21]++;this.length=(cov_1s0zhserjg().b[7][0]++,options.length)||(cov_1s0zhserjg().b[7][1]++,0);cov_1s0zhserjg().s[22]++;assert(this.blocks>>>0===this.blocks);cov_1s0zhserjg().s[23]++;assert(this.used>>>0===this.used);cov_1s0zhserjg().s[24]++;assert(this.length>>>0===this.length);}/**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */fromRaw(data){cov_1s0zhserjg().f[5]++;const br=(cov_1s0zhserjg().s[25]++,bio.read(data));cov_1s0zhserjg().s[26]++;this.blocks=br.readU32();cov_1s0zhserjg().s[27]++;this.used=br.readU32();cov_1s0zhserjg().s[28]++;this.length=br.readU32();cov_1s0zhserjg().s[29]++;return this;}/**
   * Instantiate file record from serialized data.
   * @param {Hash} hash
   * @param {Buffer} data
   * @returns {ChainState}
   */static fromRaw(data){cov_1s0zhserjg().f[6]++;cov_1s0zhserjg().s[30]++;return new this().fromRaw(data);}/**
   * Serialize the file record.
   * @returns {Buffer}
   */toRaw(){cov_1s0zhserjg().f[7]++;const bw=(cov_1s0zhserjg().s[31]++,bio.write(12));cov_1s0zhserjg().s[32]++;bw.writeU32(this.blocks);cov_1s0zhserjg().s[33]++;bw.writeU32(this.used);cov_1s0zhserjg().s[34]++;bw.writeU32(this.length);cov_1s0zhserjg().s[35]++;return bw.render();}}/*
 * Expose
 */cov_1s0zhserjg().s[36]++;exports.BlockRecord=BlockRecord;cov_1s0zhserjg().s[37]++;exports.FileRecord=FileRecord;cov_1s0zhserjg().s[38]++;module.exports=exports;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,